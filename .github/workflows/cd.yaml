
name: Continuous Deployment

on:
  push:
    branches:
      - master

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    strategy:
      matrix:
        node-version: [14.x]

    env:
      SOURCE_DIR: "./"
      AWS_REGION: "us-east-1"
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      CI: false
    steps:
      - uses: actions/checkout@v3

      - uses: benjlevesque/short-sha@v1.2
      - uses: elgohr/Publish-Docker-Github-Action@v5
        name: Publish to Github Packages Registry
        with:
          name: ${{ secrets.DOCKER_REPOSITORY }}
          registry: docker.io
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
          dockerfile: Dockerfile
          tags: 0.1-${{ env.SHA }}

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/apikey.key
          chmod 600 ~/.ssh/apikey.key
          cat >>~/.ssh/config <<END
          Host apikey
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/apikey.key
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ secrets.AWS_USERNAME }}
          SSH_KEY: ${{ secrets.AWS_PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.AWS_HOST }}

      #- name: Stop the server
      #clean docker images -> docker rmi $(docker images -a -q)
      - uses: benjlevesque/short-sha@v1.2
      - name: Deploy in Cluster
        env:
          PORT: ${{ secrets.PORT }}
          HOST: ${{ secrets.HOST }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_DATABASE: ${{ secrets.DB_DATABASE }}
          SEED_DB: ${{ secrets.SEED_DB }}
          DIAN_USER: ${{ secrets.DIAN_USER }}
          DIAN_PASSWORD: ${{ secrets.DIAN_PASSWORD }}
          WEBSITE_URL: ${{ secrets.WEBSITE_URL }}
          PUBLIC_URL: ${{ secrets.PUBLIC_URL }}
          NEW_RELIC_LICENSE_KEY: ${{ secrets.NEW_RELIC_LICENSE_KEY }}
          NEW_RELIC_APP_NAME: ${{ secrets.NEW_RELIC_APP_NAME }}
          DEPLOY_PATH: "/var/apps/backend"
        run: |
          ssh apikey "cd /var/apps/backend && docker-compose stop"
          ssh apikey "cd $DEPLOY_PATH && APP_VERSION=0.1-$SHA PORT=$PORT HOST=$HOST DB_HOST=$DB_HOST DB_PORT=$DB_PORT DB_USERNAME=$DB_USERNAME DB_PASSWORD=$DB_PASSWORD DB_DATABASE=$DB_DATABASE SEED_DB=$SEED_DB DIAN_USER=$DIAN_USER DIAN_PASSWORD=$DIAN_PASSWORD PUBLIC_URL=$PUBLIC_URL WEBSITE_URL=$WEBSITE_URL NEW_RELIC_LICENSE_KEY=$NEW_RELIC_LICENSE_KEY NEW_RELIC_APP_NAME=$NEW_RELIC_APP_NAME docker-compose pull"
          ssh apikey "cd $DEPLOY_PATH && APP_VERSION=0.1-$SHA PORT=$PORT HOST=$HOST DB_HOST=$DB_HOST DB_PORT=$DB_PORT DB_USERNAME=$DB_USERNAME DB_PASSWORD=$DB_PASSWORD DB_DATABASE=$DB_DATABASE SEED_DB=$SEED_DB DIAN_USER=$DIAN_USER DIAN_PASSWORD=$DIAN_PASSWORD PUBLIC_URL=$PUBLIC_URL WEBSITE_URL=$WEBSITE_URL NEW_RELIC_LICENSE_KEY=$NEW_RELIC_LICENSE_KEY NEW_RELIC_APP_NAME=$NEW_RELIC_APP_NAME docker-compose up -d"
