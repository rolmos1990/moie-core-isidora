[{"/Users/ramon/Repositories/lucy-moie/src/index.js":"1","/Users/ramon/Repositories/lucy-moie/src/App.js":"2","/Users/ramon/Repositories/lucy-moie/src/serviceWorker.js":"3","/Users/ramon/Repositories/lucy-moie/src/store/index.js":"4","/Users/ramon/Repositories/lucy-moie/src/routes/middleware/Authmiddleware.js":"5","/Users/ramon/Repositories/lucy-moie/src/components/NonAuthLayout.js":"6","/Users/ramon/Repositories/lucy-moie/src/routes/allRoutes.js":"7","/Users/ramon/Repositories/lucy-moie/src/components/MessageToast/ShowToastMessages.js":"8","/Users/ramon/Repositories/lucy-moie/src/components/VerticalLayout/index.js":"9","/Users/ramon/Repositories/lucy-moie/src/components/HorizontalLayout/index.js":"10","/Users/ramon/Repositories/lucy-moie/src/store/reducers.js":"11","/Users/ramon/Repositories/lucy-moie/src/store/sagas.js":"12","/Users/ramon/Repositories/lucy-moie/src/store/actions.js":"13","/Users/ramon/Repositories/lucy-moie/src/components/VerticalLayout/Sidebar.js":"14","/Users/ramon/Repositories/lucy-moie/src/components/VerticalLayout/Footer.js":"15","/Users/ramon/Repositories/lucy-moie/src/components/VerticalLayout/Header.js":"16","/Users/ramon/Repositories/lucy-moie/src/components/HorizontalLayout/Footer.js":"17","/Users/ramon/Repositories/lucy-moie/src/components/HorizontalLayout/Navbar.js":"18","/Users/ramon/Repositories/lucy-moie/src/components/HorizontalLayout/Header.js":"19","/Users/ramon/Repositories/lucy-moie/src/components/OutsideClickHandler.js":"20","/Users/ramon/Repositories/lucy-moie/src/pages/ProductEdit/ProductDetail.js":"21","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/orderDetail.js":"22","/Users/ramon/Repositories/lucy-moie/src/pages/Customer/index.js":"23","/Users/ramon/Repositories/lucy-moie/src/pages/CustomerEdit/CustomerDetail.js":"24","/Users/ramon/Repositories/lucy-moie/src/pages/Authentication/Logout.js":"25","/Users/ramon/Repositories/lucy-moie/src/pages/Authentication/Login.js":"26","/Users/ramon/Repositories/lucy-moie/src/pages/Dashboard/index.js":"27","/Users/ramon/Repositories/lucy-moie/src/pages/commons/404.js":"28","/Users/ramon/Repositories/lucy-moie/src/pages/Authentication/Register.js":"29","/Users/ramon/Repositories/lucy-moie/src/pages/Authentication/ForgetPassword.js":"30","/Users/ramon/Repositories/lucy-moie/src/pages/Authentication/user-profile.js":"31","/Users/ramon/Repositories/lucy-moie/src/pages/PostSaleEdit/PostSaleDetail.js":"32","/Users/ramon/Repositories/lucy-moie/src/pages/BillEdit/BillDetail.js":"33","/Users/ramon/Repositories/lucy-moie/src/store/auth/login/actions.js":"34","/Users/ramon/Repositories/lucy-moie/src/components/CommonForBoth/Rightbar.js":"35","/Users/ramon/Repositories/lucy-moie/src/pages/CustomerEdit/index.js":"36","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/index.js":"37","/Users/ramon/Repositories/lucy-moie/src/pages/ProductEdit/index.js":"38","/Users/ramon/Repositories/lucy-moie/src/store/wallet/saga.js":"39","/Users/ramon/Repositories/lucy-moie/src/store/wallet/reducer.js":"40","/Users/ramon/Repositories/lucy-moie/src/pages/Product/index.js":"41","/Users/ramon/Repositories/lucy-moie/src/store/billConfig/saga.js":"42","/Users/ramon/Repositories/lucy-moie/src/pages/State/index.js":"43","/Users/ramon/Repositories/lucy-moie/src/pages/StateEdit/index.js":"44","/Users/ramon/Repositories/lucy-moie/src/pages/Municipality/index.js":"45","/Users/ramon/Repositories/lucy-moie/src/pages/MunicipalityEdit/index.js":"46","/Users/ramon/Repositories/lucy-moie/src/pages/Category/index.js":"47","/Users/ramon/Repositories/lucy-moie/src/pages/User/index.js":"48","/Users/ramon/Repositories/lucy-moie/src/pages/FieldOption/index.js":"49","/Users/ramon/Repositories/lucy-moie/src/pages/CategoryEdit/index.js":"50","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/create/index.js":"51","/Users/ramon/Repositories/lucy-moie/src/pages/UserEdit/index.js":"52","/Users/ramon/Repositories/lucy-moie/src/pages/Template/index.js":"53","/Users/ramon/Repositories/lucy-moie/src/pages/PostSale/index.js":"54","/Users/ramon/Repositories/lucy-moie/src/pages/Offices/index.js":"55","/Users/ramon/Repositories/lucy-moie/src/pages/TemplateEdit/index.js":"56","/Users/ramon/Repositories/lucy-moie/src/pages/Bill/index.js":"57","/Users/ramon/Repositories/lucy-moie/src/pages/Reports/index.js":"58","/Users/ramon/Repositories/lucy-moie/src/pages/OfficesEdit/index.js":"59","/Users/ramon/Repositories/lucy-moie/src/pages/Payments/index.js":"60","/Users/ramon/Repositories/lucy-moie/src/pages/BillConfig/index.js":"61","/Users/ramon/Repositories/lucy-moie/src/pages/batchQueries/index.js":"62","/Users/ramon/Repositories/lucy-moie/src/pages/PaymentsEdit/index.js":"63","/Users/ramon/Repositories/lucy-moie/src/pages/Security/index.js":"64","/Users/ramon/Repositories/lucy-moie/src/pages/Locality/index.js":"65","/Users/ramon/Repositories/lucy-moie/src/pages/BillConfigEdit/index.js":"66","/Users/ramon/Repositories/lucy-moie/src/pages/ProductOrderEdit/index.js":"67","/Users/ramon/Repositories/lucy-moie/src/pages/Wallet/index.js":"68","/Users/ramon/Repositories/lucy-moie/src/pages/WalletEdit/index.js":"69","/Users/ramon/Repositories/lucy-moie/src/components/HorizontalLayout/FooterUsers.js":"70","/Users/ramon/Repositories/lucy-moie/src/components/HasPermissions.js":"71","/Users/ramon/Repositories/lucy-moie/src/store/location/actions.js":"72","/Users/ramon/Repositories/lucy-moie/src/components/CommonForBoth/TopbarDropdown/UsersSalesDropdown.js":"73","/Users/ramon/Repositories/lucy-moie/src/components/CommonForBoth/TopbarDropdown/GeneralSearch.js":"74","/Users/ramon/Repositories/lucy-moie/src/store/auth/login/actionTypes.js":"75","/Users/ramon/Repositories/lucy-moie/src/components/Common/NoDataIndication.js":"76","/Users/ramon/Repositories/lucy-moie/src/components/Common/NoAccess.js":"77","/Users/ramon/Repositories/lucy-moie/src/components/Common/Breadcrumb.js":"78","/Users/ramon/Repositories/lucy-moie/src/common/utils.js":"79","/Users/ramon/Repositories/lucy-moie/src/common/constants.js":"80","/Users/ramon/Repositories/lucy-moie/src/helpers/security_rol.js":"81","/Users/ramon/Repositories/lucy-moie/src/components/Modal/ConfirmationModal.js":"82","/Users/ramon/Repositories/lucy-moie/src/store/bill/actions.js":"83","/Users/ramon/Repositories/lucy-moie/src/store/order/actions.js":"84","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/orderList.js":"85","/Users/ramon/Repositories/lucy-moie/src/components/Common/Image.js":"86","/Users/ramon/Repositories/lucy-moie/src/components/Common/DropZoneIcon.js":"87","/Users/ramon/Repositories/lucy-moie/src/components/HasPermissionsFunc.js":"88","/Users/ramon/Repositories/lucy-moie/src/components/Common/ButtonSubmit.js":"89","/Users/ramon/Repositories/lucy-moie/src/store/wallet/actions.js":"90","/Users/ramon/Repositories/lucy-moie/src/common/conditionals.js":"91","/Users/ramon/Repositories/lucy-moie/src/common/pagination.js":"92","/Users/ramon/Repositories/lucy-moie/src/store/billConfig/actions.js":"93","/Users/ramon/Repositories/lucy-moie/src/pages/BillConfigEdit/BillConfigForm.js":"94","/Users/ramon/Repositories/lucy-moie/src/components/Fields/Autocomplete.js":"95","/Users/ramon/Repositories/lucy-moie/src/components/Fields/InputDate.js":"96","/Users/ramon/Repositories/lucy-moie/src/pages/Security/SecurityManagement.js":"97","/Users/ramon/Repositories/lucy-moie/src/pages/batchQueries/BatchQueriesForm.js":"98","/Users/ramon/Repositories/lucy-moie/src/helpers/backend_helper.js":"99","/Users/ramon/Repositories/lucy-moie/src/store/category/actions.js":"100","/Users/ramon/Repositories/lucy-moie/src/pages/Wallet/list/walletList.js":"101","/Users/ramon/Repositories/lucy-moie/src/store/product/actions.js":"102","/Users/ramon/Repositories/lucy-moie/src/pages/Locality/list/localityList.js":"103","/Users/ramon/Repositories/lucy-moie/src/store/payments/actions.js":"104","/Users/ramon/Repositories/lucy-moie/src/store/fieldOptions/actions.js":"105","/Users/ramon/Repositories/lucy-moie/src/pages/BillConfig/list/billConfigList.js":"106","/Users/ramon/Repositories/lucy-moie/src/pages/Payments/list/paymentsList.js":"107","/Users/ramon/Repositories/lucy-moie/src/store/customer/actions.js":"108","/Users/ramon/Repositories/lucy-moie/src/store/bill/actionTypes.js":"109","/Users/ramon/Repositories/lucy-moie/src/common/converters.js":"110","/Users/ramon/Repositories/lucy-moie/src/helpers/api_helper.js":"111","/Users/ramon/Repositories/lucy-moie/src/helpers/service.js":"112","/Users/ramon/Repositories/lucy-moie/src/store/location/actionTypes.js":"113","/Users/ramon/Repositories/lucy-moie/src/store/reports/actions.js":"114","/Users/ramon/Repositories/lucy-moie/src/components/Modal/CommosModal.js":"115","/Users/ramon/Repositories/lucy-moie/src/store/order/actionTypes.js":"116","/Users/ramon/Repositories/lucy-moie/src/pages/Reports/Stats.js":"117","/Users/ramon/Repositories/lucy-moie/src/pages/PostSale/postSaleList.js":"118","/Users/ramon/Repositories/lucy-moie/src/helpers/url_helper.js":"119","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/create/orderSummary.js":"120","/Users/ramon/Repositories/lucy-moie/src/store/office/actions.js":"121","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/create/orderDeliveryOptions.js":"122","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/create/orderCar.js":"123","/Users/ramon/Repositories/lucy-moie/src/pages/Bill/list/billList.js":"124","/Users/ramon/Repositories/lucy-moie/src/components/mentions/MultiMention.js":"125","/Users/ramon/Repositories/lucy-moie/src/components/mentions/useHookValue.js":"126","/Users/ramon/Repositories/lucy-moie/src/store/template/actions.js":"127","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/create/orderProducts.js":"128","/Users/ramon/Repositories/lucy-moie/src/pages/Offices/list/officeList.js":"129","/Users/ramon/Repositories/lucy-moie/src/pages/Template/list/templateList.js":"130","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/create/orderCustomer.js":"131","/Users/ramon/Repositories/lucy-moie/src/store/user/actions.js":"132","/Users/ramon/Repositories/lucy-moie/src/pages/FieldOption/configsList.js":"133","/Users/ramon/Repositories/lucy-moie/src/store/billConfig/actionTypes.js":"134","/Users/ramon/Repositories/lucy-moie/src/components/Fields/index.js":"135","/Users/ramon/Repositories/lucy-moie/src/pages/Reports/ConciliationReportForm.js":"136","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/orderConciliationsForm.js":"137","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/orderEdit.js":"138","/Users/ramon/Repositories/lucy-moie/src/pages/Category/list/categoryList.js":"139","/Users/ramon/Repositories/lucy-moie/src/pages/Municipality/list/municipalityList.js":"140","/Users/ramon/Repositories/lucy-moie/src/pages/User/list/userList.js":"141","/Users/ramon/Repositories/lucy-moie/src/pages/State/list/statesList.js":"142","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/orderColumn.js":"143","/Users/ramon/Repositories/lucy-moie/src/store/wallet/actionTypes.js":"144","/Users/ramon/Repositories/lucy-moie/src/pages/Security/SecurityRoles.js":"145","/Users/ramon/Repositories/lucy-moie/src/store/layout/actions.js":"146","/Users/ramon/Repositories/lucy-moie/src/components/Common/ButtonCopy.js":"147","/Users/ramon/Repositories/lucy-moie/src/store/sizes/actions.js":"148","/Users/ramon/Repositories/lucy-moie/src/pages/Payments/list/paymentsColumn.js":"149","/Users/ramon/Repositories/lucy-moie/src/pages/Payments/paymentOverlay.js":"150","/Users/ramon/Repositories/lucy-moie/src/pages/BillConfig/list/billConfigColumns.js":"151","/Users/ramon/Repositories/lucy-moie/src/store/customer/actionTypes.js":"152","/Users/ramon/Repositories/lucy-moie/src/store/fieldOptions/actionTypes.js":"153","/Users/ramon/Repositories/lucy-moie/src/pages/Locality/list/localityColumn.js":"154","/Users/ramon/Repositories/lucy-moie/src/store/product/actionTypes.js":"155","/Users/ramon/Repositories/lucy-moie/src/store/payments/actionTypes.js":"156","/Users/ramon/Repositories/lucy-moie/src/pages/Wallet/list/walletColumn.js":"157","/Users/ramon/Repositories/lucy-moie/src/store/category/actionTypes.js":"158","/Users/ramon/Repositories/lucy-moie/src/store/deliveryLocality/actions.js":"159","/Users/ramon/Repositories/lucy-moie/src/helpers/jwt-token-access/accessToken.js":"160","/Users/ramon/Repositories/lucy-moie/src/helpers/jwt-token-access/auth-token-header.js":"161","/Users/ramon/Repositories/lucy-moie/src/components/StatusField/index.js":"162","/Users/ramon/Repositories/lucy-moie/src/store/reports/actionTypes.js":"163","/Users/ramon/Repositories/lucy-moie/src/pages/Reports/PostSaleReportForm.js":"164","/Users/ramon/Repositories/lucy-moie/src/pages/PostSale/PostSaleImportFileForm.js":"165","/Users/ramon/Repositories/lucy-moie/src/pages/PostSale/postSaleColumn.js":"166","/Users/ramon/Repositories/lucy-moie/src/pages/Stats/Reincidents.js":"167","/Users/ramon/Repositories/lucy-moie/src/components/Common/HtmlTooltip.js":"168","/Users/ramon/Repositories/lucy-moie/src/pages/CustomerEdit/CategoriesPieChart.js":"169","/Users/ramon/Repositories/lucy-moie/src/pages/CustomerEdit/OrdersPieChart.js":"170","/Users/ramon/Repositories/lucy-moie/src/components/Fields/InputSelectBasicField.js":"171","/Users/ramon/Repositories/lucy-moie/src/components/Fields/InputAsyncSearchField.js":"172","/Users/ramon/Repositories/lucy-moie/src/components/TableFilter/index.js":"173","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/create/orderTracking.js":"174","/Users/ramon/Repositories/lucy-moie/src/pages/State/list/statesColumn.js":"175","/Users/ramon/Repositories/lucy-moie/src/pages/User/list/forgetPassword.js":"176","/Users/ramon/Repositories/lucy-moie/src/store/layout/actionTypes.js":"177","/Users/ramon/Repositories/lucy-moie/src/pages/User/list/userColumn.js":"178","/Users/ramon/Repositories/lucy-moie/src/store/sizes/actionTypes.js":"179","/Users/ramon/Repositories/lucy-moie/src/pages/Municipality/list/municipalityColumns.js":"180","/Users/ramon/Repositories/lucy-moie/src/pages/Customer/customer_status.js":"181","/Users/ramon/Repositories/lucy-moie/src/pages/Category/list/categoryColumn.js":"182","/Users/ramon/Repositories/lucy-moie/src/components/Fields/InputPhoneField.js":"183","/Users/ramon/Repositories/lucy-moie/src/components/Common/Observations.js":"184","/Users/ramon/Repositories/lucy-moie/src/components/Fields/InputTextField.js":"185","/Users/ramon/Repositories/lucy-moie/src/components/Fields/InputSearchField.js":"186","/Users/ramon/Repositories/lucy-moie/src/components/Fields/InputSwitchField.js":"187","/Users/ramon/Repositories/lucy-moie/src/store/user/actionTypes.js":"188","/Users/ramon/Repositories/lucy-moie/src/pages/Template/list/templateColumn.js":"189","/Users/ramon/Repositories/lucy-moie/src/pages/CustomerEdit/CustomerForm.js":"190","/Users/ramon/Repositories/lucy-moie/src/pages/Reports/OfficeReportForm.js":"191","/Users/ramon/Repositories/lucy-moie/src/pages/Offices/list/officeColumns.js":"192","/Users/ramon/Repositories/lucy-moie/src/store/template/actionTypes.js":"193","/Users/ramon/Repositories/lucy-moie/src/components/mentions/mentionStyles.js":"194","/Users/ramon/Repositories/lucy-moie/src/pages/Reports/BillsReportForm.js":"195","/Users/ramon/Repositories/lucy-moie/src/store/deliveryLocality/actionTypes.js":"196","/Users/ramon/Repositories/lucy-moie/src/pages/Stats/Hours.js":"197","/Users/ramon/Repositories/lucy-moie/src/pages/Bill/list/billColumns.js":"198","/Users/ramon/Repositories/lucy-moie/src/store/office/actionTypes.js":"199","/Users/ramon/Repositories/lucy-moie/src/pages/Stats/Bests.js":"200","/Users/ramon/Repositories/lucy-moie/src/pages/Stats/SaleType.js":"201","/Users/ramon/Repositories/lucy-moie/src/pages/Stats/Whatsapp.js":"202","/Users/ramon/Repositories/lucy-moie/src/pages/Stats/Origens.js":"203","/Users/ramon/Repositories/lucy-moie/src/pages/Stats/Departments.js":"204","/Users/ramon/Repositories/lucy-moie/src/components/Common/BarChart.js":"205","/Users/ramon/Repositories/lucy-moie/src/components/Fields/messages.js":"206","/Users/ramon/Repositories/lucy-moie/src/pages/CustomerEdit/TimeLine.js":"207","/Users/ramon/Repositories/lucy-moie/src/store/comment/actions.js":"208","/Users/ramon/Repositories/lucy-moie/src/components/Common/HishChartsWrapper.js":"209","/Users/ramon/Repositories/lucy-moie/src/store/comment/actionTypes.js":"210","/Users/ramon/Repositories/lucy-moie/src/components/Common/PieChart.js":"211","/Users/ramon/Repositories/lucy-moie/src/pages/Stats/Sales.js":"212","/Users/ramon/Repositories/lucy-moie/src/pages/Security/SecurityPermissions.js":"213","/Users/ramon/Repositories/lucy-moie/src/pages/ProductEdit/ProductPublish.js":"214","/Users/ramon/Repositories/lucy-moie/src/pages/ProductEdit/ProductImage.js":"215","/Users/ramon/Repositories/lucy-moie/src/pages/Product/ProductList/products-list.js":"216","/Users/ramon/Repositories/lucy-moie/src/pages/ProductEdit/ProductSize.js":"217","/Users/ramon/Repositories/lucy-moie/src/store/productSize/actions.js":"218","/Users/ramon/Repositories/lucy-moie/src/store/productImages/actions.js":"219","/Users/ramon/Repositories/lucy-moie/src/components/Common/StatsStatusCard.js":"220","/Users/ramon/Repositories/lucy-moie/src/pages/Product/ProductList/productColumn.js":"221","/Users/ramon/Repositories/lucy-moie/src/pages/Dashboard/top-users.js":"222","/Users/ramon/Repositories/lucy-moie/src/pages/Dashboard/mini-widget.js":"223","/Users/ramon/Repositories/lucy-moie/src/pages/Dashboard/top-vendors.js":"224","/Users/ramon/Repositories/lucy-moie/src/config.js":"225","/Users/ramon/Repositories/lucy-moie/src/pages/Dashboard/latest-transaction.js":"226","/Users/ramon/Repositories/lucy-moie/src/pages/ProductEdit/ProductsPending.js":"227","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/OrderCardList.js":"228","/Users/ramon/Repositories/lucy-moie/src/components/CommonForBoth/TopbarDropdown/NotificationDropdown.js":"229","/Users/ramon/Repositories/lucy-moie/src/components/CommonForBoth/TopbarDropdown/ProfileMenu.js":"230","/Users/ramon/Repositories/lucy-moie/src/components/CommonForBoth/TopbarDropdown/LanguageDropdown.js":"231","/Users/ramon/Repositories/lucy-moie/src/components/VerticalLayout/SidebarContent.js":"232","/Users/ramon/Repositories/lucy-moie/src/pages/Customer/CustomerList/customers-list.js":"233","/Users/ramon/Repositories/lucy-moie/src/store/productImages/actionTypes.js":"234","/Users/ramon/Repositories/lucy-moie/src/store/productSize/actionTypes.js":"235","/Users/ramon/Repositories/lucy-moie/src/store/postSale/actions.js":"236","/Users/ramon/Repositories/lucy-moie/src/store/auth/profile/actions.js":"237","/Users/ramon/Repositories/lucy-moie/src/store/postSale/saga.js":"238","/Users/ramon/Repositories/lucy-moie/src/store/payments/saga.js":"239","/Users/ramon/Repositories/lucy-moie/src/store/reports/saga.js":"240","/Users/ramon/Repositories/lucy-moie/src/store/auth/forgetpwd/actions.js":"241","/Users/ramon/Repositories/lucy-moie/src/store/auth/register/actions.js":"242","/Users/ramon/Repositories/lucy-moie/src/store/layout/saga.js":"243","/Users/ramon/Repositories/lucy-moie/src/store/bill/saga.js":"244","/Users/ramon/Repositories/lucy-moie/src/store/office/saga.js":"245","/Users/ramon/Repositories/lucy-moie/src/store/user/saga.js":"246","/Users/ramon/Repositories/lucy-moie/src/store/template/saga.js":"247","/Users/ramon/Repositories/lucy-moie/src/store/fieldOptions/saga.js":"248","/Users/ramon/Repositories/lucy-moie/src/store/order/saga.js":"249","/Users/ramon/Repositories/lucy-moie/src/store/location/saga.js":"250","/Users/ramon/Repositories/lucy-moie/src/store/productImages/saga.js":"251","/Users/ramon/Repositories/lucy-moie/src/store/productSize/saga.js":"252","/Users/ramon/Repositories/lucy-moie/src/store/comment/saga.js":"253","/Users/ramon/Repositories/lucy-moie/src/store/deliveryLocality/saga.js":"254","/Users/ramon/Repositories/lucy-moie/src/store/sizes/saga.js":"255","/Users/ramon/Repositories/lucy-moie/src/store/category/saga.js":"256","/Users/ramon/Repositories/lucy-moie/src/store/product/saga.js":"257","/Users/ramon/Repositories/lucy-moie/src/store/customer/saga.js":"258","/Users/ramon/Repositories/lucy-moie/src/store/auth/forgetpwd/saga.js":"259","/Users/ramon/Repositories/lucy-moie/src/store/auth/profile/saga.js":"260","/Users/ramon/Repositories/lucy-moie/src/store/auth/login/saga.js":"261","/Users/ramon/Repositories/lucy-moie/src/store/auth/register/saga.js":"262","/Users/ramon/Repositories/lucy-moie/src/store/billConfig/reducer.js":"263","/Users/ramon/Repositories/lucy-moie/src/store/reports/reducer.js":"264","/Users/ramon/Repositories/lucy-moie/src/store/payments/reducer.js":"265","/Users/ramon/Repositories/lucy-moie/src/store/postSale/reducer.js":"266","/Users/ramon/Repositories/lucy-moie/src/store/bill/reducer.js":"267","/Users/ramon/Repositories/lucy-moie/src/components/Common/WidgetCard1.js":"268","/Users/ramon/Repositories/lucy-moie/src/store/office/reducer.js":"269","/Users/ramon/Repositories/lucy-moie/src/components/Common/WidgetCard.js":"270","/Users/ramon/Repositories/lucy-moie/src/pages/Category/CatalogPrintBatchRequest.js":"271","/Users/ramon/Repositories/lucy-moie/src/common/languages.js":"272","/Users/ramon/Repositories/lucy-moie/src/components/Common/StatsRegisteredCard.js":"273","/Users/ramon/Repositories/lucy-moie/src/i18n.js":"274","/Users/ramon/Repositories/lucy-moie/src/pages/Customer/CustomerList/customerColumn.js":"275","/Users/ramon/Repositories/lucy-moie/src/store/postSale/actionTypes.js":"276","/Users/ramon/Repositories/lucy-moie/src/store/auth/register/actionTypes.js":"277","/Users/ramon/Repositories/lucy-moie/src/store/auth/profile/actionTypes.js":"278","/Users/ramon/Repositories/lucy-moie/src/store/auth/forgetpwd/actionTypes.js":"279","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/PrintBatchRequest.js":"280","/Users/ramon/Repositories/lucy-moie/src/store/template/reducer.js":"281","/Users/ramon/Repositories/lucy-moie/src/store/comment/reducer.js":"282","/Users/ramon/Repositories/lucy-moie/src/store/user/reducer.js":"283","/Users/ramon/Repositories/lucy-moie/src/store/fieldOptions/reducer.js":"284","/Users/ramon/Repositories/lucy-moie/src/store/order/reducer.js":"285","/Users/ramon/Repositories/lucy-moie/src/store/deliveryLocality/reducer.js":"286","/Users/ramon/Repositories/lucy-moie/src/store/productSize/reducer.js":"287","/Users/ramon/Repositories/lucy-moie/src/store/productImages/reducer.js":"288","/Users/ramon/Repositories/lucy-moie/src/common/errors_messages.js":"289","/Users/ramon/Repositories/lucy-moie/src/store/sizes/reducer.js":"290","/Users/ramon/Repositories/lucy-moie/src/store/category/reducer.js":"291","/Users/ramon/Repositories/lucy-moie/src/store/location/reducer.js":"292","/Users/ramon/Repositories/lucy-moie/src/store/product/reducer.js":"293","/Users/ramon/Repositories/lucy-moie/src/store/auth/profile/reducer.js":"294","/Users/ramon/Repositories/lucy-moie/src/store/customer/reducer.js":"295","/Users/ramon/Repositories/lucy-moie/src/store/auth/forgetpwd/reducer.js":"296","/Users/ramon/Repositories/lucy-moie/src/store/auth/register/reducer.js":"297","/Users/ramon/Repositories/lucy-moie/src/store/auth/login/reducer.js":"298","/Users/ramon/Repositories/lucy-moie/src/store/layout/reducer.js":"299","/Users/ramon/Repositories/lucy-moie/src/helpers/fakebackend_helper.js":"300","/Users/ramon/Repositories/lucy-moie/src/helpers/firebase_helper.js":"301","/Users/ramon/Repositories/lucy-moie/src/components/Common/WidgetCard4.js":"302","/Users/ramon/Repositories/lucy-moie/src/components/HorizontalLayout/CountUsers.js":"303","/Users/ramon/Repositories/lucy-moie/src/components/Common/ButtonLoading.js":"304","/Users/ramon/Repositories/lucy-moie/src/pages/Stats/SalesCreated.js":"305","/Users/ramon/Repositories/lucy-moie/src/pages/Dashboard/inventory.js":"306","/Users/ramon/Repositories/lucy-moie/src/pages/Dashboard/order-status-stats.js":"307","/Users/ramon/Repositories/lucy-moie/src/pages/Stats/SalesByStatus.js":"308","/Users/ramon/Repositories/lucy-moie/src/pages/Stats/SalesByShipments.js":"309","/Users/ramon/Repositories/lucy-moie/src/components/Common/HiddenPhone.js":"310","/Users/ramon/Repositories/lucy-moie/src/pages/VCard/index.js":"311","/Users/ramon/Repositories/lucy-moie/src/pages/Security/SecurityAuthorizations.js":"312","/Users/ramon/Repositories/lucy-moie/src/store/items/actions.js":"313","/Users/ramon/Repositories/lucy-moie/src/store/items/actionTypes.js":"314","/Users/ramon/Repositories/lucy-moie/src/store/items/reducer.js":"315","/Users/ramon/Repositories/lucy-moie/src/store/items/saga.js":"316","/Users/ramon/Repositories/lucy-moie/src/pages/Items/index.js":"317","/Users/ramon/Repositories/lucy-moie/src/pages/Items/list/itemsList.js":"318","/Users/ramon/Repositories/lucy-moie/src/pages/Items/list/itemsColumn.js":"319","/Users/ramon/Repositories/lucy-moie/src/pages/ItemEdit/index.js":"320","/Users/ramon/Repositories/lucy-moie/src/pages/Dashboard/eventItems.js":"321","/Users/ramon/Repositories/lucy-moie/src/pages/LocalityEdit/index.js":"322"},{"size":444,"mtime":1637949850510,"results":"323","hashOfConfig":"324"},{"size":2173,"mtime":1654890313420,"results":"325","hashOfConfig":"324"},{"size":5245,"mtime":1654864690842,"results":"326","hashOfConfig":"324"},{"size":452,"mtime":1637949850575,"results":"327","hashOfConfig":"324"},{"size":1330,"mtime":1712200458650,"results":"328","hashOfConfig":"324"},{"size":744,"mtime":1679760008025,"results":"329","hashOfConfig":"324"},{"size":5621,"mtime":1711896600572,"results":"330","hashOfConfig":"324"},{"size":882,"mtime":1643505688114,"results":"331","hashOfConfig":"324"},{"size":3717,"mtime":1666054825984,"results":"332","hashOfConfig":"324"},{"size":3224,"mtime":1667065651867,"results":"333","hashOfConfig":"324"},{"size":1565,"mtime":1711819810652,"results":"334","hashOfConfig":"324"},{"size":1752,"mtime":1707267774374,"results":"335","hashOfConfig":"324"},{"size":891,"mtime":1707267727712,"results":"336","hashOfConfig":"324"},{"size":1580,"mtime":1637949850502,"results":"337","hashOfConfig":"324"},{"size":612,"mtime":1637949850501,"results":"338","hashOfConfig":"324"},{"size":7115,"mtime":1670424241235,"results":"339","hashOfConfig":"324"},{"size":679,"mtime":1666054755825,"results":"340","hashOfConfig":"324"},{"size":22832,"mtime":1711896471599,"results":"341","hashOfConfig":"324"},{"size":9649,"mtime":1670424241240,"results":"342","hashOfConfig":"324"},{"size":1446,"mtime":1667064996052,"results":"343","hashOfConfig":"324"},{"size":8934,"mtime":1656335620176,"results":"344","hashOfConfig":"324"},{"size":1020,"mtime":1637949850539,"results":"345","hashOfConfig":"324"},{"size":878,"mtime":1667490440601,"results":"346","hashOfConfig":"324"},{"size":12969,"mtime":1705627649425,"results":"347","hashOfConfig":"324"},{"size":464,"mtime":1637949850515,"results":"348","hashOfConfig":"324"},{"size":5687,"mtime":1654823658841,"results":"349","hashOfConfig":"324"},{"size":7808,"mtime":1707631129399,"results":"350","hashOfConfig":"324"},{"size":352,"mtime":1644612332347,"results":"351","hashOfConfig":"324"},{"size":7214,"mtime":1637949850515,"results":"352","hashOfConfig":"324"},{"size":4705,"mtime":1637949850514,"results":"353","hashOfConfig":"324"},{"size":7353,"mtime":1654864690824,"results":"354","hashOfConfig":"324"},{"size":11635,"mtime":1665983799335,"results":"355","hashOfConfig":"324"},{"size":17319,"mtime":1706639275658,"results":"356","hashOfConfig":"324"},{"size":789,"mtime":1637949850559,"results":"357","hashOfConfig":"324"},{"size":13370,"mtime":1637949850485,"results":"358","hashOfConfig":"324"},{"size":1921,"mtime":1649042582136,"results":"359","hashOfConfig":"324"},{"size":840,"mtime":1649042582150,"results":"360","hashOfConfig":"324"},{"size":36853,"mtime":1705560635153,"results":"361","hashOfConfig":"324"},{"size":4081,"mtime":1661311651522,"results":"362","hashOfConfig":"324"},{"size":3098,"mtime":1661308347395,"results":"363","hashOfConfig":"324"},{"size":869,"mtime":1649042582159,"results":"364","hashOfConfig":"324"},{"size":4486,"mtime":1654864690847,"results":"365","hashOfConfig":"324"},{"size":855,"mtime":1649042582163,"results":"366","hashOfConfig":"324"},{"size":7498,"mtime":1649042582165,"results":"367","hashOfConfig":"324"},{"size":900,"mtime":1649042582136,"results":"368","hashOfConfig":"324"},{"size":8235,"mtime":1649042582139,"results":"369","hashOfConfig":"324"},{"size":873,"mtime":1649042582126,"results":"370","hashOfConfig":"324"},{"size":843,"mtime":1649042582168,"results":"371","hashOfConfig":"324"},{"size":533,"mtime":1637949850530,"results":"372","hashOfConfig":"324"},{"size":12862,"mtime":1678124698169,"results":"373","hashOfConfig":"324"},{"size":8529,"mtime":1669149576482,"results":"374","hashOfConfig":"324"},{"size":11996,"mtime":1679786197095,"results":"375","hashOfConfig":"324"},{"size":873,"mtime":1649042582166,"results":"376","hashOfConfig":"324"},{"size":865,"mtime":1649042582156,"results":"377","hashOfConfig":"324"},{"size":858,"mtime":1649042582140,"results":"378","hashOfConfig":"324"},{"size":10332,"mtime":1649042582168,"results":"379","hashOfConfig":"324"},{"size":843,"mtime":1649042582114,"results":"380","hashOfConfig":"324"},{"size":842,"mtime":1662430927017,"results":"381","hashOfConfig":"324"},{"size":30477,"mtime":1684554630820,"results":"382","hashOfConfig":"324"},{"size":864,"mtime":1649042582154,"results":"383","hashOfConfig":"324"},{"size":901,"mtime":1649042582117,"results":"384","hashOfConfig":"324"},{"size":569,"mtime":1669127862099,"results":"385","hashOfConfig":"324"},{"size":14841,"mtime":1656336875551,"results":"386","hashOfConfig":"324"},{"size":882,"mtime":1649042582163,"results":"387","hashOfConfig":"324"},{"size":887,"mtime":1711896513264,"results":"388","hashOfConfig":"324"},{"size":1959,"mtime":1649042582121,"results":"389","hashOfConfig":"324"},{"size":9278,"mtime":1665981404391,"results":"390","hashOfConfig":"324"},{"size":855,"mtime":1661274401881,"results":"391","hashOfConfig":"324"},{"size":20096,"mtime":1670281806760,"results":"392","hashOfConfig":"324"},{"size":4954,"mtime":1667458033068,"results":"393","hashOfConfig":"324"},{"size":680,"mtime":1649042582109,"results":"394","hashOfConfig":"324"},{"size":4368,"mtime":1643164119453,"results":"395","hashOfConfig":"324"},{"size":6203,"mtime":1667434342180,"results":"396","hashOfConfig":"324"},{"size":4922,"mtime":1646354436957,"results":"397","hashOfConfig":"324"},{"size":270,"mtime":1637949850559,"results":"398","hashOfConfig":"324"},{"size":333,"mtime":1637949850482,"results":"399","hashOfConfig":"324"},{"size":201,"mtime":1649042582107,"results":"400","hashOfConfig":"324"},{"size":1113,"mtime":1637949850477,"results":"401","hashOfConfig":"324"},{"size":9508,"mtime":1705207227090,"results":"402","hashOfConfig":"324"},{"size":7530,"mtime":1712627946371,"results":"403","hashOfConfig":"324"},{"size":3896,"mtime":1712634158630,"results":"404","hashOfConfig":"324"},{"size":2148,"mtime":1706578642427,"results":"405","hashOfConfig":"324"},{"size":5176,"mtime":1706500156980,"results":"406","hashOfConfig":"324"},{"size":8578,"mtime":1669146124356,"results":"407","hashOfConfig":"324"},{"size":22448,"mtime":1706499371565,"results":"408","hashOfConfig":"324"},{"size":610,"mtime":1637949850479,"results":"409","hashOfConfig":"324"},{"size":2412,"mtime":1670362756912,"results":"410","hashOfConfig":"324"},{"size":586,"mtime":1712200443614,"results":"411","hashOfConfig":"324"},{"size":678,"mtime":1637949850477,"results":"412","hashOfConfig":"324"},{"size":2343,"mtime":1661290978522,"results":"413","hashOfConfig":"324"},{"size":3249,"mtime":1666054009859,"results":"414","hashOfConfig":"324"},{"size":38,"mtime":1690501141210,"results":"415","hashOfConfig":"324"},{"size":3476,"mtime":1638148712111,"results":"416","hashOfConfig":"324"},{"size":7209,"mtime":1654864690825,"results":"417","hashOfConfig":"324"},{"size":5461,"mtime":1706510895791,"results":"418","hashOfConfig":"324"},{"size":3219,"mtime":1665236635982,"results":"419","hashOfConfig":"324"},{"size":3745,"mtime":1706576874977,"results":"420","hashOfConfig":"324"},{"size":12737,"mtime":1666017912816,"results":"421","hashOfConfig":"324"},{"size":16364,"mtime":1712631032762,"results":"422","hashOfConfig":"324"},{"size":3297,"mtime":1669148337677,"results":"423","hashOfConfig":"324"},{"size":11676,"mtime":1665986210229,"results":"424","hashOfConfig":"324"},{"size":3744,"mtime":1665979456425,"results":"425","hashOfConfig":"324"},{"size":7923,"mtime":1711819823240,"results":"426","hashOfConfig":"324"},{"size":2579,"mtime":1655572395322,"results":"427","hashOfConfig":"324"},{"size":3381,"mtime":1637949850574,"results":"428","hashOfConfig":"324"},{"size":8801,"mtime":1665986533680,"results":"429","hashOfConfig":"324"},{"size":9712,"mtime":1670300977721,"results":"430","hashOfConfig":"324"},{"size":3838,"mtime":1707597899419,"results":"431","hashOfConfig":"324"},{"size":1960,"mtime":1656556636192,"results":"432","hashOfConfig":"324"},{"size":2213,"mtime":1684650076472,"results":"433","hashOfConfig":"324"},{"size":2392,"mtime":1712200346177,"results":"434","hashOfConfig":"324"},{"size":5951,"mtime":1671164928036,"results":"435","hashOfConfig":"324"},{"size":1829,"mtime":1643164098767,"results":"436","hashOfConfig":"324"},{"size":1031,"mtime":1654130471788,"results":"437","hashOfConfig":"324"},{"size":1452,"mtime":1656380532433,"results":"438","hashOfConfig":"324"},{"size":3780,"mtime":1669146109217,"results":"439","hashOfConfig":"324"},{"size":1112,"mtime":1690438368307,"results":"440","hashOfConfig":"324"},{"size":13208,"mtime":1670356638919,"results":"441","hashOfConfig":"324"},{"size":3130,"mtime":1707600882029,"results":"442","hashOfConfig":"324"},{"size":4754,"mtime":1670344874072,"results":"443","hashOfConfig":"324"},{"size":5432,"mtime":1654864690849,"results":"444","hashOfConfig":"324"},{"size":18224,"mtime":1711828503011,"results":"445","hashOfConfig":"324"},{"size":10855,"mtime":1670339283750,"results":"446","hashOfConfig":"324"},{"size":16286,"mtime":1684864072377,"results":"447","hashOfConfig":"324"},{"size":856,"mtime":1637949850504,"results":"448","hashOfConfig":"324"},{"size":371,"mtime":1654864690822,"results":"449","hashOfConfig":"324"},{"size":2423,"mtime":1679536431263,"results":"450","hashOfConfig":"324"},{"size":15305,"mtime":1669122579383,"results":"451","hashOfConfig":"324"},{"size":10515,"mtime":1666502041595,"results":"452","hashOfConfig":"324"},{"size":8472,"mtime":1665986481446,"results":"453","hashOfConfig":"324"},{"size":18943,"mtime":1705627687269,"results":"454","hashOfConfig":"324"},{"size":3045,"mtime":1665955886097,"results":"455","hashOfConfig":"324"},{"size":15714,"mtime":1707272644650,"results":"456","hashOfConfig":"324"},{"size":1279,"mtime":1643164554780,"results":"457","hashOfConfig":"324"},{"size":1045,"mtime":1643585746354,"results":"458","hashOfConfig":"324"},{"size":5135,"mtime":1654864690837,"results":"459","hashOfConfig":"324"},{"size":17766,"mtime":1670341007412,"results":"460","hashOfConfig":"324"},{"size":62490,"mtime":1705627698805,"results":"461","hashOfConfig":"324"},{"size":16575,"mtime":1685593331674,"results":"462","hashOfConfig":"324"},{"size":9398,"mtime":1665986424216,"results":"463","hashOfConfig":"324"},{"size":8236,"mtime":1665986304522,"results":"464","hashOfConfig":"324"},{"size":9145,"mtime":1665986397852,"results":"465","hashOfConfig":"324"},{"size":8562,"mtime":1671164869372,"results":"466","hashOfConfig":"324"},{"size":905,"mtime":1661282877306,"results":"467","hashOfConfig":"324"},{"size":14214,"mtime":1648685467278,"results":"468","hashOfConfig":"324"},{"size":1443,"mtime":1666502101254,"results":"469","hashOfConfig":"324"},{"size":880,"mtime":1656374276852,"results":"470","hashOfConfig":"324"},{"size":1672,"mtime":1637949850594,"results":"471","hashOfConfig":"324"},{"size":2707,"mtime":1670295542195,"results":"472","hashOfConfig":"324"},{"size":14607,"mtime":1705207905773,"results":"473","hashOfConfig":"324"},{"size":2457,"mtime":1649042582118,"results":"474","hashOfConfig":"324"},{"size":1512,"mtime":1707597860083,"results":"475","hashOfConfig":"324"},{"size":991,"mtime":1637949850574,"results":"476","hashOfConfig":"324"},{"size":5185,"mtime":1711828376305,"results":"477","hashOfConfig":"324"},{"size":1164,"mtime":1665979431326,"results":"478","hashOfConfig":"324"},{"size":1007,"mtime":1655572400513,"results":"479","hashOfConfig":"324"},{"size":2279,"mtime":1669258709206,"results":"480","hashOfConfig":"324"},{"size":1416,"mtime":1669146827665,"results":"481","hashOfConfig":"324"},{"size":2315,"mtime":1711827939956,"results":"482","hashOfConfig":"324"},{"size":56,"mtime":1637949850508,"results":"483","hashOfConfig":"324"},{"size":198,"mtime":1712200372374,"results":"484","hashOfConfig":"324"},{"size":1130,"mtime":1647114783315,"results":"485","hashOfConfig":"324"},{"size":449,"mtime":1654130388334,"results":"486","hashOfConfig":"324"},{"size":6041,"mtime":1684943049814,"results":"487","hashOfConfig":"324"},{"size":6261,"mtime":1684646168571,"results":"488","hashOfConfig":"324"},{"size":4659,"mtime":1670301277895,"results":"489","hashOfConfig":"324"},{"size":6161,"mtime":1655172432456,"results":"490","hashOfConfig":"324"},{"size":713,"mtime":1637949850479,"results":"491","hashOfConfig":"324"},{"size":2492,"mtime":1665033758875,"results":"492","hashOfConfig":"324"},{"size":2425,"mtime":1665033678143,"results":"493","hashOfConfig":"324"},{"size":1067,"mtime":1637949850489,"results":"494","hashOfConfig":"324"},{"size":4742,"mtime":1671164605926,"results":"495","hashOfConfig":"324"},{"size":14380,"mtime":1671164862989,"results":"496","hashOfConfig":"324"},{"size":2729,"mtime":1651526333014,"results":"497","hashOfConfig":"324"},{"size":2927,"mtime":1649042582164,"results":"498","hashOfConfig":"324"},{"size":4271,"mtime":1637949850552,"results":"499","hashOfConfig":"324"},{"size":673,"mtime":1666502106545,"results":"500","hashOfConfig":"324"},{"size":3559,"mtime":1649042582169,"results":"501","hashOfConfig":"324"},{"size":597,"mtime":1637949850594,"results":"502","hashOfConfig":"324"},{"size":3034,"mtime":1649042582137,"results":"503","hashOfConfig":"324"},{"size":308,"mtime":1643173818597,"results":"504","hashOfConfig":"324"},{"size":3295,"mtime":1656432869177,"results":"505","hashOfConfig":"324"},{"size":2831,"mtime":1667794111169,"results":"506","hashOfConfig":"324"},{"size":8748,"mtime":1706511148456,"results":"507","hashOfConfig":"324"},{"size":6751,"mtime":1711823113580,"results":"508","hashOfConfig":"324"},{"size":3809,"mtime":1684650047568,"results":"509","hashOfConfig":"324"},{"size":1921,"mtime":1637949850490,"results":"510","hashOfConfig":"324"},{"size":1158,"mtime":1665955848540,"results":"511","hashOfConfig":"324"},{"size":2336,"mtime":1649042582166,"results":"512","hashOfConfig":"324"},{"size":17519,"mtime":1705370988962,"results":"513","hashOfConfig":"324"},{"size":4063,"mtime":1654864690838,"results":"514","hashOfConfig":"324"},{"size":5584,"mtime":1666049808985,"results":"515","hashOfConfig":"324"},{"size":951,"mtime":1679536403650,"results":"516","hashOfConfig":"324"},{"size":1269,"mtime":1637949850504,"results":"517","hashOfConfig":"324"},{"size":4178,"mtime":1665724092851,"results":"518","hashOfConfig":"324"},{"size":915,"mtime":1637949850572,"results":"519","hashOfConfig":"324"},{"size":7145,"mtime":1655172406623,"results":"520","hashOfConfig":"324"},{"size":3829,"mtime":1670396979154,"results":"521","hashOfConfig":"324"},{"size":2059,"mtime":1643163187516,"results":"522","hashOfConfig":"324"},{"size":6194,"mtime":1655172355327,"results":"523","hashOfConfig":"324"},{"size":8603,"mtime":1656552474297,"results":"524","hashOfConfig":"324"},{"size":6145,"mtime":1662430345950,"results":"525","hashOfConfig":"324"},{"size":9086,"mtime":1656552434549,"results":"526","hashOfConfig":"324"},{"size":6065,"mtime":1655172372298,"results":"527","hashOfConfig":"324"},{"size":2007,"mtime":1662417231307,"results":"528","hashOfConfig":"324"},{"size":313,"mtime":1643586016043,"results":"529","hashOfConfig":"324"},{"size":3091,"mtime":1637949850526,"results":"530","hashOfConfig":"324"},{"size":2614,"mtime":1644612332350,"results":"531","hashOfConfig":"324"},{"size":660,"mtime":1647118095762,"results":"532","hashOfConfig":"324"},{"size":841,"mtime":1637949850568,"results":"533","hashOfConfig":"324"},{"size":1153,"mtime":1651538708539,"results":"534","hashOfConfig":"324"},{"size":9417,"mtime":1689217366325,"results":"535","hashOfConfig":"324"},{"size":10045,"mtime":1648501436201,"results":"536","hashOfConfig":"324"},{"size":3958,"mtime":1679837344551,"results":"537","hashOfConfig":"324"},{"size":7704,"mtime":1670362907461,"results":"538","hashOfConfig":"324"},{"size":11593,"mtime":1668052761656,"results":"539","hashOfConfig":"324"},{"size":11311,"mtime":1658718453585,"results":"540","hashOfConfig":"324"},{"size":718,"mtime":1637949850590,"results":"541","hashOfConfig":"324"},{"size":2330,"mtime":1655223596049,"results":"542","hashOfConfig":"324"},{"size":707,"mtime":1669121138573,"results":"543","hashOfConfig":"324"},{"size":9877,"mtime":1656453336759,"results":"544","hashOfConfig":"324"},{"size":3057,"mtime":1637949850528,"results":"545","hashOfConfig":"324"},{"size":626,"mtime":1637949850528,"results":"546","hashOfConfig":"324"},{"size":4730,"mtime":1637949850528,"results":"547","hashOfConfig":"324"},{"size":125,"mtime":1637949850505,"results":"548","hashOfConfig":"324"},{"size":4692,"mtime":1660136714282,"results":"549","hashOfConfig":"324"},{"size":4292,"mtime":1670396008516,"results":"550","hashOfConfig":"324"},{"size":5279,"mtime":1660136707171,"results":"551","hashOfConfig":"324"},{"size":1351,"mtime":1670424254555,"results":"552","hashOfConfig":"324"},{"size":2854,"mtime":1712200400554,"results":"553","hashOfConfig":"324"},{"size":1995,"mtime":1637949850485,"results":"554","hashOfConfig":"324"},{"size":16404,"mtime":1637949850502,"results":"555","hashOfConfig":"324"},{"size":13116,"mtime":1712636826791,"results":"556","hashOfConfig":"324"},{"size":982,"mtime":1655223507316,"results":"557","hashOfConfig":"324"},{"size":286,"mtime":1637949850589,"results":"558","hashOfConfig":"324"},{"size":2986,"mtime":1637949850585,"results":"559","hashOfConfig":"324"},{"size":1082,"mtime":1637949850561,"results":"560","hashOfConfig":"324"},{"size":5478,"mtime":1654864690852,"results":"561","hashOfConfig":"324"},{"size":4467,"mtime":1655571419904,"results":"562","hashOfConfig":"324"},{"size":2910,"mtime":1712630814440,"results":"563","hashOfConfig":"324"},{"size":489,"mtime":1637949850557,"results":"564","hashOfConfig":"324"},{"size":439,"mtime":1637949850563,"results":"565","hashOfConfig":"324"},{"size":4857,"mtime":1637949850577,"results":"566","hashOfConfig":"324"},{"size":8042,"mtime":1706499949550,"results":"567","hashOfConfig":"324"},{"size":7731,"mtime":1654864690850,"results":"568","hashOfConfig":"324"},{"size":4920,"mtime":1665957993607,"results":"569","hashOfConfig":"324"},{"size":4213,"mtime":1679536798644,"results":"570","hashOfConfig":"324"},{"size":3838,"mtime":1637949850575,"results":"571","hashOfConfig":"324"},{"size":15226,"mtime":1670424157107,"results":"572","hashOfConfig":"324"},{"size":5316,"mtime":1654864690848,"results":"573","hashOfConfig":"324"},{"size":4070,"mtime":1655223640452,"results":"574","hashOfConfig":"324"},{"size":1163,"mtime":1637949850590,"results":"575","hashOfConfig":"324"},{"size":3869,"mtime":1644612332351,"results":"576","hashOfConfig":"324"},{"size":3680,"mtime":1711896501179,"results":"577","hashOfConfig":"324"},{"size":3135,"mtime":1637949850595,"results":"578","hashOfConfig":"324"},{"size":5147,"mtime":1669148545140,"results":"579","hashOfConfig":"324"},{"size":5146,"mtime":1665642851522,"results":"580","hashOfConfig":"324"},{"size":4890,"mtime":1707598426394,"results":"581","hashOfConfig":"324"},{"size":1900,"mtime":1637949850558,"results":"582","hashOfConfig":"324"},{"size":2850,"mtime":1712200393753,"results":"583","hashOfConfig":"324"},{"size":2997,"mtime":1712200239898,"results":"584","hashOfConfig":"324"},{"size":1484,"mtime":1654864690844,"results":"585","hashOfConfig":"324"},{"size":4571,"mtime":1638141286505,"results":"586","hashOfConfig":"324"},{"size":1623,"mtime":1654130400952,"results":"587","hashOfConfig":"324"},{"size":3518,"mtime":1655572441162,"results":"588","hashOfConfig":"324"},{"size":5909,"mtime":1637949850585,"results":"589","hashOfConfig":"324"},{"size":7156,"mtime":1637949850565,"results":"590","hashOfConfig":"324"},{"size":2313,"mtime":1643073987883,"results":"591","hashOfConfig":"324"},{"size":8366,"mtime":1642687306771,"results":"592","hashOfConfig":"324"},{"size":2329,"mtime":1654864690820,"results":"593","hashOfConfig":"324"},{"size":2036,"mtime":1654817754608,"results":"594","hashOfConfig":"324"},{"size":581,"mtime":1637949850475,"results":"595","hashOfConfig":"324"},{"size":776,"mtime":1643172719714,"results":"596","hashOfConfig":"324"},{"size":1234,"mtime":1637949850509,"results":"597","hashOfConfig":"324"},{"size":5798,"mtime":1705207245770,"results":"598","hashOfConfig":"324"},{"size":1324,"mtime":1637949850584,"results":"599","hashOfConfig":"324"},{"size":172,"mtime":1637949850562,"results":"600","hashOfConfig":"324"},{"size":480,"mtime":1637949850560,"results":"601","hashOfConfig":"324"},{"size":175,"mtime":1637949850557,"results":"602","hashOfConfig":"324"},{"size":3543,"mtime":1671166349283,"results":"603","hashOfConfig":"324"},{"size":3190,"mtime":1679536516696,"results":"604","hashOfConfig":"324"},{"size":3315,"mtime":1642572141906,"results":"605","hashOfConfig":"324"},{"size":4892,"mtime":1665955950778,"results":"606","hashOfConfig":"324"},{"size":3228,"mtime":1637949850574,"results":"607","hashOfConfig":"324"},{"size":14276,"mtime":1671166453558,"results":"608","hashOfConfig":"324"},{"size":2737,"mtime":1637949850573,"results":"609","hashOfConfig":"324"},{"size":1170,"mtime":1656515328361,"results":"610","hashOfConfig":"324"},{"size":2994,"mtime":1655223618938,"results":"611","hashOfConfig":"324"},{"size":385,"mtime":1651763351147,"results":"612","hashOfConfig":"324"},{"size":2339,"mtime":1637949850594,"results":"613","hashOfConfig":"324"},{"size":5335,"mtime":1669148325935,"results":"614","hashOfConfig":"324"},{"size":5858,"mtime":1644612332352,"results":"615","hashOfConfig":"324"},{"size":4361,"mtime":1666017792357,"results":"616","hashOfConfig":"324"},{"size":1816,"mtime":1644612332348,"results":"617","hashOfConfig":"324"},{"size":4495,"mtime":1643171439430,"results":"618","hashOfConfig":"324"},{"size":734,"mtime":1637949850558,"results":"619","hashOfConfig":"324"},{"size":860,"mtime":1654864690844,"results":"620","hashOfConfig":"324"},{"size":878,"mtime":1637949850559,"results":"621","hashOfConfig":"324"},{"size":2208,"mtime":1666502184271,"results":"622","hashOfConfig":"324"},{"size":4092,"mtime":1637949850507,"results":"623","hashOfConfig":"324"},{"size":4885,"mtime":1712200420962,"results":"624","hashOfConfig":"324"},{"size":2037,"mtime":1643172346925,"results":"625","hashOfConfig":"324"},{"size":1282,"mtime":1690501290212,"results":"626","hashOfConfig":"324"},{"size":789,"mtime":1667833658703,"results":"627","hashOfConfig":"324"},{"size":9792,"mtime":1689217584764,"results":"628","hashOfConfig":"324"},{"size":3524,"mtime":1691686364769,"results":"629","hashOfConfig":"324"},{"size":7056,"mtime":1707631077023,"results":"630","hashOfConfig":"324"},{"size":11185,"mtime":1692465995288,"results":"631","hashOfConfig":"324"},{"size":10199,"mtime":1692469803430,"results":"632","hashOfConfig":"324"},{"size":450,"mtime":1705206920068,"results":"633","hashOfConfig":"324"},{"size":10153,"mtime":1707607666850,"results":"634","hashOfConfig":"324"},{"size":9599,"mtime":1712549209731,"results":"635","hashOfConfig":"324"},{"size":2169,"mtime":1707274152024,"results":"636","hashOfConfig":"324"},{"size":787,"mtime":1707274124899,"results":"637","hashOfConfig":"324"},{"size":2440,"mtime":1707267667824,"results":"638","hashOfConfig":"324"},{"size":3697,"mtime":1707274706258,"results":"639","hashOfConfig":"324"},{"size":844,"mtime":1707268192029,"results":"640","hashOfConfig":"324"},{"size":8839,"mtime":1707632066047,"results":"641","hashOfConfig":"324"},{"size":2540,"mtime":1707271620070,"results":"642","hashOfConfig":"324"},{"size":8004,"mtime":1707270536431,"results":"643","hashOfConfig":"324"},{"size":3955,"mtime":1707631110786,"results":"644","hashOfConfig":"324"},{"size":13820,"mtime":1712110250313,"results":"645","hashOfConfig":"324"},{"filePath":"646","messages":"647","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},"1g4yafj",{"filePath":"649","messages":"650","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"651","usedDeprecatedRules":"648"},{"filePath":"652","messages":"653","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"654","messages":"655","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"656","messages":"657","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"658","messages":"659","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"660","messages":"661","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"662","messages":"663","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"664","messages":"665","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"666","messages":"667","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"668","messages":"669","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"670","messages":"671","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"672","messages":"673","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"674","messages":"675","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"676","messages":"677","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"678","messages":"679","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"680","usedDeprecatedRules":"648"},{"filePath":"681","messages":"682","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"683","messages":"684","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"685","usedDeprecatedRules":"648"},{"filePath":"686","messages":"687","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"688","messages":"689","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"690","usedDeprecatedRules":"648"},{"filePath":"691","messages":"692","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"693","usedDeprecatedRules":"648"},{"filePath":"694","messages":"695","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"696","messages":"697","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"698","messages":"699","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"700","usedDeprecatedRules":"648"},{"filePath":"701","messages":"702","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"703","messages":"704","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"705","usedDeprecatedRules":"648"},{"filePath":"706","messages":"707","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"708","usedDeprecatedRules":"648"},{"filePath":"709","messages":"710","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"711","messages":"712","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"713","messages":"714","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"715","messages":"716","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"717","usedDeprecatedRules":"648"},{"filePath":"718","messages":"719","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"720","usedDeprecatedRules":"648"},{"filePath":"721","messages":"722","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":3,"source":"723","usedDeprecatedRules":"648"},{"filePath":"724","messages":"725","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"726","messages":"727","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"728","messages":"729","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"730","usedDeprecatedRules":"648"},{"filePath":"731","messages":"732","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"733","messages":"734","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"735","usedDeprecatedRules":"648"},{"filePath":"736","messages":"737","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"738","messages":"739","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"740","messages":"741","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"742","messages":"743","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"744","messages":"745","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"746","messages":"747","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"748","usedDeprecatedRules":"648"},{"filePath":"749","messages":"750","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"751","messages":"752","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"753","usedDeprecatedRules":"648"},{"filePath":"754","messages":"755","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"756","messages":"757","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"758","messages":"759","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"760","messages":"761","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"762","usedDeprecatedRules":"648"},{"filePath":"763","messages":"764","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"765","usedDeprecatedRules":"648"},{"filePath":"766","messages":"767","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"768","usedDeprecatedRules":"648"},{"filePath":"769","messages":"770","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"771","messages":"772","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"773","messages":"774","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"775","messages":"776","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"777","usedDeprecatedRules":"648"},{"filePath":"778","messages":"779","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"780","messages":"781","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"782","messages":"783","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":3,"source":"784","usedDeprecatedRules":"648"},{"filePath":"785","messages":"786","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"787","messages":"788","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"789","messages":"790","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"791","messages":"792","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"793","usedDeprecatedRules":"648"},{"filePath":"794","messages":"795","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"796","messages":"797","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"798","messages":"799","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"800","usedDeprecatedRules":"648"},{"filePath":"801","messages":"802","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":3,"source":"803","usedDeprecatedRules":"648"},{"filePath":"804","messages":"805","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"806","messages":"807","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":"808","usedDeprecatedRules":"648"},{"filePath":"809","messages":"810","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"811","usedDeprecatedRules":"648"},{"filePath":"812","messages":"813","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"814","messages":"815","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"816","messages":"817","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"818","usedDeprecatedRules":"648"},{"filePath":"819","messages":"820","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":3,"source":"821","usedDeprecatedRules":"648"},{"filePath":"822","messages":"823","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"824","messages":"825","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"826","messages":"827","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"828","messages":"829","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"830","messages":"831","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"832","usedDeprecatedRules":"648"},{"filePath":"833","messages":"834","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"835","messages":"836","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"837"},{"filePath":"838","messages":"839","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"840","messages":"841","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"842","usedDeprecatedRules":"648"},{"filePath":"843","messages":"844","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"845","usedDeprecatedRules":"648"},{"filePath":"846","messages":"847","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"848","usedDeprecatedRules":"648"},{"filePath":"849","messages":"850","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"851","messages":"852","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"853","messages":"854","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"855","messages":"856","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"857","usedDeprecatedRules":"648"},{"filePath":"858","messages":"859","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"860","messages":"861","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"862","usedDeprecatedRules":"648"},{"filePath":"863","messages":"864","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"865","messages":"866","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"867","usedDeprecatedRules":"648"},{"filePath":"868","messages":"869","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"870","usedDeprecatedRules":"648"},{"filePath":"871","messages":"872","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"873","usedDeprecatedRules":"648"},{"filePath":"874","messages":"875","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"876","messages":"877","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"878","usedDeprecatedRules":"648"},{"filePath":"879","messages":"880","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":2,"source":"881","usedDeprecatedRules":"648"},{"filePath":"882","messages":"883","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"884","messages":"885","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"886","messages":"887","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"888","usedDeprecatedRules":"648"},{"filePath":"889","messages":"890","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"891","usedDeprecatedRules":"648"},{"filePath":"892","messages":"893","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"894","messages":"895","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"896","messages":"897","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"898","usedDeprecatedRules":"648"},{"filePath":"899","messages":"900","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"901","usedDeprecatedRules":"648"},{"filePath":"902","messages":"903","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"904","usedDeprecatedRules":"648"},{"filePath":"905","messages":"906","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"907","messages":"908","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"909","messages":"910","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"911","messages":"912","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"913","messages":"914","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":7,"source":"915","usedDeprecatedRules":"648"},{"filePath":"916","messages":"917","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"918","messages":"919","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"920","messages":"921","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"922","messages":"923","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"924","messages":"925","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"926","messages":"927","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"928","usedDeprecatedRules":"648"},{"filePath":"929","messages":"930","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"931","messages":"932","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"933","messages":"934","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"935","usedDeprecatedRules":"648"},{"filePath":"936","messages":"937","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":1,"source":"938","usedDeprecatedRules":"648"},{"filePath":"939","messages":"940","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"941","usedDeprecatedRules":"648"},{"filePath":"942","messages":"943","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":3,"source":"944","usedDeprecatedRules":"648"},{"filePath":"945","messages":"946","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"947","messages":"948","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"949","messages":"950","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"951","messages":"952","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"953","usedDeprecatedRules":"648"},{"filePath":"954","messages":"955","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"956","usedDeprecatedRules":"648"},{"filePath":"957","messages":"958","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"959","usedDeprecatedRules":"648"},{"filePath":"960","messages":"961","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"962","usedDeprecatedRules":"648"},{"filePath":"963","messages":"964","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"965","messages":"966","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"967","usedDeprecatedRules":"648"},{"filePath":"968","messages":"969","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"970","messages":"971","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"972","messages":"973","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"974","usedDeprecatedRules":"648"},{"filePath":"975","messages":"976","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":1,"source":"977","usedDeprecatedRules":"648"},{"filePath":"978","messages":"979","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"980","usedDeprecatedRules":"648"},{"filePath":"981","messages":"982","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"983","usedDeprecatedRules":"648"},{"filePath":"984","messages":"985","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"986","usedDeprecatedRules":"648"},{"filePath":"987","messages":"988","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"989","usedDeprecatedRules":"648"},{"filePath":"990","messages":"991","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"992","usedDeprecatedRules":"648"},{"filePath":"993","messages":"994","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"995","usedDeprecatedRules":"648"},{"filePath":"996","messages":"997","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"998","messages":"999","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1000","usedDeprecatedRules":"648"},{"filePath":"1001","messages":"1002","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1003","messages":"1004","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1005","messages":"1006","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1007","messages":"1008","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1009","usedDeprecatedRules":"648"},{"filePath":"1010","messages":"1011","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"1012","usedDeprecatedRules":"648"},{"filePath":"1013","messages":"1014","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1015","messages":"1016","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1017","messages":"1018","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1019","messages":"1020","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1021","usedDeprecatedRules":"648"},{"filePath":"1022","messages":"1023","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1024","messages":"1025","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1026","messages":"1027","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1028","messages":"1029","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1030","messages":"1031","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1032","messages":"1033","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1034","messages":"1035","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1036","messages":"1037","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1038","messages":"1039","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1040","messages":"1041","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1042","usedDeprecatedRules":"648"},{"filePath":"1043","messages":"1044","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1045","usedDeprecatedRules":"648"},{"filePath":"1046","messages":"1047","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1048","usedDeprecatedRules":"648"},{"filePath":"1049","messages":"1050","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1051","usedDeprecatedRules":"648"},{"filePath":"1052","messages":"1053","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1054","messages":"1055","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1056","usedDeprecatedRules":"648"},{"filePath":"1057","messages":"1058","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1059","usedDeprecatedRules":"648"},{"filePath":"1060","messages":"1061","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1062","usedDeprecatedRules":"648"},{"filePath":"1063","messages":"1064","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1065","usedDeprecatedRules":"648"},{"filePath":"1066","messages":"1067","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":"1068","usedDeprecatedRules":"648"},{"filePath":"1069","messages":"1070","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1071","usedDeprecatedRules":"648"},{"filePath":"1072","messages":"1073","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1074","messages":"1075","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1076","usedDeprecatedRules":"648"},{"filePath":"1077","messages":"1078","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1079","messages":"1080","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1081","messages":"1082","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1083","messages":"1084","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1085","messages":"1086","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1087","usedDeprecatedRules":"648"},{"filePath":"1088","messages":"1089","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1090","messages":"1091","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1092","usedDeprecatedRules":"648"},{"filePath":"1093","messages":"1094","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1095","usedDeprecatedRules":"648"},{"filePath":"1096","messages":"1097","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1098","usedDeprecatedRules":"648"},{"filePath":"1099","messages":"1100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1101","messages":"1102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1103","messages":"1104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1105","messages":"1106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1107","messages":"1108","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":"1109","usedDeprecatedRules":"648"},{"filePath":"1110","messages":"1111","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1112","usedDeprecatedRules":"648"},{"filePath":"1113","messages":"1114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1115","messages":"1116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1117","messages":"1118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1119","messages":"1120","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1121","usedDeprecatedRules":"648"},{"filePath":"1122","messages":"1123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1124","messages":"1125","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1126","usedDeprecatedRules":"648"},{"filePath":"1127","messages":"1128","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1129","usedDeprecatedRules":"648"},{"filePath":"1130","messages":"1131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1132","messages":"1133","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1134","usedDeprecatedRules":"648"},{"filePath":"1135","messages":"1136","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1137","usedDeprecatedRules":"648"},{"filePath":"1138","messages":"1139","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1140","usedDeprecatedRules":"648"},{"filePath":"1141","messages":"1142","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1143","usedDeprecatedRules":"648"},{"filePath":"1144","messages":"1145","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1146","usedDeprecatedRules":"648"},{"filePath":"1147","messages":"1148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1149","messages":"1150","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1151","usedDeprecatedRules":"648"},{"filePath":"1152","messages":"1153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1154","messages":"1155","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"1156","usedDeprecatedRules":"648"},{"filePath":"1157","messages":"1158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1159","messages":"1160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1161","messages":"1162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1163","messages":"1164","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1165","usedDeprecatedRules":"648"},{"filePath":"1166","messages":"1167","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1168","usedDeprecatedRules":"648"},{"filePath":"1169","messages":"1170","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1171","usedDeprecatedRules":"648"},{"filePath":"1172","messages":"1173","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1174","usedDeprecatedRules":"648"},{"filePath":"1175","messages":"1176","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1177","usedDeprecatedRules":"648"},{"filePath":"1178","messages":"1179","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1180","usedDeprecatedRules":"648"},{"filePath":"1181","messages":"1182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1183","messages":"1184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1185","messages":"1186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1187","messages":"1188","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1189","usedDeprecatedRules":"648"},{"filePath":"1190","messages":"1191","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1192","usedDeprecatedRules":"1193"},{"filePath":"1194","messages":"1195","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1196","usedDeprecatedRules":"648"},{"filePath":"1197","messages":"1198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1199","messages":"1200","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1201","messages":"1202","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":1,"source":"1203","usedDeprecatedRules":"648"},{"filePath":"1204","messages":"1205","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1206","usedDeprecatedRules":"648"},{"filePath":"1207","messages":"1208","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":1,"source":"1209","usedDeprecatedRules":"648"},{"filePath":"1210","messages":"1211","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1212","usedDeprecatedRules":"648"},{"filePath":"1213","messages":"1214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1215","messages":"1216","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1217","messages":"1218","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1219","messages":"1220","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1221"},{"filePath":"1222","messages":"1223","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1224","messages":"1225","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1226","messages":"1227","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1228","messages":"1229","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1230","messages":"1231","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1232","messages":"1233","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1234","messages":"1235","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1236","messages":"1237","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1238","messages":"1239","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1240","messages":"1241","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1242","messages":"1243","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1244","messages":"1245","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1246","usedDeprecatedRules":"648"},{"filePath":"1247","messages":"1248","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"1249","usedDeprecatedRules":"648"},{"filePath":"1250","messages":"1251","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1252","messages":"1253","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1254","messages":"1255","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1256","usedDeprecatedRules":"648"},{"filePath":"1257","messages":"1258","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1259","messages":"1260","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1261","usedDeprecatedRules":"648"},{"filePath":"1262","messages":"1263","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1264","messages":"1265","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1266","messages":"1267","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1268","messages":"1269","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1270","messages":"1271","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1272","usedDeprecatedRules":"648"},{"filePath":"1273","messages":"1274","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1275","messages":"1276","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1277","usedDeprecatedRules":"648"},{"filePath":"1278","messages":"1279","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1280","messages":"1281","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1282","messages":"1283","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1284","messages":"1285","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1286","messages":"1287","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1288","messages":"1289","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1290","messages":"1291","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1292","messages":"1293","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1294","messages":"1295","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1296","messages":"1297","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1298","usedDeprecatedRules":"648"},{"filePath":"1299","messages":"1300","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1301","messages":"1302","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1303","usedDeprecatedRules":"648"},{"filePath":"1304","messages":"1305","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1306","usedDeprecatedRules":"648"},{"filePath":"1307","messages":"1308","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1309","messages":"1310","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1311","usedDeprecatedRules":"648"},{"filePath":"1312","messages":"1313","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1314","messages":"1315","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1316","usedDeprecatedRules":"648"},{"filePath":"1317","messages":"1318","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1319","messages":"1320","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1321","messages":"1322","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1323","messages":"1324","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1325","messages":"1326","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1327","usedDeprecatedRules":"648"},{"filePath":"1328","messages":"1329","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1330","usedDeprecatedRules":"648"},{"filePath":"1331","messages":"1332","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1333","messages":"1334","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1335","usedDeprecatedRules":"648"},{"filePath":"1336","messages":"1337","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1338","messages":"1339","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1340","messages":"1341","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1342","messages":"1343","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1344","messages":"1345","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1346","usedDeprecatedRules":"648"},{"filePath":"1347","messages":"1348","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1349","messages":"1350","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1351","messages":"1352","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1353","messages":"1354","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1355","messages":"1356","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1357","messages":"1358","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1359","messages":"1360","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1361","messages":"1362","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1363","messages":"1364","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1365","messages":"1366","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1367","messages":"1368","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1369","messages":"1370","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1371","messages":"1372","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1373","messages":"1374","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1375","usedDeprecatedRules":"648"},{"filePath":"1376","messages":"1377","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1378","usedDeprecatedRules":"648"},{"filePath":"1379","messages":"1380","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1381","usedDeprecatedRules":"648"},{"filePath":"1382","messages":"1383","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1384","usedDeprecatedRules":"648"},{"filePath":"1385","messages":"1386","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1387","usedDeprecatedRules":"648"},{"filePath":"1388","messages":"1389","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1390","usedDeprecatedRules":"648"},{"filePath":"1391","messages":"1392","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1393","usedDeprecatedRules":"648"},{"filePath":"1394","messages":"1395","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1396","usedDeprecatedRules":"648"},{"filePath":"1397","messages":"1398","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1399","usedDeprecatedRules":"648"},{"filePath":"1400","messages":"1401","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1402","usedDeprecatedRules":"648"},{"filePath":"1403","messages":"1404","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1405"},{"filePath":"1406","messages":"1407","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1408","messages":"1409","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1410","messages":"1411","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1412","messages":"1413","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1414","messages":"1415","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"648"},{"filePath":"1416","messages":"1417","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":2,"source":"1418","usedDeprecatedRules":"648"},{"filePath":"1419","messages":"1420","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1421","usedDeprecatedRules":"648"},{"filePath":"1422","messages":"1423","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1424","usedDeprecatedRules":"648"},{"filePath":"1425","messages":"1426","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1427","usedDeprecatedRules":"648"},{"filePath":"1428","messages":"1429","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1430","usedDeprecatedRules":"648"},"/Users/ramon/Repositories/lucy-moie/src/index.js",[],["1431","1432"],"/Users/ramon/Repositories/lucy-moie/src/App.js",["1433"],"import PropTypes from 'prop-types'\nimport React from \"react\"\n\nimport {BrowserRouter as Router, Redirect, Switch} from \"react-router-dom\"\nimport {connect} from \"react-redux\"\n\n// Import Routes all\nimport {authRoutes, userRoutes} from \"./routes/allRoutes\"\n\n// Import all middleware\nimport Authmiddleware from \"./routes/middleware/Authmiddleware\"\n\n// layouts Format\nimport VerticalLayout from \"./components/VerticalLayout/\"\nimport HorizontalLayout from \"./components/HorizontalLayout/\"\nimport NonAuthLayout from \"./components/NonAuthLayout\"\n\n// Import scss\nimport \"./assets/scss/theme.scss\"\nimport \"./assets/scss/custom/pages/_common.scss\"\nimport ContainerToast from \"./components/MessageToast/ShowToastMessages\";\nimport {Spinner} from \"reactstrap\";\nimport Loader from \"react-spinner-loader\";\n\nconst App = props => {\n  function getLayout() {\n    let layoutCls = VerticalLayout\n\n    switch (props.layout.layoutType) {\n      case \"horizontal\":\n        layoutCls = HorizontalLayout\n        break\n      default:\n        layoutCls = VerticalLayout\n        break\n    }\n    return layoutCls\n  }\n\n  const Layout = getLayout()\n  return (\n    <React.Fragment>\n      <Router>\n        <Switch>\n        {authRoutes.map((route, idx) => (\n            <Authmiddleware\n              path={route.path}\n              layout={NonAuthLayout}\n              component={route.component}\n              key={idx}\n              isAuthProtected={false}\n            />\n          ))}\n\n          {userRoutes.map((route, idx) => (\n            <Authmiddleware\n              path={route.path}\n              layout={Layout}\n              component={route.component}\n              key={idx}\n              isAuthProtected={true}\n              exact\n            />\n          ))}\n          <Redirect to={{pathname: \"/dashboard\", state: {from: props.location}}} />\n        </Switch>\n      </Router>\n      <ContainerToast/>\n      <Loader show={props.layout.isPreloader} type=\"body\" message=\"Cargando...\"></Loader>\n    </React.Fragment>\n  )\n}\n\nApp.propTypes = {\n  layout: PropTypes.any\n}\n\nconst mapStateToProps = state => {\n  return {\n    layout: state.Layout,\n  }\n}\n\nexport default connect(mapStateToProps, null)(App)\n","/Users/ramon/Repositories/lucy-moie/src/serviceWorker.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/routes/middleware/Authmiddleware.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/NonAuthLayout.js",[],"/Users/ramon/Repositories/lucy-moie/src/routes/allRoutes.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/MessageToast/ShowToastMessages.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/VerticalLayout/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/HorizontalLayout/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/reducers.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/sagas.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/VerticalLayout/Sidebar.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/VerticalLayout/Footer.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/VerticalLayout/Header.js",["1434","1435","1436","1437","1438","1439","1440","1441","1442","1443","1444"],"import PropTypes from 'prop-types'\nimport React, { useState } from \"react\"\n\nimport { connect } from \"react-redux\"\nimport { Form, Input, Button, Row, Col } from \"reactstrap\"\n\nimport { Link } from \"react-router-dom\"\n\n// Reactstrap\nimport { Dropdown, DropdownToggle, DropdownMenu } from \"reactstrap\"\n\n// Import menuDropdown\nimport LanguageDropdown from \"../CommonForBoth/TopbarDropdown/LanguageDropdown\"\nimport NotificationDropdown from \"../CommonForBoth/TopbarDropdown/NotificationDropdown\"\nimport ProfileMenu from \"../CommonForBoth/TopbarDropdown/ProfileMenu\"\n\nimport logoSm from \"../../assets/images/logo-sm.png\"\nimport logoDark from \"../../assets/images/logo-dark.png\"\nimport logoLight from \"../../assets/images/logo-light.png\"\n\n// import images\nimport github from \"../../assets/images/brands/github.png\"\nimport bitbucket from \"../../assets/images/brands/bitbucket.png\"\nimport dribbble from \"../../assets/images/brands/dribbble.png\"\nimport dropbox from \"../../assets/images/brands/dropbox.png\"\nimport mail_chimp from \"../../assets/images/brands/mail_chimp.png\"\nimport slack from \"../../assets/images/brands/slack.png\"\n\n//i18n\nimport { withTranslation } from \"react-i18next\"\n\n// Redux Store\nimport {\n  showRightSidebarAction,\n  toggleLeftmenu,\n  changeSidebarType,\n} from \"../../store/actions\"\nimport UsersSalesDropdown from \"../CommonForBoth/TopbarDropdown/UsersSalesDropdown\";\n\nconst Header = props => {\n  const [search, setsearch] = useState(false)\n  const [socialDrp, setsocialDrp] = useState(false)\n\n  const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent)\n\n  function toggleFullscreen() {\n    if (\n      !document.fullscreenElement &&\n      /* alternative standard method */ !document.mozFullScreenElement &&\n      !document.webkitFullscreenElement\n    ) {\n      // current working methods\n      if (document.documentElement.requestFullscreen) {\n        document.documentElement.requestFullscreen()\n      } else if (document.documentElement.mozRequestFullScreen) {\n        document.documentElement.mozRequestFullScreen()\n      } else if (document.documentElement.webkitRequestFullscreen) {\n        document.documentElement.webkitRequestFullscreen(\n          Element.ALLOW_KEYBOARD_INPUT\n        )\n      }\n    } else {\n      if (document.cancelFullScreen) {\n        document.cancelFullScreen()\n      } else if (document.mozCancelFullScreen) {\n        document.mozCancelFullScreen()\n      } else if (document.webkitCancelFullScreen) {\n        document.webkitCancelFullScreen()\n      }\n    }\n  }\n\n  function tToggle() {\n    props.toggleLeftmenu(!props.leftMenu)\n    if (props.leftSideBarType === \"default\") {\n      props.changeSidebarType(\"condensed\", isMobile)\n    } else if (props.leftSideBarType === \"condensed\") {\n      props.changeSidebarType(\"default\", isMobile)\n    }\n  }\n  return (\n    <React.Fragment>\n      <header id=\"page-topbar\">\n        <div className=\"navbar-header\">\n          <div className=\"d-flex\">\n            <div className=\"navbar-brand-box\">\n              <Link to=\"/\" className=\"logo logo-dark\">\n                <span className=\"logo-sm\">\n                  <img src={logoSm} alt=\"\" height=\"22\" />\n                </span>\n                <span className=\"logo-lg\">\n                  <img src={logoDark} alt=\"\" height=\"20\" />\n                </span>\n              </Link>\n\n              <Link to=\"/\" className=\"logo logo-light\">\n                <span className=\"logo-sm\">\n                  <img src={logoSm} alt=\"\" height=\"22\" />\n                </span>\n                <span className=\"logo-lg\">\n                  <img src={logoLight} alt=\"\" height=\"20\" />\n                </span>\n              </Link>\n            </div>\n\n            <button\n              type=\"button\"\n              onClick={() => {\n                tToggle()\n              }}\n              className=\"btn btn-sm px-3 font-size-16 header-item waves-effect vertical-menu-btn\"\n              id=\"vertical-menu-btn\"\n            >\n              <i className=\"fa fa-fw fa-bars\" />\n            </button>\n\n            <Form className=\"app-search d-none d-lg-block\">\n              <div className=\"position-relative\">\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  placeholder={props.t(\"Search\") + \"...\"}\n                />\n                <span className=\"uil-search\"></span>\n              </div>\n            </Form>\n          </div>\n\n          <div className=\"d-flex\">\n\n            <Dropdown\n              className=\"d-inline-block d-lg-none ms-2\"\n              onClick={() => {\n                setsearch(!search)\n              }}\n              type=\"button\"\n            >\n              <DropdownToggle\n                className=\"btn header-item noti-icon waves-effect\"\n                id=\"page-header-search-dropdown\"\n                tag=\"button\"\n              > <i className=\"uil-search\" />\n              </DropdownToggle>\n              <DropdownMenu className=\"dropdown-menu-lg dropdown-menu-end p-0\">\n                <Form className=\"p-3\">\n                  <div className=\"form-group m-0\">\n                    <div className=\"input-group\">\n                      <Input type=\"text\" className=\"form-control\" placeholder=\"Search ...\" aria-label=\"Recipient's username\" />\n                      <div className=\"input-group-append\">\n                        <Button className=\"btn btn-primary\" type=\"submit\"><i className=\"mdi mdi-magnify\"></i></Button>\n                      </div>\n                    </div>\n                  </div>\n                </Form>\n              </DropdownMenu>\n            </Dropdown>\n            <Dropdown className=\"d-none d-lg-inline-block ms-1\">\n              <button\n                type=\"button\"\n                onClick={() => {\n                  toggleFullscreen()\n                }}\n                className=\"btn header-item noti-icon waves-effect\"\n                data-toggle=\"fullscreen\"\n              >\n                <i className=\"uil-minus-path\"></i>\n              </button>\n            </Dropdown>\n\n            <UsersSalesDropdown />\n            <NotificationDropdown />\n            <ProfileMenu />\n            <div onClick={() => props.showRightSidebarAction(!props.showRightSidebar)}\n              className=\"dropdown d-inline-block\">\n              <button type=\"button\" className=\"btn header-item noti-icon right-bar-toggle waves-effect\">\n                <i className=\"uil-cog\"> </i>\n              </button>\n            </div>\n          </div>\n        </div>\n      </header>\n    </React.Fragment>\n  )\n}\n\nHeader.propTypes = {\n  changeSidebarType: PropTypes.func,\n  leftMenu: PropTypes.any,\n  leftSideBarType: PropTypes.any,\n  showRightSidebar: PropTypes.any,\n  showRightSidebarAction: PropTypes.func,\n  t: PropTypes.any,\n  toggleLeftmenu: PropTypes.func\n}\n\nconst mapStatetoProps = state => {\n  const {\n    layoutType,\n    showRightSidebar,\n    leftMenu,\n    leftSideBarType,\n  } = state.Layout\n  return { layoutType, showRightSidebar, leftMenu, leftSideBarType }\n}\n\nexport default connect(mapStatetoProps, {\n  showRightSidebarAction,\n  toggleLeftmenu,\n  changeSidebarType,\n})(withTranslation()(Header))\n","/Users/ramon/Repositories/lucy-moie/src/components/HorizontalLayout/Footer.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/HorizontalLayout/Navbar.js",["1445","1446","1447"],"import PropTypes from \"prop-types\"\nimport React, {useEffect, useState} from \"react\"\nimport {Collapse} from \"reactstrap\"\nimport {Link, withRouter} from \"react-router-dom\"\nimport classname from \"classnames\"\n\n//i18n\nimport {withTranslation} from \"react-i18next\"\n\nimport {connect} from \"react-redux\"\nimport {PERMISSIONS} from \"../../helpers/security_rol\";\nimport HasPermissions from \"../HasPermissions\";\nimport OutsideClickHandler from \"../OutsideClickHandler\";\nimport {toggleLeftmenu} from \"../../store/layout/actions\";\nimport {showMessage} from \"../MessageToast/ShowToastMessages\";\nimport {_encodePhone} from \"../../common/utils\";\n\nconst Navbar = props => {\n\n    const [copying, setCopying] = useState(false)\n    const [system, setsystem] = useState(false)\n    const [extra, setextra] = useState(false)\n    const [extra2, setextra2] = useState(false)\n    const [auth, setauth] = useState(false)\n    const [utility, setutility] = useState(false)\n    const [isOpen, setIsOpen] = useState(props.leftMenu);\n    const [user, setUser] = useState(props.user);\n\n    useEffect(() => {\n        props.toggleLeftmenu(isOpen)\n    }, [isOpen]);\n\n    useEffect(() => {\n        var matchingMenuItem = null\n        var ul = document.getElementById(\"navigation\")\n        var items = ul.getElementsByTagName(\"a\")\n        for (var i = 0; i < items.length; ++i) {\n            if (props.location.pathname === items[i].pathname) {\n                matchingMenuItem = items[i]\n                break\n            }\n        }\n        if (matchingMenuItem) {\n            activateParentDropdown(matchingMenuItem)\n        }\n    });\n\n    useEffect(() => {\n        if(props.leftMenu) {\n            setIsOpen(props.leftMenu);\n        }\n    }, [props.leftMenu]);\n\n    function renderWhatsappSubmenu(){\n        const subItems = parseWhatsapps();\n\n        return <div className={classname(\"dropdown-menu\", {show: extra2})}>\n            {subItems && subItems.map(item =>\n                <li className=\"nav-item\">\n                    <Link to={'#'} onClick={() => copyToClipboard(_encodePhone(item.value))} className=\"dropdown-item\">\n                        <i className=\"uil-mobile-android-alt me-2\"></i>\n                        <span className=\"badge badge-info bg-success\">{item.key}</span> - {item.value}\n                    </Link>\n                </li>\n            )}\n        </div>\n    }\n\n    function parseWhatsapps(){\n        try {\n            const whatsapps = user.whatsapps.split(',');\n            return whatsapps.map((item,index) => {\n                //render alias\n                let phoneAlias = item;\n                let phone = item;\n\n\n                const aliasAndPhone = item.split(':');\n                if(aliasAndPhone){\n                    phoneAlias = aliasAndPhone[0];\n\n                    if(phone.indexOf(\"+57\") === -1){\n                        phone = \"+57\" + phone;\n                    }\n\n                    phone = aliasAndPhone[1];\n                }\n                return {value: phone, key: phoneAlias}\n            });\n        }catch(e){\n           return  [];\n        }\n    }\n\n    const copyToClipboard = (wsNumberEncoded) => {\n        console.log('numberEncoded: ', wsNumberEncoded);\n        try {\n            setCopying(true)\n            var textField = document.createElement('textarea')\n            textField.value = `${process.env.REACT_APP_CATALOGO_URL}/${wsNumberEncoded}`;\n            document.body.appendChild(textField)\n            textField.select();\n            document.execCommand(\"copy\");\n            textField.remove();\n            setTimeout(() => {\n                showMessage.success('Su link ha sido copiado.');\n                setCopying(false);\n            }, 1300);\n        }catch(e){\n            showMessage.success('Su link no pudo ser copiado.');\n        }\n    }\n\n    function renderMenuNoAccess(name, to, className){\n        return <li className=\"nav-item\">\n            <Link className=\"nav-link disabled\" to={to}>\n                <i className={className}></i>\n                {\" \"}{props.t(name)}\n            </Link>\n        </li>\n    }\n\n    function activateParentDropdown(item) {\n        item.classList.add(\"active\")\n        const parent = item.parentElement\n        if (parent) {\n            parent.classList.add(\"active\") // li\n            const parent2 = parent.parentElement\n            parent2.classList.add(\"active\") // li\n            const parent3 = parent2.parentElement\n            if (parent3) {\n                parent3.classList.add(\"active\") // li\n                const parent4 = parent3.parentElement\n                if (parent4) {\n                    parent4.classList.add(\"active\") // li\n                    const parent5 = parent4.parentElement\n                    if (parent5) {\n                        parent5.classList.add(\"active\") // li\n                        const parent6 = parent5.parentElement\n                        if (parent6) {\n                            parent6.classList.add(\"active\") // li\n                        }\n                    }\n                }\n            }\n        }\n        return false\n    }\n\n    return (\n        <React.Fragment>\n            <div className=\"container-fluid\">\n                <div className=\"topnav\">\n                    <nav\n                        className=\"navbar navbar-light navbar-expand-lg topnav-menu\"\n                        id=\"navigation\"\n                    >\n                        <OutsideClickHandler\n                            onOutsideClick={(e) => {\n                                setIsOpen(false);\n                            }}\n                        >\n                        <Collapse\n                            isOpen={isOpen}\n                            className=\"navbar-collapse\"\n                            id=\"topnav-menu-content\"\n                        >\n                            <ul className=\"navbar-nav\">\n                                <li className=\"nav-item\">\n                                    <Link className=\"nav-link\" to=\"/dashboard\">\n                                        <i className=\"uil-home-alt me-2\"></i>\n                                        {\" \"}{props.t(\"Dashboard\")}\n                                    </Link>\n                                </li>\n                                 <li className=\"nav-item dropdown\">\n                                        <Link className=\"nav-link dropdown-toggle arrow-none\" to=\"extra\" onClick={e => {\n                                            e.preventDefault()\n                                            setextra2(!extra2);\n                                        }}>\n                                            <i className=\"uil-cog me-2\"></i>{props.t(\"Whatsapps\")} <div className=\"arrow-down\"></div>\n                                        </Link>\n                                        {renderWhatsappSubmenu()}\n                                    </li>\n\n                                <HasPermissions permission={PERMISSIONS.PRODUCT_SHOW} renderNoAccess={() => renderMenuNoAccess(\"Productos\", \"/products\", \"uil-box me-2\")}>\n                                    <li className=\"nav-item\">\n                                        <Link className=\"nav-link\" to=\"/products\">\n                                            <i className=\"uil-box me-2\"></i>\n                                            {\" \"} {props.t(\"Productos\")}\n                                        </Link>\n                                    </li>\n                                </HasPermissions>\n\n                                <HasPermissions permission={PERMISSIONS.CATEGORY_SHOW}>\n                                    <li className=\"nav-item\">\n                                        <Link className=\"nav-link\" to=\"/categories\" renderNoAccess={() => renderMenuNoAccess(\"Categorias\", \"/categories\", \"uil-box me-2\")}>\n                                            <i className=\"uil-box me-2\"></i>\n                                            {\" \"}{props.t(\"Categorias\")}\n                                        </Link>\n                                    </li>\n                                </HasPermissions>\n\n                                <HasPermissions permission={PERMISSIONS.CUSTOMER_SHOW} renderNoAccess={() => renderMenuNoAccess(\"Cliente\", \"/customers\", \"uil-users-alt me-2\")}>\n                                    <li className=\"nav-item\">\n                                        <Link className=\"nav-link\" to=\"/customers\">\n                                            <i className=\"uil-users-alt me-2\"></i>\n                                            {\" \"}{props.t(\"Clientes\")}\n                                        </Link>\n                                    </li>\n                                </HasPermissions>\n\n                                <HasPermissions permission={PERMISSIONS.ORDER_SHOW} renderNoAccess={() => renderMenuNoAccess(\"Pedidos\", \"/orders\", \"uil-shopping-cart-alt me-2\")}>\n                                    <li className=\"nav-item\">\n                                        <Link className=\"nav-link\" to=\"/orders\">\n                                            <i className=\"uil-shopping-cart-alt me-2\"></i>\n                                            {\" \"}{props.t(\"Pedidos\")}\n                                        </Link>\n                                    </li>\n                                </HasPermissions>\n\n                                <HasPermissions permissions={[PERMISSIONS.OFFICE_SHOW, PERMISSIONS.BILL_SHOW, PERMISSIONS.POSTSALE_SHOW, PERMISSIONS.PAYMENT_SHOW]} renderNoAccess={() => renderMenuNoAccess(\"Servicios\", \"/extra\", \"uil-cog me-2\")}>\n                                    <li className=\"nav-item dropdown\">\n                                        <Link className=\"nav-link dropdown-toggle arrow-none\" to=\"extra\" onClick={e => {\n                                            e.preventDefault()\n                                            setextra(!extra);\n                                        }}>\n                                            <i className=\"uil-cog me-2\"></i>{props.t(\"Servicios\")}\n                                            <div className=\"arrow-down\"></div>\n                                        </Link>\n                                        <div className={classname(\"dropdown-menu\", {show: extra})}>\n                                            <HasPermissions permission={PERMISSIONS.OFFICE_SHOW}>\n                                                <li className=\"nav-item\">\n                                                    <Link to=\"/offices\" className=\"dropdown-item\">\n                                                        <i className=\"uil-truck me-2\"></i>\n                                                        {props.t(\"Despachos\")}\n                                                    </Link>\n                                                </li>\n                                            </HasPermissions>\n                                            <HasPermissions permission={PERMISSIONS.BILL_SHOW}>\n                                                <li className=\"nav-item\">\n                                                    <Link to=\"/bills\" className=\"dropdown-item\">\n                                                        <i className=\"uil-bill me-2\"></i>\n                                                        {props.t(\"Facturación\")}\n                                                    </Link>\n                                                </li>\n                                            </HasPermissions>\n                                            <HasPermissions permission={PERMISSIONS.POSTSALE_SHOW}>\n                                                <li className=\"nav-item\">\n                                                    <Link to=\"/postSales\" className=\"dropdown-item\">\n                                                        <i className=\"uil-shopping-cart-alt me-2\"></i>\n                                                        {props.t(\"Post Venta\")}\n                                                    </Link>\n                                                </li>\n                                            </HasPermissions>\n                                            <HasPermissions permission={PERMISSIONS.PAYMENT_SHOW}>\n                                                <li className=\"nav-item\">\n                                                    <Link to=\"/payments\" className=\"dropdown-item\">\n                                                        <i className=\"uil-money-bill me-2\"></i>\n                                                        {props.t(\"Pagos\")}\n                                                    </Link>\n                                                </li>\n                                            </HasPermissions>\n                                            <HasPermissions permission={PERMISSIONS.DELIVERY_LOCALITY_LIST}>\n                                                <li className=\"nav-item\">\n                                                    <Link to=\"/deliveryLocalities\" className=\"dropdown-item\">\n                                                        <i className=\"uil-map me-2\"></i>\n                                                        {props.t(\"Localidades\")}\n                                                    </Link>\n                                                </li>\n                                            </HasPermissions>\n                                            <HasPermissions permission={PERMISSIONS.WALLET_LIST}>\n                                                <li className=\"nav-item\">\n                                                    <Link className=\"nav-link\" to=\"/wallets\">\n                                                        <i className=\"uil-graph-bar me-2\"></i>\n                                                        {\" \"}{props.t(\"Billetera\")}\n                                                    </Link>\n                                                </li>\n                                            </HasPermissions>\n                                            <HasPermissions permission={PERMISSIONS.ITEMS_LIST}>\n                                                <li className=\"nav-item\">\n                                                    <Link className=\"nav-link\" to=\"/items\">\n                                                        <i className=\"uil-briefcase me-2\"></i>\n                                                        {\" \"}{props.t(\"Items\")}\n                                                    </Link>\n                                                </li>\n                                            </HasPermissions>\n                                            <HasPermissions permission={PERMISSIONS.VCARD_MANAGE}>\n                                                <li className=\"nav-item\">\n                                                    <Link className=\"nav-link\" to=\"/vCard\">\n                                                        <i className=\"uil uil-phone me-2\"></i>\n                                                        {\" \"}{props.t(\"VCard\")}\n                                                    </Link>\n                                                </li>\n                                            </HasPermissions>\n                                        </div>\n                                    </li>\n                                </HasPermissions>\n\n                                <HasPermissions permission={PERMISSIONS.REPORT_SHOW}>\n                                    <li className=\"nav-item\">\n                                        <Link className=\"nav-link\" to=\"/reports\">\n                                            <i className=\"uil-graph-bar me-2\"></i>\n                                            {\" \"}{props.t(\"Reportes\")}\n                                        </Link>\n                                    </li>\n                                </HasPermissions>\n\n                                <HasPermissions permissions={[PERMISSIONS.SECURITY_SHOW, PERMISSIONS.USER_SHOW, PERMISSIONS.LOCALITY_SHOW, PERMISSIONS.TEMPLATE_SHOW, PERMISSIONS.RESOLUTION_SHOW, PERMISSIONS.CONFIG_SHOW]} renderNoAccess={() => renderMenuNoAccess(\"Sistema\", \"/system\", \"uil-cog me-2\")}>\n                                    <li className=\"nav-item dropdown\">\n                                        <Link className=\"nav-link dropdown-toggle arrow-none\" to=\"system\" onClick={e => {\n                                            e.preventDefault()\n                                            setsystem(!system);\n                                        }}>\n                                            <i className=\"uil-cog me-2\"></i>\n                                            {props.t(\"Sistema\")}\n                                            <div className=\"arrow-down\"></div>\n                                        </Link>\n                                        <div className={classname(\"dropdown-menu\", {show: system})}>\n                                            <HasPermissions permissions={[PERMISSIONS.SECURITY_SHOW, PERMISSIONS.USER_SHOW]}>\n                                                <div className=\"dropdown\">\n                                                    <Link to=\"/auth\" className=\"dropdown-item dropdown-toggle arrow-none\" onClick={e => {\n                                                        e.preventDefault();\n                                                        setauth(!auth);\n                                                    }}>\n                                                        {props.t(\"Autenticación\")}{\" \"}\n                                                        <div className=\"arrow-down\"></div>\n                                                    </Link>\n                                                    <div className={classname(\"dropdown-menu\", {show: auth})}>\n                                                        <HasPermissions permission={PERMISSIONS.USER_SHOW}>\n                                                            <Link to=\"/users\" className=\"dropdown-item\">\n                                                                {props.t(\"Usuarios\")}\n                                                            </Link>\n                                                        </HasPermissions>\n                                                        <HasPermissions permission={PERMISSIONS.SECURITY_SHOW}>\n                                                            <Link to=\"/Security\" className=\"dropdown-item\">\n                                                                {props.t(\"Seguridad\")}\n                                                            </Link>\n                                                        </HasPermissions>\n                                                    </div>\n                                                </div>\n                                            </HasPermissions>\n                                            <HasPermissions permission={PERMISSIONS.LOCALITY_SHOW}>\n                                                <div className=\"dropdown\">\n                                                    <Link className=\"dropdown-item dropdown-toggle arrow-none\" to=\"/utility\" onClick={e => {\n                                                        e.preventDefault();\n                                                        setutility(!utility)\n                                                    }}>\n                                                        {props.t(\"Localidades\")}\n                                                        <div className=\"arrow-down\"></div>\n                                                    </Link>\n                                                    <div className={classname(\"dropdown-menu\", {show: utility})}>\n                                                        <Link to=\"/states\" className=\"dropdown-item\">\n                                                            {props.t(\"Estados\")}\n                                                        </Link>\n                                                        <Link to=\"/municipalities\" className=\"dropdown-item\">\n                                                            {props.t(\"Municipios\")}\n                                                        </Link>\n                                                    </div>\n                                                </div>\n                                            </HasPermissions>\n                                            <HasPermissions permission={PERMISSIONS.TEMPLATE_SHOW}>\n                                                <li className=\"nav-item\">\n                                                    <Link to=\"/templates\" className=\"dropdown-item\">\n                                                        {props.t(\"Plantillas\")}\n                                                    </Link>\n                                                </li>\n                                            </HasPermissions>\n                                            <HasPermissions permission={PERMISSIONS.RESOLUTION_SHOW}>\n                                                <li className=\"nav-item\">\n                                                    <Link to=\"/billConfigs\" className=\"dropdown-item\">\n                                                        {props.t(\"Conf. Resoluciones\")}\n                                                    </Link>\n                                                </li>\n                                            </HasPermissions>\n                                            <HasPermissions permission={PERMISSIONS.CONFIG_SHOW}>\n                                                <li className=\"nav-item\">\n                                                    <Link to=\"/configs\" className=\"dropdown-item\">\n                                                        {props.t(\"Configuraciones\")}\n                                                    </Link>\n                                                </li>\n                                            </HasPermissions>\n                                        </div>\n                                    </li>\n                                </HasPermissions>\n\n                            </ul>\n                        </Collapse>\n                        </OutsideClickHandler>\n                    </nav>\n                </div>\n            </div>\n        </React.Fragment>\n    )\n}\n\nNavbar.propTypes = {\n    leftMenu: PropTypes.any,\n    location: PropTypes.any,\n    menuOpen: PropTypes.any,\n    openLeftMenuCallBack: PropTypes.any,\n    t: PropTypes.any,\n}\n\nconst mapStateToProps = state => {\n    const {leftMenu} = state.Layout\n    const {user} = state.Login\n    return {leftMenu, user}\n}\n\nexport default withRouter(\n    connect(mapStateToProps, {\n        toggleLeftmenu\n    })(withTranslation()(Navbar))\n)\n","/Users/ramon/Repositories/lucy-moie/src/components/HorizontalLayout/Header.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/OutsideClickHandler.js",["1448","1449"],"import React, { createRef } from \"react\";\n\nclass OutsideClickHandler extends React.Component {\n    wrapperRef = createRef();\n\n    static defaultProps = {\n        onOutsideClick: () => {}\n    };\n\n    componentDidMount() {\n        document.addEventListener(\"mousedown\", this.handleClickOutside);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener(\"mousedown\", this.handleClickOutside);\n    }\n\n    handleClickOutside = (event) => {\n        if (\n            this.wrapperRef.current &&\n            !this.wrapperRef.current.contains(event.target)\n        ) {\n            //Parametros de configuracion\n            const _mainClassForClose = \"main-content\";\n            const menuTopBar = \"navbar-header\";\n            let _parent = event.target;\n            let _decrement = 10;\n            let _open = true;\n\n            //search and close process\n            while((_parent.parentElement && _decrement > 0) && _open){\n                const _className = _parent.className;\n                if(_className == _mainClassForClose || _className == menuTopBar){\n                    this.props.onOutsideClick();\n                    _open = false;\n                }\n                _parent = _parent.parentElement;\n                _decrement --;\n            }\n        }\n    };\n\n    render() {\n        const { children } = this.props;\n\n        return <div ref={this.wrapperRef}>{children}</div>;\n    }\n}\n\nexport default OutsideClickHandler;\n","/Users/ramon/Repositories/lucy-moie/src/pages/ProductEdit/ProductDetail.js",["1450"],"import React, {useEffect, useState} from \"react\";\nimport {Col, Container, Row} from \"reactstrap\";\nimport Breadcrumb from \"../../components/Common/Breadcrumb\";\nimport {Link, withRouter} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {getProduct} from \"../../store/product/actions\";\nimport {Card} from \"@material-ui/core\";\nimport {STATUS} from \"../../common/constants\";\nimport Images from \"../../components/Common/Image\";\nimport {getImageByQuality, priceFormat} from \"../../common/utils\";\nimport NoDataIndication from \"../../components/Common/NoDataIndication\";\nimport {map} from \"lodash\";\nimport ProductsPendingList from \"./ProductsPending\";\nimport {PERMISSIONS} from \"../../helpers/security_rol\";\nimport HasPermissions from \"../../components/HasPermissions\";\nimport ProductSize from \"./ProductSize\";\n\nconst ProductDetail = (props) => {\n\n    const {getProduct, product} = props;\n    const [productData, setProductData] = useState({_status: STATUS.ACTIVE});\n    const [imgSelected, setImgSelected] = useState(0);\n\n    useEffect(() => {\n        getProduct(props.match.params.id);\n    }, [getProduct]);\n\n    useEffect(() => {\n        if (product.id) {\n            const productImage = product.productImage.length > 0 ? product.productImage : [{}];\n            setProductData({...product, _status: product.status, productImage: productImage});\n        }\n    }, [product]);\n\n    return productData.id ? (\n        <React.Fragment>\n            <div className=\"page-content\">\n                <Container fluid>\n                    <Breadcrumb hasBack path=\"/products\" title={productData.reference} item={\"Producto\"}/>\n\n                    <Card id={'details'} className=\"mb-3\">\n                        <Row>\n                            <Col md={4} className=\"p-3 text-center\">\n                                <div className=\"row p-2\">\n                                    <div className=\"col-3 image-left-panel\">\n                                        <div className={`nav flex-column nav-pills`} id=\"v-pills-tab\" role=\"tablist\" aria-orientation=\"vertical\">\n                                            {map(productData.productImage, (img, key) => (\n                                                <div key={key}\n                                                     className={`cursor-pointer nav-link ${imgSelected === key ? 'custom-active' : ''}`}\n                                                     onClick={() => (setImgSelected(key))}>\n                                                    <Images src={`${getImageByQuality(img, 'small')}`}\n                                                            alt={img.filename}\n                                                            className=\"img-fluid mx-auto d-block tab-img rounded\"/>\n                                                </div>\n                                            ))}\n                                        </div>\n                                    </div>\n\n                                    <div className=\"col-9\">\n                                        <div className=\"tab-content position-relative\" id=\"v-pills-tabContent\">\n                                            {map(productData.productImage, (img, key) => (\n                                                <div key={key} className={`tab-pane fade ${imgSelected === key ? 'show active bg-white border-1' : ''}`} id={`product-${key}`} role=\"tabpanel\">\n                                                    <div className=\"product-img panel-bordered\">\n                                                        <Images src={`${getImageByQuality(img, 'high')}`}\n                                                                alt={img.filename}\n                                                                height={370}\n                                                                className=\"img-fluid mx-auto d-block\"\n                                                                data-zoom={`${img.path}`}/>\n                                                    </div>\n                                                    <div className=\"text-left panel-bordered p-2\">\n                                                        <div className=\"text.muted\"><b>Grupo:</b> {img.group}</div>\n                                                        <div className=\"text.muted\">{img.filename}</div>\n                                                    </div>\n                                                </div>\n                                            ))}\n                                        </div>\n                                    </div>\n                                </div>\n                            </Col>\n                            <Col md={8} className=\"p-3\">\n                                <Row>\n                                    <Col md={12}>\n                                        <h3>Código: <b className=\"text-info\">{productData.reference}</b></h3>\n                                    </Col>\n                                </Row>\n                                <hr/>\n                                <Row>\n                                    <Col xs={10}>\n                                        <h4 className=\"card-title\">Descripción del producto</h4>\n                                    </Col>\n                                    <Col xs={2} className=\"text-right\">\n                                        <HasPermissions permission={PERMISSIONS.PRODUCT_EDIT}>\n                                            <li className=\"list-inline-item\">\n                                                <Link to={`/product/${productData.id}`} className=\"px-2 text-primary\">\n                                                    <i className=\"uil uil-pen font-size-18\"> </i>\n                                                </Link>\n                                            </li>\n                                        </HasPermissions>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col md={12}>\n                                        <ul style={{listStyle: 'none'}}>\n                                            <li><b>Description:</b> <small>{productData.name}</small></li>\n                                            <li><b>Tipo:</b> {productData.description}</li>\n                                            <li><b>Costo:</b> {priceFormat(productData.cost, \"\", true)}</li>\n                                            <li><b>Precio:</b> {priceFormat(productData.price, \"\", true)}</li>\n                                        </ul>\n                                    </Col>\n                                </Row>\n                                <hr/>\n                                <Row>\n                                    <Col md={12}>\n                                        <h4 className=\"card-title\">Especificaciones</h4>\n                                    </Col>\n                                    <Col md={12}>\n                                        <ul style={{listStyle: 'none'}}>\n                                            {productData.size && (\n                                                <li><b>Tipo:</b> {productData.size?.name}</li>\n                                            )}\n                                            <li><b>Categoria:</b> {productData.category?.name}</li>\n                                            <li><b>Material:</b> {productData.material}</li>\n                                            <li><b>Peso (g):</b> {productData.weight}</li>\n                                            <li><b>Proveedor:</b> {productData.provider}</li>\n                                        </ul>\n                                    </Col>\n                                </Row>\n                            </Col>\n                        </Row>\n                    </Card>\n\n                    <ProductsPendingList product={productData}/>\n\n                    <Card className=\"p-3 mt-3 mb-3\">\n                        <Row>\n                            <Col md={12}>\n                                <h4 className=\"card-title text-info\">Inventario</h4>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md={12}>\n                            <ProductSize template={productData.size} product={productData} readonly={true}/>\n                            </Col>\n                        </Row>\n                    </Card>\n                </Container>\n            </div>\n        </React.Fragment>\n    ) : <NoDataIndication/>;\n}\n\nconst mapStateToProps = state => {\n    const {error, product, loading} = state.Product\n    return {error, product, loading}\n}\n\nexport default withRouter(\n    connect(mapStateToProps, {getProduct})(ProductDetail)\n)\n\nProductDetail.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/orderDetail.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Customer/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/CustomerEdit/CustomerDetail.js",["1451","1452","1453"],"import React, {useEffect, useState} from \"react\"\nimport {Col, Container, Row} from \"reactstrap\"\nimport {Card, Tooltip} from \"@material-ui/core\";\nimport {Link, withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport Breadcrumb from \"../../components/Common/Breadcrumb\";\nimport {formatDate, hiddenPhone} from \"../../common/utils\";\nimport NoDataIndication from \"../../components/Common/NoDataIndication\";\nimport {getCustomer} from \"../../store/customer/actions\";\nimport OrderCardList from \"../Orders/OrderCardList\";\nimport {STATUS_COLORS, StatusField} from \"../../components/StatusField\";\nimport {ConverterCustomerStatus} from \"../Customer/customer_status\";\nimport {customerCategoryStats, customerProductStats, hasCustomerOpenOrders} from \"../../helpers/service\";\nimport {COMMENT_ENTITIES, GROUPS} from \"../../common/constants\";\nimport Observations from \"../../components/Common/Observations\";\nimport OrdersPieChart from \"./OrdersPieChart\";\nimport CategoriesPieChart from \"./CategoriesPieChart\";\nimport {PERMISSIONS} from \"../../helpers/security_rol\";\nimport HasPermissions from \"../../components/HasPermissions\";\nimport HasPermissionsFunc from \"../../components/HasPermissionsFunc\";\n\nconst CustomerDetail = (props) => {\n\n    const {onGetCustomer, customer} = props;\n    const [customerData, setCustomerData] = useState({});\n    const [hasPendingOrders, setHasPendingOrders] = useState(false);\n    const [activeTab, setActiveTab] = useState(1);\n    const [productChart, setProductChart] = useState({series: [], labels: []});\n\n    const hasPhonePermission = HasPermissionsFunc([PERMISSIONS.CUSTOMER_PHONE]);\n\n    useEffect(() => {\n        if (props.match.params.id) {\n            onGetCustomer(props.match.params.id);\n            hasCustomerOpenOrders(props.match.params.id).then(resp => setHasPendingOrders(resp && resp.data && resp.data.length > 0));\n            getStats(props.match.params.id);\n        }\n    }, [onGetCustomer]);\n\n    useEffect(() => {\n        if (customer.id) {\n            setCustomerData(customer);\n        }\n    }, [customer]);\n\n    const getStats = (customerId) => {\n        /*customerProductStats(customerId, moment()).then(resp => {\n            const chartData = {series: [], labels:[]};\n            if(resp){\n                resp.forEach(pc => {\n                    chartData.series.push(pc.qty);\n                    chartData.labels.push(pc.name);\n                })\n            }\n            setProductChart(chartData);\n        });*/\n    }\n\n    return customerData.id ? (\n        <React.Fragment>\n            <div className=\"page-content\">\n                <Container fluid className=\"pb-3\">\n                    <Breadcrumb hasBack path=\"/customers\" title={customerData.name} item={\"Cliente\"}/>\n                    <Row className=\"mb-3\">\n                        <Col md={7}>\n                            <Card id={'details'} className=\"mb-3 p-3\">\n\n                                <Row>\n                                    <Col xs={10}>\n                                        <h4 className=\"card-title text-info\">Descripción del cliente</h4>\n                                    </Col>\n                                    <Col md={2} className=\"text-right\">\n                                        <HasPermissions permission={PERMISSIONS.CUSTOMER_EDIT}>\n                                            <li className=\"list-inline-item\">\n                                                <Link to={`/customer/${customerData.id}`} className=\"px-2 text-primary\">\n                                                    <i className=\"uil uil-pen font-size-18\"> </i>\n                                                </Link>\n                                            </li>\n                                        </HasPermissions>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col md={6}>\n                                        <label>Nombre: </label>\n                                        <span className=\"p-1\">{customerData.name}</span>\n                                        {customerData.isMayorist === true && (\n                                            <Tooltip placement=\"bottom\" title=\"Cliente mayorista\" aria-label=\"add\">\n                                                <i className={\"mdi mdi-crown font-size-18 mr-1 text-warning\"}> </i>\n                                            </Tooltip>\n                                        )}\n                                    </Col>\n                                    <Col md={6}>\n                                        <label>Documento: </label>\n                                        <span className=\"p-1\">{customerData.document}</span>\n                                    </Col>\n                                </Row>\n                                <hr/>\n                                <Row>\n                                    <Col xs={12}>\n                                        <h4 className=\"card-title text-info\">Datos de contacto</h4>\n                                    </Col>\n                                    <Col md={6}>\n                                        <label>Email: </label>\n                                        <span className=\"p-1\">{customerData.email}</span>\n                                    </Col>\n                                    <Col md={6}>\n                                        <label>Teléfono Celular: </label>\n                                        <span className=\"p-1\">{hasPhonePermission ? customerData.cellphone : hiddenPhone(customerData.cellphone) }</span>\n                                    </Col>\n                                    <Col md={6}>\n                                        <label>Teléfono Residencial: </label>\n                                        <span className=\"p-1\">{hasPhonePermission ? customerData.phone : hiddenPhone(customerData.phone) }</span>\n                                    </Col>\n                                    <HasPermissions permission={PERMISSIONS.CUSTOMER_WHATSAPP}>\n                                    <Col md={6}>\n                                        <a target=\"_new\" href={`https://wa.me/${customerData.cellphone}`} > <i className=\"fa fa-customer\"></i> Contactar Whatsapp</a>\n                                    </Col>\n                                    </HasPermissions>\n                                </Row>\n                                <hr/>\n                                <Row>\n                                    <Col xs={12}>\n                                        <h4 className=\"card-title text-info\">Localidad</h4>\n                                    </Col>\n                                    <Col md={6}>\n                                        <label>Departamento: </label>\n                                        <span className=\"p-1\">{customerData.state?.name}</span>\n                                    </Col>\n                                    <Col md={6}>\n                                        <label>Municipio: </label>\n                                        <span className=\"p-1\">{customerData.municipality?.name}</span>\n                                    </Col>\n                                </Row>\n                                <hr/>\n                                <Row>\n                                    <Col xs={12} className=\"footer-details\">\n                                        {customerData.hasNotification && (\n                                            <Tooltip placement=\"bottom\" title=\"Recibe notificaciones\" aria-label=\"add\">\n                                                <span className=\"badge rounded-pill bg-info font-size-12 p-2\"><i className=\"fa fa-envelope\"> </i></span>\n                                            </Tooltip>\n                                        )}\n                                        <Tooltip placement=\"bottom\" title=\"Estado\" aria-label=\"add\">\n                                            <StatusField color={customerData.status === true ? STATUS_COLORS.SUCCESS : STATUS_COLORS.DANGER}>\n                                                {ConverterCustomerStatus(customerData.status)}\n                                            </StatusField>\n                                        </Tooltip>\n                                        <Tooltip placement=\"bottom\" title=\"Fecha creación\" aria-label=\"add\">\n                                            <small className=\"badge rounded-pill bg-light p-2\">{formatDate(customerData.createdAt)}</small>\n                                        </Tooltip>\n                                    </Col>\n                                </Row>\n                                {hasPendingOrders && (\n                                    <Row>\n                                        <Col>\n                                            <div className=\"alert alert-warning mb-0 mt-3\"><i className=\"uil uil-exclamation-triangle\"> </i> Este cliente tiene pedidos por completar.</div>\n                                        </Col>\n                                    </Row>\n                                )}\n                            </Card>\n                        </Col>\n                        <Col md={5}>\n                            <Card id={'orders'} className=\"p-3\">\n                                <OrderCardList customerId={customerData.id}/>\n                            </Card>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <Card id={'order-tabs'} className=\"p-3\">\n                                <ul className=\"nav nav-tabs nav-tabs-custom nav-justified\" role=\"tablist\">\n                                    <li className=\"nav-item\">\n                                        <a className={`nav-link ${activeTab === 1 ? 'active' : ''}`} data-bs-toggle=\"tab\" href=\"#tab1\" role=\"tab\" aria-selected=\"false\" onClick={() => setActiveTab(1)}>\n                                            <span className=\"d-block d-sm-none\"><i className=\"fas fa-home\"> </i></span>\n                                            <span className=\"d-none d-sm-block\">Historial de compras</span>\n                                        </a>\n                                    </li>\n                                    <li className=\"nav-item\">\n                                        <a className={`nav-link ${activeTab === 3 ? 'active' : ''}`} data-bs-toggle=\"tab\" href=\"#tab2\" role=\"tab\" aria-selected=\"false\" onClick={() => setActiveTab(3)}>\n                                            <span className=\"d-block d-sm-none\"><i className=\"far fa-user\"> </i></span>\n                                            <span className=\"d-none d-sm-block\">Observaciones</span>\n                                        </a>\n                                    </li>\n                                </ul>\n                                <div className=\"tab-content p-3 text-muted\">\n                                    <div className={`tab-pane ${activeTab === 1 ? 'active' : ''}`} id=\"tab1\" role=\"tabpanel\">\n                                        <Row>\n                                            <Col md={6} className=\"mb-3\">\n                                                <OrdersPieChart customerId={customerData.id}/>\n                                            </Col>\n                                            <Col md={6} className=\"mb-3\">\n                                                <CategoriesPieChart customerId={customerData.id}/>\n                                            </Col>\n                                        </Row>\n                                    </div>\n                                    <div className={`tab-pane ${activeTab === 3 ? 'active' : ''}`} id=\"tab2\" role=\"tabpanel\">\n                                        <Observations\n                                            entitySuggested={GROUPS.CUSTOMER_OBSERVATIONS}\n                                            entity={COMMENT_ENTITIES.CUSTOMER}\n                                            entityId={customerData.id}/>\n                                    </div>\n                                </div>\n                            </Card>\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        </React.Fragment>\n    ) : <NoDataIndication/>;\n}\n\nconst mapStateToProps = state => {\n    const {error, customer, loading} = state.Customer\n    const {fieldOptions} = state.FieldOption\n    return {error, customer, fieldOptions, loading}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    hasCustomerOpenOrders,\n    customerProductStats,\n    customerCategoryStats,\n    onGetCustomer: (id) => dispatch(getCustomer(id)),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(CustomerDetail)\n)\n\nCustomerDetail.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n","/Users/ramon/Repositories/lucy-moie/src/pages/Authentication/Logout.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Authentication/Login.js",["1454","1455","1456","1457"],"import PropTypes from 'prop-types'\nimport React, {useEffect} from \"react\"\n\nimport {Alert, Card, CardBody, Col, Container, Row, Spinner} from \"reactstrap\"\n\n// Redux\nimport {connect} from \"react-redux\"\nimport {Link, withRouter} from \"react-router-dom\"\n\n// availity-reactstrap-validation\nimport {AvField, AvForm} from \"availity-reactstrap-validation\"\n\n//Social Media Imports\n// import TwitterLogin from \"react-twitter-auth\"\n\n// actions\nimport {apiError, loginUser, socialLogin} from \"../../store/actions\"\n\n// import images\nimport logo from \"../../assets/images/logo-dark.png\"\nimport logolight from \"../../assets/images/logo-light.png\"\n\n//Import config\nimport {facebook, google} from \"../../config\"\n\nconst Login = (props) => {\n   // handleValidSubmit\n   const handleValidSubmit = (event, values) => {\n    props.loginUser(values, props.history)\n  }\n\n  const signIn = (res, type) => {\n    const { socialLogin } = props\n    if (type === \"google\" && res) {\n      const postData = {\n        name: res.profileObj.name,\n        email: res.profileObj.email,\n        token: res.tokenObj.access_token,\n        idToken: res.tokenId,\n      }\n      socialLogin(postData, props.history, type)\n    } else if (type === \"facebook\" && res) {\n      const postData = {\n        name: res.name,\n        email: res.email,\n        token: res.accessToken,\n        idToken: res.tokenId,\n      }\n      socialLogin(postData, props.history, type)\n    }\n  }\n\n  //handleGoogleLoginResponse\n  const googleResponse = response => {\n    signIn(response, \"google\")\n  }\n\n  //handleTwitterLoginResponse\n  // const twitterResponse = e => {}\n\n  //handleFacebookLoginResponse\n  const facebookResponse = response => {\n    signIn(response, \"facebook\")\n  }\n  const removeAttr = attr => {\n    if(document.body.hasAttribute(attr)){\n      document.body.removeAttribute(attr)\n    }\n  }\n\n  useEffect(() => {\n    document.body.className = \"authentication-bg\";\n    removeAttr('data-layout');\n    removeAttr('data-layout-size');\n\n    // remove classname when component will unmount\n    return function cleanup() {\n      document.body.className = \"\";\n    };\n  });\n\n  return (\n    <React.Fragment>\n      <div className=\"home-btn d-none d-sm-block\">\n        <Link to=\"/\" className=\"text-dark\">\n          <i className=\"mdi mdi-home-variant h2\"></i>\n        </Link>\n      </div>\n      <div className=\"account-pages my-5 pt-sm-5\">\n        <Container>\n          <Row>\n            <Col lg={12}>\n              <div className=\"text-center\">\n                <Link to=\"/\" className=\"mb-5 d-block auth-logo\">\n                  <img src={logo} alt=\"\" height=\"80\" className=\"logo logo-dark\" />\n                  <img src={logolight} alt=\"\" height=\"80\" className=\"logo logo-light\" />\n                </Link>\n              </div>\n            </Col>\n          </Row>\n          <Row className=\"align-items-center justify-content-center\">\n            <Col md={8} lg={6} xl={5}>\n              <Card>\n\n                <CardBody className=\"p-4\">\n                  <div className=\"text-center mt-2\">\n                    <h5 className=\"text-primary\">Bienvenido!</h5>\n                    <p className=\"text-muted\">Inicia sesión con Lucy Moie.</p>\n                  </div>\n                  <div className=\"p-2 mt-4\">\n                    <AvForm\n                      className=\"form-horizontal\"\n                      onValidSubmit={(e, v) => {\n                        handleValidSubmit(e, v)\n                      }}\n                    >\n                      {props.error && typeof props.error === \"string\" ? (\n                        <Alert color=\"danger\">{props.error}</Alert>\n                      ) : null}\n\n                      <div className=\"mb-3\">\n                        <AvField\n                          name=\"username\"\n                          label=\"Nombre de Usuario\"\n                          value=\"\"\n                          className=\"form-control\"\n                          placeholder=\"Login\"\n                          type=\"text\"\n                          required\n                        />\n                      </div>\n\n                      <div className=\"mb-3\">\n                        <AvField\n                          name=\"password\"\n                          label=\"Contraseña\"\n                          value=\"\"\n                          type=\"password\"\n                          required\n                          placeholder=\"*********\"\n                        />\n                      </div>\n\n                      <div className=\"mt-3\">\n                        <button\n                          className=\"btn btn-primary w-100 waves-effect waves-light\"\n                          type=\"submit\"\n                        >\n                          {props.loading && <Spinner size=\"sm\" className=\"m-1\" color=\"white\"/>}\n                          Log In\n                        </button>\n                      </div>\n\n                    </AvForm>\n\n                  </div>\n                </CardBody>\n              </Card>\n              <div className=\"mt-5 text-center\">\n                <p>© {new Date().getFullYear()} Lucy Modas Web <i\n                  className=\"mdi mdi-heart text-danger\"></i> Moie V{process.env.REACT_APP_VERSION}\n                        </p>\n              </div>\n            </Col>\n          </Row>\n\n        </Container>\n      </div>\n    </React.Fragment>\n  )\n}\n\nconst mapStateToProps = state => {\n  const { error, loading } = state.Login\n  return { error, loading }\n}\n\nexport default withRouter(\n  connect(mapStateToProps, { loginUser, apiError, socialLogin })(Login)\n)\n\nLogin.propTypes = {\n  error: PropTypes.any,\n  history: PropTypes.object,\n  loginUser: PropTypes.func,\n  socialLogin: PropTypes.func\n}\n","/Users/ramon/Repositories/lucy-moie/src/pages/Dashboard/index.js",["1458","1459","1460","1461","1462","1463"],"import React, {useEffect, useState} from \"react\"\nimport {Col, Container, Row} from \"reactstrap\"\nimport {Breadcrumbs} from \"@material-ui/core\";\nimport MiniWidget from \"./mini-widget\";\nimport TopVendors from \"./top-vendors\";\nimport LatestTransaction from \"./latest-transaction\";\nimport Inventory from \"./inventory\";\nimport {getOrders} from \"../../store/order/actions\";\nimport {connect} from \"react-redux\";\nimport {getReportDashbord} from \"../../store/reports/actions\";\nimport OrderStatusStats from \"./order-status-stats\";\nimport EventItems from \"./eventItems\";\n\nconst series1 = [{\n    data: [25, 66, 41, 89, 63, 25, 44, 20, 36, 40, 54]\n}]\n\nconst options1 = {\n    fill: {\n        colors: ['#5b73e8']\n    },\n    chart: {\n        width: 70,\n        sparkline: {\n            enabled: !0\n        }\n    },\n    plotOptions: {\n        bar: {\n            columnWidth: '50%'\n        }\n    },\n    labels: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\n    xaxis: {\n        crosshairs: {\n            width: 1\n        },\n    },\n    tooltip: {\n        enabled: false\n    }\n};\n\nconst series2 = [70]\n\nconst options2 = {\n    fill: {\n        colors: ['#34c38f']\n    },\n    chart: {\n        sparkline: {\n            enabled: !0\n        }\n    },\n    dataLabels: {\n        enabled: !1\n    },\n    plotOptions: {\n        radialBar: {\n            hollow: {\n                margin: 0,\n                size: '60%'\n            },\n            track: {\n                margin: 0\n            },\n            dataLabels: {\n                show: !1\n            }\n        }\n    }\n};\n\nconst series3 = [55]\n\nconst options3 = {\n    fill: {\n        colors: ['#5b73e8']\n    },\n    chart: {\n        sparkline: {\n            enabled: !0\n        }\n    },\n    dataLabels: {\n        enabled: !1\n    },\n    plotOptions: {\n        radialBar: {\n            hollow: {\n                margin: 0,\n                size: '60%'\n            },\n            track: {\n                margin: 0\n            },\n            dataLabels: {\n                show: !1\n            }\n        }\n    }\n};\n\nconst options4 = {\n\n    fill: {\n        colors: ['#f1b44c']\n    },\n    chart: {\n        width: 70,\n        sparkline: {\n            enabled: !0\n        }\n    },\n    plotOptions: {\n        bar: {\n            columnWidth: '50%'\n        }\n    },\n    labels: [\"Ayer\", \"Hoy\"],\n    xaxis: {\n        crosshairs: {\n            width: 1\n        },\n    },\n    tooltip: {\n        enabled: false,\n        fixed: {\n            enabled: 0\n        },\n        x: {\n            show: 0\n        },\n        y: {\n            title: {\n                formatter: function (seriesName) {\n                    return ''\n                }\n            }\n        },\n        marker: {\n            show: 0\n        }\n    }\n};\n\nconst Dashboard = (props) => {\n\n    const {dashboard, onGetDashboard, loading} = props;\n\n    const [reports, setReports] = useState([]);\n\n    useEffect(() => {\n        onGetDashboard()\n    }, [onGetDashboard])\n\n    useEffect(() => {\n\n        if(dashboard && dashboard.products) {\n\n            //Productos\n            const products = {\n                id: 1,\n                icon: \"mdi mdi-clock-five-time\",\n                title: \"Productos\",\n                value: parseInt(dashboard.products.reserved || 0) + parseInt(dashboard.products.available || 0),\n                prefix: \"\",\n                suffix: \"\",\n                decimal: 0,\n                charttype: \"bar\",\n                chartheight: 40,\n                chartwidth: 70,\n                badgeValue: parseInt(dashboard.products.available || 0), //disponibles\n                color: \"success\",\n                desc: \"disponibles\",\n                badgeValue2: parseInt(dashboard.products.reserved || 0), //reservados\n                color2: \"danger\",\n                desc2: \"reservado\",\n                series: series1,\n                options: options1,\n\n            };\n\n            //Ventas diarias\n            let secondaryDaily = parseFloat(dashboard.orders.statDailySecond || 0) || 0;\n            const primaryDaily = parseFloat(dashboard.orders.statDailyFirst || 0) || 0;\n            let rate = 0;\n            if(secondaryDaily > 0) {\n                rate = (((primaryDaily - secondaryDaily) * 100) / secondaryDaily);\n            }\n\n            const ventasDiarias = {\n                id: 2,\n                icon: rate >= 0 ? \"mdi mdi-arrow-up-bold\" : \"mdi mdi-arrow-down-bold\",\n                title: \"Ventas diarias\",\n                value: dashboard.orders.statDailyFirst,\n                decimal: 2,\n                charttype: \"text\",\n                chartheight: 45,\n                chartwidth: 45,\n                prefix: \"$\",\n                suffix: \"\",\n                badgeValue: rate.toFixed(2) + \"%\",\n                color: rate >= 0 ? \"success\" : \"danger\",\n                desc: \"desde ayer\",\n                series: dashboard.orders.statDailyQtyFirst,\n                options: options2,\n            };\n\n            //Ventas semanales\n            let secondaryWeekly = parseFloat(dashboard.orders.statWeeklySecond || 0) || 0;\n            const primaryWeekly = parseFloat(dashboard.orders.statWeeklyFirst || 0) || 0;\n            let rateWeek = 0;\n            if(secondaryWeekly > 0) {\n                rateWeek = (((primaryWeekly - secondaryWeekly) * 100) / secondaryWeekly);\n            }\n\n            const ventasSemanales = {\n                id: 3,\n                icon: rateWeek >= 0 ? \"mdi mdi-arrow-up-bold\" : \"mdi mdi-arrow-down-bold\",\n                title: \"Ventas semana\",\n                value: dashboard.orders.statWeeklyFirst,\n                decimal: 2,\n                charttype: \"text\",\n                chartheight: 45,\n                chartwidth: 45,\n                prefix: \"$\",\n                suffix: \"\",\n                badgeValue: rateWeek.toFixed(2) + \"%\",\n                color: rateWeek >= 0 ? \"success\" : \"danger\",\n                desc: \"semana pasada\",\n                series: dashboard.orders.statWeeklyQtyFirst,\n                options: options2,\n            };\n\n            const customers = {\n                id: 4,\n                icon: \"uil-users-alt\",\n                title: \"Clientes\",\n                value: dashboard.customers.registers,\n                decimal: 0,\n                charttype: \"line\",\n                chartheight: 40,\n                chartwidth: 70,\n                badgeValue: dashboard.customers.registersToday,\n                color: dashboard.customers.registersToday > 0 ? \"success\" : \"danger\",\n                desc: \"registrados hoy\",\n                series: [{\n                    data: [25, 66, 200]\n                }],\n                options: options4,\n            };\n\n            setReports([\n                {...products},\n                {...ventasDiarias},\n                {...ventasSemanales},\n                {...customers}\n            ]);\n        }\n\n    }, [dashboard]);\n\n  return (\n    <React.Fragment>\n      <div className=\"page-content\">\n        <Container fluid>\n            <Breadcrumbs title=\"Lucy Moie\" item=\"Dashboard\" />\n            <Row>\n                {reports && reports.length > 0 && (\n                    <MiniWidget reports={reports} />\n                )}\n            </Row>\n            <Row>\n                <Col xl={4}>\n                <Inventory/>\n                <OrderStatusStats/>\n                <EventItems/>\n                </Col>\n                <Col xl={8}>\n                    <LatestTransaction />\n                </Col>\n            </Row>\n        </Container>\n      </div>\n    </React.Fragment>\n  )\n}\n\nconst mapStateToProps = state => {\n    const {dashboard, loading} = state.Report;\n    return {dashboard, loading};\n}\nconst mapDispatchToProps = dispatch => ({\n    onGetDashboard: () => dispatch(getReportDashbord()),\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Dashboard);\n","/Users/ramon/Repositories/lucy-moie/src/pages/commons/404.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Authentication/Register.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Authentication/ForgetPassword.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Authentication/user-profile.js",["1464"],"import PropTypes from 'prop-types'\nimport React, {useEffect, useState} from \"react\"\nimport {Container,} from \"reactstrap\"\n\n// Redux\nimport {connect} from \"react-redux\"\nimport {withRouter} from \"react-router-dom\"\n\n//Import Breadcrumb\nimport Breadcrumb from \"../../components/Common/Breadcrumb\"\n// actions\nimport {changeProfilePicture, resetChangeProfilePicture} from \"../../store/actions\"\nimport {getImagePath} from \"../../common/utils\";\nimport DropZoneIcon from \"../../components/Common/DropZoneIcon\";\nimport Images from \"../../components/Common/Image\";\nimport {Tooltip} from \"@material-ui/core\";\n\nconst UserProfile = props => {\n    const {user, onChangeProfilePicture, loading, success} = props;\n\n    const [photo, setPhoto] = useState(getImagePath(user?.photo));\n    const [changePhoto, setChangePhoto] = useState(false);\n\n    useEffect(() => {\n        if (success) {\n            setChangePhoto(false);\n        }\n    }, [success])\n\n    const changeProfilePicture = () => {\n        onChangeProfilePicture({photo: photo}, props.history)\n    }\n\n    return (\n        <React.Fragment>\n            <div className=\"page-content\">\n                <Container fluid>\n                    <Breadcrumb title=\"Mi perfil\" item={`${user.name} ${user.lastname}`}/>\n\n                    <div className=\"row mb-4\">\n                        <div className=\"col-md-offset-4 col-md-4\">\n                            <div className=\"card h-100\">\n                                <div className=\"card-body\">\n                                    <div className=\"text-center\">\n                                        <div>\n                                            <div>\n                                                <Images className=\"avatar-lg rounded-circle img-thumbnail\"\n                                                        alt={'profile image'}\n                                                        src={photo}\n                                                />\n                                            </div>\n                                            <div className=\"p-2\">\n                                                <div className=\" btn btn-primary btn-sm\">\n                                                    <DropZoneIcon\n                                                        maxFiles={1}\n                                                        mode=\"icon\"\n                                                        iconClass=\"fa fa-pencil-alt\"\n                                                        tooltip=\"Cambiar imagen\"\n                                                        onDrop={(file) => {\n                                                            setPhoto(file.base64);\n                                                            setChangePhoto(true);\n                                                        }}\n                                                    />\n                                                </div>\n\n                                                {changePhoto && (\n                                                    <Tooltip placement=\"bottom\" title=\"Guardar\" aria-label=\"add\">\n                                                        <button type={\"button\"} className=\"btn btn-primary btn-sm\" style={{marginLeft: '5px'}} onClick={() => {\n                                                            changeProfilePicture()\n                                                        }}>\n                                                            <i className=\"fa fa-save\"></i>\n                                                        </button>\n                                                    </Tooltip>\n                                                )}\n                                            </div>\n\n                                        </div>\n                                        <h5 className=\"mt-3 mb-1\">{`${user.name} ${user.lastname}`}</h5>\n                                        <p className=\"text-muted\">{user.email}</p>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        {/*<div className=\"col-xl-8\">\n                            <div className=\"card mb-0\">\n                                <ul className=\"nav nav-tabs nav-tabs-custom nav-justified\" role=\"tablist\">\n                                    <li className=\"nav-item\">\n                                        <a className=\"nav-link active\" data-bs-toggle=\"tab\" role=\"tab\">\n                                            <i className=\"uil-shopping-cart-alt me-2 font-size-20\"> </i>\n                                            <span className=\"d-none d-sm-block\">Mis Pedidos</span>\n                                        </a>\n                                    </li>\n                                    <li className=\"nav-item\">\n                                        <a className=\"nav-link\" data-bs-toggle=\"tab\" href=\"#tasks\" role=\"tab\">\n                                            <i className=\"uil uil-clipboard-notes font-size-20\"></i>\n                                            <span className=\"d-none d-sm-block\">Tasks</span>\n                                        </a>\n                                    </li>\n                                    <li className=\"nav-item\">\n                                        <a className=\"nav-link\" data-bs-toggle=\"tab\" href=\"#messages\" role=\"tab\">\n                                            <i className=\"uil uil-envelope-alt font-size-20\"></i>\n                                            <span className=\"d-none d-sm-block\">Messages</span>\n                                        </a>\n                                    </li>\n                                </ul>\n                                <div className=\"tab-content p-4\">\n                                    <div className=\"tab-pane active\" id=\"orders\" role=\"tabpanel\">\n                                        Lista de pedidos\n                                    </div>\n                                    <div className=\"tab-pane\" id=\"tasks\" role=\"tabpanel\">\n                                        <div>\n                                            task\n                                        </div>\n                                    </div>\n                                    <div className=\"tab-pane\" id=\"messages\" role=\"tabpanel\">\n                                        messages\n                                    </div>\n                                </div>\n                            </div>\n                        </div>*/}\n                    </div>\n\n                </Container>\n            </div>\n\n\n        </React.Fragment>\n    )\n}\n\nUserProfile.propTypes = {\n    editProfile: PropTypes.func,\n    error: PropTypes.any,\n    success: PropTypes.any\n}\n\nconst mapStateToProps = state => {\n\n    const {profileImage} = state.Profile\n    const {user} = state.Login\n    return {user, profileResponse: profileImage.data, error: profileImage.error, success: profileImage.success, loading: profileImage.loading}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onChangeProfilePicture: (data) => dispatch(changeProfilePicture(data)),\n    onResetChangeProfilePicture: () => dispatch(resetChangeProfilePicture()),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(UserProfile)\n)\n","/Users/ramon/Repositories/lucy-moie/src/pages/PostSaleEdit/PostSaleDetail.js",["1465","1466"],"import React, {useEffect} from \"react\"\nimport {Col, Container, Row} from \"reactstrap\"\nimport {Button, Card, Tooltip} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport Breadcrumb from \"../../components/Common/Breadcrumb\";\nimport {formatDate, priceFormat} from \"../../common/utils\";\nimport NoDataIndication from \"../../components/Common/NoDataIndication\";\nimport {StatusField} from \"../../components/StatusField\";\nimport {COMMENT_ENTITIES, GROUPS, ORDER_STATUS} from \"../../common/constants\";\nimport Observations from \"../../components/Common/Observations\";\nimport {getOrder, refreshOrderDelivery, syncOrder} from \"../../store/order/actions\";\nimport {PERMISSIONS} from \"../../helpers/security_rol\";\nimport NoAccess from \"../../components/Common/NoAccess\";\nimport HasPermissions from \"../../components/HasPermissions\";\nimport {ConfirmationModalAction} from \"../../components/Modal/ConfirmationModal\";\nimport {markOrderReceived, showResponseMessage} from \"../../helpers/service\";\n\nconst PostSaleDetail = (props) => {\n\n    const {onGetOrder, refresh, order} = props;\n\n    useEffect(() => {\n        if (props.match.params.id) {\n            onGetOrder(props.match.params.id);\n        }\n    }, [onGetOrder, refresh]);\n\n    const updateDeliveryStatus = () => {\n        props.onUpdateSync(order.id, {sync: !order.orderDelivery.sync})\n    }\n\n    const refreshDeliveryStatus = () => {\n        props.onRefreshOrderDelivery(order.id);\n    }\n\n    const onMarkReceived = async () => {\n        ConfirmationModalAction({\n            title: 'Confirmación',\n            description: '¿Seguro desea marcar este pedido como recibido?',\n            id: '_OrderModal',\n            onConfirm: () => {\n                markOrderReceived(order.id).then(resp => {\n                    onGetOrder(props.match.params.id);\n                    showResponseMessage({status: 200}, \"PostVenta actualizado\");\n                });\n            }\n        });\n    }\n\n    return order.id ? (\n        <React.Fragment>\n            <div className=\"page-content\">\n                <Container fluid className=\"pb-3\">\n                    <Breadcrumb hasBack path=\"/postSales\" title={order.name} item={`Post Venta #${order.id}`}/>\n                    <HasPermissions permissions={[PERMISSIONS.POSTSALE_LIST]} renderNoAccess={() => <NoAccess/>}>\n                        <Row className=\"mb-2\">\n                            <Col md={12}>\n                                <div className={\"mb-3 float-md-start\"}>\n                                    <small className=\"badge rounded-pill bg-soft-info font-size-14 mr-5 p-2\">Operador: {order?.user?.name}</small>\n                                </div>\n                                <div className={\"mb-3 float-md-end\"}>\n                                    <div className=\"button-items\">\n\n                                        <Tooltip placement=\"bottom\" title={order.orderDelivery.sync ? 'Desactivar' : 'Activar'} aria-label=\"add\">\n                                            <button type=\"button\" color=\"primary\" className=\"btn-sm btn btn-outline-info waves-effect waves-light\" onClick={() => updateDeliveryStatus(order)}>\n                                                <i className={`mdi mdi-${order.orderDelivery.sync ? 'delete text-danger' : 'check text-success'}`}> </i>\n                                            </button>\n                                        </Tooltip>\n                                        <Tooltip placement=\"bottom\" title=\"Refrescar\" aria-label=\"add\">\n                                            <button type=\"button\" color=\"primary\" className=\"btn-sm btn btn-outline-info waves-effect waves-light\" onClick={() => refreshDeliveryStatus(order.id)}>\n                                                <i className={\"mdi mdi-refresh\"}> </i>\n                                            </button>\n                                        </Tooltip>\n                                        {!order.manualReceived && (\n                                            <HasPermissions permission={PERMISSIONS.POSTSALE_RECEIVED}>\n                                                <Tooltip placement=\"bottom\" title=\"Marcar Recibido\" aria-label=\"add\">\n                                                    <button type=\"button\" color=\"primary\" className=\"btn-sm btn btn-outline-info waves-effect waves-light\" onClick={() => onMarkReceived()}>\n                                                        <i className={\"mdi mdi-check\"}> </i>\n                                                    </button>\n                                                </Tooltip>\n                                            </HasPermissions>\n                                        )}\n                                    </div>\n                                </div>\n                            </Col>\n                        </Row>\n\n                        <Card id={'details'} className=\"mb-3 p-3\">\n                            <Row>\n                                <Col md={12}>\n                                    <h4 className=\"card-title text-info\">Información básica</h4>\n                                    <hr/>\n                                </Col>\n                                <Col md={12}>\n                                    <Row>\n                                        <Col md={6}>\n                                            <label># Pedido: </label>\n                                            <span className=\"p-1\">{order.id}</span>\n                                        </Col>\n                                        <Col md={6}>\n                                            <label>Destino: </label>\n                                            <span className=\"p-1\">{order.orderDelivery.deliveryLocality.name}</span>\n                                        </Col>\n                                    </Row>\n                                    <Row>\n                                        <Col md={6}>\n                                            <label>Cliente: </label>\n                                            <span className=\"p-1\">{order.customer.name}</span>\n                                            {order.customer.isMayorist === true && (\n                                                <Tooltip placement=\"bottom\" title=\"Cliente mayorista\" aria-label=\"add\">\n                                                    <i className={\"mdi mdi-crown font-size-18 mr-1 text-warning\"}> </i>\n                                                </Tooltip>\n                                            )}\n                                        </Col>\n                                        <Col md={6}>\n                                            <label>Estado del pedido: &nbsp;</label>\n                                            <StatusField color={ORDER_STATUS[order.status]?.color}>\n                                                {ORDER_STATUS[order.status]?.name}\n                                            </StatusField>\n                                        </Col>\n                                    </Row>\n                                    <Row>\n                                        <Col md={6}>\n                                            <label>Monto del pedido: </label>\n                                            <span className=\"p-1\">{priceFormat(order.totalAmount)}</span>\n                                        </Col>\n                                        <Col md={6}>\n                                            <label>Metodo de envio: </label>\n                                            <span className=\"p-1\">{order.deliveryMethod.name}</span>\n                                        </Col>\n                                    </Row>\n                                    <Row>\n                                        <Col md={6}>\n                                            <label>Guia: </label>\n                                            <span className=\"p-1\">{order.orderDelivery.tracking}</span>\n                                        </Col>\n                                        <Col md={6}>\n                                            <label>Fecha de envío: </label>\n                                            <span className=\"p-1\">{formatDate(order.orderDelivery.deliveryDate || order.createdAt)}</span>\n                                        </Col>\n                                    </Row>\n                                    <Row>\n                                        <Col md={6}>\n                                            <label>Activo: </label>\n                                            <span className=\"p-1\">{order.orderDelivery.sync ? 'SI' : 'NO'}</span>\n                                        </Col>\n                                    </Row>\n                                </Col>\n                            </Row>\n                        </Card>\n\n                        <Card id={'tracking'} className=\"mb-3 p-3\">\n                            <Row>\n                                <Col md={12}>\n                                    <h4 className=\"card-title text-info\">Rastreo del paquete</h4>\n                                    <hr/>\n                                </Col>\n                                <Col md={12}>\n                                    <Row>\n                                        <Col md={6}>\n                                            <label>Estatus del envío: </label>\n                                            <span className=\"p-1\">{order.orderDelivery.deliveryStatus || ''}</span>\n                                            {order.manualReceived && (<span className={\"badge rounded-pill p-2  bg-soft-success\"}><i className=\"mdi mdi-check\"></i> Recibido</span>) }\n                                        </Col>\n                                        <Col md={6}>\n                                            <label>Fecha del estatus del envío: </label>\n                                            <span className=\"p-1\">{order.orderDelivery.deliveryStatusDate ? formatDate(order.orderDelivery.deliveryStatusDate) : null}</span>\n                                        </Col>\n                                    </Row>\n                                    <Row>\n                                        <Col md={12}>\n                                            <label>Ubicación estatus del envío: </label>\n                                            <span className=\"p-1\">{order.orderDelivery.deliveryCurrentLocality}</span>\n                                        </Col>\n                                    </Row>\n                                </Col>\n                            </Row>\n                        </Card>\n\n                        <Observations\n                            entitySuggested={GROUPS.ORDER_OBSERVATIONS}\n                            entity={COMMENT_ENTITIES.ORDER}\n                            entityId={order.id}/>\n                    </HasPermissions>\n                </Container>\n            </div>\n        </React.Fragment>\n    ) : <NoDataIndication/>;\n}\n\nconst mapStateToProps = state => {\n    const {error, order, refresh, loading} = state.Order;\n    return {error, order, refresh, loading}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGetOrder: (id) => dispatch(getOrder(id)),\n    onUpdateSync: (id, payload) => dispatch(syncOrder(id,payload)),\n    onRefreshOrderDelivery: (id) => dispatch(refreshOrderDelivery(id))\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(PostSaleDetail)\n)\n\nPostSaleDetail.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n","/Users/ramon/Repositories/lucy-moie/src/pages/BillEdit/BillDetail.js",["1467","1468","1469","1470","1471","1472","1473"],"import React, {useEffect, useState} from \"react\"\nimport {Col, Container, Row} from \"reactstrap\"\nimport {Card, Tooltip} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport Breadcrumb from \"../../components/Common/Breadcrumb\";\nimport {formatDate} from \"../../common/utils\";\nimport NoDataIndication from \"../../components/Common/NoDataIndication\";\nimport {createCreditNote, getBill, sendInvoice, updateBill} from \"../../store/bill/actions\";\nimport {ConfirmationModalAction} from \"../../components/Modal/ConfirmationModal\";\nimport {BILL_STATUS, CHARGE_ON_DELIVERY, DELIVERY_METHODS_IDS, ORDERS_ENUM} from \"../../common/constants\";\nimport {PERMISSIONS} from \"../../helpers/security_rol\";\nimport NoAccess from \"../../components/Common/NoAccess\";\nimport HasPermissions from \"../../components/HasPermissions\";\nimport Conditionals from \"../../common/conditionals\";\nimport OrderList from \"../Orders/orderList\";\nimport CustomModal from \"../../components/Modal/CommosModal\";\nimport HasPermissionsFunc from \"../../components/HasPermissionsFunc\";\nimport moment from \"moment\";\n\nconst BillDetail = (props) => {\n\n    const {onGetBill, refresh, bill} = props;\n\n    const [activeTab, setActiveTab] = useState(1);\n\n    const [openOrdersModal, setOpenOrdersModal] = useState(false);\n    const [orderListConditions, setOrderListConditions] = useState([]);\n    const hasAssociateOrderPermission = HasPermissionsFunc([PERMISSIONS.BILL_CHANGE_ORDER]);\n\n\n    useEffect(() => {\n        if (props.match.params.id) {\n            onGetBill(props.match.params.id);\n        }\n    }, [onGetBill, refresh]);\n\n    const createCreditNote = () => {\n        ConfirmationModalAction({\n            title: `¿Está seguro de generar una nota de crédito para la factura # ${bill.id}?`,\n            description: 'Esta acción no puede revertirse.',\n            id: '_creditNoteModal',\n            onConfirm: () => props.onCreateCreditNote(bill.id)\n        });\n    }\n\n    const createInvoice = () => {\n        ConfirmationModalAction({\n            title: `¿Está seguro de reenviar esta factura # ${bill.id}?`,\n            description: 'Esta acción no puede revertirse.',\n            id: '_creditInvoiceModal',\n            onConfirm: () => props.onCreateInvoice(bill.id)\n        });\n    }\n\n    const addOrdersManager = (billId, type) => {\n        if(!type){\n            addOrders(billId);\n        }\n        if(type === 'SERVIENTREGA'){\n            addOrdersServiEntrega(billId);\n        }\n        if(type === 'PAYU'){\n            addOrdersPayu(billId);\n        }\n    }\n\n    const addOrders = (billId) => {\n        const conditions = new Conditionals.Condition;\n        conditions.add('bill.id', '', Conditionals.OPERATORS.NULL);\n        conditions.add('office', '', Conditionals.OPERATORS.NOT_NULL);\n        conditions.add('createdAt', '2022-01-01T00:00:00.000Z', Conditionals.OPERATORS.GREATER_THAN_OR_EQUAL);\n        conditions.add('deliveryMethod', DELIVERY_METHODS_IDS.INTERRAPIDISIMO, Conditionals.OPERATORS.EQUAL);\n        conditions.add('orderDelivery.deliveryType', CHARGE_ON_DELIVERY, Conditionals.OPERATORS.EQUAL);\n        conditions.add('status', [ORDERS_ENUM.SENT, ORDERS_ENUM.FINISHED].join(\"::\"), Conditionals.OPERATORS.IN);\n\n        setOrderListConditions(conditions.condition);\n        setOpenOrdersModal(true);\n    };\n\n    const addOrdersPayu = (billId) => {\n        const conditions = new Conditionals.Condition;\n        conditions.add('bill.id', '', Conditionals.OPERATORS.NULL);\n        conditions.add('office', '', Conditionals.OPERATORS.NOT_NULL);\n        conditions.add('createdAt', '2022-01-01T00:00:00.000Z', Conditionals.OPERATORS.GREATER_THAN_OR_EQUAL);\n        conditions.add('deliveryMethod', DELIVERY_METHODS_IDS.PAYU, Conditionals.OPERATORS.EQUAL);\n        conditions.add('status', [ORDERS_ENUM.SENT, ORDERS_ENUM.FINISHED].join(\"::\"), Conditionals.OPERATORS.IN);\n\n        setOrderListConditions(conditions.condition);\n        setOpenOrdersModal(true);\n    };\n\n    const addOrdersServiEntrega = (billId) => {\n        const conditions = new Conditionals.Condition;\n        conditions.add('bill.id', '', Conditionals.OPERATORS.NULL);\n        conditions.add('office', '', Conditionals.OPERATORS.NOT_NULL);\n        conditions.add('createdAt', '2023-05-20T00:00:00.000Z', Conditionals.OPERATORS.GREATER_THAN_OR_EQUAL);\n        conditions.add('deliveryMethod', DELIVERY_METHODS_IDS.SERVIENTREGA, Conditionals.OPERATORS.EQUAL);\n        conditions.add('orderDelivery.deliveryType', CHARGE_ON_DELIVERY, Conditionals.OPERATORS.EQUAL);\n        conditions.add('status', [ORDERS_ENUM.SENT, ORDERS_ENUM.FINISHED].join(\"::\"), Conditionals.OPERATORS.IN);\n\n        setOrderListConditions(conditions.condition);\n        setOpenOrdersModal(true);\n    };\n\n    const associateNewOrder = (type) => {\n        ConfirmationModalAction({\n            title: `¿Está seguro de modificar y asociar un nuevo pedido a esta factura # ${bill.id}?`,\n            description: 'Esta acción no puede revertirse.',\n            id: '_associateNewOrder',\n            onConfirm: () => addOrdersManager(bill.id, type)\n        });\n    }\n\n    const formatLog = (_log) => {\n        if (_log) {\n            const replaceRegex = /Paso+/g;\n            _log = _log.replace(replaceRegex, \"<br /><br />Paso\");\n            return _log;\n        } else {\n            return \"No hay registros al momento\";\n\n        }\n    }\n\n    const canCancel = () => {\n        const isSent = (bill.status == BILL_STATUS.SENT && bill.creditNote == null);\n        const isFailedCreditNote = (bill?.creditNote != null && bill?.creditNote?.status != 1);\n        return isSent || isFailedCreditNote;\n    }\n\n    const canRetry = () => {\n        const isNotSent = bill.status !== BILL_STATUS.SENT;\n        return isNotSent;\n    }\n\n    const canAssociateOrder = () => {\n        const canAssociate = hasAssociateOrderPermission && (bill.status === BILL_STATUS.ERROR);\n        return canAssociate;\n    }\n\n    const onCloseModal = () => {\n        setOpenOrdersModal(false);\n    };\n    const onAcceptModal = (conditionals) => {\n        if (conditionals && conditionals.length > 0) {\n            if (conditionals && conditionals.length > 1) {\n                return;\n            }\n        }\n\n        const value = conditionals[0].value;\n        const ids = value.split ? value.split('::') : [value];\n        const orderId = ids[0];\n\n        props.onUpdateBill(bill.id, {order: {id: orderId}, createdAt: moment().format('YYYY-MM-DD HH:mm:ss')});\n        setOpenOrdersModal(false);\n    };\n\n    return (bill && bill.id) ? (\n        <React.Fragment>\n            <CustomModal title={\"Agregar pedidos\"} size=\"lg\" showFooter={false} isOpen={openOrdersModal} onClose={onCloseModal}>\n                <OrderList customActions={onAcceptModal} showAsModal={true} conditionals={orderListConditions} externalView orderLimit={1}/>\n            </CustomModal>\n            <div className=\"page-content\">\n                <Container fluid className=\"pb-3\">\n                    <Breadcrumb hasBack path=\"/bills\" title={`Factura #${bill.id}`} item={`Factura #${bill.id}`}/>\n\n                    <HasPermissions permissions={[PERMISSIONS.BILL_LIST]} renderNoAccess={() => <NoAccess/>}>\n                        <Row className=\"mb-2\">\n                            <Col md={12}>\n                                <div className={\"mb-3 float-md-start\"}>\n\n                                </div>\n                                <div className={\"mb-3 float-md-end\"}>\n                                    <div className=\"button-items\">\n                                        {canAssociateOrder() && (\n                                            <>\n                                                <Tooltip placement=\"bottom\" title=\"Asociar un nuevo Pedido (INTERRAPIDISIMO)\" aria-label=\"add\">\n                                                    <button type=\"button\" color=\"primary\" className=\"btn-sm btn btn-outline-info waves-effect waves-light\" onClick={() => associateNewOrder()}>\n                                                        <i className={`uil-shopping-cart-alt me-2`}> </i>\n                                                    </button>\n                                                </Tooltip>\n                                                <Tooltip placement=\"bottom\" title=\"Asociar un nuevo Pedido (SERVIENTREGA)\" aria-label=\"add\">\n                                                <button type=\"button\" color=\"primary\" className=\"btn-sm btn btn-outline-info waves-effect waves-light\" onClick={() => associateNewOrder('SERVIENTREGA')}>\n                                                <i className={`uil-shopping-cart-alt me-2`}> </i>\n                                                </button>\n                                                </Tooltip>\n                                                <Tooltip placement=\"bottom\" title=\"Asociar un nuevo Pedido (PAYU)\" aria-label=\"add\">\n                                                <button type=\"button\" color=\"primary\" className=\"btn-sm btn btn-outline-info waves-effect waves-light\" onClick={() => associateNewOrder('PAYU')}>\n                                                <i className={`uil-shopping-cart-alt me-2`}> </i>\n                                                </button>\n                                                </Tooltip>\n                                            </>\n                                        )}\n\n                                        {canRetry() && (\n                                            <Tooltip placement=\"bottom\" title=\"Reenviar Factura\" aria-label=\"add\">\n                                                <button type=\"button\" color=\"primary\" className=\"btn-sm btn btn-outline-info waves-effect waves-light\" onClick={() => createInvoice()}>\n                                                    <i className={`uil-repeat text-primary`}> </i>\n                                                </button>\n                                            </Tooltip>\n                                        )}\n                                        {canCancel() && (\n                                            <Tooltip placement=\"bottom\" title=\"Generar nota de crédito\" aria-label=\"add\">\n                                                <button type=\"button\" color=\"primary\" className=\"btn-sm btn btn-outline-info waves-effect waves-light\" onClick={() => createCreditNote()}>\n                                                    <i className={`uil-bill text-danger`}> </i>\n                                                </button>\n                                            </Tooltip>\n                                        )}\n                                    </div>\n                                </div>\n                            </Col>\n                        </Row>\n                        <Card id={'details'} className=\"mb-3 p-3\">\n                            <Row>\n                                <Col md={12}>\n                                    <h4 className=\"card-title text-info\">Información básica</h4>\n                                    <hr/>\n                                </Col>\n                                <Col md={12}>\n                                    <Row>\n                                        <Col md={6}>\n                                            <label>ID: </label>\n                                            <span className=\"p-1\">{bill.id}</span>\n                                        </Col>\n                                    </Row>\n                                    <Row>\n                                        <Col md={6}>\n                                            <label>Número legal: </label>\n                                            <span className=\"p-1\">{bill.legalNumber}</span>\n                                        </Col>\n                                        <Col md={6}>\n                                            <label>Pedido: </label>\n                                            <span className=\"p-1\">{bill.order.id}</span>\n                                        </Col>\n                                    </Row>\n                                    <Row>\n                                        <Col md={6}>\n                                            <label>Estatus:</label>\n                                            <span className=\"p-1\">{bill.status}</span>\n                                        </Col>\n                                        <Col md={6}>\n                                            <label>Fecha: </label>\n                                            <span className=\"p-1\">{formatDate(bill.createdAt)}</span>\n                                        </Col>\n                                    </Row>\n                                    <Row>\n                                        <Col md={6}>\n                                            <label>Cliente:</label>\n                                            <span className=\"p-1\">{bill.order.customer.name}</span>\n                                        </Col>\n                                        <Col md={6}>\n                                            <label>Correo: </label>\n                                            <span className=\"p-1\">{bill.order.customer.email}</span>\n                                        </Col>\n                                    </Row>\n                                    <Row>\n                                        <Col md={6}>\n                                            {bill?.creditNote?.id && bill?.creditNote?.status != 1 ? <div><label>Nota de Credito: </label>&nbsp;<span className=\"badge rounded-pill p-2 bg-soft-danger\">Error Dian</span></div> : \"\"}\n                                        </Col>\n                                    </Row>\n                                </Col>\n                            </Row>\n                        </Card>\n                        <Card id={'log'} className=\"mb-3 p-3\">\n                            <Row>\n                                <Col md={12}>\n\n                                    <ul className=\"nav nav-tabs nav-tabs-custom nav-justified\" role=\"tablist\">\n                                        <li className=\"nav-item\">\n                                            <a className={`nav-link ${activeTab === 1 ? 'active' : ''}`} data-bs-toggle=\"tab\" href=\"#tab1\" role=\"tab\" aria-selected=\"false\" onClick={() => setActiveTab(1)}>\n                                                <span className=\"d-block d-sm-none\"><i className=\"fas fa-home\"> </i></span>\n                                                <span className=\"d-none d-sm-block\">Bicacora Factura Dian</span>\n                                            </a>\n                                        </li>\n                                        <li className=\"nav-item\">\n                                            <a className={`nav-link ${activeTab === 2 ? 'active' : ''}`} data-bs-toggle=\"tab\" href=\"#tab2\" role=\"tab\" aria-selected=\"false\" onClick={() => setActiveTab(2)}>\n                                                <span className=\"d-block d-sm-none\"><i className=\"far fa-user\"> </i></span>\n                                                <span className=\"d-none d-sm-block\">Bitacora Nota de Credito</span>\n                                            </a>\n                                        </li>\n                                    </ul>\n                                    <div className=\"tab-content p-3 text-muted\">\n                                        <div className={`tab-pane ${activeTab === 1 ? 'active' : ''}`} id=\"tab2\" role=\"tabpanel\">\n                                            <h4 className=\"card-title text-info\">Bitacora Dian</h4>\n                                            <hr/>\n                                            <div dangerouslySetInnerHTML={{__html: formatLog(bill.dianLog)}}/>\n                                        </div>\n                                        <div className={`tab-pane ${activeTab === 2 ? 'active' : ''}`} id=\"tab2\" role=\"tabpanel\">\n                                            <h4 className=\"card-title text-info\">Bitacora Nota de Credito</h4>\n                                            <hr/>\n                                            <div dangerouslySetInnerHTML={{__html: formatLog(bill.dianCreditMemoLog)}}/>\n                                        </div>\n                                    </div>\n                                </Col>\n                            </Row>\n                        </Card>\n                    </HasPermissions>\n                </Container>\n            </div>\n        </React.Fragment>\n    ) : <NoDataIndication/>;\n}\n\nconst mapStateToProps = state => {\n    const {bill, loading, refresh, creditNote} = state.Bill\n    return {bill, refresh, loading, loadingCreditNote: creditNote.loading}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGetBill: (id) => dispatch(getBill(id)),\n    onCreateCreditNote: (id) => dispatch(createCreditNote(id)),\n    onCreateInvoice: (id) => dispatch(sendInvoice(id)),\n    onUpdateBill: (id, data) => dispatch(updateBill(id, data))\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(BillDetail)\n)\n\nBillDetail.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n","/Users/ramon/Repositories/lucy-moie/src/store/auth/login/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/CommonForBoth/Rightbar.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/CustomerEdit/index.js",["1474"],"import React, {useEffect} from \"react\"\nimport {CardBody, Container} from \"reactstrap\"\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport {apiError} from \"../../store/auth/login/actions\";\nimport PropTypes from \"prop-types\";\nimport {getCustomer} from \"../../store/customer/actions\";\nimport Breadcrumb from \"../../components/Common/Breadcrumb\";\nimport CustomerForm from \"./CustomerForm\";\nimport {Card} from \"@material-ui/core\";\nimport {PERMISSIONS} from \"../../helpers/security_rol\";\nimport NoAccess from \"../../components/Common/NoAccess\";\nimport HasPermissions from \"../../components/HasPermissions\";\n\nconst CustomerEdit = (props) => {\n    const {getCustomer, customer} = props;\n    const isEdit = props.match.params.id;\n\n    //carga inicial\n    useEffect(() => {\n        if (isEdit && getCustomer) {\n            getCustomer(props.match.params.id);\n        }\n    }, [getCustomer]);\n\n    return (\n        <React.Fragment>\n            <div className=\"page-content\">\n                <Container fluid>\n                    <Breadcrumb hasBack path=\"/customers\" title={customer.name} item={\"Cliente\"}/>\n                    <HasPermissions permissions={[PERMISSIONS.CUSTOMER_CREATE, PERMISSIONS.CUSTOMER_EDIT]} renderNoAccess={() => <NoAccess/>}>\n                        <Card>\n                            <CardBody>\n                                <CustomerForm customer={customer}/>\n                            </CardBody>\n                        </Card>\n                    </HasPermissions>\n                </Container>\n            </div>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {error, customer, loading} = state.Customer\n    return {error, customer, loading}\n}\n\nexport default withRouter(\n    connect(mapStateToProps, {apiError, getCustomer})(CustomerEdit)\n)\n\nCustomerEdit.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/ProductEdit/index.js",["1475","1476","1477","1478","1479","1480","1481","1482","1483","1484","1485","1486"],"import React, {useEffect, useState} from \"react\";\nimport {Col, Collapse, Container, Label, Media, Row} from \"reactstrap\";\nimport Breadcrumb from \"../../components/Common/Breadcrumb\";\nimport {Link, withRouter} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {getProduct, registerProduct, updateProduct} from \"../../store/product/actions\";\nimport {getFieldOptionByGroups, registerFieldOption} from \"../../store/fieldOptions/actions\";\nimport {deleteProductImage, resetProductImages} from \"../../store/productImages/actions\";\nimport {resetProductSize} from \"../../store/productSize/actions\";\nimport {AvForm} from \"availity-reactstrap-validation\";\nimport {FieldNumber, FieldSelect, FieldSwitch, FieldText} from '../../components/Fields';\nimport {Card} from \"@material-ui/core\";\nimport {getCategories} from \"../../store/category/actions\";\nimport {getSizes} from \"../../store/sizes/actions\";\nimport {arrayToOptions, arrayToOptionsDescription} from \"../../common/converters\";\nimport {GROUPS, STATUS} from \"../../common/constants\";\nimport ProductSize from \"./ProductSize\";\nimport ProductImage from \"./ProductImage\";\nimport ProductPublish from \"./ProductPublish\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\nimport Autocomplete from \"../../components/Fields/Autocomplete\";\nimport {PERMISSIONS} from \"../../helpers/security_rol\";\nimport NoAccess from \"../../components/Common/NoAccess\";\nimport HasPermissions from \"../../components/HasPermissions\";\nimport {getTemplatesCatalog} from \"../../store/template/actions\";\nimport Images from \"../../components/Common/Image\";\nimport {HtmlTooltip} from \"../../components/Common/HtmlTooltip\";\n\nconst ProductEdit = (props) => {\n\n    const [isOpen, setIsOpen] = useState(true);\n    const toggle = () => setIsOpen(!isOpen);\n\n    const [isOpenDropImages, setIsOpenDropImages] = useState(false);\n    const toggleDropImages = () => setIsOpenDropImages(!isOpenDropImages);\n\n    const [isOpenWebConfig, setIsOpenWebConfig] = useState(false);\n    const toggleWebConfig = () => setIsOpenWebConfig(!isOpenWebConfig);\n\n    const [isOpenInventary, setIsOpenInventary] = useState(false);\n    const toggleInventary = () => setIsOpenInventary(!isOpenInventary);\n\n\n    const {\n        product, categories, sizes, fieldOptions, refreshProduct,\n        onGetProduct, onCreateProduct, onUpdateProduct,\n        onGetCategories, onGetSizes, onResetProductSize, onResetProductImages,\n        onGetFieldOptions, onCreateFieldOption, refreshFieldOptions, onDeleteProductImage,\n        templatesCatalog, onGetTemplateCatalogs\n    } = props;\n\n    const [productData, setProductData] = useState({_status: STATUS.ACTIVE, sizeModelList: []});\n\n    const [categoriesList, setCategoriesList] = useState([]);\n    const [categoryDefault, setCategoryDefault] = useState({});\n    const [templateCatalogList, setTemplateCatalogList] = useState([]);\n    const [templateCatalogDefault, setTemplateCatalogDefault] = useState({});\n\n    const [materialsList, setMaterialsList] = useState([]);\n    const [providerList, setProviderList] = useState([]);\n    const [referenceList, setReferenceList] = useState([]);\n    const [materialDefault, setMaterialDefault] = useState({});\n    const [publication, setPublication] = useState({_status: \"true\"});\n\n    const [sizesList, setSizesList] = useState([]);\n    const [sizeDefault, setSizeDefault] = useState({});\n    const [sizeSelected, setSizeSelected] = useState(null);\n\n    const isEdit = props.match.params.id;\n    const hasOrders = false;\n\n    //Carga inicial\n    useEffect(() => {\n        if (isEdit && onGetProduct) {\n            onGetProduct(props.match.params.id);\n        }\n        onGetCategories();\n        onGetSizes();\n        onGetFieldOptions();\n        onGetTemplateCatalogs();\n\n    }, [onGetProduct]);\n\n    useEffect(() => {\n        if (product.id) {\n            onGetProduct(product.id);\n        }\n        onResetProductSize();\n        onResetProductImages();\n    }, [refreshProduct]);\n\n    //cargar info relacionada al prod\n    useEffect(() => {\n        if (product.id) {\n            setProductData({...product, _status: product.status});\n            setCategoryDefault(product.category?.id || null);\n            setTemplateCatalogDefault(product.template || null);\n            setSizeDefault(product.size?.id || null);\n            if (!isEdit) {\n                if (product.productSize.length === 0) {\n                    setIsOpen(false)\n                    setIsOpenInventary(true);\n                } else if (product.productImage.length === 0) {\n                    setIsOpen(false)\n                    setIsOpenInventary(false);\n                    setIsOpenDropImages(true);\n                }\n            }\n        }\n    }, [product]);\n\n    useEffect(() => {\n        if (categories && categories.length > 0) {\n            setCategoriesList(arrayToOptions(categories));\n        } else {\n            setCategoriesList([]);\n        }\n    }, [categories])\n\n    useEffect(() => {\n        if (templatesCatalog && templatesCatalog.length > 0) {\n            console.log('data: ', templatesCatalog);\n            setTemplateCatalogList(arrayToOptionsDescription(templatesCatalog));\n        } else {\n            setTemplateCatalogList([]);\n        }\n    }, [templatesCatalog])\n\n    useEffect(() => {\n        if (sizes && sizes.length > 0) {\n            const sizeList = arrayToOptions(sizes);\n            if (product.size && product.size.id) {\n                const defaultSize = sizeList.filter(m => m.value === product.size.id)[0];\n                setSizeDefault(defaultSize.value);\n            }\n            setSizesList(sizeList);\n        } else {\n            setSizesList([]);\n        }\n    }, [sizes])\n\n    useEffect(() => {\n        if (fieldOptions && fieldOptions.length > 0) {\n            setMaterialsList(filterFieldOptions(fieldOptions, GROUPS.MATERIALS).map(op => {\n                const key = op.name ? op.name : '';\n                return {label: key, value: key};\n            }));\n            setProviderList(filterFieldOptions(fieldOptions, GROUPS.PROVIDERS));\n            setReferenceList(filterFieldOptions(fieldOptions, GROUPS.REFERENCE_KEY).map(op => {\n                const key = op.name ? op.name : '';\n                return {label: key, value: key};\n            }));\n        } else {\n            setMaterialsList([]);\n            setProviderList([]);\n            setReferenceList([]);\n        }\n    }, [fieldOptions])\n\n    useEffect(() => {\n        if (refreshFieldOptions) {\n            onGetFieldOptions();\n        }\n    }, [refreshFieldOptions])\n\n    const filterFieldOptions = (arr, groups) => {\n        return arr.filter(op => (op.groups === groups)).map(op => ({name: op.name}));\n    }\n\n    const handleValidSubmit = (event, values) => {\n        const data = {\n            ...values,\n            material: values.material && values.material.value,\n            category: values.category.value,\n            size: values.size.value,\n            status: values._status,\n            weight: values.weight ? Number.parseFloat(values.weight) : 0,\n            price: Number.parseFloat(values.price),\n            providerReference: values.providerReference,\n            cost: Number.parseFloat(values.cost),\n            template: values.template.value || 1\n        };\n\n        delete data._status;\n\n        if (values.referenceKey && values.referenceKey.value) {\n            data.referenceKey = values.referenceKey.value;\n        }\n\n        if (!isEdit) {\n            data.status = 1;\n            onCreateProduct(data, props.history)\n        } else {\n            onUpdateProduct(props.match.params.id, data, props.history)\n        }\n\n        //if (!materialsList.some(op => op.name === data.material)) {\n            //onCreateFieldOption({groups: GROUPS.MATERIALS, name: data.material, value: data.material}, props.history);\n        //}\n\n        if (!providerList.some(op => op.name === data.provider)) {\n            onCreateFieldOption({groups: GROUPS.PROVIDERS, name: data.provider, value: data.provider}, props.history);\n        }\n    }\n\n    const handleDeleteProductImage = (product, number) => {\n        onDeleteProductImage(product, number)\n    }\n\n    return (\n        <React.Fragment>\n            <div className=\"page-content\">\n                <Container fluid>\n                    <Breadcrumb hasBack path=\"/products\" title={productData.reference} item={\"Producto\"}/>\n                    <HasPermissions permissions={[PERMISSIONS.PRODUCT_CREATE, PERMISSIONS.PRODUCT_EDIT]} renderNoAccess={() => <NoAccess/>}>\n                        <Row>\n                            <Col md={12}>\n                                <Card id={'main-data'}>\n                                    <Link to=\"#\" onClick={toggle} className=\"text-dark\">\n                                        <div className=\"p-4\">\n                                            <Media className=\"d-flex align-items-center\">\n                                                <div className=\"me-3\">\n                                                    <div className=\"avatar-xs\">\n                                                        <div className=\"avatar-title rounded-circle bg-soft-primary text-primary\">\n                                                            01\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                                <div className=\"flex-1 overflow-hidden\">\n                                                    <Row>\n                                                        <Col md={8}>\n                                                            <h5 className=\"font-size-16 mb-1\">General</h5>\n                                                            <p className=\"text-muted text-truncate mb-0\">Datos principales del producto</p>\n                                                        </Col>\n                                                        {isEdit && (\n                                                            <Col md={4}>\n                                                                <div className=\"text-right pr-10\">\n                                                                    <h5 className=\"font-size-16 mb-1\">Código</h5>\n                                                                    <b className=\"font-size-18 text-info\">{productData.reference}</b>\n                                                                </div>\n                                                            </Col>\n                                                        )}\n                                                    </Row>\n                                                </div>\n                                                <i className=\"mdi mdi-chevron-up accor-down-icon font-size-24\"> </i>\n                                            </Media>\n                                        </div>\n                                    </Link>\n                                    <Collapse isOpen={isOpen}>\n                                        <AvForm className=\"needs-validation\" autoComplete=\"off\"\n                                                onValidSubmit={(e, v) => {\n                                                    handleValidSubmit(e, v)\n                                                }}>\n                                            <div className=\"p-4 border-top\">\n                                                <Row>\n                                                    {!(product && product.id) && (\n                                                        <Col md={2}>\n                                                            <div className=\"mb-3\">\n                                                                <Label htmlFor=\"field_referenceKey\">Ref. <span className=\"text-danger\">*</span></Label>\n                                                                <FieldSelect\n                                                                    id={\"field_referenceKey\"}\n                                                                    name={\"referenceKey\"}\n                                                                    options={referenceList}\n                                                                    defaultValue={productData.referenceKey}\n                                                                    required\n                                                                    isSearchable\n                                                                />\n                                                            </div>\n                                                        </Col>\n                                                    )}\n                                                    <Col md={10}>\n                                                        <div className=\"mb-3\">\n                                                            <Label htmlFor=\"field_name\">Descripción <span className=\"text-danger\">*</span></Label>\n                                                            <FieldText\n                                                                id={\"field_name\"}\n                                                                name={\"name\"}\n                                                                value={productData.name}\n                                                                minLength={3}\n                                                                maxLength={255}\n                                                                required/>\n                                                        </div>\n                                                    </Col>\n                                                    {(product && product.id) && (\n                                                        <Col md={2}>\n                                                            <div className={\"mt-1 mb-5\"} style={{position: \"relative\"}}>\n                                                                <div className={\"float-end\"}>\n                                                                    <Row>\n                                                                        <Col>\n                                                                            ¿Activo?\n                                                                        </Col>\n                                                                        <Col>\n                                                                            <FieldSwitch defaultValue={productData._status} name={\"_status\"}/>\n                                                                        </Col>\n                                                                    </Row>\n                                                                </div>\n                                                            </div>\n                                                        </Col>\n                                                    )}\n                                                </Row>\n                                                <Row>\n                                                    <Col md=\"12\">\n                                                        <div className=\"mb-3\">\n                                                            <Label className=\"control-label\">Categoria <span className=\"text-danger\">*</span></Label>\n                                                            <FieldSelect\n                                                                id={\"field_category\"}\n                                                                name={\"category\"}\n                                                                options={categoriesList}\n                                                                defaultValue={categoryDefault}\n                                                                required\n                                                                disabled={hasOrders}\n                                                                isSearchable\n                                                            />\n                                                        </div>\n                                                    </Col>\n                                                    <Col md=\"4\">\n                                                        <div className=\"mb-0\">\n                                                            <Label className=\"control-label\">Tallas</Label>\n                                                            <FieldSelect\n                                                                id={\"field_sizes\"}\n                                                                name={\"size\"}\n                                                                options={sizesList}\n                                                                defaultValue={sizeDefault}\n                                                                onChange={(e) => {\n                                                                    if(sizes) {\n                                                                        setSizeSelected(sizes.find(s => s.id === e.value));\n                                                                    }\n                                                                }}\n                                                                required\n                                                                disabled={hasOrders || product.id}\n                                                                isSearchable\n                                                            />\n                                                        </div>\n                                                    </Col>\n                                                    {((sizeSelected && sizeSelected.name == \"Unica\") || (!sizeSelected && sizeDefault == 9)) && (\n                                                        <Col md=\"3\">\n                                                            <div className=\"mb-0\">\n                                                                <Label className=\"control-label\">Sirve para</Label>\n                                                                <FieldText\n                                                                    id={\"size_descripcion\"}\n                                                                    name={\"sizeDescription\"}\n                                                                    value={productData.sizeDescription}\n                                                                    minLength={1}\n                                                                    maxLength={30}\n                                                                />\n                                                            </div>\n                                                        </Col>\n                                                    )}\n                                                    <Col md=\"5\">\n                                                        <div className=\"mb-3\">\n                                                            <Label className=\"control-label\">Material</Label>\n                                                            <FieldSelect\n                                                                id={\"field_material\"}\n                                                                name={\"material\"}\n                                                                options={materialsList}\n                                                                defaultValue={productData.material}\n                                                                isSearchable\n                                                            />\n                                                        </div>\n                                                    </Col>\n                                                </Row>\n                                                <Row>\n                                                    <Col md=\"6\">\n                                                        <div className=\"mb-3\">\n                                                            <Label htmlFor=\"field_provider\">Proveedor</Label>\n                                                            <Autocomplete\n                                                                id={\"field_provider\"}\n                                                                name={\"provider\"}\n                                                                options={providerList}\n                                                                defaultValue={productData.provider}\n                                                                onChange={(provider) => setProductData({...productData, provider: provider})}\n                                                            />\n                                                        </div>\n                                                    </Col>\n\n                                                    <Col md=\"6\">\n                                                        <div className=\"mb-3\">\n                                                            <Label htmlFor=\"field_provider\">Referencia Proveedor</Label>\n                                                            <FieldText\n                                                                id={\"field_provider_reference\"}\n                                                                name={\"providerReference\"}\n                                                                value={productData.providerReference}\n                                                                minLength={1}\n                                                                maxLength={12}\n                                                            />\n                                                        </div>\n                                                    </Col>\n\n                                                    <Col md=\"4\">\n                                                        <div className=\"mb-3\">\n                                                            <Label htmlFor=\"weight\">Peso (g) </Label>\n                                                            <FieldNumber\n                                                                id={\"field_weight\"}\n                                                                name={\"weight\"}\n                                                                value={productData.weight}\n                                                            />\n                                                        </div>\n                                                    </Col>\n                                                    <Col md=\"4\">\n                                                        <div className=\"mb-3\">\n                                                            <Label htmlFor=\"cost\">Costo <span className=\"text-danger\">*</span></Label>\n                                                            <FieldNumber\n                                                                id={\"field_cost\"}\n                                                                name={\"cost\"}\n                                                                value={productData.cost}\n                                                                required/>\n                                                        </div>\n                                                    </Col>\n                                                    <Col md=\"4\">\n                                                        <div className=\"mb-3\">\n                                                            <Label htmlFor=\"price\">Precio <span className=\"text-danger\">*</span></Label>\n                                                            <FieldNumber\n                                                                id={\"field_price\"}\n                                                                name={\"price\"}\n                                                                value={productData.price}\n                                                                required/>\n                                                        </div>\n                                                    </Col>\n                                                </Row>\n                                                <Row>\n                                                    <Col md=\"6\">\n                                                        <div className=\"mb-0\">\n                                                            <Label htmlFor=\"description\">Nombre en el Catálogo</Label>\n                                                            <FieldText\n                                                                id={\"field_description\"}\n                                                                name={\"description\"}\n                                                                value={productData.description}\n                                                                minLength={3}\n                                                                maxLength={255}\n                                                            />\n                                                        </div>\n                                                    </Col>\n                                                    <Col md=\"6\">\n                                                        <div className=\"mb-3\">\n                                                            <Label className=\"control-label\">Plantilla\n                                                                <span className=\"text-danger\">*</span></Label>\n                                                            <FieldSelect\n                                                                id={\"field_template\"}\n                                                                name={\"template\"}\n                                                                options={templateCatalogList}\n                                                                defaultValue={templateCatalogDefault}\n                                                                required\n                                                                disabled={hasOrders}\n                                                            />\n                                                        </div>\n                                                    </Col>\n                                                </Row>\n                                                <Row>\n                                                    <Col md=\"12\">\n                                                        <div className=\"text-center m-5\">\n                                                            <h3>Vista Previa</h3> <br />\n                                                            <div style={{backgroundColor: '1px lightgray solid', padding: '10px'}}>\n                                                            <Images src={`http://moie2.lucymodas.com/./uploads/catalogs/${productData.reference}.jpg`}\n                                                                    alt={productData.reference}\n                                                                    height={300}\n                                                                    className=\"img-fluid mx-auto d-block tab-img\"/>\n                                                            </div>\n                                                        </div>\n                                                    </Col>\n                                                </Row>\n                                                <Row className=\"pt-2\">\n                                                    <Col md={12} className=\"text-right\">\n                                                        <ButtonSubmit loading={props.loading}/>\n                                                    </Col>\n                                                </Row>\n                                            </div>\n                                        </AvForm>\n\n                                    </Collapse>\n                                </Card>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md={12} className=\"mt-2\">\n                                <Card id={'inventory'}>\n                                    <Link to=\"#\" className=\"text-dark collapsed\" onClick={toggleInventary}>\n                                        <div className=\"p-4\">\n\n                                            <Media className=\"d-flex align-items-center\">\n                                                <div className=\"me-3\">\n                                                    <div className=\"avatar-xs\">\n                                                        <div className=\"avatar-title rounded-circle bg-soft-primary text-primary\">\n                                                            02\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                                <div className=\"flex-1 overflow-hidden\">\n                                                    <h5 className=\"font-size-16 mb-1\">Inventario</h5>\n                                                    <p className=\"text-muted text-truncate mb-0\">Agregue existencia a su producto.</p>\n                                                </div>\n                                                <i className=\"mdi mdi-chevron-up accor-down-icon font-size-24\"> < /i>\n                                            </Media>\n\n                                        </div>\n                                    </Link>\n                                    <Collapse isOpen={isOpenInventary}>\n                                        <div className=\"p-4 border-top\">\n                                            {(productData.id && productData.size) ? (\n                                                <>\n                                                    <h4>{productData.size ? productData.size.name : ''}</h4>\n                                                    <p>Ingrese color y tallas para el producto.</p>\n                                                    <ProductSize template={productData.size} product={productData}/>\n                                                </>\n                                            ) : (\n                                                <div className=\"alert alert-warning\">Debe agregar una talla al producto.</div>\n                                            )}\n                                        </div>\n                                    </Collapse>\n                                </Card>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md={12}>\n                                <Card id={'images'} className=\"mt-2 disabled\">\n                                    <Link to=\"#\" className=\"text-dark collapsed\" onClick={toggleDropImages}>\n                                        <div className=\"p-4\">\n\n                                            <Media className=\"d-flex align-items-center\">\n                                                <div className=\"me-3\">\n                                                    <div className=\"avatar-xs\">\n                                                        <div className=\"avatar-title rounded-circle bg-soft-primary text-primary\">\n                                                            03\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                                <div className=\"flex-1 overflow-hidden\">\n                                                    <h5 className=\"font-size-16 mb-1\">Imagenes</h5>\n                                                    <p className=\"text-muted text-truncate mb-0\">Agrega las imagenes a su producto.</p>\n                                                </div>\n                                                <i className=\"mdi mdi-chevron-up accor-down-icon font-size-24\"></i>\n                                            </Media>\n\n                                        </div>\n                                    </Link>\n                                    <Collapse isOpen={isOpenDropImages}>\n                                        <ProductImage product={product} onDeleteProductImage={handleDeleteProductImage}/>\n                                    </Collapse>\n                                </Card>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md={12}>\n                                <Card id={'publication'} className=\"mt-2\">\n                                    <Link to=\"#\" className=\"text-dark collapsed\" onClick={toggleWebConfig}>\n                                        <div className=\"p-4\">\n\n                                            <Media className=\"d-flex align-items-center\">\n                                                <div className=\"me-3\">\n                                                    <div className=\"avatar-xs\">\n                                                        <div className=\"avatar-title rounded-circle bg-soft-primary text-primary\">\n                                                            04\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                                <div className=\"flex-1 overflow-hidden\">\n                                                    <h5 className=\"font-size-16 mb-1\">Publicación</h5>\n                                                    <p className=\"text-muted text-truncate mb-0\">Configuraciones para la publicación en la Página Web.</p>\n                                                </div>\n                                                <i className=\"mdi mdi-chevron-up accor-down-icon font-size-24\"> </i>\n                                            </Media>\n\n                                        </div>\n                                    </Link>\n                                    <Collapse isOpen={isOpenWebConfig}>\n                                        {productData.id && (\n                                            <ProductPublish product={product}/>\n                                        )}\n                                    </Collapse>\n                                </Card>\n                            </Col>\n                        </Row>\n                    </HasPermissions>\n                </Container>\n            </div>\n        </React.Fragment>\n    );\n}\n\nconst mapStateToProps = state => {\n    const {error, product, loading} = state.Product\n    const {fieldOptions, refresh} = state.FieldOption\n    const refreshProduct = state.ProductSize.refresh || state.ProductImage.refresh || state.Product.refresh;\n    const {categories} = state.Category\n    const {sizes} = state.Sizes\n    const {templatesCatalog} = state.Template;\n    return {error, product, categories, sizes, fieldOptions, loading, refreshProduct, refreshFieldOptions: refresh, templatesCatalog}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGetCategories: (conditional = null, limit = 100, page) => dispatch(getCategories(conditional, limit, page)),\n    onGetSizes: (conditional = null, limit = 100, page) => dispatch(getSizes(conditional, limit, page)),\n    onGetFieldOptions: (conditional = null, limit = 500, page) => dispatch(getFieldOptionByGroups([GROUPS.MATERIALS, GROUPS.PROVIDERS, GROUPS.REFERENCE_KEY], limit, page)),\n    onGetProduct: (id) => dispatch(getProduct(id)),\n    onCreateProduct: (data, history) => dispatch(registerProduct(data, history)),\n    onUpdateProduct: (data, history) => dispatch(updateProduct(data, history)),\n    onCreateFieldOption: (data, history) => dispatch(registerFieldOption(data, history)),\n    onResetProductSize: () => dispatch(resetProductSize()),\n    onResetProductImages: () => dispatch(resetProductImages()),\n    onDeleteProductImage: (product,number) => dispatch(deleteProductImage(product,number)),\n    onGetTemplateCatalogs: () => dispatch(getTemplatesCatalog(null, 500, 0)),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(ProductEdit)\n)\n\nProductEdit.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n","/Users/ramon/Repositories/lucy-moie/src/store/wallet/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/wallet/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Product/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/billConfig/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/State/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/StateEdit/index.js",["1487","1488"],"import React, {useEffect, useState} from \"react\"\nimport {CardBody, Col, Container, Label, Row} from \"reactstrap\"\nimport {AvForm} from \"availity-reactstrap-validation\"\nimport {Card} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport {apiError} from \"../../store/auth/login/actions\";\nimport PropTypes from \"prop-types\";\nimport {getState, registerState, updateState} from \"../../store/location/actions\";\nimport {FieldSwitch, FieldText} from \"../../components/Fields\";\nimport Breadcrumb from \"../../components/Common/Breadcrumb\";\nimport {STATUS} from \"../../common/constants\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\nimport {PERMISSIONS} from \"../../helpers/security_rol\";\nimport NoAccess from \"../../components/Common/NoAccess\";\nimport HasPermissions from \"../../components/HasPermissions\";\n\nconst StateEdit = (props) => {\n    const {getState, estado} = props;\n    const [estadoData, setEstadoData] = useState({_status: STATUS.ACTIVE});\n    const isEdit = props.match.params.id;\n\n    //carga inicial\n    useEffect(() => {\n        if (isEdit && getState) {\n            getState(props.match.params.id);\n        }\n    }, [getState]);\n\n    //cargar la información del cliente\n    useEffect(() => {\n        if (estado.id && isEdit) {\n            setEstadoData({...estado, _status:estado.status});\n        }\n    }, [estado]);\n\n    const handleValidSubmit = (event, values) => {\n        const data = Object.assign({},values, {status:values._status});\n        delete data._status;\n        if (!isEdit) {\n            props.registerState(data, props.history)\n        } else {\n            props.updateState(props.match.params.id, data, props.history)\n        }\n    }\n    return (\n        <React.Fragment>\n            <div className=\"page-content\">\n                <Container fluid>\n                    <Breadcrumb hasBack path=\"/states\" title={estadoData.name} item={\"Estado\"}/>\n\n                    <HasPermissions permissions={[PERMISSIONS.LOCALITY_CREATE, PERMISSIONS.LOCALITY_EDIT]} renderNoAccess={() => <NoAccess/>}>\n                        <AvForm className=\"needs-validation\" autoComplete=\"off\"\n                                onValidSubmit={(e, v) => {\n                                    handleValidSubmit(e, v)\n                                }}>\n                            <Row>\n                                <Col xl=\"8\">\n                                    <Card>\n                                        <CardBody>\n                                            <div className={\"mt-1 mb-5\"} style={{position: \"relative\"}}>\n                                                <div className={\"float-end\"}>\n                                                    <Row>\n                                                        <Col>\n                                                            ¿Activo?\n                                                        </Col>\n                                                        <Col>\n                                                            <FieldSwitch defaultValue={estadoData._status} name={\"_status\"}/>\n                                                        </Col>\n                                                    </Row>\n                                                </div>\n                                            </div>\n                                            <Row>\n                                                <Col md=\"12\">\n                                                    <div className=\"mb-3\">\n                                                        <Label htmlFor=\"field_name\">Nombre <span className=\"text-danger\">*</span></Label>\n                                                        <FieldText\n                                                            id={\"field_name\"}\n                                                            name={\"name\"}\n                                                            value={estadoData.name}\n                                                            minLength={3}\n                                                            maxLength={255}\n                                                            required\n                                                        />\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col md=\"6\">\n                                                    <div className=\"mb-3\">\n                                                        <Label htmlFor=\"field_name\">Código DIAN <span className=\"text-danger\">*</span></Label>\n                                                        <FieldText\n                                                            id={\"field_dianCode\"}\n                                                            name={\"dianCode\"}\n                                                            value={estadoData.dianCode}\n                                                            minLength={2}\n                                                            maxLength={10}\n                                                            required\n                                                        />\n                                                    </div>\n                                                </Col>\n                                                <Col md=\"6\">\n                                                    <div className=\"mb-3\">\n                                                        <Label htmlFor=\"field_name\">Código ISO <span className=\"text-danger\">*</span></Label>\n                                                        <FieldText\n                                                            id={\"field_isoCode\"}\n                                                            name={\"isoCode\"}\n                                                            value={estadoData.isoCode}\n                                                            minLength={3}\n                                                            maxLength={5}\n                                                            required\n                                                        />\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col md={12} className=\"text-right\">\n                                                    <ButtonSubmit loading={props.loading}/>\n                                                </Col>\n                                            </Row>\n                                        </CardBody>\n                                    </Card>\n                                </Col>\n                            </Row>\n                        </AvForm>\n                    </HasPermissions>\n                </Container>\n            </div>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {error, loading} = state.Location\n    return {error, estado: state.Location.state, loading}\n}\n\nexport default withRouter(\n    connect(mapStateToProps, {apiError, registerState, updateState, getState})(StateEdit)\n)\n\nStateEdit.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/Municipality/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/MunicipalityEdit/index.js",["1489","1490"],"import React, {useEffect, useState} from \"react\"\nimport {CardBody, Col, Container, Label, Row} from \"reactstrap\"\nimport {AvForm} from \"availity-reactstrap-validation\"\nimport {Card} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport {apiError} from \"../../store/auth/login/actions\";\nimport PropTypes from \"prop-types\";\nimport {getMunicipality, getStates, registerMunicipality, updateMunicipality} from \"../../store/location/actions\";\nimport {FieldSelect, FieldSwitch, FieldText} from \"../../components/Fields\";\nimport Breadcrumb from \"../../components/Common/Breadcrumb\";\nimport {STATUS} from \"../../common/constants\";\nimport {statesToOptions} from \"../../common/converters\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\nimport {PERMISSIONS} from \"../../helpers/security_rol\";\nimport NoAccess from \"../../components/Common/NoAccess\";\nimport HasPermissions from \"../../components/HasPermissions\";\n\nconst MunicipalityEdit = (props) => {\n    const {getMunicipality, getStates, municipality, states} = props;\n    const [municipalityData, setMunicipalityData] = useState({_status: STATUS.ACTIVE});\n    const [statesOptions, setStates] = useState([]);\n    const [municipalityDefault, setMunicipalityDefault] = useState(null);\n    const isEdit = props.match.params.id;\n\n    //carga inicial\n    useEffect(() => {\n        if (isEdit && getMunicipality) {\n            getMunicipality(props.match.params.id);\n        }\n        getStates();\n    }, [getMunicipality]);\n\n    //cargar la información del municipio\n    useEffect(() => {\n        if (municipality.id && isEdit) {\n            setMunicipalityData({...municipality, _status:municipality.status});\n\n            const defaultMunicipality = municipality.state?.id || null;\n            setMunicipalityDefault(defaultMunicipality);\n        }\n    }, [municipality]);\n\n    //cargar estados\n    useEffect(() => {\n        if (states && states.length > 0) {\n            setStates(statesToOptions(states));\n        } else {\n            setStates([]);\n        }\n    }, [states]);\n\n    const handleValidSubmit = (event, values) => {\n        const data = {...values, status: values._status, state: values.state.value};\n        delete data._status;\n        if (!isEdit) {\n            props.registerMunicipality(data, props.history)\n        } else {\n            props.updateMunicipality(props.match.params.id, data, props.history)\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <div className=\"page-content\">\n                <Container fluid>\n                    <Breadcrumb hasBack path=\"/municipalities\" title={municipalityData.name} item={\"Estado\"}/>\n                    <HasPermissions permissions={[PERMISSIONS.LOCALITY_CREATE, PERMISSIONS.LOCALITY_EDIT]} renderNoAccess={() => <NoAccess/>}>\n                        <AvForm className=\"needs-validation\" autoComplete=\"off\"\n                                onValidSubmit={(e, v) => {\n                                    handleValidSubmit(e, v)\n                                }}>\n                            <Row>\n                                <Col xl=\"8\">\n                                    <Card>\n                                        <CardBody>\n                                            <div className={\"mt-1 mb-5\"} style={{position: \"relative\"}}>\n                                                <div className={\"float-end\"}>\n                                                    <Row>\n                                                        <Col>\n                                                            ¿Activo?\n                                                        </Col>\n                                                        <Col>\n                                                            <FieldSwitch defaultValue={municipalityData._status} name={\"_status\"}/>\n                                                        </Col>\n                                                    </Row>\n                                                </div>\n                                            </div>\n                                            <Row>\n                                                <Col md=\"12\">\n                                                    <div className=\"mb-3\">\n                                                        <Label htmlFor=\"state\">Estado <span className=\"text-danger\">*</span></Label>\n                                                        <FieldSelect\n                                                            name={\"state\"}\n                                                            options={statesOptions}\n                                                            defaultValue={municipalityDefault}\n                                                            required\n                                                            isSearchable\n                                                        />\n                                                    </div>\n                                                </Col>\n\n                                            </Row>\n                                            <Row>\n                                                <Col md=\"8\">\n                                                    <div className=\"mb-3\">\n                                                        <Label htmlFor=\"field_name\">Nombre <span className=\"text-danger\">*</span></Label>\n                                                        <FieldText\n                                                            id={\"field_name\"}\n                                                            name={\"name\"}\n                                                            value={municipalityData.name}\n                                                            minLength={3}\n                                                            maxLength={255}\n                                                            required\n                                                        />\n                                                    </div>\n                                                </Col>\n                                                <Col md=\"4\">\n                                                    <div className=\"mb-3\">\n                                                        <Label htmlFor=\"field_name\">Código DIAN <span className=\"text-danger\">*</span></Label>\n                                                        <FieldText\n                                                            id={\"field_dianCode\"}\n                                                            name={\"dianCode\"}\n                                                            value={municipalityData.dianCode}\n                                                            minLength={3}\n                                                            maxLength={10}\n                                                            required\n                                                        />\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col md={12} className=\"text-right\">\n                                                    <ButtonSubmit loading={props.loading}/>\n                                                </Col>\n                                            </Row>\n                                        </CardBody>\n                                    </Card>\n                                </Col>\n                            </Row>\n                        </AvForm>\n                    </HasPermissions>\n                </Container>\n            </div>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {error, municipality, states, loading} = state.Location\n    return {error, municipality, states, loading}\n}\n\nexport default withRouter(\n    connect(mapStateToProps, {apiError, getStates, registerMunicipality, updateMunicipality, getMunicipality})(MunicipalityEdit)\n)\n\nMunicipalityEdit.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/Category/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/User/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/FieldOption/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/CategoryEdit/index.js",["1491","1492","1493","1494"],"import React, {useEffect, useState} from \"react\"\nimport {CardBody, Col, Container, Label, Row} from \"reactstrap\"\nimport {AvForm} from \"availity-reactstrap-validation\"\nimport {Card} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport {apiError} from \"../../store/auth/login/actions\";\nimport PropTypes from \"prop-types\";\nimport {getCategory, getPiecesUnpublished, registerCategory, updateCategory} from \"../../store/category/actions\";\nimport {FieldNumber, FieldSwitch, FieldText} from \"../../components/Fields\";\nimport Breadcrumb from \"../../components/Common/Breadcrumb\";\nimport {STATUS} from \"../../common/constants\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\nimport HasPermissions from \"../../components/HasPermissions\";\nimport {PERMISSIONS} from \"../../helpers/security_rol\";\nimport NoAccess from \"../../components/Common/NoAccess\";\nimport DropZoneIcon from \"../../components/Common/DropZoneIcon\";\nimport Images from \"../../components/Common/Image\";\nimport {getBaseCategoryPath} from \"../../common/utils\";\n\nconst CategoryEdit = (props) => {\n    const {getCategory, category, pieces} = props;\n    const [categoryData, setCategory] = useState({_status: STATUS.ACTIVE});\n    const isEdit = !!props.match.params.id;\n\n    const [file, setFile] = useState(null);\n    const [fileBanner, setFileBanner] = useState(null);\n    const [fileCatalog, setFileCatalog] = useState(null);\n\n\n    //carga inicial\n    useEffect(() => {\n        if (isEdit && getCategory) {\n            setFile(null);\n            setFileBanner(null);\n            setFileCatalog(null);\n            getCategory(props.match.params.id);\n            props.getPiecesUnpublished(props.match.params.id);\n        }\n    }, [getCategory]);\n\n    //cargar la información del cliente\n    useEffect(() => {\n\n        if (category.id && isEdit) {\n            //foto portada\n            if(!!category.filename){\n                const file = {\n                    preview: getBaseCategoryPath(category.filename),\n                    name: category.id,\n                    content: null\n                };\n\n                setFile(file);\n            }\n            //banner\n            if(!!category.filenameBanner){\n                const fileBanner = {\n                    preview: getBaseCategoryPath(category.filenameBanner),\n                    name: category.id,\n                    content: null\n                };\n\n                setFileBanner(fileBanner);\n            }\n            //banner\n            if(!!category.filenameCatalog){\n                const fileCatalog = {\n                    preview: getBaseCategoryPath(category.filenameCatalog),\n                    name: category.id,\n                    content: null\n                };\n\n                setFileCatalog(fileCatalog);\n            }\n\n            setCategory({...category, _status:category.status});\n\n        }\n    }, [category]);\n\n\n    const handleValidSubmit = (event, values) => {\n        const data = {...values, status:values._status};\n\n        if(file && file.content){\n            data.file = file.content;\n        }\n        if(fileBanner && fileBanner.content){\n            data.fileBanner = fileBanner.content;\n        }\n        if(fileCatalog && fileCatalog.content){\n            data.fileCatalog = fileCatalog.content;\n        }\n\n        delete data._status;\n\n        if (!isEdit) {\n            props.registerCategory(data, props.history)\n        } else {\n            props.updateCategory(props.match.params.id, data, props.history)\n        }\n    }\n\n    function handleAcceptedFiles(_file, _type) {\n\n        const file = {\n            preview: _file.base64,\n            name: category.id,\n            content: _file.base64\n        };\n\n        if(_type == \"banner\"){\n            setFileBanner(file);\n        }\n        else if(_type == \"catalog\"){\n            setFileCatalog(file);\n        } else {\n            setFile(file);\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <div className=\"page-content\">\n                <Container fluid>\n                    <Breadcrumb hasBack path=\"/categories\" title={categoryData.name} item={\"Categoria\"}/>\n                    <HasPermissions permission={PERMISSIONS.CATEGORY_EDIT} renderNoAccess={() => <NoAccess/>}>\n                        <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => handleValidSubmit(e, v)}>\n                            <Row>\n                                <Col xl=\"8\">\n                                    <Card>\n                                        <CardBody>\n                                            <div className={\"mt-1 mb-5\"} style={{position: \"relative\"}}>\n                                                <div className={\"float-end\"}>\n                                                    <Row>\n                                                        <Col>\n                                                            ¿Activo?\n                                                        </Col>\n                                                        <Col>\n                                                            <FieldSwitch defaultValue={categoryData._status} name={\"_status\"}/>\n                                                        </Col>\n                                                    </Row>\n                                                </div>\n                                            </div>\n                                            <Row>\n                                                <Col md=\"8\">\n                                                    <div className=\"mb-3\">\n                                                        <Label htmlFor=\"field_name\">Nombre <span className=\"text-danger\">*</span></Label>\n                                                        <FieldText\n                                                            id={\"field_name\"}\n                                                            name={\"name\"}\n                                                            value={categoryData.name}\n                                                            minLength={3}\n                                                            maxLength={150}\n                                                            required\n                                                        />\n                                                    </div>\n                                                </Col>\n                                                <Col md=\"4\">\n                                                    <div className=\"mb-3\">\n                                                        <Label htmlFor=\"field_discount\">Descuento<span className=\"text-danger\">*</span></Label>\n                                                        <FieldNumber\n                                                            id={\"field_discount\"}\n                                                            name={\"discountPercent\"}\n                                                            value={categoryData.discountPercent}\n                                                            required/>\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <br />\n                                            <hr />\n                                            <Col md={12} className=\"text-center p-2\" style={{height: '400px'}}>\n                                                <Label htmlFor=\"field_discount\">Foto de Portada</Label>\n                                                <DropZoneIcon\n                                                    maxFiles={1}\n                                                    mode=\"block\"\n                                                    hasImage={file && file.preview}\n                                                    onDrop={(files) => {\n                                                        handleAcceptedFiles(files, 'portada');\n                                                    }}>\n                                                    <Images className=\"img-fluid mx-auto d-block tab-img rounded\"\n                                                            height={370}\n                                                            alt={file && file.name}\n                                                            src={file && file.preview}\n                                                    />\n                                                </DropZoneIcon>\n                                            </Col>\n                                            <br />\n                                            <hr />\n                                            <Col md={12} className=\"text-center p-2\" style={{height: '400px'}}>\n                                                <Label htmlFor=\"field_discount\">Foto de Banner</Label>\n                                                <DropZoneIcon\n                                                    maxFiles={1}\n                                                    mode=\"block\"\n                                                    hasImage={fileBanner && fileBanner.preview}\n                                                    onDrop={(files) => {\n                                                        handleAcceptedFiles(files, 'banner');\n                                                    }}>\n                                                    <Images className=\"img-fluid mx-auto d-block tab-img rounded\"\n                                                            height={370}\n                                                            alt={fileBanner && fileBanner.name}\n                                                            src={fileBanner && fileBanner.preview}\n                                                    />\n                                                </DropZoneIcon>\n                                            </Col>\n                                            <Col md={12} className=\"text-center p-2\" style={{height: '400px'}}>\n                                                <Label htmlFor=\"field_discount\">Foto de Catalogo</Label>\n                                                <DropZoneIcon\n                                                    maxFiles={1}\n                                                    mode=\"block\"\n                                                    hasImage={fileCatalog && fileCatalog.preview}\n                                                    onDrop={(files) => {\n                                                        handleAcceptedFiles(files, 'catalog');\n                                                    }}>\n                                                    <Images className=\"img-fluid mx-auto d-block tab-img rounded\"\n                                                            height={370}\n                                                            alt={fileCatalog && fileCatalog.name}\n                                                            src={fileCatalog && fileCatalog.preview}\n                                                    />\n                                                </DropZoneIcon>\n                                            </Col>\n                                            <Row>\n                                                <Col md={12} className=\"text-right\">\n                                                    <ButtonSubmit loading={props.loading}/>\n                                                </Col>\n                                            </Row>\n                                        </CardBody>\n                                    </Card>\n                                </Col>\n                                <Col xl={\"4\"}>\n                                    <Card>\n                                        <CardBody>\n                                            <h4>Piezas no publicadas</h4><br />\n                                            {pieces && pieces.map(item => <p className=\"mb-0 badge bg-soft-primary p-2\">{item}</p>)}\n                                        </CardBody>\n                                    </Card>\n                                </Col>\n                            </Row>\n                        </AvForm>\n                    </HasPermissions>\n                </Container>\n            </div>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {error, category, loading, pieces} = state.Category\n    return {error, category, loading, pieces}\n}\n\nexport default withRouter(\n    connect(mapStateToProps, {apiError, registerCategory, updateCategory, getCategory, getPiecesUnpublished})(CategoryEdit)\n)\n\nCategoryEdit.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/create/index.js",["1495","1496","1497","1498","1499"],"import React, {useEffect, useState} from \"react\"\nimport {CardBody, Col, Container, Row, Spinner} from \"reactstrap\"\nimport {Card} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport Breadcrumb from \"../../../components/Common/Breadcrumb\";\nimport OrderCustomer from \"./orderCustomer\";\nimport OrderProducts from \"./orderProducts\";\nimport OrderCar from \"./orderCar\";\nimport OrderDeliveryOptions from \"./orderDeliveryOptions\";\nimport {resetCustomer} from \"../../../store/customer/actions\";\nimport {resetProduct} from \"../../../store/product/actions\";\nimport {ConfirmationModalAction} from \"../../../components/Modal/ConfirmationModal\";\nimport OrderSummary from \"./orderSummary\";\nimport {registerOrder, resetCar} from \"../../../store/order/actions\";\nimport {CHARGE_ON_DELIVERY, DELIVERY_METHODS_PAYMENT_TYPES, PAYMENT_TYPES} from \"../../../common/constants\";\nimport {PERMISSIONS} from \"../../../helpers/security_rol\";\nimport NoAccess from \"../../../components/Common/NoAccess\";\nimport HasPermissions from \"../../../components/HasPermissions\";\nimport {showMessage} from \"../../../components/MessageToast/ShowToastMessages\";\n\nconst CreateOrder = (props) => {\n    const {onResetOrder, car, onRegisterOrder, error, loading} = props;\n    const [initComponent, setInitComponent] = useState(true);\n    const [isValidOrder, setIsValidOrder] = useState(false);\n\n    useEffect(() => {\n        console.log('only first time...');\n        onResetOrder();\n    }, []);\n\n    useEffect(() => {\n        if (initComponent) {\n            onResetOrder();\n            setInitComponent(false);\n        }\n    }, [initComponent]);\n\n    useEffect(() => {\n        if (car) {\n            const validCost = null != car.deliveryOptions.cost && car.deliveryOptions.cost >= 0\n            const isValidCustomer = !!car.customer.id;\n            const isValidProducts = car.products.length > 0;\n            const isValidDeliveryOptions = car.deliveryOptions && car.deliveryOptions.origin && car.deliveryOptions.type && car.deliveryOptions.method && validCost;\n            //se agrega valicacion para no permitir clientes contrapagos que esten inactivos\n            const validCustomerType = (car.customer && car.customer.status === true) || (car.customer && car.customer.status === false && car.deliveryOptions && car.deliveryOptions.type !== CHARGE_ON_DELIVERY);\n\n            setIsValidOrder(isValidCustomer && isValidProducts && isValidDeliveryOptions && validCustomerType);\n        }\n    }, [car]);\n\n    const onCancelOrder = () => {\n        const dirty = car.customer.id || car.products.length > 0;\n\n        if (!dirty) {\n            resetOrder();\n            return;\n        }\n\n        ConfirmationModalAction({\n            title: 'Confirmación',\n            description: '¿Seguro desea cancelar el pedido?',\n            id: '_OrderModal',\n            onConfirm: () => {\n                resetOrder();\n            }\n        });\n    }\n\n    const resetOrder = () => {\n        onResetOrder();\n        props.history.push(\"/orders\");\n    }\n\n    const onCreateOrder = () => {\n        if(!loading) {\n            const order = {\n                customer: car.customer.id,\n                deliveryMethod: car.deliveryOptions.method,\n                deliveryCost: car.deliveryOptions.cost,\n                chargeOnDelivery: car.deliveryOptions.type === 3,\n                origen: car.deliveryOptions.origin,\n                deliveryType: parseInt(car.deliveryOptions.type),\n                otherMethod: car.deliveryOptions.otherMethod,\n                products: car.products.map(prod => ({\n                    id: prod.origin.id,\n                    productSize: prod.sizeId,\n                    quantity: prod.quantity,\n                    discountPercentage: prod.discountPercentage,\n                }))\n            };\n\n            if (DELIVERY_METHODS_PAYMENT_TYPES.includes(order.deliveryMethod)) {\n                order.piecesForChanges = parseInt(car.deliveryOptions.piecesForChanges);\n                order.paymentMode = car.deliveryOptions.paymentType === PAYMENT_TYPES.CASH ? 1 : 2;\n            } else {\n                order.deliveryLocality = car.deliveryOptions.deliveryLocality;\n\n                if (((order.deliveryType == CHARGE_ON_DELIVERY && order.deliveryMethod != 'MENSAJERO') || order.deliveryMethod == 'PAYU') && order.deliveryLocality == null) {\n                        showMessage.error(\"Localidad Requerida\");\n                        return false;\n                }\n\n            }\n\n            onRegisterOrder(order, props.history);\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <div className=\"page-content\">\n                <Container fluid>\n                    <Breadcrumb hasBack path=\"/orders\" title=\"Crear pedido\" item={\"Pedido\"}/>\n                    <HasPermissions permission={PERMISSIONS.ORDER_CREATE} renderNoAccess={() => <NoAccess/>}>\n                        <Card className=\"mb-3\">\n                            <CardBody>\n                                <Row>\n                                    <Col md={12}>\n                                        <OrderCustomer/>\n                                    </Col>\n                                </Row>\n                                <hr/>\n                                <Row>\n                                    <Col md={12}>\n                                        <OrderProducts/>\n                                    </Col>\n                                </Row>\n                                <hr/>\n                                <Row>\n                                    <Col md={12}>\n                                        <OrderCar/>\n                                    </Col>\n                                </Row>\n                                <hr/>\n                                <Row>\n                                    <Col md={12}>\n                                        <OrderDeliveryOptions/>\n                                    </Col>\n                                </Row>\n                                <hr/>\n                                <Row>\n                                    <Col md={12}>\n                                        <OrderSummary/>\n                                    </Col>\n                                </Row>\n                                <hr/>\n                                <Row>\n                                    {error && (\n                                        <Col md={12} className=\"text-center\">\n                                            <div className=\"alert alert-danger\">\n                                                {error}\n                                            </div>\n                                        </Col>\n                                    )}\n\n                                    <Col md={12} className=\"text-center\">\n                                        <div className=\"btn-group\">\n                                            <button type=\"button\" className=\"btn btn-light text-danger\" onClick={() => onCancelOrder()}>\n                                                Cancelar\n                                            </button>\n                                            <button type=\"button\" className=\"btn btn-primary\" disabled={!isValidOrder} onClick={() => onCreateOrder()}>\n                                                {loading && <Spinner size=\"sm\" className=\"m-1\" color=\"primary\"/>}\n                                                <i className=\"uil uil-shopping-cart-alt me-2\"> </i> Crear pedido\n                                            </button>\n                                        </div>\n                                    </Col>\n                                </Row>\n                            </CardBody>\n                        </Card>\n                    </HasPermissions>\n                </Container>\n            </div>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {car, loading, error} = state.Order\n    return {car, loading, error}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onResetOrder: () => {\n        dispatch(resetCustomer());\n        dispatch(resetProduct());\n        dispatch(resetCar());\n    },\n    onRegisterOrder: (order, history) => dispatch(registerOrder(order, history))\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(CreateOrder)\n)\n\nCreateOrder.propTypes = {\n    onResetOrder: PropTypes.func,\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n","/Users/ramon/Repositories/lucy-moie/src/pages/UserEdit/index.js",["1500","1501","1502"],"import React, {useEffect, useState} from \"react\"\nimport {CardBody, Col, Container, Label, Row} from \"reactstrap\"\nimport {AvForm} from \"availity-reactstrap-validation\"\nimport {Card} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport {apiError} from \"../../store/auth/login/actions\";\nimport PropTypes from \"prop-types\";\nimport {getUser, registerUser, updateUser} from \"../../store/user/actions\";\nimport {FieldSelect, FieldSwitch, FieldText} from \"../../components/Fields\";\nimport Breadcrumb from \"../../components/Common/Breadcrumb\";\nimport {STATUS} from \"../../common/constants\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\nimport {fetchDataApi} from \"../../helpers/backend_helper\";\nimport * as url from \"../../helpers/url_helper\";\nimport {sortList} from \"../../common/utils\";\nimport {PERMISSIONS} from \"../../helpers/security_rol\";\nimport NoAccess from \"../../components/Common/NoAccess\";\nimport HasPermissions from \"../../components/HasPermissions\";\n\nconst UserEdit = (props) => {\n    const {registerUser, updateUser, getUser, user} = props;\n    const [userData, setUserData] = useState({_status: STATUS.ACTIVE});\n    const [rolesOptions, setRolesOptions] = useState([]);\n    const [roles, setRoles] = useState([]);//group\n    const isEdit = props.match.params.id;\n\n    //carga inicial\n    useEffect(() => {\n        getRoles();\n        if (isEdit && getUser) {\n            getUser(props.match.params.id);\n        }\n    }, [getUser]);\n\n    useEffect(() => {\n        if (user.id && isEdit) {\n            let rol = null;\n            if (user.securityRol) {\n                rol = {label: user.securityRol.name, value: user.securityRol.id}\n            }\n            setUserData({...user, _status: user.status, rol});\n        }\n    }, [user]);\n\n    const getRoles = () => {\n        fetchDataApi(url.SECURITY_ROLES).then(resp => {\n            let list = sortList(resp.data, 'name');\n            setRoles(list);\n            setRolesOptions(list.map(p => ({label: p.name, value: p.id})));\n        })\n    };\n\n    const handleValidSubmit = (event, values) => {\n        const data = {...values, status: values._status};\n        if (data.rol) {\n            data.securityRol = {id: data.rol.value};\n        }\n        delete data.rol;\n        delete data._status;\n        if (!isEdit) {\n            registerUser(data, props.history)\n        } else {\n            updateUser(props.match.params.id, data, props.history)\n        }\n    }\n    return (\n        <React.Fragment>\n            <div className=\"page-content\">\n                <Container fluid>\n                    <Breadcrumb hasBack path=\"/users\" title={userData.name} item={\"Usuario\"}/>\n                    <HasPermissions permissions={[PERMISSIONS.USER_EDIT, PERMISSIONS.USER_CREATE]} renderNoAccess={() => <NoAccess/>}>\n                        <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => handleValidSubmit(e, v)}>\n                            <Row className=\"mb-5\">\n                                <Col xl=\"8\">\n                                    <Card>\n                                        <CardBody>\n                                            <div className={\"mt-1 mb-5\"} style={{position: \"relative\"}}>\n                                                <div className={\"float-end\"}>\n                                                    <Row>\n                                                        <Col>\n                                                            ¿Activo?\n                                                        </Col>\n                                                        <Col>\n                                                            <FieldSwitch defaultValue={userData._status} name={\"_status\"}/>\n                                                        </Col>\n                                                    </Row>\n                                                </div>\n                                            </div>\n                                            <Row>\n                                                <Col md=\"6\">\n                                                    <div className=\"mb-3\">\n                                                        <Label htmlFor=\"name\">Nombre <span className=\"text-danger\">*</span></Label>\n                                                        <FieldText\n                                                            id={\"name\"}\n                                                            name={\"name\"}\n                                                            value={userData.name}\n                                                            minLength={1}\n                                                            maxLength={255}\n                                                            required\n                                                        />\n                                                    </div>\n                                                </Col>\n                                                <Col md=\"6\">\n                                                    <div className=\"mb-3\">\n                                                        <Label htmlFor=\"lastname\">Apellido <span className=\"text-danger\">*</span></Label>\n                                                        <FieldText\n                                                            id={\"lastname\"}\n                                                            name={\"lastname\"}\n                                                            value={userData.lastname}\n                                                            minLength={1}\n                                                            maxLength={255}\n                                                            required\n                                                        />\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col md=\"6\">\n                                                    <div className=\"mb-3\">\n                                                        <Label htmlFor=\"email\">Correo</Label>\n                                                        <FieldText\n                                                            id={\"email\"}\n                                                            name={\"email\"}\n                                                            value={userData.email}\n                                                            maxLength={300}\n                                                        />\n                                                    </div>\n                                                </Col>\n                                                <Col md=\"6\">\n                                                    <div className=\"mb-3\">\n                                                        <Label htmlFor=\"lastname\">Usuario <span className=\"text-danger\">*</span></Label>\n                                                        <FieldText\n                                                            id={\"username\"}\n                                                            name={\"username\"}\n                                                            value={userData.username}\n                                                            minLength={1}\n                                                            maxLength={45}\n                                                            required\n                                                        />\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col md=\"6\">\n                                                    <div className=\"mb-3\">\n                                                        <Label htmlFor=\"rol\">Rol <span className=\"text-danger\">*</span></Label>\n                                                        <FieldSelect\n                                                            id={\"rol\"}\n                                                            name={\"rol\"}\n                                                            options={rolesOptions}\n                                                            defaultValue={userData.rol && userData.rol.value}\n                                                            isSearchable\n                                                        />\n                                                    </div>\n                                                </Col>\n                                                {!userData.id && (\n                                                    <Col md=\"6\">\n                                                        <div className=\"mb-3\">\n                                                            <Label htmlFor=\"password\">Clave</Label>\n                                                            <FieldText\n                                                                id={\"password\"}\n                                                                name={\"password\"}\n                                                                type=\"password\"\n                                                                value={userData.password}\n                                                                maxLength={50}\n                                                            />\n                                                        </div>\n                                                    </Col>\n                                                )}\n                                            </Row>\n                                            <Row>\n                                                <Col md=\"12\">\n                                                    <div className=\"mb-3\">\n                                                        <Label htmlFor=\"lastname\">Whatsapps <span className=\"text-danger\">*</span></Label>\n                                                        <FieldText\n                                                            id={\"whatsapps\"}\n                                                            name={\"whatsapps\"}\n                                                            value={userData.whatsapps}\n                                                            minLength={5}\n                                                            maxLength={500}\n                                                            required\n                                                        />\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col md={12} className=\"text-right\">\n                                                    <ButtonSubmit loading={props.loading}/>\n                                                </Col>\n                                            </Row>\n                                        </CardBody>\n                                    </Card>\n                                </Col>\n                            </Row>\n                        </AvForm>\n                    </HasPermissions>\n                </Container>\n            </div>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {error, user, loading} = state.User\n    return {error, user, loading}\n}\n\nexport default withRouter(\n    connect(mapStateToProps, {apiError, registerUser, updateUser, getUser})(UserEdit)\n)\n\nUserEdit.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/Template/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/PostSale/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Offices/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/TemplateEdit/index.js",["1503","1504"],"import React, {useEffect, useRef, useState} from \"react\"\nimport {CardBody, Col, Container, Label, Row} from \"reactstrap\"\nimport {AvForm} from \"availity-reactstrap-validation\"\nimport {Card} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {getTemplate, registersTemplate, updateTemplate} from \"../../store/template/actions\";\nimport {FieldSwitch, FieldText} from \"../../components/Fields\";\nimport Breadcrumb from \"../../components/Common/Breadcrumb\";\nimport {GROUPS, STATUS} from \"../../common/constants\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\nimport useHookValue from \"../../components/mentions/useHookValue\";\nimport MultiMention from \"../../components/mentions/MultiMention\";\nimport {getFieldOptionByGroups} from \"../../store/fieldOptions/actions\";\nimport {Editor} from '@tinymce/tinymce-react';\nimport {PERMISSIONS} from \"../../helpers/security_rol\";\nimport NoAccess from \"../../components/Common/NoAccess\";\nimport HasPermissions from \"../../components/HasPermissions\";\n\n\nconst TemplateEdit = (props) => {\n    const {onGetTemplate, template, onGetMentions, mentions} = props;\n    const [templateData, setTemplateData] = useState({_status: STATUS.ACTIVE});\n    const [dataMentions, setDataMentions] = useState([]);\n    const isEdit = props.match.params.id;\n    const [sourceValue, onSourceChange, onSourceAdd, setSourceValue] = useHookValue('');\n\n    const editorRef = useRef(null);\n\n    //carga inicial\n    useEffect(() => {\n        if (isEdit && onGetTemplate) {\n            onGetTemplate(props.match.params.id);\n            onGetMentions();\n        }\n    }, [onGetTemplate]);\n\n    //cargar la información de plantilla\n    useEffect(() => {\n        if (template.id && isEdit) {\n            setTemplateData({...template, _status: template.status});\n            setSourceValue(template.template);\n        }\n    }, [template]);\n\n    useEffect(() => {\n        if (mentions && mentions.length > 0) {\n            setDataMentions(mentions.map(m => ({id: '{{' + m.value + '}}', display: m.value,})))\n        }\n    }, [mentions]);\n\n    const handleValidSubmit = (event, values) => {\n        const data = Object.assign({}, values, {status: values._status, template: sourceValue});\n        delete data._status;\n\n        if (!isEdit) {\n            props.onRegistersTemplate(data, props.history)\n        } else {\n            props.onUpdateTemplate(props.match.params.id, data, props.history)\n        }\n    }\n    return (\n        <React.Fragment>\n            <div className=\"page-content\">\n                <Container fluid>\n                    <Breadcrumb hasBack path=\"/templates\" title={templateData.reference} item={\"Plantilla\"}/>\n\n                    <HasPermissions permissions={[PERMISSIONS.TEMPLATE_CREATE, PERMISSIONS.TEMPLATE_EDIT]} renderNoAccess={() => <NoAccess/>}>\n                        <AvForm className=\"needs-validation\" autoComplete=\"off\"\n                                onValidSubmit={(e, v) => {\n                                    handleValidSubmit(e, v)\n                                }}>\n                            <Row>\n                                <Col xl=\"12\">\n                                    <Card>\n                                        <CardBody>\n                                            <div className={\"mt-1 mb-5\"} style={{position: \"relative\"}}>\n                                                <div className={\"float-end\"}>\n                                                    <Row>\n                                                        <Col>\n                                                            ¿Activo?\n                                                        </Col>\n                                                        <Col>\n                                                            <FieldSwitch defaultValue={templateData._status} name={\"_status\"}/>\n                                                        </Col>\n                                                    </Row>\n                                                </div>\n                                            </div>\n                                            <Row>\n                                                <Col md=\"12\">\n                                                    <div className=\"mb-3\">\n                                                        <Label htmlFor=\"field_name\">Referencia <span className=\"text-danger\">*</span></Label>\n                                                        <FieldText\n                                                            id={\"field_reference\"}\n                                                            name={\"reference\"}\n                                                            value={templateData.reference}\n                                                            minLength={3}\n                                                            maxLength={255}\n                                                            required\n                                                        />\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col md=\"12\">\n                                                    <div className=\"mb-3\">\n                                                        <Label htmlFor=\"field_name\">Descripción <span className=\"text-danger\">*</span></Label>\n                                                        <FieldText\n                                                            id={\"field_description\"}\n                                                            name={\"description\"}\n                                                            value={templateData.description}\n                                                            required\n                                                        />\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            {!templateData.hasEditor ? (\n                                                    <Row>\n                                                        <Col md=\"12\">\n                                                            <div className=\"mb-3\">\n                                                                <Label htmlFor=\"field_name\">Contenido <span\n                                                                    className=\"text-danger\">*</span></Label>\n                                                                <MultiMention\n                                                                    value={sourceValue}\n                                                                    data={dataMentions}\n                                                                    onChange={onSourceChange}\n                                                                    onAdd={onSourceAdd}\n                                                                />\n                                                            </div>\n                                                        </Col>\n                                                    </Row>\n                                                ) :\n                                                <Row>\n                                                    <Editor\n                                                        onInit={(evt, editor) => editorRef.current = editor}\n                                                        initialValue={sourceValue}\n                                                        onBlur={newContent => setSourceValue(newContent) && onSourceChange}\n                                                        init={{\n                                                            height: 500,\n                                                            menubar: false,\n                                                            plugins: \"code\",\n                                                            toolbar: 'undo redo | formatselect | code |',\n                                                            content_style: 'body { font-family:Helvetica,Arial,sans-serif; font-size:14px }',\n                                                            apply_source_formatting: true,\n                                                            cleanup: false,\n                                                            cleanup_on_startup: false\n                                                        }}\n                                                    />\n                                                </Row>\n                                            }\n                                            <Row>\n                                                <Col md={12} className=\"text-right\">\n                                                    <ButtonSubmit loading={props.loading}/>\n                                                </Col>\n                                            </Row>\n                                        </CardBody>\n                                    </Card>\n                                </Col>\n                            </Row>\n                        </AvForm>\n                    </HasPermissions>\n                </Container>\n            </div>\n        </React.Fragment>\n    )\n}\n\nconst mapTemplateToProps = state => {\n    const {error, loading, template} = state.Template\n    const {fieldOptions} = state.FieldOption\n    return {error, template, loading, mentions: fieldOptions}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onRegistersTemplate: (data, history) => dispatch(registersTemplate(data, history)),\n    onUpdateTemplate: (id, data, history) => dispatch(updateTemplate(id, data, history)),\n    onGetTemplate: (id) => dispatch(getTemplate(id)),\n    onGetMentions: (conditional = null, limit = 100, page) => dispatch(getFieldOptionByGroups([GROUPS.TEMPLATE_MENTIONS], limit, page)),\n})\n\nexport default withRouter(connect(mapTemplateToProps, mapDispatchToProps)(TemplateEdit))\n\nTemplateEdit.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/Bill/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Reports/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/OfficesEdit/index.js",["1505","1506","1507","1508","1509","1510","1511","1512","1513"],"import React, {useEffect, useState} from \"react\"\nimport {CardBody, Col, Container, Label, Row} from \"reactstrap\"\nimport {AvForm} from \"availity-reactstrap-validation\"\nimport {Card, Tooltip} from \"@material-ui/core\";\nimport {Link, withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport {apiError} from \"../../store/auth/login/actions\";\nimport PropTypes from \"prop-types\";\nimport {addOrderOffice, confirmOffice, deleteOffice, deleteOrderOffice, getOffice, printOfficeReport, registerOffice, resetPrintOfficeReport, updateOffice} from \"../../store/office/actions\";\nimport {FieldDate, FieldSelect, FieldText} from \"../../components/Fields\";\nimport Breadcrumb from \"../../components/Common/Breadcrumb\";\nimport {\n    DATE_FORMAT,\n    formatDate,\n    formatDateToServerEndOfDay,\n    printPartOfPage\n} from \"../../common/utils\";\nimport {DELIVERY_METHODS, DELIVERY_TYPES, GROUPS, OFFICE_STATUS, ORDERS_ENUM, STATUS} from \"../../common/constants\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\nimport {DATE_MODES} from \"../../components/Fields/InputDate\";\nimport {ConverterDeliveryType, getEmptyOptions} from \"../../common/converters\";\nimport {getDeliveryMethods, getOrdersByOffice} from \"../../store/order/actions\";\nimport {getFieldOptionByGroups} from \"../../store/fieldOptions/actions\";\nimport {StatusField} from \"../../components/StatusField\";\nimport {ConfirmationModalAction} from \"../../components/Modal/ConfirmationModal\";\nimport CustomModal from \"../../components/Modal/CommosModal\";\nimport OrderList from \"../Orders/orderList\";\nimport Conditionals from \"../../common/conditionals\";\nimport {fileOfficeTemplate, officePdfApi} from \"../../helpers/backend_helper\";\nimport {PERMISSIONS} from \"../../helpers/security_rol\";\nimport NoAccess from \"../../components/Common/NoAccess\";\nimport HasPermissions from \"../../components/HasPermissions\";\nimport {showMessage} from \"../../components/MessageToast/ShowToastMessages\";\n\nconst OfficeEdit = (props) => {\n    const {getOffice, office, deliveryMethods, orders, printReportData, refresh, refreshOrders, deleteOrderOffice} = props;\n    const [officeData, setOfficeData] = useState({_status: STATUS.ACTIVE});\n    const isEdit = props.match.params.id;\n    const [orderListConditions, setOrderListConditions] = useState([]);\n    const [deliveryMethodList, setDeliveryMethodList] = useState([]);\n    const [deliveryTypes, setDeliveryTypes] = useState(null);\n    const [deliveryMethod, setDeliveryMethod] = useState(null);\n    const [deliveryType, setDeliveryType] = useState(null);\n    const [openOrdersModal, setOpenOrdersModal] = useState(false);\n    const [ordersList, setOrdersList] = useState([]);\n    const [reportBody, setReportBody] = useState(null);\n    const [editable, setEditable] = useState(isEdit ? false : true);\n\n\n    //carga inicial\n    useEffect(() => {\n        setDeliveryTypes([getEmptyOptions(), ...DELIVERY_TYPES.map(dt => ({label: dt.label, value: dt.id}))]);\n\n        if (isEdit && getOffice) {\n            getOffice(props.match.params.id);\n        }\n\n        onGetFieldOptions();\n        onGetDeliveryMethods();\n    }, [getOffice]);\n\n    useEffect(() => {\n        if (reportBody && reportBody.length > 0) {\n            let html = null;\n            reportBody.forEach((body) => {\n                if (html) {\n                    html += '<br/>';\n                } else {\n                    html = '';\n                }\n                html += body.html;\n            })\n            printPartOfPage(html);\n        }\n    }, [reportBody]);\n\n    useEffect(() => {\n        if (orders && isEdit) {\n            setOrdersList(orders);\n        }\n    }, [orders]);\n\n    useEffect(() => {\n        if (!reportBody && printReportData && printReportData.data && printReportData.data.batch) {\n            setReportBody(printReportData.data.batch.body);\n            props.resetPrintOfficeReport();\n        }\n    }, [printReportData.data]);\n\n    useEffect(() => {\n        if (office.id && isEdit) {\n            setOfficeData({...office, _status: office.status});\n            setDeliveryType(office.type);\n            setDeliveryMethod(office.deliveryMethod);\n            getOrdersByConditional();\n        }\n    }, [office]);\n\n    useEffect(() => {\n        getOrdersByConditional();\n    }, [refreshOrders, refresh])\n\n    useEffect(() => {\n        if (deliveryMethods) {\n\n            const list = deliveryMethods || [];\n            const ot = deliveryType + '';\n            setDeliveryMethodList([getEmptyOptions(), ...list.filter(op => (op.settings.includes(ot))).map(op => ({label: op.name, value: op.code}))]);\n        }\n    }, [deliveryType, deliveryMethods]);\n\n    const handleValidSubmit = (event, values) => {\n\n        const selectedDelivery = deliveryMethods.filter(item => item.code === values?.deliveryMethod?.value)[0];\n        if (!selectedDelivery) {\n            return false;\n        }\n\n        const data = {\n            ...values,\n            status: values._status,\n            deliveryMethod: selectedDelivery.id,\n            type: values.deliveryType.value,\n            batchDate: values.batchDate[0] ? formatDateToServerEndOfDay(values.batchDate[0].end) : null\n        };\n        if (values.batchDate && values.batchDate.length === 1) {\n            data.batchDate = values.batchDate[0] ? formatDateToServerEndOfDay(values.batchDate[0]) : null\n        }\n        if (values.batchDate && values.batchDate.length > 1) {\n            data.batchDate = values.batchDate ? formatDateToServerEndOfDay(values.batchDate) : null\n        }\n        delete data._status;\n        delete data.deliveryType;\n\n        if (!isEdit) {\n            props.registerOffice(data, props.history)\n        } else {\n            props.updateOffice(props.match.params.id, data, props.history)\n        }\n    }\n\n    const getOrdersByConditional = () => {\n        const conditions = new Conditionals.Condition;\n        conditions.add(\"office\", props.match.params.id, Conditionals.OPERATORS.EQUAL);\n        onGetOrders(conditions);\n    };\n\n    const getOrdersByConditionalAndFilter = (filter) => {\n        const conditions = new Conditionals.Condition;\n        conditions.add(\"office\", props.match.params.id, Conditionals.OPERATORS.EQUAL);\n\n        if (filter.includes(\"c:\")) {\n            filter = filter.replace(\"c:\", \"\");\n            conditions.add(\"customer.name\", filter, Conditionals.OPERATORS.LIKE);\n        } else if (filter.includes(\"cc:\")) {\n            filter = filter.replace(\"cc:\", \"\");\n            conditions.add(\"customer.name\", filter, Conditionals.OPERATORS.EQUAL);\n        } else if (filter.includes(\"cemail:\")) {\n            filter = filter.replace(\"cemail:\", \"\");\n            conditions.add(\"customer.email\", filter, Conditionals.OPERATORS.EQUAL);\n        } else if (filter.includes(\"p:\")) {\n            filter = filter.replace(\"p:\", \"\");\n            conditions.add(\"id\", filter, Conditionals.OPERATORS.LIKE);\n        } else if (filter.includes(\"w:\")) {\n            filter = filter.replace(\"w:\", \"\");\n            conditions.add(\"totalWeight\", filter, Conditionals.OPERATORS.LIKE);\n        } else {\n            conditions.add(\"customer.name\", filter, Conditionals.OPERATORS.LIKE);\n        }\n        onGetOrders(conditions);\n    };\n\n    const onDelete = (id) => {\n        ConfirmationModalAction({\n            title: '¿Seguro desea eliminar este Despacho?',\n            description: 'Usted está eliminado este Despacho, una vez eliminado no podrá ser recuperado.',\n            id: '_clienteModal',\n            onConfirm: () => onConfirmDelete(id, props.history)\n        });\n    };\n\n    const onConfirm = (id) => {\n        ConfirmationModalAction({\n            title: '¿Seguro desea confirmar el despacho?',\n            description: 'Usted está confirmando este Despacho, al confirmar no podrá modificar nuevamente.',\n            id: '_clienteModal',\n            onConfirm: () => onConfirmOffice(id, props.history)\n        });\n    };\n    const onCloseModal = () => {\n        getOrdersByConditional();\n        setOpenOrdersModal(false);\n    };\n\n    const onAcceptModal = (conditionals) => {\n        getOrdersByConditional();\n        props.addOrderOffice(officeData.id, {id: 123}, conditionals, props.history);\n        setOpenOrdersModal(false);\n    };\n\n    const addOrders = () => {\n        const conditions = new Conditionals.Condition;\n        conditions.add(\"status\", ORDERS_ENUM.PRINTED, Conditionals.OPERATORS.EQUAL);//IMPRESA\n        conditions.add(\"deliveryMethod.id\", office.deliveryMethod.id, Conditionals.OPERATORS.EQUAL);\n        conditions.add(\"orderDelivery.deliveryType\", office.type, Conditionals.OPERATORS.EQUAL);\n        conditions.add('office', '', Conditionals.OPERATORS.NULL);\n        setOrderListConditions(conditions.condition);\n        setOpenOrdersModal(true);\n    };\n\n    const deleteOrders = (id) => {\n        ConfirmationModalAction({\n            title: '¿Seguro desea eliminar el pedido?',\n            description: 'Usted está confirmando eliminar este pedido, al confirmar no podrá recuperarlo nuevamente.',\n            id: '_clienteModal',\n            onConfirm: () => deleteOrderOffice(office.id, {order: id})\n        });\n    }\n\n    const onConfirmDelete = (id, history) => props.deleteOffice(id, history);\n    const onConfirmOffice = (id, history) => props.confirmOffice(id, history);\n    const onGetDeliveryMethods = (conditional = null, limit = 50, page) => props.getDeliveryMethods(conditional, limit, page);\n    const onGetFieldOptions = (conditional = null, limit = 500, page) => props.getFieldOptionByGroups([GROUPS.ORDERS_ORIGIN], limit, page);\n    const onGetOrders = (conditions) => props.getOrdersByOffice(conditions.all(), 200, 0);\n    const handleDownloadTemplate = (id) => fileOfficeTemplate('test.xls', id);\n\n    const printReport = (id) => {\n        setReportBody(null);\n        props.printOfficeReport(id);\n    }\n\n    /** Solicitar reporte PDF */\n    const requestPdfReport = async (id) => {\n        try {\n            const response = await officePdfApi(id);\n            if (response.status === 200) {\n                printPartOfPage(response.html);\n            }\n        } catch (e) {\n            showMessage.error(\"No se ha podido generar el reporte PDF\");\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <CustomModal title={\"Agregar pedidos\"} size=\"lg\" showFooter={false} isOpen={openOrdersModal} onClose={onCloseModal}>\n                <OrderList customActions={onAcceptModal} showAsModal={true} conditionals={orderListConditions} externalView/>\n            </CustomModal>\n            <div className=\"page-content\">\n                <Container fluid>\n                    <Breadcrumb hasBack path=\"/offices\" title={officeData.name} item={\"Despachos\"}/>\n                    <HasPermissions permissions={[PERMISSIONS.OFFICE_EDIT]} renderNoAccess={() => <NoAccess/>}>\n                        {officeData.status && (\n                            <Row className=\"mb-2\">\n                                <Col md={12}>\n                                    <div className={\"mb-3 float-md-start\"}>\n                                        <StatusField color={OFFICE_STATUS[officeData.status]?.color} className={\"font-size-14 mr-5\"}>\n                                            {OFFICE_STATUS[officeData.status]?.name}\n                                        </StatusField>\n                                        <small className=\"badge rounded-pill bg-soft-info font-size-14 mr-5 p-2\">Operador: {officeData?.user?.name}</small>\n                                    </div>\n                                    <div className={\"mb-3 float-md-end\"}>\n                                        <div className=\"button-items\">\n\n                                            {!!([1, 2].includes(officeData?.type)) && officeData.status === 1 && (\n                                                <Tooltip placement=\"bottom\" title=\"Descargar PDF para Cajas\" aria-label=\"add\">\n                                                    <button type=\"button\" color=\"primary\" className=\"btn-sm btn btn-outline-danger waves-effect waves-light\" onClick={() => requestPdfReport(officeData.id)}>\n                                                        <i className={\"mdi mdi-file-pdf\"}> </i> {printReportData.loading ? 'Generando...' : ''}\n                                                    </button>\n                                                </Tooltip>\n                                            )}\n\n                                            {/* <Tooltip placement=\"bottom\" title=\"Imprimir reporte\" aria-label=\"add\">\n                                            <button type=\"button\" color=\"primary\" className=\"btn-sm btn btn-outline-info waves-effect waves-light\" onClick={() => printReport(officeData.id)}>\n                                                <i className={\"mdi mdi-printer\"}> </i> {printReportData.loading ? 'Generando...' : ''}\n                                            </button>\n                                        </Tooltip>*/}\n\n                                            {!!(officeData?.type === 3 && [DELIVERY_METHODS.INTERRAPIDISIMO, DELIVERY_METHODS.SERVIENTREGA, DELIVERY_METHODS.PAYU].includes(officeData?.deliveryMethod?.code)) && (\n                                                <Tooltip placement=\"bottom\" title=\"Descargar Plantilla Excel\" aria-label=\"add\">\n                                                    <button type=\"button\" color=\"primary\" className=\"btn-sm btn btn-outline-info waves-effect waves-light\" onClick={() => handleDownloadTemplate(officeData.id)}>\n                                                        <i className={\"mdi mdi-file-excel\"}> </i>\n                                                    </button>\n                                                </Tooltip>\n                                            )}\n                                            {officeData.status === 1 && (\n                                                <>\n                                                    <Tooltip placement=\"bottom\" title=\"Eliminar despacho\" aria-label=\"add\">\n                                                        <button type=\"button\" color=\"primary\" className=\"btn-sm btn btn-outline-danger waves-effect waves-light\" onClick={() => onDelete(officeData.id)}>\n                                                            <i className={\"mdi mdi-delete\"}> </i>\n                                                        </button>\n                                                    </Tooltip>\n                                                    <Tooltip placement=\"bottom\" title=\"Agregar pedidos\" aria-label=\"add\">\n                                                        <button type=\"button\" color=\"primary\" className=\"btn-sm btn btn-outline-info waves-effect waves-light\" onClick={() => addOrders()}>\n                                                            <i className={\"mdi mdi-plus\"}> </i>\n                                                        </button>\n                                                    </Tooltip>\n                                                    <Tooltip placement=\"bottom\" title=\"Finalizar\" aria-label=\"add\">\n                                                        <button type=\"button\" color=\"primary\" className=\"btn-sm btn btn-outline-success waves-effect waves-light\" onClick={() => onConfirm(officeData.id)}>\n                                                            <i className={\"mdi mdi-check\"}> </i>\n                                                        </button>\n                                                    </Tooltip>\n                                                </>\n                                            )}\n                                        </div>\n                                    </div>\n                                </Col>\n                            </Row>\n                        )}\n                        <AvForm className=\"needs-validation\" autoComplete=\"off\"\n                                onValidSubmit={(e, v) => {\n                                    handleValidSubmit(e, v)\n                                }}>\n                            <Row>\n                                {editable ? (\n                                    <Col xl=\"4\" className=\"mb-2\">\n                                        <Card>\n                                            <CardBody>\n                                                <Row>\n                                                    <Col md=\"12\">\n                                                        <div className=\"mb-3\">\n                                                            <Label htmlFor=\"field_name\">Fecha <span className=\"text-danger\">*</span></Label>\n                                                            <FieldDate\n                                                                name={\"batchDate\"}\n                                                                mode={DATE_MODES.SINGLE}\n                                                                defaultValue={officeData.batchDate}\n                                                            />\n                                                        </div>\n                                                    </Col>\n                                                    <Col md=\"12\">\n                                                        <div className=\"mb-3\">\n                                                            <Label htmlFor=\"field_name\">Nombre <span className=\"text-danger\">*</span></Label>\n                                                            <FieldText\n                                                                id={\"field_name\"}\n                                                                name={\"name\"}\n                                                                value={officeData.name}\n                                                                minLength={3}\n                                                                maxLength={255}\n                                                                required\n                                                            />\n                                                        </div>\n                                                    </Col>\n                                                </Row>\n                                                <Row>\n                                                    <Col md=\"12\">\n                                                        <div className=\"mb-3\">\n                                                            <Label htmlFor=\"field_name\">Tipo <span className=\"text-danger\">*</span></Label>\n                                                            <FieldSelect\n                                                                id={\"deliveryType\"}\n                                                                name={\"deliveryType\"}\n                                                                options={deliveryTypes}\n                                                                defaultValue={deliveryType}\n                                                                onChange={item => setDeliveryType(item.value)}\n                                                                required\n                                                            />\n                                                        </div>\n                                                    </Col>\n                                                    <Col md=\"12\">\n                                                        <div className=\"mb-3\">\n                                                            <Label htmlFor=\"field_name\">Metodo<span className=\"text-danger\">*</span></Label>\n                                                            <FieldSelect\n                                                                id={\"deliveryMethod\"}\n                                                                name={\"deliveryMethod\"}\n                                                                options={deliveryMethodList}\n                                                                defaultValue={deliveryMethod?.code}\n                                                                onChange={item => setDeliveryMethod(item.value)}\n                                                                required\n                                                            />\n                                                        </div>\n                                                    </Col>\n                                                </Row>\n                                                <Row>\n                                                    <Col md=\"12\">\n                                                        <div className=\"mb-3\">\n                                                            <Label htmlFor=\"field_name\">Descripción</Label>\n                                                            <FieldText\n                                                                type={\"textarea\"}\n                                                                id={\"description\"}\n                                                                name={\"description\"}\n                                                                value={officeData.description}\n                                                                minLength={3}\n                                                                maxLength={255}\n                                                            />\n                                                        </div>\n                                                    </Col>\n                                                </Row>\n\n                                                <Row>\n                                                    <Col md={12} className=\"text-right\">\n                                                        <button type=\"button\" className=\"btn btn-light\" onClick={() => setEditable(false)}> Cerrar</button>\n                                                        <ButtonSubmit loading={props.loading}/>\n                                                    </Col>\n                                                </Row>\n                                            </CardBody>\n                                        </Card>\n                                    </Col>) : (\n                                    <Col xl=\"4\" className=\"mb-2\">\n                                        <Card>\n                                            <div className=\"float-end\">\n                                                <Tooltip placement=\"bottom\" title=\"Editar despacho\" aria-label=\"add\">\n                                                    <button type=\"button\"\n                                                            size=\"small\"\n                                                            className=\"btn btn-sm text-primary cursor-pointer\"\n                                                            onClick={() => {\n                                                                setEditable(true);\n                                                            }}>\n                                                        <i className=\"uil uil-pen font-size-18\"> </i>\n                                                    </button>\n                                                </Tooltip>\n                                            </div>\n                                            <CardBody>\n                                                <Row>\n                                                    <Col md={12}>\n                                                        <label>Fecha: </label>\n                                                        <span className=\"p-1\">{formatDate(officeData.batchDate, DATE_FORMAT.ONLY_DATE)}</span>\n                                                    </Col>\n                                                    <Col md={12}>\n                                                        <label>Nombre: </label>\n                                                        <span className=\"p-1\">{officeData.name}</span>\n                                                    </Col>\n                                                    <Col md={12}>\n                                                        <label>Tipo: </label>\n                                                        <span className=\"p-1\">{ConverterDeliveryType(deliveryType)}</span>\n                                                    </Col>\n                                                    <Col md={12}>\n                                                        <label>Metodo: </label>\n                                                        <span className=\"p-1\">{deliveryMethod?.code}</span>\n                                                    </Col>\n                                                    <Col md={12}>\n                                                        <label>Descripción: </label>\n                                                        <span className=\"p-1\">{officeData.description}</span>\n                                                    </Col>\n                                                </Row>\n                                            </CardBody>\n                                        </Card>\n                                    </Col>\n                                )}\n\n                                <Col xl=\"8\">\n                                    <Card>\n                                        <CardBody>\n                                            <h4 className=\"card-title text-info\"><i\n                                                className=\"uil-shopping-cart-alt me-2\"> </i> Pedidos en despacho</h4> <br/>\n                                            <Col md=\"8\">\n                                                <div className=\"mb-3\">\n                                                    <FieldText\n                                                        id={\"searchBar\"}\n                                                        name={\"dianCode\"}\n                                                        value={\"\"}\n                                                        minLength={0}\n                                                        maxLength={200}\n                                                        placeholder=\"Buscar un pedido...\"\n                                                        onChange={item => item.target.value === \"\" ? getOrdersByConditional() : getOrdersByConditionalAndFilter(item.target.value)}\n                                                    />\n                                                </div>\n                                            </Col>\n                                            <Row>\n                                                {ordersList.length === 0 && <p><i className=\"fa fa-box-open text-muted\"></i> Este despacho se encuentra vacio</p>}\n                                                {ordersList.sort((a, b) => a.id < b.id).map((order, k) => (\n                                                    <Col md={4} className=\"\">\n                                                        <div key={k} className=\"order-box\">\n                                                            <div>\n                                                                <Link to={`/order/${order.id}`} className=\"text-muted\">\n                                                                    <small className=\"font-weight-600\"><span className=\"text-info\">Pedido #: {order.id}</span></small>\n                                                                </Link>\n                                                                <Tooltip placement=\"bottom\" title={\"Peso\"} aria-label=\"add\">\n                                                                    <small className=\"float-end text-muted\" style={{\"cursor\": \"default\"}}>\n                                                                        <i className=\"mdi mdi-weight-pound\"></i> {order.totalWeight}\n                                                                    </small>\n                                                                </Tooltip>\n                                                                <br/>\n                                                                <small><span className=\"font-weight-600\">Cliente: </span> <small>{order.customer.name}</small></small>\n                                                                {onDelete && (\n                                                                    <button size=\"small\" className=\"btn btn-sm text-danger\" onClick={() => deleteOrders(order.id)}>\n                                                                        <i className=\"uil uil-trash-alt font-size-18\"> </i>\n                                                                    </button>\n                                                                )}\n                                                            </div>\n                                                        </div>\n                                                    </Col>\n                                                ))}\n                                            </Row>\n                                            {!ordersList && (\n                                                <div className={\"m-1 pl-2\"}>No hay registros asociados</div>\n                                            )}\n                                        </CardBody>\n                                    </Card>\n                                </Col>\n                            </Row>\n                        </AvForm>\n                    </HasPermissions>\n                </Container>\n            </div>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {deliveryMethods, ordersByOffice, refresh: refreshOrders} = state.Order\n    const {error, office, loading, printReport, refresh} = state.Office\n    return {error, office, loading, deliveryMethods: deliveryMethods.data, orders: ordersByOffice, printReportData: printReport, refresh, refreshOrders}\n}\n\nexport default withRouter(\n    connect(mapStateToProps, {\n        apiError, registerOffice, deleteOffice, confirmOffice, updateOffice, getOffice,\n        getDeliveryMethods, getFieldOptionByGroups, addOrderOffice, deleteOrderOffice, getOrdersByOffice, printOfficeReport, resetPrintOfficeReport\n    })(OfficeEdit)\n)\n\nOfficeEdit.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/Payments/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/BillConfig/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/batchQueries/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/PaymentsEdit/index.js",["1514","1515","1516"],"import React, {useEffect, useState} from \"react\"\nimport {CardBody, Col, Container, Label, Row} from \"reactstrap\"\nimport {AvForm} from \"availity-reactstrap-validation\"\nimport {Card} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {FieldEmail, FieldNumber, FieldPhone, FieldSelect, FieldText} from \"../../components/Fields\";\nimport Breadcrumb from \"../../components/Common/Breadcrumb\";\nimport {BANKS_LIST, GROUPS, PAYMENT_FORMS, PAYMENT_FORMS_LIST, STATUS} from \"../../common/constants\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\nimport {getPayment, registerPayment, updatePayment} from \"../../store/payments/actions\";\nimport {getFieldOptionByGroups, registerFieldOption} from \"../../store/fieldOptions/actions\";\nimport {PERMISSIONS} from \"../../helpers/security_rol\";\nimport NoAccess from \"../../components/Common/NoAccess\";\nimport HasPermissions from \"../../components/HasPermissions\";\n\nconst PaymentEdit = (props) => {\n    const {onGetPayment, payment, onGetFieldOptions, fieldOptions} = props;\n    const [paymentFormSelected, setPaymentFormSelected] = useState(PAYMENT_FORMS.DEPOSIT);\n    const [paymentData, setPaymentData] = useState({_status: STATUS.ACTIVE});\n    const [banks, setBankList] = useState([]);\n    const isEdit = props.match.params.id;\n\n    useEffect(() => {\n        if (isEdit && onGetPayment) {\n            onGetPayment(props.match.params.id);\n        }\n    }, [onGetPayment]);\n\n    useEffect(() => {\n        if (payment.id && isEdit) {\n            setPaymentData({...payment, _status: payment.status});\n        }\n    }, [payment]);\n\n    useEffect(() => {\n        if (onGetFieldOptions) {\n            onGetFieldOptions();\n        }\n    }, [onGetFieldOptions]);\n\n    useEffect(() => {\n        if (fieldOptions && fieldOptions.length > 0) {\n            setBankList(fieldOptions.filter(op => (op.groups === GROUPS.BANKS)).map(op => ({name: op.name})).map(op => {\n                const key = op.name ? op.name : '';\n                return {label: key, value: key};\n            }));\n        } else {\n            setBankList([]);\n        }\n    }, [fieldOptions])\n\n    const handleValidSubmit = (event, values) => {\n        const data = {...values, status: values._status};\n        if (values.type) data.type = values.type.value;\n        if (values.targetBank) data.targetBank = values.targetBank.value;\n        if (values.originBank) data.originBank = values.originBank.value;\n        delete data._status;\n        if (!isEdit) {\n            props.onCreate(data, props.history)\n        } else {\n            props.onUpdate(props.match.params.id, data, props.history)\n        }\n    }\n    return (\n        <React.Fragment>\n            <div className=\"page-content\">\n                <Container fluid>\n                    <Breadcrumb hasBack path=\"/payments\" title={paymentData.name} item={\"Pagos\"}/>\n                    <HasPermissions permissions={[PERMISSIONS.PAYMENT_CREATE]} renderNoAccess={() => <NoAccess/>}>\n                        <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => handleValidSubmit(e, v)}>\n                            <Row>\n                                <Col xl=\"12\">\n                                    <Card>\n                                        <CardBody>\n                                            <Row>\n                                                <Col md=\"6\">\n                                                    <div className=\"mb-3\">\n                                                        <Label htmlFor=\"field_name\">Nombre <span className=\"text-danger\">*</span></Label>\n                                                        <FieldText\n                                                            id={\"field_name\"}\n                                                            name={\"name\"}\n                                                            value={paymentData.name}\n                                                            minLength={3}\n                                                            maxLength={255}\n                                                            required\n                                                        />\n                                                    </div>\n                                                </Col>\n                                                <Col md=\"6\">\n                                                    <div className=\"mb-3\">\n                                                        <Label htmlFor=\"field_name\">Correo</Label>\n                                                        <FieldEmail\n                                                            name={\"email\"}\n                                                            value={paymentData.email}\n                                                        />\n                                                    </div>\n                                                </Col>\n                                                <Col md=\"6\">\n                                                    <div className=\"mb-3\">\n                                                        <Label htmlFor=\"field_name\">Teléfono <span className=\"text-danger\">*</span></Label>\n                                                        <FieldPhone\n                                                            id=\"phone\"\n                                                            name=\"phone\"\n                                                            value={paymentData.phone}\n                                                            placeholder=\"\"\n                                                            type=\"text\"\n                                                            errorMessage=\"Ingrese un número valido (Ejemplo: 00000000)\"\n                                                            className=\"form-control\"\n                                                            validate={{required: {value: true}}}\n                                                            onChange={(value) => setPaymentData({...paymentData, phone: value})}\n                                                        />\n                                                    </div>\n                                                </Col>\n                                                <Col md=\"6\">\n                                                    <div className=\"mb-3\">\n                                                        <Label htmlFor=\"state\">Forma de pago <span className=\"text-danger\">*</span></Label>\n                                                        <FieldSelect\n                                                            id=\"type\"\n                                                            name={\"type\"}\n                                                            placeholder={\"Indique una forma de pago\"}\n                                                            defaultValue={paymentData.type}\n                                                            options={PAYMENT_FORMS_LIST}\n                                                            onChange={item => setPaymentFormSelected(item.value)}\n                                                            required\n                                                            isSearchable\n                                                        />\n                                                    </div>\n                                                </Col>\n                                                {(PAYMENT_FORMS.BANK_TRANSFER === paymentFormSelected) && (\n                                                    <>\n                                                        <Col md=\"6\">\n                                                            <div className=\"mb-3\">\n                                                                <Label htmlFor=\"state\">Banco origen <span className=\"text-danger\">*</span></Label>\n                                                                <FieldSelect\n                                                                    id=\"originBank\"\n                                                                    name={\"originBank\"}\n                                                                    placeholder={\"Seleccione un banco\"}\n                                                                    defaultValue={paymentData.originBank}\n                                                                    options={BANKS_LIST}\n                                                                    required\n                                                                    isSearchable\n                                                                />\n                                                            </div>\n                                                        </Col>\n                                                        <Col md=\"6\">\n                                                            <div className=\"mb-3\">\n                                                                <Label htmlFor=\"state\">Banco destino <span className=\"text-danger\">*</span></Label>\n                                                                <FieldSelect\n                                                                    id=\"targetBank\"\n                                                                    name={\"targetBank\"}\n                                                                    placeholder={\"Seleccione un banco\"}\n                                                                    defaultValue={paymentData.targetBank}\n                                                                    options={banks && banks.filter(item => item.value != \"Efecty\")}\n                                                                    required\n                                                                    isSearchable\n                                                                />\n                                                            </div>\n                                                        </Col>\n                                                    </>\n                                                )}\n                                                {(PAYMENT_FORMS.DEPOSIT === paymentFormSelected) && (\n                                                    <Col md=\"6\">\n                                                        <div className=\"mb-3\">\n                                                            <Label htmlFor=\"state\">Banco <span className=\"text-danger\">*</span></Label>\n                                                            <FieldSelect\n                                                                id=\"targetBank\"\n                                                                name={\"targetBank\"}\n                                                                placeholder={\"Seleccione un banco\"}\n                                                                defaultValue={paymentData.targetBank}\n                                                                options={banks}\n                                                                required\n                                                                isSearchable\n                                                            />\n                                                        </div>\n                                                    </Col>\n                                                )}\n                                                <Col md=\"6\">\n                                                    <div className=\"mb-3\">\n                                                        <Label htmlFor=\"field_name\">Número de consignación o transferencia</Label>\n                                                        <FieldText\n                                                            id={\"consignmentNumber\"}\n                                                            name={\"consignmentNumber\"}\n                                                            value={paymentData.consignmentNumber}\n                                                            minLength={1}\n                                                            maxLength={255}\n                                                        />\n                                                    </div>\n                                                </Col>\n                                                <Col md=\"6\">\n                                                    <div className=\"mb-3\">\n                                                        <Label htmlFor=\"field_name\">Monto de consignación o transferencia <span className=\"text-danger\">*</span></Label>\n                                                        <FieldNumber\n                                                            id={\"consignmentAmount\"}\n                                                            name={\"consignmentAmount\"}\n                                                            value={paymentData.consignmentAmount}\n                                                            required/>\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col md={12} className=\"text-right\">\n                                                    <ButtonSubmit loading={props.loading}/>\n                                                </Col>\n                                            </Row>\n                                        </CardBody>\n                                    </Card>\n                                </Col>\n                            </Row>\n                        </AvForm>\n                    </HasPermissions>\n                </Container>\n            </div>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {error, payment, loading} = state.Payments\n    const {fieldOptions} = state.FieldOption\n    return {error, payment, loading, fieldOptions}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGetFieldOptions: (conditional = null, limit = 500, page) => dispatch(getFieldOptionByGroups([GROUPS.BANKS], limit, page)),\n    onGetPayment: (id) => dispatch(getPayment(id)),\n    onCreate: (data, history) => dispatch(registerPayment(data, history)),\n    onUpdate: (data, history) => dispatch(updatePayment(data, history)),\n    onCreateFieldOption: (data, history) => dispatch(registerFieldOption(data, history)),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(PaymentEdit)\n)\n\nPaymentEdit.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/Security/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Locality/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/BillConfigEdit/index.js",["1517"],"import React, {useEffect} from \"react\"\nimport {CardBody, Container} from \"reactstrap\"\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport {apiError} from \"../../store/auth/login/actions\";\nimport PropTypes from \"prop-types\";\nimport {getBillConfig} from \"../../store/billConfig/actions\";\nimport Breadcrumb from \"../../components/Common/Breadcrumb\";\nimport {Card} from \"@material-ui/core\";\nimport BillConfigForm from \"./BillConfigForm\";\nimport {PERMISSIONS} from \"../../helpers/security_rol\";\nimport NoAccess from \"../../components/Common/NoAccess\";\nimport HasPermissions from \"../../components/HasPermissions\";\n\nconst BillConfigEdit = (props) => {\n    const {getBillConfig, billConfig} = props;\n    const isEdit = props.match.params.id;\n\n    //carga inicial\n    useEffect(() => {\n        if (isEdit && getBillConfig) {\n            getBillConfig(props.match.params.id);\n        }\n    }, [getBillConfig]);\n\n    return (\n        <React.Fragment>\n            <div className=\"page-content\">\n                <Container fluid>\n                    <Breadcrumb hasBack path=\"/billConfigs\" title={billConfig.name} item={\"Resolución\"}/>\n                    <HasPermissions permissions={[PERMISSIONS.BILL_CREATE, PERMISSIONS.BILL_EDIT]} renderNoAccess={() => <NoAccess/>}>\n                        <Card>\n                            <CardBody>\n                                <BillConfigForm billConfig={billConfig}/>\n                            </CardBody>\n                        </Card>\n                    </HasPermissions>\n                </Container>\n            </div>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {error, billConfig, loading} = state.BillConfig\n    return {error, billConfig, loading}\n}\n\nexport default withRouter(\n    connect(mapStateToProps, {apiError, getBillConfig})(BillConfigEdit)\n)\n\nBillConfigEdit.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/ProductOrderEdit/index.js",["1518","1519","1520","1521","1522","1523","1524","1525","1526"],"import React, {useEffect, useState} from \"react\"\nimport {Card, CardBody, Col, Container, Row, Spinner} from \"reactstrap\"\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport Breadcrumb from \"../../components/Common/Breadcrumb\";\nimport {PERMISSIONS} from \"../../helpers/security_rol\";\nimport NoAccess from \"../../components/Common/NoAccess\";\nimport HasPermissions from \"../../components/HasPermissions\";\nimport Conditionals from \"../../common/conditionals\";\nimport {clearProducts, getProducts, reorderProduct, resetProduct} from \"../../store/product/actions\";\nimport {DEFAULT_PAGE_LIMIT} from \"../../common/pagination\";\nimport {arrayMove, SortableContainer, SortableElement} from 'react-sortable-hoc';\nimport Images from \"../../components/Common/Image\";\nimport {getImageByGroup, getImageByQuality, productPriceWithDiscount} from \"../../common/utils\";\nimport {getCategory} from \"../../store/category/actions\";\nimport {resetOrderCategoryApi} from \"../../helpers/backend_helper\";\nimport HasPermissionsFunc from \"../../components/HasPermissionsFunc\";\n\nconst SortableItem = SortableElement(({value, index}) => (\n    <Col xs={3} className={`text-center ${!value.published || (value.productAvailable && value.productAvailable.available <= 0) ? 'opacity-50' : ''}`} style={{padding: '20px', position:\"relative\"}}>\n        {value.quantity}\n        <div className={`border-1`} id={`product-${index}`} role=\"tabpanel\">\n            <Images src={`${getImageByQuality(getImageByGroup(value.productImage, 1), 'medium')}`}\n                    alt={\"image\"}\n                    height={350}\n                    className=\"img-fluid d-block\"\n                    styles={{height: '250px', width: '303px', borderRadius: '8px', 'marginLeft': '4px'}}\n            />\n            <div style={{ position:\"absolute\", bottom:\"20px\" }}>\n                <span style={{\"fontWeight\": \"bold\", \"fontSize\": \"15px\"}} className={\"text-danger border badge rounded-pill p-2  bg-soft-danger m-2\"}>{value.reference}</span>\n                <span style={{\"fontWeight\": \"bold\"}} className={\"border text-white badge rounded-pill p-2  bg-soft-secondary\"}>{productPriceWithDiscount(value)}</span>\n            </div>\n        </div>\n    </Col>\n));\n\nconst SortableList = SortableContainer(({items}) => {\n    return (\n            <div style={{margin: \"80px 30px\",minWidth: \"920px\"}}>\n            <Row>\n            {items && items.map((value, index) => (\n                <SortableItem key={`item-${value.id}`} index={index} value={value} />\n            ))}\n            </Row>\n            </div>\n    );\n});\n\n\nconst ProductOrderEdit = (props) => {\n    const {onGetProducts, products, onReorderProduct, onGetCategory, category, loading, onResetProducts, onClearProducts} = props;\n    const [gloading, setGloading] = useState(false);\n    const [page, setPage] = useState(0);\n    const [categoryData, setCategoryData] = useState(null);\n    const [productsList, setProductsList] = useState([]);\n    const limited = 200;\n\n    useEffect(() => {\n        if(onGetCategory){\n            //clean all\n            onResetProducts();\n            setCategoryData([]);\n            setProductsList([]);\n\n            //get category first time\n            const _category = props.match.params.id;\n            onGetCategory(_category);\n\n            //on get products\n            const conditions = new Conditionals.Condition;\n            conditions.add('category', _category);\n            const order = {field: \"orden\", type: \"asc\"};\n            onGetProducts(conditions.condition, limited, page, order);\n            setPage(page);\n        }\n    }, [onGetCategory]);\n\n    useEffect(() => {\n        if(category){\n            setCategoryData(category);\n        }\n    }, [category]);\n\n    useEffect(() => {\n        if (products && products.length > 0 && categoryData) {\n            let merged = productsList.concat(products);\n            setProductsList(merged);\n        }\n    }, [products]);\n\n    const onSortEnd = ({oldIndex, newIndex}) => {\n\n        const _newOrder = newIndex + 1;\n        const _oldOrder = oldIndex + 1;\n\n        if(category && (oldIndex !== newIndex)) {\n\n            const productToMove = (productsList.filter(item => item.orden == _oldOrder))[0];\n\n            const dataToMove = {\n                orden: _newOrder,\n                category: categoryData.id\n            };\n\n            onReorderProduct(productToMove.id, dataToMove, props.history);\n\n            let recount = 1;\n\n            let orderPointer = _newOrder;\n            if(_oldOrder > _newOrder){\n                orderPointer = _oldOrder;\n            }\n\n            const newProductsLists = productsList.map(item => {\n\n                if(recount == _newOrder){\n                    recount++;\n                }\n\n                if(item.orden <= orderPointer) {\n                    if (item.id != productToMove.id) {\n                        item.orden = recount;\n                        recount++;\n                    } else {\n                        item.orden = _newOrder;\n                    }\n                }\n                return item;\n            });\n\n            setProductsList(newProductsLists);\n            setProductsList(arrayMove(productsList, oldIndex, newIndex));\n        }\n    }\n\n    const getMore = () => {\n        const nextPage = page + limited;\n        const conditions = new Conditionals.Condition;\n        conditions.add('category', category.id);\n        const order = {field: \"orden\", type: \"asc\"}\n        onGetProducts(conditions.condition, limited, nextPage, order);\n        setPage(nextPage);\n    }\n\n    const reorder = () => {\n        if((category && category.id) && !gloading) {\n            setGloading(true);\n            resetOrderCategoryApi(category.id).then(function (resp) {\n                const conditions = new Conditionals.Condition;\n                conditions.add('category', category.id);\n                const order = {field: \"orden\", type: \"asc\"}\n                onGetProducts(conditions.condition, limited, 0, order);\n                setPage(0);\n                setGloading(false);\n            });\n        }\n    }\n\n    const canReorder = (HasPermissionsFunc([PERMISSIONS.CATEGORY_REORDER]));\n\n\n    return (\n        <React.Fragment>\n            <div className=\"page-content\">\n                <Container fluid>\n                    <Breadcrumb hasBack path=\"/categories\" title={category.name} item={\"Orden de Producto\"}/>\n\n                    <HasPermissions permissions={[PERMISSIONS.PRODUCT_ORDER]} renderNoAccess={() => <NoAccess/>}>\n\n                        <div>\n                            <Card>\n                                <CardBody>\n                                    <div className={\"text-center\"}>\n                                        {canReorder && (\n                                            <button size=\"small\" className=\"btn btn-md btn-primary\" onClick={() => reorder()}>\n                                                {gloading && <Spinner size=\"sm\" className=\"m-1\" color=\"white\"/>}\n                                                Re-organizar &nbsp; <i className=\"fa fa-sync-alt\"> </i>\n                                            </button>\n                                        )}\n                                    </div>\n                                    {categoryData == null ? (\n                                        <Spinner size=\"lg\" className=\"m-5\" color=\"primary\"/>\n                                    ) : <div></div>}\n\n                                    {productsList.length > 0 && (\n                                        <SortableList items={productsList} onSortEnd={onSortEnd} lockOffset={false} axis={\"xy\"} />\n                                    )}\n                                    {!loading && (\n                                        <div className={\"text-center\"}>\n                                        <button size=\"small\" className=\"btn btn-md btn-primary\" onClick={() => getMore()}>\n                                            Mostrar m&aacute;s <i className=\"fa fa-ellipsis-h\"> </i>\n                                        </button>\n                                        </div>\n                                    )}\n                                </CardBody>\n                            </Card>\n                        </div>\n                    </HasPermissions>\n                </Container>\n            </div>\n        </React.Fragment>\n    )\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onResetProducts: () => {\n        dispatch(resetProduct());\n    },\n    onClearProducts: () => {\n        dispatch(clearProducts());\n    },\n    onGetProducts: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page, order) => dispatch(getProducts(conditional, limit, page, order)),\n    onReorderProduct: (data, history) => dispatch(reorderProduct(data, history)),\n    onGetCategory: (id) => dispatch(getCategory(id))\n})\n\nconst mapStateToProps = state => {\n    const {products, loading, meta, refresh} = state.Product\n    const {category} = state.Category\n    return {products, loading, meta, refresh, category}\n}\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(ProductOrderEdit)\n)\n\nProductOrderEdit.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/Wallet/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/WalletEdit/index.js",["1527","1528","1529","1530","1531","1532"],"import React, {useEffect, useState} from \"react\"\nimport {CardBody, Col, Container, Label, Row} from \"reactstrap\"\nimport {AvForm} from \"availity-reactstrap-validation\"\nimport {Button, Card, Tooltip} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport {apiError} from \"../../store/auth/login/actions\";\nimport PropTypes from \"prop-types\";\nimport {addAttachmentWallet, getWallet, registersWallet, updateWallet} from \"../../store/wallet/actions\";\nimport {FieldDate, FieldDecimalNumber, FieldSelect, FieldText} from \"../../components/Fields\";\nimport Breadcrumb from \"../../components/Common/Breadcrumb\";\nimport {STATUS} from \"../../common/constants\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\nimport {PERMISSIONS} from \"../../helpers/security_rol\";\nimport NoAccess from \"../../components/Common/NoAccess\";\nimport HasPermissions from \"../../components/HasPermissions\";\nimport {DATE_MODES} from \"../../components/Fields/InputDate\";\nimport {DATE_FORMAT, formatDate, priceFormat} from \"../../common/utils\";\nimport HasPermissionsFunc from \"../../components/HasPermissionsFunc\";\nimport DropZoneIcon from \"../../components/Common/DropZoneIcon\";\nimport Images from \"../../components/Common/Image\";\nimport moment from \"moment\";\nimport ButtonLoading from \"../../components/Common/ButtonLoading\";\n\nconst WalletEdit = (props) => {\n    const {getWallet, wallet, refresh, loading} = props;\n    const [walletData, setWalletData] = useState({_status: STATUS.ACTIVE});\n    const [walletAttachment, setWalletAttachment] = useState({});\n    const isEdit = props.match.params.id;\n\n    //carga inicial\n    useEffect(() => {\n        if (isEdit && getWallet) {\n            getWallet(props.match.params.id);\n        }\n        setWalletAttachment(false);\n    }, [getWallet, refresh]);\n\n    //cargar la información del cliente\n    useEffect(() => {\n        if (wallet.id && isEdit) {\n            setWalletData({...wallet, _status:wallet.status});\n        }\n    }, [wallet]);\n\n    const handleValidSubmit = (event, values) => {\n        if(canEdit) {\n            const data = Object.assign({}, values, {status: values._status});\n            delete data._status;\n\n            if(data.type){\n                data.amount = (data.type && data.type.value == 1) ? priceFormat(Math.abs(data.amount), \"\", false) : priceFormat(Math.abs(data.amount) * -1, \"\", false);\n            }\n\n            if (!isEdit) {\n                props.registersWallet(data, props.history)\n            } else {\n                props.updateWallet(props.match.params.id, data, props.history)\n            }\n        }\n    }\n\n    /** Genera el reverso */\n    const cancelMovement = () => {\n\n        if(canCancel && walletData) {\n            const newMovement = {...walletData};\n            newMovement.id = null;\n            newMovement.amount = priceFormat(parseFloat(walletData.amount) * -1, '', false);\n            newMovement.description = 'REVERSO MOV '+walletData.id+' - ' + walletData.description;\n            newMovement.canceled = 1;\n\n            props.registersWallet(newMovement);\n\n            const data = Object.assign({}, walletData, {status: walletData._status});\n            data.amount = priceFormat(parseFloat(data.amount), '', false);\n            data.canceled = 1;\n            props.updateWallet(props.match.params.id, data, props.history);\n\n        }\n    }\n\n    const handleAcceptedFiles = (files) => {\n        if(canAttach) {\n            const payload = {\n                description: 'test',\n                file: files.base64,\n                filename: files.f.name\n            };\n            setWalletAttachment(payload);\n        }\n    }\n\n    const handleConfirmFiles = (event, values) => {\n        if(!loading && canAttach) {\n            walletAttachment.description = values.description;\n            props.addAttachmentWallet(wallet.id, walletAttachment);\n        }\n    }\n\n    const handleCancelFiles = () => {\n        if(canAttach) {\n            setWalletAttachment(false);\n        }\n    }\n\n    const addDays = moment(walletData.date, \"YYYY-MM-DD\").add(4, 'days');\n    const isNotExpired = moment().isSameOrBefore(addDays);\n\n    const canEdit = ((HasPermissionsFunc([PERMISSIONS.WALLET_EDIT])) && isEdit && isNotExpired || !isEdit) && !walletData.canceled;\n    const canCancel = ((HasPermissionsFunc([PERMISSIONS.WALLET_EDIT])) && (isEdit || !isEdit)) && !walletData.canceled;\n    const canAttach = ((HasPermissionsFunc([PERMISSIONS.WALLET_EDIT])) && isEdit) && !walletData.canceled;\n\n    //only show mode\n    const renderShowMode = <HasPermissions permissions={[PERMISSIONS.WALLET_CREATE, PERMISSIONS.WALLET_EDIT]} renderNoAccess={() => <NoAccess/>}>\n        <AvForm className=\"needs-validation\" autoComplete=\"off\"\n                onValidSubmit={(e, v) => {}}>\n            <Row>\n                <Col xl=\"8\">\n                    <Card>\n                        <CardBody>\n                            <Row>\n                                <Col md=\"6\">\n                                    <div className=\"mb-3\">\n                                        <Label htmlFor=\"field_type\">Tipo <span className=\"text-danger\">*</span></Label>\n                                        <FieldSelect\n                                            disabled={!canEdit}\n                                            id={\"field_type\"}\n                                            name={\"type\"}\n                                            options={[\n                                                {value: 1, label: 'INGRESO'},\n                                                {value: 2, label: 'EGRESO'}\n                                            ]}\n                                            defaultValue={walletData.amount < 0 ? 2 : 1}\n                                            required\n                                        />\n                                    </div>\n                                </Col>\n                                <Col md=\"6\">\n                                    <div className=\"mb-3\">\n                                        <Label htmlFor=\"field_date\">Fecha <span className=\"text-danger\">*</span></Label>\n                                        <FieldText\n                                            disabled\n                                            id={\"field_date\"}\n                                            name={\"date\"}\n                                            value={formatDate(walletData.date, DATE_FORMAT.ONLY_DATE)}\n                                        />\n                                    </div>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col md=\"6\">\n                                    <div className=\"mb-3\">\n                                        <Label htmlFor=\"field_amount\">Monto <span className=\"text-danger\">*</span></Label>\n                                        <FieldText\n                                            disabled\n                                            id={\"field_amount\"}\n                                            name={\"amount\"}\n                                            value={walletData.amount ? walletData.amount.toFixed(2) : \"0.00\"}\n                                        />\n                                    </div>\n                                </Col>\n                                <Col md=\"6\">\n                                    <div className=\"mb-3\">\n                                        <Label htmlFor=\"field_name\">Descripción <span className=\"text-danger\">*</span></Label>\n                                        <FieldText\n                                            disabled\n                                            id={\"field_description\"}\n                                            name={\"description\"}\n                                            value={walletData.description}\n                                        />\n                                    </div>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col md=\"12\">\n                                    <div className=\"mb-3\">\n                                        <Label htmlFor=\"field_comment\">Comentario <span className=\"text-danger\"></span></Label>\n                                        <FieldText\n                                            disabled\n                                            id={\"field_comment\"}\n                                            name={\"comment\"}\n                                            type={\"textarea\"}\n                                            value={walletData.comment}\n                                            minLength={0}\n                                            maxLength={255}\n                                        />\n                                    </div>\n                                </Col>\n                            </Row>\n                        </CardBody>\n                    </Card>\n                </Col>\n            </Row>\n        </AvForm>\n    </HasPermissions>;\n\n    const renderAttachments = walletData.attachments && walletData.attachments.length > 0 && walletData.attachments.map(item => (\n                    <Col md={4} className=\"image-left-panel\" style={{minHeight: '225px'}}>\n                        <div className={`nav flex-column nav-pills`} id=\"v-pills-tab\" role=\"tablist\" aria-orientation=\"vertical\">\n                            <a href={item.fileUrl} target={\"_blank\"}>\n                            <div className={`cursor-pointer nav-link`}>\n                                <Images src={item.fileUrl}\n                                alt={item.fileUrl}\n                                className=\"img-fluid mx-auto d-block tab-img rounded\"/>\n                                <div className=\"text-center\"><p>{item.description}</p>\n                                </div>\n                            </div>\n                            </a>\n                        </div>\n                    </Col>\n                    ))\n\n    const addAttachment = <DropZoneIcon\n        maxFiles={1}\n        mode=\"icon\"\n        onDrop={(files) => {\n            handleAcceptedFiles(files);\n        }}\n    />\n\n    //bloque de adjuntos\n    const renderAddAttachment = <Row>\n            <Col xl=\"8\">\n                <Card>\n                    {canAttach && (\n                        <div>\n                            <div style={{padding: \"40px\"}}>\n                                <h2>Nuevo Adjunto</h2>\n\n                                {walletAttachment && walletAttachment.file ? (\n                                    <AvForm className=\"needs-validation\" autoComplete=\"off\"\n                                            onValidSubmit={(e, v) => {\n                                                handleConfirmFiles(e, v)\n                                            }}>\n                                        <div className=\"text-center\">\n                                            <Images src={walletAttachment.file}\n                                                    alt={walletAttachment.file}\n                                                    className=\"img-fluid mx-auto d-block tab-img rounded\"/>\n                                            <div style={{\"margin\": \"20px\"}}>\n                                                <FieldText\n                                                    id={\"field_description_image\"}\n                                                    name={\"description\"}\n                                                    value={\"\"}\n                                                    minLength={2}\n                                                    maxLength={30}\n                                                    maxWidth=\"200\"\n                                                    placeholder={\"Description de imagen\"}\n                                                />\n                                            </div>\n                                            <>\n                                                <Tooltip placement=\"bottom\" title=\"Aceptar\" aria-label=\"add\">\n                                                    <ButtonSubmit loading={props.loading}/>\n                                                </Tooltip>\n                                                <Tooltip placement=\"bottom\" title=\"Cancelar\" aria-label=\"add\">\n                                                    <Button color=\"default\" onClick={() => handleCancelFiles()}>\n                                                        Cancelar\n                                                    </Button>\n                                                </Tooltip>\n                                            </>\n                                        </div>\n                                    </AvForm>\n                                ) : addAttachment}\n                            </div>\n                            <hr />\n                        </div>\n                    )}\n                    <div style={{\"padding\": \"20px\"}}>\n                        <Row>\n                            {renderAttachments}\n                        </Row>\n                    </div>\n                </Card>\n            </Col>\n        </Row>\n\n    //formulario principal\n    const renderForm  = (\n        <AvForm className=\"needs-validation\" autoComplete=\"off\"\n                onValidSubmit={(e, v) => {\n                    handleValidSubmit(e, v)\n                }}>\n            <Row>\n                <Col xl=\"8\">\n                    <Card>\n                        <CardBody>\n                            <Row>\n                                <Col md=\"6\">\n                                    <div className=\"mb-3\">\n                                        <Label htmlFor=\"field_type\">Tipo <span className=\"text-danger\">*</span></Label>\n                                        <FieldSelect\n                                            id={\"field_type\"}\n                                            name={\"type\"}\n                                            options={[\n                                                {value: 1, label: 'INGRESO'},\n                                                {value: 2, label: 'EGRESO'}\n                                            ]}\n                                            defaultValue={walletData.amount < 0 ? 2 : 1}\n                                            required\n                                        />\n                                    </div>\n                                </Col>\n                                <Col md=\"6\">\n                                    <div className=\"mb-3\">\n                                        <Label htmlFor=\"field_date\">Fecha <span className=\"text-danger\">*</span></Label>\n                                        <FieldDate\n                                            id={\"field_date\"}\n                                            name={\"date\"}\n                                            mode={DATE_MODES.SINGLE}\n                                            defaultValue={walletData.date}\n                                            maxDate={formatDate(moment(), DATE_FORMAT.ONLY_DATE)}\n                                            minDate={formatDate(moment().subtract(4,'d'), DATE_FORMAT.ONLY_DATE)}\n                                        />\n                                    </div>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col md=\"6\">\n                                    <div className=\"mb-3\">\n                                        <Label htmlFor=\"field_amount\">Monto <span className=\"text-danger\">*</span></Label>\n                                        <FieldDecimalNumber\n                                            id={\"field_amount\"}\n                                            name={\"amount\"}\n                                            value={walletData.amount ? walletData.amount.toFixed(2) : \"0.00\"}\n                                            required/>\n                                    </div>\n                                </Col>\n                                <Col md=\"6\">\n                                    <div className=\"mb-3\">\n                                        <Label htmlFor=\"field_name\">Descripción <span className=\"text-danger\">*</span></Label>\n                                        <FieldText\n                                            id={\"field_description\"}\n                                            name={\"description\"}\n                                            value={walletData.description}\n                                            minLength={3}\n                                            maxLength={100}\n                                            required\n                                        />\n                                    </div>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col md=\"12\">\n                                    <div className=\"mb-3\">\n                                        <Label htmlFor=\"field_comment\">Comentario <span className=\"text-danger\"></span></Label>\n                                        <FieldText\n                                            id={\"field_comment\"}\n                                            name={\"comment\"}\n                                            type={\"textarea\"}\n                                            value={walletData.comment}\n                                            minLength={0}\n                                            maxLength={255}\n                                        />\n                                    </div>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col md={12} className=\"text-right\">\n                                    <ButtonSubmit loading={props.loading}/>\n                                </Col>\n                            </Row>\n                        </CardBody>\n                    </Card>\n                </Col>\n            </Row>\n        </AvForm>\n    );\n\n    return (\n        <React.Fragment>\n            <div className=\"page-content\">\n                <Container fluid>\n                    <Breadcrumb hasBack path=\"/wallets\" title={walletData.name} item={\"Billeteras\"}/>\n                    <HasPermissions permissions={[PERMISSIONS.WALLET_CREATE, PERMISSIONS.WALLET_EDIT, PERMISSIONS.WALLET_SHOW]} renderNoAccess={() => <NoAccess/>}>\n\n                        <div className={\"mb-3 float-md-end\"}>\n                            {canCancel && (\n                                <div className=\"button-items\">\n                                    <Tooltip placement=\"bottom\" title=\"Generar Reverso\" aria-label=\"add\">\n                                        <ButtonLoading loading={props.loading} type=\"button\" color=\"primary\" className=\"btn-sm btn btn-outline-danger waves-effect waves-light\" onClick={() => cancelMovement()}>\n                                            <i className={\"mdi mdi-delete\"}> </i>\n                                        </ButtonLoading>\n                                    </Tooltip>\n                                </div>\n                            )}\n                        </div>\n\n                        <div>\n                        {canEdit ? renderForm : renderShowMode}\n                        </div>\n                        <hr />\n                        {renderAddAttachment}\n                    </HasPermissions>\n                </Container>\n            </div>\n        </React.Fragment>\n    )\n}\n\nconst mapWalletToProps = state => {\n    const {wallet, error, loading, refresh} = state.Wallet\n    return {error, wallet, loading, refresh}\n}\n\nexport default withRouter(\n    connect(mapWalletToProps, {apiError, registersWallet, updateWallet, getWallet, addAttachmentWallet})(WalletEdit)\n)\n\nWalletEdit.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/components/HorizontalLayout/FooterUsers.js",["1533"],"import React, {Component, useEffect, useState} from \"react\"\nimport {connect} from \"react-redux\";\nimport {priceFormat} from \"../../common/utils\";\nimport FlipMove from 'react-flip-move';\nimport userImage from \"../../assets/images/users/user.png\"\nimport {baseImagePathNew} from \"../../helpers/api_helper\";\n\nclass ListItem extends Component {\n    render() {\n        const listClass = `list-item card`;\n        const style = {zIndex: 100 - this.props.index, float: 'left', margin: '0 2px'};\n        const user = this.props.user;\n\n        const _alias = user.name ? user.name.split(' ')[0] : '';\n\n        return (\n            <li id={this.props.key} className={listClass} style={style}>\n                <div style={{display: 'flex', alignItems: 'center', margin: '0 5px'}}>\n                    <img src={user.image} className=\"rounded-circle header-profile-user\" alt=\"user-pic\"/>\n                    <div className=\"flex-1\">\n                        <small className=\"mt-0 mb-1\">{user.hasCrown && <i className={\"mdi mdi-crown mr-1 text-warning\"}> </i>}{_alias} </small>\n                        <br/>\n                        <small><small className=\"m-0\">Pedidos: <b>{user.sales}</b></small></small>\n                    </div>\n                </div>\n            </li>\n        );\n    }\n};\n\nconst FooterUsers = ({data, user, countUsers}) => {\n\n    const [users, setUsers] = useState([])\n\n    useEffect(() => {\n        getData();\n    }, [countUsers])\n\n    const findData = () => {\n        let resp = countUsers;\n\n/*        resp.data = [\n            {totalAmount: 1800, origen: 6, user: {id: 1, name: 'Ramon', image: null}},\n            {totalAmount: 2000, origen: 5, user: {id: 3, name: 'Andres', image: null}},\n            {totalAmount: 3000, origen: 6, user: {id: 4, name: 'Michael', image: null}},\n            {totalAmount: 3200, origen: 6, user: {id: 8, name: 'Michael2', image: null}},\n            {totalAmount: 1500, origen: 11, user: {id: 5, name: 'Jose2', image: null}},\n            {totalAmount: 1800, origen: 4, user: {id: 7, name: 'Mario', image: null}},\n            {totalAmount: 1800, origen: 9, user: {id: 9, name: 'Mario2', image: null}},\n            {totalAmount: 1800, origen: 10, user: {id: 10, name: 'Mario3', image: null}},\n            {totalAmount: 1800, origen: 10, user: {id: 11, name: 'Mario4', image: null}},\n            {totalAmount: 1800, origen: 13, user: {id: 12, name: 'Mario4', image: null}},\n        ];*/\n\n        if (resp && resp.data && resp.data.length > 0) {\n            let u = [];\n            resp.data.filter(o => o.user && o.user.id).forEach((o, i) => u.push({\n                id: o.user.id,\n                name: o.user.name,\n                sales: o.origen,\n                amountNumber: parseFloat(o.totalAmount),\n                amount: priceFormat(o.totalAmount),\n                image: o.user.photo ? baseImagePathNew + o.user.photo : userImage\n            }));\n\n            const limit = 10;\n\n\n\n            u = u.sort(function (a, b) {\n                if(a.sales === b.sales)\n                {\n                    return (a.amountNumber < b.amountNumber) ? 1 : (a.amountNumber > b.amountNumber) ? -1 : 0;\n                }\n                else\n                {\n                    return (a.sales < b.sales) ? 1 : 0;\n                }\n            });\n\n\n\n            //u = u.sort((a, b) => a.sales === b.sales ? 0 : (a.sales > b.sales) ? 1 : -1);\n\n            if (u.length > limit) {\n                u.splice(limit);\n            }\n\n            u = u.sort(function (a, b) {\n                if(a.sales === b.sales)\n                {\n                    return (a.amountNumber < b.amountNumber) ? -1 : (a.amountNumber > b.amountNumber) ? 1 : 0;\n                }\n                else\n                {\n                    return (a.sales < b.sales) ? -1 : 1;\n                }\n            });\n\n            if (u.length > 0) {\n                let user = u[u.length - 1];\n                user.hasCrown = true;\n            }\n\n            setUsers(u);\n        }\n    }\n\n    const getData = () => {\n        if (!user || !user.id) {\n            return;\n        }\n        findData();\n    }\n\n    const render = () => {\n        return users.map((user, i) => (\n            <ListItem\n                key={user.id}\n                index={i}\n                user={user}\n            />\n        ))\n    }\n\n    return (\n        <React.Fragment>\n            <FlipMove\n                staggerDurationBy=\"30\"\n                duration={500}\n                enterAnimation={\"accordionHorizontal\"}\n                leaveAnimation='accordionHorizontal'\n                typeName=\"ul\"\n            >\n                {render()}\n            </FlipMove>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {user} = state.Login\n    const {countUsers} = state.User\n    return {user, countUsers}\n}\nconst mapDispatchToProps = dispatch => ({\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(FooterUsers)\n\n","/Users/ramon/Repositories/lucy-moie/src/components/HasPermissions.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/location/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/CommonForBoth/TopbarDropdown/UsersSalesDropdown.js",["1534"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from 'prop-types'\nimport {Link} from \"react-router-dom\"\nimport {Col, Dropdown, DropdownMenu, DropdownToggle, Row} from \"reactstrap\"\nimport SimpleBar from \"simplebar-react\"\n\n//Import images\nimport userImage from \"../../../assets/images/users/user.png\"\n\n//i18n\nimport {connect} from \"react-redux\";\nimport {countUsersOrders} from \"../../../helpers/service\";\nimport {getImagePath, priceFormat} from \"../../../common/utils\";\nimport {Tooltip} from \"@material-ui/core\";\n\nconst UsersSalesDropdown = ({countUsers}) => {\n\n    const [loading, setLoading] = useState(false)\n    const [menu, setMenu] = useState(false)\n    const [users, setUsers] = useState([])\n    const [mainUser, setMainUser] = useState({})\n\n    useEffect(() => {\n        findData(countUsers);\n    }, [countUsers])\n\n    const findData = (countUsers) => {\n        const resp = countUsers;\n        if (resp && resp.data && resp.data.length > 0) {\n            let u = [];\n\n/*            resp.data = [\n                {totalAmount: 1800, origen: 6, user: {id: 1, name: 'Ramon', image: null}},\n                {totalAmount: 2000, origen: 5, user: {id: 3, name: 'Andres', image: null}},\n                {totalAmount: 3000, origen: 6, user: {id: 4, name: 'Michael', image: null}},\n                {totalAmount: 1500, origen: 1, user: {id: 5, name: 'Jose', image: null}},\n                {totalAmount: 1800, origen: 7, user: {id: 2, name: 'Mario', image: null}},\n            ];*/\n\n            resp.data.filter(o => o.user && o.user.id).forEach(o => u.push({name: o.user.name, sales: o.origen, amountNumber: parseFloat(o.totalAmount), amount: priceFormat(o.totalAmount), image: getImagePath(o.user?.photo)}))\n\n            const limit = 8;\n\n            u = u.sort(function (a, b) {\n                if(a.sales === b.sales)\n                {\n                    return (a.amountNumber > b.amountNumber) ? -1 : (a.amountNumber < b.amountNumber) ? 1 : 0;\n                }\n                else\n                {\n                    return (a.sales > b.sales) ? -1 : 1;\n                }\n            });\n\n            //u = u.sort((a, b) => a.sales === b.sales ? 0 : (a.sales > b.sales) ? -1 : 1);\n\n            if (u.length > limit) {\n                u.splice(limit);\n            }\n\n            if (u.length > 0) {\n                let user = u[0];\n                user.hasCrown = true;\n            }\n\n            setUsers(u);\n            setMainUser(u[0]);\n        }\n    }\n\n    return (\n        <>\n            <div className=\"user-sales-dropdown-menu\">\n                <Dropdown\n                    isOpen={menu}\n                    toggle={() => setMenu(!menu)}\n                    className=\"dropdown d-inline-block\"\n                    tag=\"li\"\n                >\n                    <DropdownToggle\n                        className=\"btn header-item noti-icon waves-effect\"\n                        tag=\"button\"\n                        id=\"page-header-notifications-dropdown\"\n                    >\n                        <img className=\"rounded-circle header-profile-user\" src={mainUser.image || userImage} alt=\"Header Avatar\"/>\n                        <span className=\"badge rounded-pill\"><i className={\"mdi mdi-crown font-size-18 mr-1 text-warning\"}> </i></span>\n                    </DropdownToggle>\n\n                    <DropdownMenu className=\"dropdown-menu-lg dropdown-menu-end p-0\">\n                        <div className=\"p-3\">\n                            <Row className=\"align-items-center\">\n                                <Col xs={10}>\n                                    <h6 className=\"m-0 font-size-16\"> Ventas por usuarios</h6>\n                                </Col>\n                                <Col xs={2} className=\"text-right\">\n                                    <Tooltip placement=\"bottom\" title=\"Refrescar\" aria-label=\"add\">\n                                        <button size=\"small\" className=\"btn btn-sm text-primary\" onClick={() => findData()}>\n                                            {!loading && <i className=\"uil uil-refresh\"> </i>}\n                                            {loading && <i className=\"fa fa-spinner fa-spin\"> </i>}\n                                        </button>\n                                    </Tooltip>\n                                </Col>\n                            </Row>\n                        </div>\n                        <SimpleBar style={{height: \"284px\"}}>\n                            {users.map((user, k) => (\n                                <Link to=\"\" key={k} className=\"text-reset notification-item\">\n                                    <div className=\"d-flex p-1\">\n                                        <img  src={user.image} className=\"me-3 rounded-circle avatar-xs\" alt=\"user-pic\"/>\n                                        <div className=\"flex-1\">\n                                            <h6 className=\"mt-0 mb-1\">{user.hasCrown && <i className={\"mdi mdi-crown font-size-18 mr-1 text-warning\"}> </i>}{user.name}</h6>\n                                            <div className=\"font-size-12 text-muted\">\n                                                <p className=\"mb-1\">\n                                                    Pedidos completados {user.sales}\n                                                </p>\n                                                <p className=\"mb-0\">\n                                                    <i className=\"fa fa-dollar-sign\"/>{\" \"} {user.amount}\n                                                </p>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </Link>\n                            ))}\n                        </SimpleBar>\n                    </DropdownMenu>\n                </Dropdown>\n            </div>\n        </>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {countUsers} = state.User\n    return {countUsers}\n}\nconst mapDispatchToProps = dispatch => ({\n    countUsersOrders,\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(UsersSalesDropdown)\n\nUsersSalesDropdown.propTypes = {\n    t: PropTypes.any\n}\n","/Users/ramon/Repositories/lucy-moie/src/components/CommonForBoth/TopbarDropdown/GeneralSearch.js",["1535","1536","1537","1538","1539"],"import React, {useEffect, useState} from \"react\"\nimport Conditionals from \"../../../common/conditionals\";\nimport {generateReportRestart} from \"../../../store/reports/actions\";\nimport {withRouter} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {fetchCategoriesApi, fetchCustomersApi, fetchProductsApi} from \"../../../helpers/backend_helper\";\nimport {DEFAULT_PAGE_LIMIT} from \"../../../common/pagination\";\nimport {getProducts} from \"../../../store/product/actions\";\nimport {getCustomers} from \"../../../store/customer/actions\";\nimport {getCategories} from \"../../../store/category/actions\";\n\nconst PREFIXES = {\n    PRODUCT: \"p:\",\n    CUSTOMER: \"c:\",\n    CATEGORY: \"ca:\"\n}\n\nconst GeneralSearch = (props) => {\n    const [text, setText] = useState(null)\n    const [prefix, setPrefix] = useState(null)\n\n    useEffect(() => {\n        if (prefix === PREFIXES.PRODUCT) {\n            findProduct();\n        }\n        if (prefix === PREFIXES.CUSTOMER) {\n            findCustomer();\n        }\n        if (prefix === PREFIXES.CATEGORY) {\n            findCategory();\n        }\n    }, [prefix])\n\n    const search = (e) => {\n        e.preventDefault();\n        let pref = null;\n        Object.keys(PREFIXES).forEach(pre => {\n            if (text.toLowerCase().startsWith(PREFIXES[pre])) {\n                pref = PREFIXES[pre];\n            }\n        })\n        if (null === pref) {\n            if (props.history.location.pathname === '/products') {\n                props.onGetProducts(multipleConditions([\"reference\", \"name\", \"provider\", \"providerReference\"]));\n            } else if (props.history.location.pathname === '/customers') {\n                props.onGetCustomers(multipleConditions([\"name\", \"email\", \"phone\", \"cellphone\"]));\n            } else if (props.history.location.pathname === '/categories') {\n                props.onGetCategories(singleConditions(\"name\"));\n            }\n        }\n        setPrefix(pref)\n    };\n\n    const findProduct = () => {\n        const params = parseConditions(\"reference\");\n        fetchProductsApi(params).then((p => {\n            if (p && p.data && p.data.length > 0) {\n                props.history.push(`/product/detail/${p.data[0].id}`);\n            }\n        }))\n    };\n\n    const findCustomer = () => {\n        const params = parseConditions(\"name\");\n        fetchCustomersApi(params).then((p => {\n            if (p && p.data && p.data.length > 0) {\n                props.history.push(`/customer/detail/${p.data[0].id}`);\n            }\n        }))\n    };\n\n    const findCategory = () => {\n        const params = parseConditions(\"name\");\n        fetchCategoriesApi(params).then((p => {\n            if (p && p.data && p.data.length > 0) {\n                props.history.push(`/category/${p.data[0].id}`);\n            }\n        }))\n    };\n\n    const parseConditions = (fieldName) => {\n        const conditions = new Conditionals.Condition;\n        conditions.add(fieldName, text.replace(prefix, \"\"), Conditionals.OPERATORS.EQUAL);\n        const cond = Conditionals.getConditionalFormat(conditions.all());\n        return Conditionals.buildHttpGetQuery(cond, 1);\n    };\n\n    const singleConditions = (fieldName) => {\n        const conditions = new Conditionals.Condition;\n        conditions.add(fieldName, text.replace(prefix, \"\"), Conditionals.OPERATORS.LIKE);\n        return conditions.all();\n    };\n\n    const multipleConditions = (fieldNames) => {\n        const conditions = new Conditionals.Condition;\n        fieldNames.map(fieldName => {\n            conditions.add(fieldName, text.replace(prefix, \"\"), Conditionals.OPERATORS.LIKE);\n            if(fieldName !== fieldNames[fieldNames.length - 1]) {\n                conditions.addOr();\n            }\n        });\n        return conditions.all();\n    };\n\n    return (\n        <>\n            <form className=\"app-search d-none d-lg-block\" onSubmit={search}>\n                <div className=\"position-relative\">\n                    <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        placeholder=\"Buscar...\"\n                        onChange={(e) => setText(e.target.value)}\n                    />\n                    <span className=\"uil-search\"></span>\n                </div>\n            </form>\n        </>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onRestartReport: () => dispatch(generateReportRestart()),\n    onGetProducts: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getProducts(conditional, limit, page)),\n    onGetCustomers: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getCustomers(conditional, limit, page)),\n    onGetCategories: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getCategories(conditional, limit, page)),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(GeneralSearch)\n)\n\n\n\n","/Users/ramon/Repositories/lucy-moie/src/store/auth/login/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/Common/NoDataIndication.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/Common/NoAccess.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/Common/Breadcrumb.js",[],"/Users/ramon/Repositories/lucy-moie/src/common/utils.js",["1540"],"import {BOOLEAN_STRING} from \"./constants\";\nimport moment from \"moment\";\nimport {baseImagePath, baseImagePathNew} from \"../helpers/api_helper\";\nimport {showMessage} from \"../components/MessageToast/ShowToastMessages\";\nimport userImage from \"../assets/images/users/user.png\"\nimport {saveAs} from 'file-saver';\n\nexport const BOOLEAN_STRING_OPTIONS = [\n    {label: '-', value: null},\n    {label: BOOLEAN_STRING.YES, value: true},\n    {label: BOOLEAN_STRING.NO, value: false}\n];\n\nexport const YES_NO_OPTIONS = [\n    {label: '-', value: null},\n    {label: 'Si', value: true},\n    {label: 'No', value: false}\n    ];\n\nexport const STATUS_OPTIONS = [\n    {label: '-', value: null},\n    {label: \"Activo\", value: true},\n    {label: \"Inactive\", value: false}\n];\n\nexport const PAYMENT_OPTIONS = [\n    {label: '-', value: null},\n    {label: \"Pendiente\", value: 0},\n    {label: \"Conciliado\", value: 1},\n    {label: \"Anulado\", value: 2}\n];\n\nexport const DATE_FORMAT = {\n    FULL_DATE: 'FULL_DATE',\n    ONLY_DATE: 'ONLY_DATE',\n    ONLY_TIME: 'ONLY_TIME',\n    DD_MM_YYYY: 'DD_MM_YYYY'\n};\n\nexport const isValidOption = (options, option) => {\n    return options.filter(o => o.value !== null).map(o => o.value).includes(option);\n};\n\nexport const isValidObject = (object) => {\n    return undefined !== object && null !== object;\n};\n\nexport const isValidString = (str) => {\n    return isValidObject(str) && \"\" !== str;\n};\n\nexport const priceFormat = (amount = 0, currency = \"\", decimalWithCommas = true) => {\n\n    if (amount === 0 || amount === \"\" || amount === undefined) {\n        return \"0.00\";\n    }\n\n    let amountRender = (parseFloat(amount).toFixed(2));\n    if (decimalWithCommas) {\n        amountRender = numberWithCommas(amountRender);\n        if(currency && currency != \"\"){\n            amountRender = `${currency} ${amountRender}`;\n        } else {\n            amountRender = `${amountRender}`;\n        }\n    }\n    return amountRender;\n}\n\nconst numberWithCommas =(x) =>{\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}\n\nexport const formatDate =(date, type = DATE_FORMAT.FULL_DATE) =>{\n    try {\n        switch (type) {\n            case DATE_FORMAT.FULL_DATE:\n                return moment(date, moment.ISO_8601).format('DD-MM-YYYY HH:mm:ss');\n            case DATE_FORMAT.ONLY_DATE:\n                return moment(date, moment.ISO_8601).format('YYYY-MM-DD');\n            case DATE_FORMAT.DD_MM_YYYY:\n                return moment(date, moment.ISO_8601).format('DD-MM-YYYY');\n            case DATE_FORMAT.ONLY_TIME:\n                return moment(date, moment.ISO_8601).format('HH:mm:ss');\n            default:\n                return moment(date, moment.ISO_8601).format('DD-MM-YYYY HH:mm:ss');\n        }\n    }catch (e){\n        console.log(e)\n    }\n    return moment(date, moment.ISO_8601).format('DD-MM-YYYY HH:mm:ss');\n}\n\nexport const formatDateToServerEndOfDay =(date) => {\n    try {\n        return moment(date).endOf('day').format(\"YYYY-MM-DD[T]HH:mm:ss\");\n    }catch (e){\n        console.log(e)\n    }\n    return \"\";\n}\n\nexport const formatDateToServerStartOfDay =(date) => {\n    try {\n        return moment(date).startOf('day').format(\"YYYY-MM-DD[T]HH:mm:ss\");\n    }catch (e){\n        console.log(e)\n    }\n    return \"\";\n}\n\nexport const formatDateToServer =(date) =>{\n    try {\n        return moment(date).format(\"YYYY-MM-DD[T]HH:mm:ss\");\n    }catch (e){\n        console.log(e)\n    }\n    return \"\";\n}\nexport const getMoment =() =>{\n    try {\n        return moment();\n    }catch (e){\n        console.log(e)\n    }\n    return \"\";\n}\n\nexport const getImageByGroup = (productImage, group) => {\n    try{\n        const _image = productImage.filter(item => item.group === group);\n        return _image[0];\n    }\n    catch(e){\n        return null;\n    }\n}\n\nexport const getImageByQuality = (imgData, quality) => {\n    if(!imgData) return null;\n\n    const path = imgData.path && imgData.path.includes('uploads') ? baseImagePathNew : baseImagePath;\n\n    let result = imgData.path;\n    if (!imgData.thumbs) {\n        return `${path}${result}`;\n    }\n    try {\n        if (imgData.thumbs) {\n            let thumbs = imgData.thumbs;\n            if (imgData.thumbs.startsWith && imgData.thumbs.startsWith('{')) {\n                thumbs = JSON.parse(imgData.thumbs);\n            }\n            if (thumbs[quality]) {\n                result = thumbs[quality];\n            }\n        }\n    } catch (e) {\n        console.error('Error: ' + imgData.thumbs, e);\n    }\n    return `${path}${result}?${getMoment().unix()}`;\n}\nexport const getImagePath = (photoPath) => {\n    if (!photoPath) return userImage;\n    const basePath = photoPath.includes('uploads') ? baseImagePathNew : baseImagePath;\n    return `${basePath}${photoPath}`;\n}\nexport const getBaseCategoryPath = (photoPath) => {\n    const basePath = baseImagePathNew + \"uploads/categories/\";\n    return `${basePath}${photoPath}`;\n}\n\nexport const getErrorMessage = (error) => {\n    if (!error) {\n        return \"Se ha producido un error\";\n    }\n    if (!error.response || !error.response.data || !error.response.data.error) {\n        return error.message || \"Se ha producido un error\";\n    }\n    return error.response.data.error;\n};\nexport const parseJson = (data) => {\n    let result = null;\n    try {\n        return JSON.parse(data)\n    } catch (e) {\n        console.error('parseJson', e);\n    }\n    return result;\n}\n\nexport const buildNumericOptions = (qty, sk=1, start=0) => {\n    const valueList = [];\n    for (let i = start; i <= qty;) {\n        valueList.push({label: i, value: i});\n        i+= sk;\n    }\n    return valueList;\n}\n\n//REF: https://komsciguy.com/js/a-better-way-to-copy-text-to-clipboard-in-javascript/\nexport const  copyToClipboard =(text)=> {\n    const listener = function(ev) {\n        ev.preventDefault();\n        ev.clipboardData.setData('text/plain', text);\n        showMessage.success(\"Copiado\");\n    };\n    document.addEventListener('copy', listener);\n    document.execCommand('copy');\n    document.removeEventListener('copy', listener);\n}\n\nexport async function downloadFile(fileB64, name) {\n    try {\n\n        const blob = b64toBlob(fileB64);\n        saveAs(blob, name + \".pdf\");\n    }catch(e){\n    }\n}\n\nexport const printPartOfPage=(htmlToPrint) => {\n    const iframeId = new Date().getTime();\n    let pri\n    if (document.getElementById(iframeId)) {\n        pri = document.getElementById(iframeId).contentWindow\n    } else {\n        const iframe = document.createElement('iframe')\n        iframe.setAttribute('title', iframeId)\n        iframe.setAttribute('id', iframeId)\n        iframe.setAttribute('style', 'height: 0px; width: 0px; position: absolute;')\n        document.body.appendChild(iframe)\n        pri = iframe.contentWindow\n    }\n    pri.document.open()\n    pri.document.write(htmlToPrint)\n    pri.document.close()\n    pri.focus()\n    pri.print()\n}\n\nexport const threeDots = (text, length) => {\n    if (text.trim().length > length) {\n        return text.trim().substr(0, length).trim() + \"...\";\n    }\n    return text;\n}\nexport const sortArray = (a,b, asc) => {\n    if(a === b){\n        return 0;\n    }\n    if(asc){\n        return a.id < b.id ? -1:1\n    }\n    return a.id > b.id ? 1:-1\n}\n\nexport const b64toBlob = (b64Data, contentType='', sliceSize=512) => {\n    const byteCharacters = atob(b64Data);\n    const byteArrays = [];\n\n    for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n        const slice = byteCharacters.slice(offset, offset + sliceSize);\n\n        const byteNumbers = new Array(slice.length);\n        for (let i = 0; i < slice.length; i++) {\n            byteNumbers[i] = slice.charCodeAt(i);\n        }\n\n        const byteArray = new Uint8Array(byteNumbers);\n        byteArrays.push(byteArray);\n    }\n\n    const blob = new Blob(byteArrays, {type: contentType});\n    return blob;\n}\n\nexport const sortList = (data, fieldName) => {\n    return (data || []).sort((a, b) => a[fieldName] === b[fieldName] ? 0 : (a[fieldName] > b[fieldName]) ? 1 : -1)\n};\n\n\nexport const productPriceWithDiscount = (product) => {\n    let discount = 0;\n    if(product) {\n        if (product.discount > 0) {\n            discount = (product.price * product.discount) / 100;\n        } else if (product.category && product.category.discountPercent > 0) {\n            discount = (product.price * product.category.discountPercent) / 100;\n        }\n        return priceFormat(product.price - discount);\n    } else {\n        return 0;\n    }\n}\n\nexport const trim = (_str) => {\n    if(!_str){\n       return _str;\n    }\n    _str = _str.trim();\n    _str = _str.replace(/\\s+/g, '').trim();\n    return _str;\n}\n\n//trim double spaces\nexport const __trim = (_str) => {\n    try {\n        if (!_str) {\n            return _str;\n        }\n        _str = _str.trim().replace(/\\s+/g, \" \");\n        return _str;\n    }catch(e){\n        return _str;\n    }\n}\n\n//sort alphanumeric\nexport const sortAlphanumeric = (arr,key) => {\n    try {\n        const sorted = arr.sort((a, b) => {\n            return a[key].localeCompare(b[key], undefined, {\n                numeric: true,\n                sensitivity: 'base'\n            })\n        })\n        return sorted;\n    }catch(e){\n        return arr;\n    }\n};\n\nexport const _encodePhone = (_string) => {\n    const encoded = btoa(_string);\n    return encoded;\n}\n\nexport const hiddenPhone = (phone) => {\n\n    if (!phone || phone.length <= 3) {\n        return \"\"; // Devolver cadena vacía si no hay valor\n    }\n\n    // Obtener los últimos cuatro dígitos\n    return '** ** ** ' + phone.slice(-4);\n}\n","/Users/ramon/Repositories/lucy-moie/src/common/constants.js",[],"/Users/ramon/Repositories/lucy-moie/src/helpers/security_rol.js",["1541"],"import React from 'react';\n\nexport const PERMISSIONS = {\n    PRODUCT_CREATE: 'product.create',\n    PRODUCT_EDIT: 'product.edit',\n    PRODUCT_SHOW: 'product.show',\n    PRODUCT_LIST: 'product.list',\n    PRODUCT_ORDER: 'product.order',\n    CATEGORY_CREATE: 'category.create',\n    CATEGORY_EDIT: 'category.edit',\n    CATEGORY_SHOW: 'category.show',\n    CATEGORY_LIST: 'category.list',\n    CATEGORY_REORDER: 'category.reorder',\n    CUSTOMER_CREATE: 'customer.create',\n    CUSTOMER_EDIT: 'customer.edit',\n    CUSTOMER_SHOW: 'customer.show',\n    CUSTOMER_LIST: 'customer.list',\n    CUSTOMER_DELETE: 'customer.delete',\n    CUSTOMER_EXPORT: 'customer.export',\n    CUSTOMER_PRINT_EDIT: 'customer.printEdit',\n    CUSTOMER_PHONE: 'customer.phone',\n    CUSTOMER_WHATSAPP: 'customer.whatsapp',\n    ORDER_EDIT: 'order.edit',\n    ORDER_SHOW: 'order.show',\n    ORDER_LIST: 'order.list',\n    ORDER_CREATE: 'order.create',\n    ORDER_CANCEL: 'order.cancel',\n    ORDER_AUTOSAVE_COMMENT: 'order.autoSaveComment',\n    OFFICE_CREATE: 'office.create',\n    OFFICE_EDIT: 'office.edit',\n    OFFICE_SHOW: 'office.show',\n    OFFICE_LIST: 'office.list',\n    BILL_CREATE: 'bill.create',\n    BILL_EDIT: 'bill.edit',\n    BILL_SHOW: 'bill.show',\n    BILL_LIST: 'bill.list',\n    BILL_CHANGE_ORDER: 'bill.changeOrder',\n    POSTSALE_CREATE: 'postsale.create',\n    POSTSALE_EDIT: 'postsale.edit',\n    POSTSALE_SHOW: 'postsale.show',\n    POSTSALE_LIST: 'postsale.list',\n    POSTSALE_SYNC: 'postsale.sync',\n    POSTSALE_RECEIVED: 'postsale.received',\n    PAYMENT_CREATE: 'payment.create',\n    PAYMENT_EDIT: 'payment.edit',\n    PAYMENT_SHOW: 'payment.show',\n    PAYMENT_LIST: 'payment.list',\n    REPORT_CREATE: 'report.create',\n    REPORT_EDIT: 'report.edit',\n    REPORT_SHOW: 'report.show',\n    REPORT_LIST: 'report.list',\n    USER_CREATE: 'user.create',\n    USER_EDIT: 'user.edit',\n    USER_SHOW: 'user.show',\n    USER_LIST: 'user.list',\n    SECURITY_CREATE: 'security.create',\n    SECURITY_EDIT: 'security.edit',\n    SECURITY_SHOW: 'security.show',\n    SECURITY_LIST: 'security.list',\n    SECURITY_TOKEN: 'security.token',\n    LOCALITY_CREATE: 'locality.create',\n    LOCALITY_EDIT: 'locality.edit',\n    LOCALITY_SHOW: 'locality.show',\n    LOCALITY_LIST: 'locality.list',\n    TEMPLATE_CREATE: 'template.create',\n    TEMPLATE_EDIT: 'template.edit',\n    TEMPLATE_SHOW: 'template.show',\n    TEMPLATE_LIST: 'template.list',\n    RESOLUTION_CREATE: 'resolution.create',\n    RESOLUTION_EDIT: 'resolution.edit',\n    RESOLUTION_SHOW: 'resolution.show',\n    RESOLUTION_LIST: 'resolution.list',\n    CONFIG_CREATE: 'config.create',\n    CONFIG_EDIT: 'config.edit',\n    CONFIG_SHOW: 'config.show',\n    CONFIG_LIST: 'config.list',\n    COMMENT_CREATE: 'comment.create',\n    COMMENT_EDIT: 'comment.edit',\n    COMMENT_SHOW: 'comment.show',\n    COMMENT_LIST: 'comment.list',\n    COMMENT_DELETE: 'comment.delete',\n    ORDER_PERSONAL: 'order.personal',\n    OFFICE_DOWNLOAD: 'office.download',\n    BILL_DOWNLOAD: 'bill.download',\n    POSTSALE_DOWNLOAD: 'postsale.download',\n    CATEGORY_DOWNLOAD: 'category.download',\n    DELIVERY_LOCALITY_CREATE: 'deliverylocality.create',\n    DELIVERY_LOCALITY_EDIT: 'deliverylocality.edit',\n    DELIVERY_LOCALITY_SHOW: 'deliverylocality.show',\n    DELIVERY_LOCALITY_LIST: 'deliverylocality.list',\n    WALLET_CREATE: 'wallet.create',\n    WALLET_EDIT: 'wallet.edit',\n    WALLET_SHOW: 'wallet.show',\n    WALLET_LIST: 'wallet.list',\n    ITEMS_CREATE: 'items.create',\n    ITEMS_EDIT: 'items.edit',\n    ITEMS_SHOW: 'items.show',\n    ITEMS_LIST: 'items.list',\n    CATALOG_SYNC: 'catalog.sync',\n    DASHBOARD_INVENTORY: 'dashboard.inventory',\n    DASHBOARD_ORDER_STATUS: 'dashboard.orderStatus',\n    VCARD_MANAGE: 'vcard.manage',\n    VCARD_EXPORT: 'vcard.export',\n    DASHBOARD_ALARMS: 'dashboard.alarms',\n};\nexport const hasPermissionAccess = (roles, permission) => {\n    return true;\n    //return roles.includes(permission);\n}\n","/Users/ramon/Repositories/lucy-moie/src/components/Modal/ConfirmationModal.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/bill/actions.js",["1542"],"import {\n    ADD_ORDER_BILL,\n    ADD_ORDER_BILL_FAILED,\n    ADD_ORDER_BILL_SUCCESS,\n    BILL_LIST_REFRESH,\n    CONFIRM_BILL,\n    CONFIRM_BILL_FAILED,\n    CONFIRM_BILL_SUCCESS,\n    DELETE_BILL,\n    DELETE_BILL_FAILED,\n    DELETE_BILL_SUCCESS,\n    GENERATE_CREDIT_NOTE,\n    GENERATE_CREDIT_NOTE_FAILED,\n    GENERATE_CREDIT_NOTE_SUCCESS,\n    GENERATE_REPORT_FAILED,\n    GENERATE_REPORT_REQUEST,\n    GENERATE_REPORT_RESTART,\n    GENERATE_REPORT_SUCCESS,\n    GET_BILL,\n    GET_BILL_FAILED,\n    GET_BILL_SUCCESS,\n    GET_BILLS,\n    GET_BILLS_FAILED,\n    GET_BILLS_SUCCESS,\n    QUERY_BILLS,\n    QUERY_BILLS_FAILED,\n    QUERY_BILLS_SUCCESS,\n    REGISTER_BILL,\n    REGISTER_BILL_FAILED,\n    REGISTER_BILL_SUCCESS,\n    RESET_BILL, SEND_INVOICE, SEND_INVOICE_FAILED, SEND_INVOICE_SUCCESS,\n    UPDATE_BILL,\n    UPDATE_BILL_FAILED,\n    UPDATE_BILL_SUCCESS\n} from \"./actionTypes\";\nimport Conditionals from \"../../common/conditionals\";\n\nexport const resetBill = () => ({\n    type: RESET_BILL,\n})\n\nexport const getBills = (conditional, limit, offset) => ({\n    type: GET_BILLS,\n    conditional: conditional,\n    limit: limit,\n    offset: offset\n})\n\nexport const getBillsByIds = (ids, offset) => {\n    const conditions = new Conditionals.Condition;\n    if (ids.length > 0) conditions.add(\"id\", ids.join(\"::\"), Conditionals.OPERATORS.IN);\n    return getBills(conditions.all(), ids.length, offset);\n}\n\nexport const getBillsSuccess = (data, meta) => ({\n    type: GET_BILLS_SUCCESS,\n    meta: meta,\n    payload: data,\n})\n\nexport const getBillsFailed = error => ({\n    type: GET_BILLS_FAILED,\n    payload: error,\n})\n\nexport const getBill = id => ({\n    type: GET_BILL,\n    id\n})\n\nexport const getBillSuccess = data => ({\n    type: GET_BILL_SUCCESS,\n    payload: data,\n})\n\nexport const getBillFailed = error => ({\n    type: GET_BILL_FAILED,\n    payload: error,\n})\n\nexport const registerBill = (data) => {\n    return {\n        type: REGISTER_BILL,\n        payload: {data},\n    }\n}\n\nexport const registerBillSuccess = data => {\n    return {\n        type: REGISTER_BILL_SUCCESS,\n        payload: data.bill,\n    }\n}\n\n\nexport const registerBillFailed = data => {\n    return {\n        type: REGISTER_BILL_FAILED,\n        payload: data,\n    }\n}\n\nexport const updateBill = (id, data) => {\n    return {\n        type: UPDATE_BILL,\n        payload: {id, data},\n    }\n}\n\nexport const updateBillSuccess = data => {\n    return {\n        type: UPDATE_BILL_SUCCESS,\n        payload: data,\n    }\n}\n\n\nexport const updateBillFail = error => {\n    return {\n        type: UPDATE_BILL_FAILED,\n        payload: error,\n    }\n}\n\nexport const deleteBill = (id, history) => ({\n    type: DELETE_BILL,\n    payload: {id, history}\n})\n\nexport const deleteBillSuccess = () => ({\n    type: DELETE_BILL_SUCCESS\n})\n\nexport const deleteBillFailed = error => ({\n    type: DELETE_BILL_FAILED,\n    payload: error,\n})\n\nexport const confirmBill = (id, history) => ({\n    type: CONFIRM_BILL,\n    payload: {id, history}\n})\n\nexport const confirmBillSuccess = () => ({\n    type: CONFIRM_BILL_SUCCESS\n})\n\nexport const confirmBillFailed = error => ({\n    type: CONFIRM_BILL_FAILED,\n    payload: error,\n})\n\n\nexport const countBillByStatus = () => {\n    const params = {operation: 'id::count', group: \"status\"};\n    return queryBills(params, 'statusGroup');\n}\n\nexport const queryBills = (params, node) => ({\n    type: QUERY_BILLS,\n    params: params,\n    node: node,\n})\nexport const queryBillsFailed = error => ({\n    type: QUERY_BILLS_FAILED,\n    payload: error,\n})\nexport const queryBillsSuccess = (data, meta, node) => ({\n    type: QUERY_BILLS_SUCCESS,\n    meta: meta,\n    payload: data,\n    node: node,\n})\n\nexport const addOrderBill = (id, data, conditional, history) => {\n    return {\n        type: ADD_ORDER_BILL,\n        payload: {id, data, conditional, history},\n    }\n}\n\nexport const addOrderBillSuccess = data => {\n    return {\n        type: ADD_ORDER_BILL_SUCCESS,\n        payload: data.bill,\n    }\n}\n\n\nexport const addOrderBillFailed = data => {\n    return {\n        type: ADD_ORDER_BILL_FAILED,\n        payload: data,\n    }\n}\n\nexport const refreshList = () => {\n    return {type: BILL_LIST_REFRESH}\n}\n\nexport const createCreditNote = id => ({\n    type: GENERATE_CREDIT_NOTE,\n    id\n})\nexport const createCreditNoteSuccess = () => {\n    return {\n        type: GENERATE_CREDIT_NOTE_SUCCESS\n    }\n}\nexport const createCreditNoteFailed = () => {\n    return {\n        type: GENERATE_CREDIT_NOTE_FAILED\n    }\n}\n\n\nexport const sendInvoice = id => ({\n    type: SEND_INVOICE,\n    id\n})\nexport const sendInvoiceSuccess = () => {\n    return {\n        type: SEND_INVOICE_SUCCESS\n    }\n}\nexport const sendInvoiceFailed = () => {\n    return {\n        type: SEND_INVOICE_FAILED\n    }\n}\n\n\nexport const generateReportRestart = () => {\n    return {\n        type: GENERATE_REPORT_RESTART\n    }\n}\nexport const generateReport = (data) => {\n    return {\n        type: GENERATE_REPORT_REQUEST,\n        data\n    }\n}\nexport const generateReportSuccess = (data) => {\n    return {\n        type: GENERATE_REPORT_SUCCESS,\n        data\n    }\n}\nexport const generateReportFailed = (error) => {\n    return {\n        type: GENERATE_REPORT_FAILED,\n        error\n    }\n}\n","/Users/ramon/Repositories/lucy-moie/src/store/order/actions.js",["1543","1544","1545"],"import {\n    CANCELED_STATUS_ORDER, CLEAN_ERROR_MESSAGE,\n    CONCILIATION_FAILED,\n    CONCILIATION_REQUEST,\n    CONCILIATION_SUCCESS,\n    CONFIRM_CONCILIATION_FAILED,\n    CONFIRM_CONCILIATION_REQUEST,\n    CONFIRM_CONCILIATION_RESTART,\n    CONFIRM_CONCILIATION_SUCCESS,\n    CUSTOM_ORDER_FAILED,\n    CUSTOM_ORDER_SUCCESS,\n    DO_BATCH_REQUEST, DOWNLOAD_PHOTO,\n    GET_DELIVERY_METHODS,\n    GET_DELIVERY_METHODS_FAILED,\n    GET_DELIVERY_METHODS_SUCCESS,\n    GET_DELIVERY_QUOTE,\n    GET_DELIVERY_QUOTE_FAILED,\n    GET_DELIVERY_QUOTE_SUCCESS,\n    GET_HISTORIC_ORDER,\n    GET_HISTORIC_ORDER_FAILED,\n    GET_HISTORIC_ORDER_SUCCESS, GET_LINK_PAYMENT, GET_LINK_PAYMENT_FAILED, GET_LINK_PAYMENT_SUCCESS,\n    GET_ORDER,\n    GET_ORDER_FAILED,\n    GET_ORDER_RESTART,\n    GET_ORDER_SUCCESS,\n    GET_ORDERS,\n    GET_ORDERS_FAILED,\n    GET_ORDERS_OFFICE,\n    GET_ORDERS_OFFICE_FAILED,\n    GET_ORDERS_OFFICE_SUCCESS,\n    GET_ORDERS_SUCCESS, MARK_RECEIVED, MARK_RECEIVED_FAILED, MARK_RECEIVED_SUCCESS,\n    NEXT_STATUS_ORDER,\n    PRINT_BATCH_REQUEST,\n    PRINT_BATCH_REQUEST_FAILED,\n    PRINT_BATCH_REQUEST_SUCCESS,\n    PRINT_ORDER,\n    REFRESH_DELIVERY_ORDER,\n    REFRESH_DELIVERY_ORDER_FAILED,\n    REFRESH_DELIVERY_ORDER_SUCCESS,\n    REFRESH_ORDER,\n    REGISTER_ORDER,\n    REGISTER_ORDER_FAILED,\n    REGISTER_ORDER_SUCCESS,\n    RESET_BATCH_REQUEST,\n    RESET_CAR,\n    RESET_ORDER,\n    RESUME_ORDER,\n    SYNC_DELIVERY_ORDER,\n    SYNC_DELIVERY_ORDER_FAILED,\n    SYNC_DELIVERY_ORDER_SUCCESS,\n    UPDATE_CAR,\n    UPDATE_ORDER,\n    UPDATE_ORDER_FAILED, UPDATE_ORDER_PRODUCTS,\n    UPDATE_ORDER_SUCCESS,\n} from \"./actionTypes\";\n\nexport const resetOrder = () => ({\n    type: RESET_ORDER,\n})\n\nexport const getOrders = (conditional, limit, offset, order, ordersFinished = false) => ({\n    type: GET_ORDERS,\n    conditional: conditional,\n    limit: limit,\n    offset: offset,\n    order: order,\n    ordersFinished: ordersFinished\n})\n\nexport const getOrdersSuccess = (data, meta) => ({\n    type: GET_ORDERS_SUCCESS,\n    meta: meta,\n    payload: data,\n})\n\nexport const getOrdersFailed = error => ({\n    type: GET_ORDERS_FAILED,\n    payload: error,\n})\n\nexport const getOrdersByOffice = (conditional, limit, offset) => ({\n    type: GET_ORDERS_OFFICE,\n    conditional: conditional,\n    limit: limit,\n    offset: offset\n})\n\nexport const getOrdersByOfficeSuccess = (data, meta) => ({\n    type: GET_ORDERS_OFFICE_SUCCESS,\n    meta: meta,\n    payload: data,\n})\nexport const getOrdersByOfficeFailed = error => ({\n    type: GET_ORDERS_OFFICE_FAILED,\n    payload: error,\n})\n\nexport const getOrder = id => ({\n    type: GET_ORDER,\n    id\n})\nexport const restartOrder = () => ({\n    type: GET_ORDER_RESTART\n})\n\nexport const getOrderSuccess = data => ({\n    type: GET_ORDER_SUCCESS,\n    payload: data,\n})\n\nexport const getOrderFailed = error => ({\n    type: GET_ORDER_FAILED,\n    payload: error,\n})\n\nexport const nextStatusOrder = (data, history) => {\n    return {\n        type: NEXT_STATUS_ORDER,\n        payload: { data, history },\n    }\n}\nexport const canceledStatusOrder = (data, history) => {\n    return {\n        type: CANCELED_STATUS_ORDER,\n        payload: { data, history },\n    }\n}\nexport const resumeOrder = (id, history) => {\n    return {\n        type: RESUME_ORDER,\n        payload: { id, history },\n    }\n}\nexport const historicOrder = (id) => {\n    return {\n        type: GET_HISTORIC_ORDER,\n        payload: { id },\n    }\n}\nexport const historicOrderFailed = () => {\n    return {\n        type: GET_HISTORIC_ORDER_FAILED\n    }\n}\nexport const historicOrderSuccess = (data) => {\n    return {\n        type: GET_HISTORIC_ORDER_SUCCESS,\n        payload: data ,\n    }\n}\nexport const printOrder = (id, history) => {\n    return {\n        type: PRINT_ORDER,\n        payload: { id, history },\n    }\n}\nexport const customOrderSuccess = (data, node) => {\n    return {\n        type: CUSTOM_ORDER_SUCCESS,\n        payload: data,\n        node: node,\n    }\n}\nexport const customOrderFailed = data => {\n    return {\n        type: CUSTOM_ORDER_FAILED,\n        payload: data,\n    }\n}\n\nexport const registerOrder = (data, history) => {\n    return {\n        type: REGISTER_ORDER,\n        payload: { data, history },\n    }\n}\n\nexport const registerOrderSuccess = data => {\n    return {\n        type: REGISTER_ORDER_SUCCESS,\n        payload: data.order,\n    }\n}\n\n\nexport const registerOrderFailed = data => {\n    return {\n        type: REGISTER_ORDER_FAILED,\n        payload: data,\n    }\n}\n\nexport const updateOrder = (id, data, history) => {\n    return {\n        type: UPDATE_ORDER,\n        payload: { id, data, history },\n    }\n}\n\nexport const updateOrderProducts = (id, data, history) => {\n    return {\n        type: UPDATE_ORDER_PRODUCTS,\n        payload: { id, data, history },\n    }\n}\n\nexport const increasePhotoCounter = (id) => {\n    return {\n        type: DOWNLOAD_PHOTO,\n        payload: { id },\n    }\n}\n\nexport const updateOrderSuccess = () => {\n    return {\n        type: UPDATE_ORDER_SUCCESS,\n    }\n}\nexport const updateOrderFail = error => {\n    return {\n        type: UPDATE_ORDER_FAILED,\n        payload: error,\n    }\n}\n\nexport const syncOrder = (id, data) => {\n    return {\n        type: SYNC_DELIVERY_ORDER,\n        payload: { id, data },\n    }\n}\n\nexport const syncOrderSuccess = () => {\n    return {\n        type: SYNC_DELIVERY_ORDER_SUCCESS,\n    }\n}\nexport const syncOrderFail = error => {\n    return {\n        type: SYNC_DELIVERY_ORDER_FAILED,\n        payload: error,\n    }\n}\n\nexport const refreshOrderDelivery = (id) => {\n    return {\n        type: REFRESH_DELIVERY_ORDER,\n        id: id\n    }\n}\n\nexport const refreshOrderDeliverySuccess = () => {\n    return {\n        type: REFRESH_DELIVERY_ORDER_SUCCESS,\n        payload: true\n    }\n}\nexport const refreshOrderDeliveryFail = error => {\n    return {\n        type: REFRESH_DELIVERY_ORDER_FAILED,\n        payload: error,\n    }\n}\n\nexport const getDeliveryMethods = (conditional, limit, offset) => ({\n    type: GET_DELIVERY_METHODS,\n    conditional: conditional,\n    limit: limit,\n    offset: offset\n})\nexport const getDeliveryMethodsSuccess = (data, meta) => ({\n    type: GET_DELIVERY_METHODS_SUCCESS,\n    meta: meta,\n    payload: data,\n})\nexport const getDeliveryMethodsFailed = error => ({\n    type: GET_DELIVERY_METHODS_FAILED,\n    payload: error,\n})\n\nexport const getDeliveryQuote = (request) => ({\n    type: GET_DELIVERY_QUOTE,\n    data: request\n})\n\nexport const getDeliveryQuoteSuccess = (data, meta) => ({\n    type: GET_DELIVERY_QUOTE_SUCCESS,\n    meta: meta,\n    payload: data,\n})\n\nexport const getDeliveryQuoteFailed = error => ({\n    type: GET_DELIVERY_QUOTE_FAILED,\n    payload: error,\n})\n\n\nexport const resetCar = () => ({type: RESET_CAR});\n\nexport const updateCard = (payload) => ({\n    type: UPDATE_CAR,\n    payload\n})\n\n\n//BATCH_REQUEST\nexport const doPrintBatchRequest = (conditionals) => ({\n    type: DO_BATCH_REQUEST,\n    conditionals: conditionals\n})\nexport const resetBatchRequest = () => ({\n    type: RESET_BATCH_REQUEST\n})\nexport const printBatchRequest = (conditionals) => ({\n    type: PRINT_BATCH_REQUEST,\n    conditionals: conditionals\n})\nexport const printBatchRequestSuccess = (data, meta) => ({\n    type: PRINT_BATCH_REQUEST_SUCCESS,\n    meta: meta,\n    data: data,\n})\nexport const printBatchRequestFailed = error => ({\n    type: PRINT_BATCH_REQUEST_FAILED,\n    error: error,\n})\n\nexport const refreshOrders = () => {\n    return {\n        type: REFRESH_ORDER\n    }\n}\n\n//CONCILIATION\nexport const doConciliation = (orders) => ({\n    type: CONCILIATION_REQUEST,\n    orders\n})\nexport const doConciliationSuccess = () => ({\n    type: CONCILIATION_SUCCESS\n})\nexport const doConciliationFailed = (error) => ({\n    type: CONCILIATION_FAILED,\n    error\n})\n//CONFIRM CONCILIATION\nexport const confirmConciliation = (orders) => ({\n    type: CONFIRM_CONCILIATION_REQUEST,\n    orders\n})\nexport const confirmConciliationSuccess = () => ({\n    type: CONFIRM_CONCILIATION_SUCCESS\n})\nexport const confirmConciliationFailed = (error) => ({\n    type: CONFIRM_CONCILIATION_FAILED,\n    error\n})\nexport const confirmConciliationRestart = () => ({\n    type: CONFIRM_CONCILIATION_RESTART\n})\nexport const cleanErrorMessage = () => ({\n    type: CLEAN_ERROR_MESSAGE\n})\n\nexport const generateLinkPayment = (id) => {\n    return {\n        type: GET_LINK_PAYMENT,\n        payload: { id },\n    }\n}\nexport const generateLinkPaymentSuccess = (url) => {\n    return {\n        type: GET_LINK_PAYMENT_SUCCESS,\n        data: url,\n    }\n}\nexport const generateLinkPaymentFailed = (id) => {\n    return {\n        type: GET_LINK_PAYMENT_FAILED,\n        payload: { id },\n    }\n}\n","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/orderList.js",["1546","1547","1548","1549","1550"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from \"prop-types\"\nimport {connect} from \"react-redux\"\nimport {Card, CardBody, Col, Row} from \"reactstrap\"\nimport paginationFactory, {PaginationListStandalone, PaginationProvider,} from \"react-bootstrap-table2-paginator\"\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\"\nimport BootstrapTable from \"react-bootstrap-table-next\"\n\nimport {Link} from \"react-router-dom\"\nimport {DEFAULT_PAGE_LIMIT} from \"../../common/pagination\";\nimport {TableFilter} from \"../../components/TableFilter\";\nimport {normalizeColumnsList} from \"../../common/converters\";\nimport NoDataIndication from \"../../components/Common/NoDataIndication\";\nimport orderColumns from \"./orderColumn\";\nimport {Button, Tooltip} from \"@material-ui/core\";\nimport {\n    doConciliation,\n    doPrintBatchRequest,\n    getOrders,\n    resetOrder\n} from \"../../store/order/actions\";\nimport OrderEdit from \"./orderEdit\";\nimport Conditionals from \"../../common/conditionals\";\nimport CustomModal from \"../../components/Modal/CommosModal\";\nimport OrderConciliationForm from \"./orderConciliationsForm\";\nimport ConciliationReportForm from \"../Reports/ConciliationReportForm\";\nimport {PERMISSIONS} from \"../../helpers/security_rol\";\nimport HasPermissions from \"../../components/HasPermissions\";\nimport OutsideClickHandler from \"../../components/OutsideClickHandler\";\nimport {changePreloader} from \"../../store/layout/actions\";\nimport {showMessage} from \"../../components/MessageToast/ShowToastMessages\";\n\nconst OrderList = props => {\n    const {orders, meta, onGetOrders, onResetOrders, refresh, customActions, conditionals, showAsModal, conciliation, onChangePreloader, externalView, reset, orderLimit} = props;\n    const [statesList, setStatesList] = useState([])\n    const [filter, setFilter] = useState(false);\n    const [conditional, setConditional] = useState(null);\n    const [orderSelected, setOrderSelected] = useState(null);\n    const [ordersSelected, setOrdersSelected] = useState([]);\n    const [currentPage, setCurrentPage] = useState(null);\n    const [filterable, setFilterable] = useState(true);\n    const [conciliationView, setConciliationView] = useState(null);\n    const [openConfirmConciliationModal, setOpenConfirmConciliationModal] = useState(false);\n    const [openReportConciliationModal, setOpenReportConciliationModal] = useState(false);\n    const [columns, setColumns] = useState(orderColumns(setOrderSelected, showAsModal, false));\n    const [selectAll, setSelectAll] = useState(false);\n    const [defaultPage, setDefaultPage] = useState(1);\n\n    const pageOptions = {\n        sizePerPage: DEFAULT_PAGE_LIMIT,\n        totalSize: meta?.totalRegisters,\n        custom: true,\n        page: defaultPage,\n        onPageChange: (page, sizePerPage) => {\n            setDefaultPage(page);\n        },\n    }\n\n    useEffect(() => {\n        setConditional([]);\n    },[reset]);\n\n    useEffect(() => {\n\n        if (null !== refresh) {\n                onGetOrders(getConditionals(), DEFAULT_PAGE_LIMIT, currentPage * DEFAULT_PAGE_LIMIT);\n        } else {\n            onResetOrders();\n            if (customActions) {\n                setFilterable(false);\n            }\n\n            onGetOrders(getConditionals());\n        }\n\n    }, [refresh, onGetOrders])\n\n    useEffect(() => {\n        if (null !== conciliationView) {\n            onFilterAction(conditional);\n        }\n        setColumns(orderColumns(setOrderSelected, showAsModal, conciliationView));\n    }, [conciliationView]);\n\n    useEffect(() => {\n        if (conciliationView && !conciliation.loading && conciliation.success) {\n            setConciliationView(false);\n        }\n    }, [conciliation])\n\n    useEffect(() => {\n        setColumns(orderColumns(setOrderSelected, showAsModal, conciliationView));\n    }, [statesList]);\n\n    useEffect(() => {\n        setStatesList(orders);\n    }, [orders])\n\n    // eslint-disable-next-line no-unused-vars\n    const handleTableChange = (type, {page, searchText}) => {\n        let p = page - 1;\n        setCurrentPage(p);\n        onGetOrders(getConditionals(), DEFAULT_PAGE_LIMIT, p * DEFAULT_PAGE_LIMIT);\n    }\n\n    const onFilterAction = (condition) => {\n        let conditionals = condition || [];\n        handleConciliateStatus(conditionals);\n        setConditional(conditionals);\n        onGetOrders(conditionals, DEFAULT_PAGE_LIMIT, 0);\n        setDefaultPage(1);\n    }\n\n    const printOrders = () => {\n        let conditionals = conditional ? [...conditional] : [];\n        const totalPrintsAvailables = 1000;\n\n        if(conditionals.length >= 0 && (meta?.totalRegisters <= totalPrintsAvailables)) {\n\n            onChangePreloader(true);\n\n            if (ordersSelected && ordersSelected.length === 1) {\n                conditionals.push({field: 'id', value: ordersSelected[0], operator: Conditionals.OPERATORS.EQUAL});\n            }\n            if (ordersSelected && ordersSelected.length > 1) {\n                conditionals.push({field: 'id', value: ordersSelected.join('::'), operator: Conditionals.OPERATORS.IN});\n            }\n\n            props.onPrintBatchRequest(conditionals);\n\n        } else if(meta?.totalRegisters > totalPrintsAvailables){\n            showMessage.error('Total de impresiones excede la capacidad a imprimir de '+totalPrintsAvailables +' elementos');\n\n        }\n        else{\n            showMessage.error('Debe realizar algun filtro para poder realizar una impresión');\n\n        }\n    }\n\n    const handleConciliateStatus = (conditionals) => {\n        let statusFiltered = conditionals.find(c => c.field === 'status');\n        let statusToConciliate = 4;//Enviada --> 4\n        if (conciliationView) {\n            if (statusFiltered) {\n                statusFiltered.value = statusToConciliate;\n            } else {\n                conditionals.push({field: 'status', value: statusToConciliate, operator: Conditionals.OPERATORS.EQUAL});\n            }\n        } else if (statusFiltered && statusFiltered.value === statusToConciliate) {\n            conditionals.splice(conditionals.indexOf(statusFiltered), 1);\n        }\n    }\n\n    const showConciliationView = () => {\n        setOrdersSelected([]);\n        setConciliationView(true);\n    }\n    const hideConciliationView = () => {\n        setOrdersSelected([]);\n        setConciliationView(false);\n    }\n\n    const sendToConciliation = () => {\n        props.onConciliation(ordersSelected, props.history);\n    }\n\n    const getConditionals = () => {\n        const cond = conditional || [];\n        const extConditions = conditionals || [];\n        return [...cond, ...extConditions];\n    }\n\n    var selectRowProp = {\n        mode: \"checkbox\",\n        clickToSelect: true,\n        onSelect: (row) => {\n            let list = [...ordersSelected]\n\n            const index = list.indexOf(row.id);\n            if (index >= 0) {\n                list.splice(index, 1);\n            } else {\n                list.push(row.id);\n            }\n            setOrdersSelected(list);\n        },\n        onSelectAll: (selected, rows) => {\n            if (selected) {\n                setOrdersSelected(rows.map(r => r.id));\n            } else {\n                setOrdersSelected([]);\n            }\n            setSelectAll(selected);\n        }\n    };\n\n    const onPressAction = () => {\n        let conditionals = conditional || [];\n\n        if (ordersSelected && ordersSelected.length === 1) {\n            conditionals.push({field: 'id', value: ordersSelected[0], operator: Conditionals.OPERATORS.EQUAL});\n        }\n        if (ordersSelected && ordersSelected.length > 1) {\n            conditionals.push({field: 'id', value: ordersSelected.join('::'), operator: Conditionals.OPERATORS.IN});\n        }\n\n        /** TODO -- envio la condicion para procesar en orden superior */\n        props.customActions(conditionals);\n    };\n\n    return (\n        <Row>\n            <CustomModal title={\"Confirmar Conciliados\"} size=\"lg\" showFooter={false} isOpen={openConfirmConciliationModal} onClose={() => setOpenConfirmConciliationModal(false)}>\n                <OrderConciliationForm onCloseModal={() => setOpenConfirmConciliationModal(false)}/>\n            </CustomModal>\n            <CustomModal title={\"Generar reporte conciliados\"} showFooter={false} isOpen={openReportConciliationModal} onClose={() => setOpenReportConciliationModal(false)}>\n                <ConciliationReportForm onCloseModal={() => setOpenReportConciliationModal(false)}/>\n            </CustomModal>\n\n            <TableFilter\n                onPressDisabled={() => setFilter(false)}\n                isActive={filter && filterable}\n                fields={columns}\n                onSubmit={onFilterAction.bind(this)}/>\n\n            <Col lg={filter && filterable ? \"8\" : \"12\"}>\n\n                <Card>\n                    {statesList && statesList.length > 0 ? (    <CardBody>\n                            <PaginationProvider pagination={paginationFactory(pageOptions)}>\n                                {({paginationProps, paginationTableProps}) => (\n                                    <ToolkitProvider\n                                        keyField=\"id\"\n                                        data={statesList || []}\n                                        columns={normalizeColumnsList(columns)}\n                                        bootstrap4\n                                        search\n                                    >\n\n                                        {toolkitProps => (\n                                            <React.Fragment>\n                                                <Row className=\"row mb-2\">\n                                                    <Col md={4}>\n                                                        <div className=\"form-inline mb-3\">\n                                                            <div className=\"search-box ms-2\">\n                                                                <h4 className=\"text-info\">\n                                                                    <i className=\"uil-shopping-cart-alt me-2\"></i>\n                                                                    {externalView ? 'Seleccionar un Pedido' : (\n                                                                        conciliationView ? `Conciliar pedidos (${ordersSelected.length})` : 'Pedidos'\n                                                                    )}\n                                                                </h4>\n                                                            </div>\n                                                        </div>\n                                                    </Col>\n                                                    {customActions ? <Col md={8}>\n                                                        <div className=\"mb-3 float-md-end\">\n                                                            <Tooltip placement=\"bottom\" title=\"Aceptar\" aria-label=\"add\">\n                                                                <Button onClick={() => onPressAction()} color=\"success\" disabled={((ordersSelected.length === 0 && !selectAll) && (!conditional || conditional.length === 0)) || (orderLimit && orderLimit > 0 && ordersSelected.length > orderLimit)}>\n                                                                    <i className={\"mdi mdi-check\"}> </i> &nbsp; Aceptar\n                                                                </Button>\n                                                            </Tooltip>\n                                                        </div>\n                                                    </Col> : (\n                                                        <Col md={8}>\n                                                            <div className=\"mb-3 float-md-end\">\n                                                                {columns.some(s => s.filter) && (\n                                                                    <Tooltip placement=\"bottom\" title=\"Filtros Avanzados\" aria-label=\"add\">\n                                                                        <Button onClick={() => setFilter(!filter)}>\n                                                                            <i className={\"mdi mdi-filter\"}> </i>\n                                                                        </Button>\n                                                                    </Tooltip>\n                                                                )}\n                                                                {!conciliationView && !externalView && (\n                                                                    <>\n                                                                        <Tooltip placement=\"bottom\" title=\"Impresión multiple\" aria-label=\"add\">\n                                                                            <Button color=\"primary\" onClick={() => printOrders()}\n                                                                                    disabled={(ordersSelected.length === 0 && !selectAll) && (!conditional || conditional.length === 0)}>\n                                                                                <i className=\"mdi mdi-printer\"> </i>\n                                                                            </Button>\n                                                                        </Tooltip>\n                                                                        <Tooltip placement=\"bottom\" title=\"Confirmar Conciliados\" aria-label=\"add\">\n                                                                            <Button color=\"primary\" onClick={() => setOpenConfirmConciliationModal(true)}>\n                                                                                <i className=\"mdi mdi-check\"> </i>\n                                                                            </Button>\n                                                                        </Tooltip>\n                                                                        <Tooltip placement=\"bottom\" title=\"Generar reporte conciliados\" aria-label=\"add\">\n                                                                            <Button onClick={() => setOpenReportConciliationModal(true)}>\n                                                                                <i className={\"mdi mdi-file\"}> </i>\n                                                                            </Button>\n                                                                        </Tooltip>\n                                                                        <HasPermissions permission={PERMISSIONS.ORDER_CREATE}>\n                                                                            <Link to={\"/orders/create\"} className=\"btn btn-primary waves-effect waves-light text-light\">\n                                                                                <i className=\"mdi mdi-plus\"> </i> Crear pedido\n                                                                            </Link>\n                                                                        </HasPermissions>\n                                                                    </>\n                                                                )}\n\n                                                                {conciliationView && (\n                                                                    <>\n                                                                        <Tooltip placement=\"bottom\" title=\"Aceptar\" aria-label=\"add\">\n                                                                            <Button color=\"primary\" onClick={() => sendToConciliation()} disabled={ordersSelected.length === 0}>\n                                                                                {!conciliation.loading && <i className=\"mdi mdi-check\"> </i>}\n                                                                                {conciliation.loading && <i className=\"fa fa-spinner fa-spin\"> </i>}\n                                                                                Aceptar\n                                                                            </Button>\n                                                                        </Tooltip>\n                                                                        <Tooltip placement=\"bottom\" title=\"Cancelar\" aria-label=\"add\">\n                                                                            <Button color=\"default\" onClick={() => hideConciliationView(false)}>\n                                                                                Cancelar\n                                                                            </Button>\n                                                                        </Tooltip>\n                                                                    </>\n                                                                )}\n                                                            </div>\n                                                        </Col>\n                                                    )}\n                                                </Row>\n                                                <Row>\n                                                    <Col xl=\"12\">\n                                                        <div className=\"table-responsive mb-4\">\n                                                            <BootstrapTable\n                                                                selectRow={selectRowProp}\n                                                                remote\n                                                                responsive\n                                                                loading={true}\n                                                                bordered={false}\n                                                                striped={true}\n                                                                classes={\n                                                                    \"table table-centered table-nowrap mb-0\"\n                                                                }\n                                                                noDataIndication={() => <NoDataIndication/>}\n                                                                {...toolkitProps.baseProps}\n                                                                onTableChange={handleTableChange}\n                                                                {...paginationTableProps}\n                                                            />\n                                                        </div>\n                                                    </Col>\n                                                </Row>\n                                                <div className=\"float-sm-start\">\n                                                    <PaginationListStandalone {...paginationProps} />\n                                                </div>\n                                            </React.Fragment>\n                                        )}\n                                    </ToolkitProvider>\n                                )}\n                            </PaginationProvider>\n                        </CardBody>\n                    ): (\n                        <div className=\"container\">\n                            <div style={{\"margin\": \"50px 30px\"}}>\n                            <h6><i className=\"text-info uil-shopping-cart-alt me-2\"></i>No se han encontrado pedidos asociados</h6>\n                                {!conciliationView && !externalView && (\n                                    <div>\n                                    <Tooltip placement=\"bottom\" title=\"Filtros Avanzados\" aria-label=\"add\">\n                                        <Button onClick={() => setFilter(!filter)}>\n                                            <i className={\"mdi mdi-filter\"}> </i>\n                                        </Button>\n                                    </Tooltip>\n                                    </div>\n                                )}\n                                {!conciliationView && !externalView && (\n                                    <div className=\"text-center mt-2 mb-2\">\n                                        <HasPermissions permission={PERMISSIONS.ORDER_CREATE}>\n                                            <Link to={\"/orders/create\"} className=\"btn btn-primary waves-effect waves-light text-light\">\n                                                <i className=\"mdi mdi-plus\"> </i> Crear pedido\n                                            </Link>\n                                        </HasPermissions>\n                                    </div>\n                                )}\n                            </div>\n                        </div>\n                    )}\n                </Card>\n            </Col>\n            <OutsideClickHandler\n                onOutsideClick={() => {\n                    if(orderSelected){\n                        setOrderSelected(null)\n                    }\n                }}\n            >\n            {orderSelected && (<OrderEdit orderId={orderSelected} showOrderOverlay={true} onCloseOverlay={() => setOrderSelected(null)}/>)}\n            </OutsideClickHandler>\n        </Row>\n    )\n}\n\nOrderList.propTypes = {\n    states: PropTypes.array,\n    onGetStates: PropTypes.func,\n    onDeleteStates: PropTypes.func,\n}\n\nconst mapStateToProps = state => {\n    const {orders, loading, meta, refresh, conciliation, reset} = state.Order\n    const {isPreloader} = state.Layout;\n    return {\n        orders,\n        loading,\n        meta,\n        refresh,\n        conciliation,\n        isPreloader,\n        reset\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onResetOrders: () => {\n        dispatch(resetOrder());\n    },\n    onChangePreloader: (preloader) => dispatch(changePreloader(preloader)),\n    onGetOrders: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getOrders(conditional, limit, page, false, true)),\n    onPrintBatchRequest: (conditional) => dispatch(doPrintBatchRequest(conditional)),\n    onConciliation: (ordersSelected) => dispatch(doConciliation(ordersSelected)),\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(OrderList)\n","/Users/ramon/Repositories/lucy-moie/src/components/Common/Image.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/Common/DropZoneIcon.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/HasPermissionsFunc.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/Common/ButtonSubmit.js",["1551"],"import React from \"react\"\nimport imageNotFound from \"../../assets/images/image-not-found.png\"\nimport {Spinner} from \"reactstrap\";\nimport {Button} from \"@material-ui/core\";\nimport PropTypes from \"prop-types\";\n\nconst ButtonSubmit = props => {\n  return (\n      <Button color=\"primary\" type=\"submit\" disabled={props.loading || props.disabled}>\n          {props.loading && <Spinner size=\"sm\" className=\"m-1\" color=\"primary\"/>}\n          {props.name? props.name:'Guardar'}\n      </Button>\n  )\n}\n\nButtonSubmit.propTypes = {\n    name: PropTypes.string,\n    iconClass: PropTypes.string,\n    loading: PropTypes.bool.isRequired,\n    disabled: PropTypes.bool\n}\n\nexport default ButtonSubmit\n","/Users/ramon/Repositories/lucy-moie/src/store/wallet/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/common/conditionals.js",["1552","1553","1554"],"/*\n*  {field: 1, operator: $lk, value: 1, value: 2}\n* */\n\n/* recibe un arreglo de objetos y lo transforma en una condicion */\nfunction getConditionalFormat(options) {\n    if (options && options.length > 0) {\n        let hasOr = false;\n        let conditions = options.map(item => {\n            if(item != \"$or\") {\n                if (!item.moreValues) {\n                    return (item.field + item.operator + item.value)\n                } else {\n                    if(item.moreValues && Array.isArray(item.moreValues)) {\n                        item.moreValues = item.moreValues.join(\"::\");\n                    } else {\n                        item.moreValues = item.moreValues;\n                    }\n                    return (item.field + item.operator + item.value + \"::\" + item.moreValues)\n                }\n            } else {\n                hasOr = true;\n            }\n        }).filter(item => item !== undefined);\n        if(hasOr){\n            conditions = conditions.join(\"$or\");\n        }else {\n            conditions = conditions.join(\"|\");\n        }\n        return conditions;\n    }\n    return null;\n}\n\n/* Construye un formato valido para las peticiones GET (URL) */\nfunction buildHttpGetQuery(cond = null, limit = null, offset = null, order = false) {\n    const data = {};\n    if (cond) {\n        data.conditional = cond;\n    }\n    if (limit) {\n        data.limit = limit;\n    }\n    if (offset || offset === 0) {\n        data.offset = offset;\n    }\n    if (order) {\n        data.order = order.field;\n        data.orderType = order.type;\n    }\n\n    return urlSearchParams(data);\n}\nfunction urlSearchParams(data) {\n    return new URLSearchParams(data);\n}\n\nfunction buildCondition(field, value, operator = null, moreValues = []) {\n    let condition;\n    if (operator === null) {\n        condition = {field, value, operator: \"::\"};\n    } else if (moreValues.length > 0) {\n        condition = {field, value, operator, moreValues};\n    } else {\n        if ([OPERATORS.NULL, OPERATORS.NOT_NULL].includes(operator) || [OPERATORS.TRUE, OPERATORS.FALSE].includes(operator)) {\n            condition = {field, value: \"\", operator};\n        } else {\n            condition = {field, value, operator};\n        }\n    }\n    return condition;\n}\n\n/* recibe field, value, operador y en caso de tener 2 o mas valores moreValues (Array) */\nclass Condition {\n    condition = [];\n    addOr() {\n        this.condition.push(\"$or\");\n    }\n    add(field, value, operator = null, moreValues = []) {\n        this.condition.push(buildCondition(field, value, operator, moreValues))\n    }\n    all() {\n        return this.condition;\n    }\n}\n\nconst OPERATORS = {\n    EQUAL: '::',\n    NOT_EQUAL: '$ne',\n    NULL: '$null',\n    NOT_NULL: '$nnull',\n    TRUE: '$true',\n    FALSE: '$false',\n    NOT_EMPTY: '$nempty',\n    EMPTY: '$empty',\n    NOT_LIKE: '$nlk',\n    LIKE: '$lk',\n    NOT_BETWEEN: '$nbt',\n    BETWEEN: '$bt',\n    LESS_THAN_OR_EQUAL: '$lte',\n    LESS_THAN: '$lt',\n    GREATER_THAN_OR_EQUAL: '$gte',\n    GREATER_THAN: '$gt',\n    NOT_IN: '$nin',\n    IN: '$in',\n    COUNT: 'count',\n};\n\nconst Conditionals = {\n    Condition,\n    urlSearchParams,\n    buildHttpGetQuery,\n    getConditionalFormat,\n    OPERATORS,\n    buildCondition\n};\n\nexport default Conditionals;\n","/Users/ramon/Repositories/lucy-moie/src/common/pagination.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/billConfig/actions.js",["1555"],"import {\n    BILL_CONFIG_LIST_REFRESH,\n    DELETE_BILL_CONFIG,\n    DELETE_BILL_CONFIG_FAILED,\n    DELETE_BILL_CONFIG_SUCCESS,\n    GET_BILL_CONFIG,\n    GET_BILL_CONFIG_FAILED,\n    GET_BILL_CONFIG_SUCCESS,\n    GET_BILL_CONFIGS,\n    GET_BILL_CONFIGS_FAILED,\n    GET_BILL_CONFIGS_SUCCESS,\n    QUERY_BILL_CONFIGS,\n    QUERY_BILL_CONFIGS_FAILED,\n    QUERY_BILL_CONFIGS_SUCCESS,\n    REGISTER_BILL_CONFIG,\n    REGISTER_BILL_CONFIG_FAILED,\n    REGISTER_BILL_CONFIG_SUCCESS,\n    RESET_BILL_CONFIG,\n    UPDATE_BILL_CONFIG,\n    UPDATE_BILL_CONFIG_FAILED,\n    UPDATE_BILL_CONFIG_SUCCESS\n} from \"./actionTypes\";\nimport Conditionals from \"../../common/conditionals\";\n\nexport const resetBillConfig = () => ({\n    type: RESET_BILL_CONFIG,\n})\n\nexport const getBillConfigs = (conditional, limit, offset) => ({\n    type: GET_BILL_CONFIGS,\n    conditional: conditional,\n    limit: limit,\n    offset: offset\n})\n\nexport const getBillConfigsByIds = (ids, offset) => {\n    const conditions = new Conditionals.Condition;\n    if (ids.length > 0) conditions.add(\"id\", ids.join(\"::\"), Conditionals.OPERATORS.IN);\n    return getBillConfigs(conditions.all(), ids.length, offset);\n}\n\nexport const getBillConfigsSuccess = (data, meta) => ({\n    type: GET_BILL_CONFIGS_SUCCESS,\n    meta: meta,\n    payload: data,\n})\n\nexport const getBillConfigsFailed = error => ({\n    type: GET_BILL_CONFIGS_FAILED,\n    payload: error,\n})\n\nexport const getBillConfig = id => ({\n    type: GET_BILL_CONFIG,\n    id\n})\n\nexport const getBillConfigSuccess = data => ({\n    type: GET_BILL_CONFIG_SUCCESS,\n    payload: data,\n})\n\nexport const getBillConfigFailed = error => ({\n    type: GET_BILL_CONFIG_FAILED,\n    payload: error,\n})\n\nexport const registerBillConfig = (data, history) => {\n    return {\n        type: REGISTER_BILL_CONFIG,\n        payload: {data, history},\n    }\n}\n\nexport const registerBillConfigSuccess = data => {\n    return {\n        type: REGISTER_BILL_CONFIG_SUCCESS,\n        payload: data.bill,\n    }\n}\n\n\nexport const registerBillConfigFailed = data => {\n    return {\n        type: REGISTER_BILL_CONFIG_FAILED,\n        payload: data,\n    }\n}\n\nexport const updateBillConfig = (id, data, history) => {\n    return {\n        type: UPDATE_BILL_CONFIG,\n        payload: {id, data, history},\n    }\n}\n\nexport const updateBillConfigSuccess = data => {\n    return {\n        type: UPDATE_BILL_CONFIG_SUCCESS,\n        payload: data,\n    }\n}\n\n\nexport const updateBillConfigFail = error => {\n    return {\n        type: UPDATE_BILL_CONFIG_FAILED,\n        payload: error,\n    }\n}\n\nexport const deleteBillConfig = (id, history) => ({\n    type: DELETE_BILL_CONFIG,\n    payload: {id, history}\n})\n\nexport const deleteBillConfigSuccess = () => ({\n    type: DELETE_BILL_CONFIG_SUCCESS\n})\n\nexport const deleteBillConfigFailed = error => ({\n    type: DELETE_BILL_CONFIG_FAILED,\n    payload: error,\n})\n\nexport const countBillConfigByStatus = () => {\n    const params = {operation: 'id::count', group: \"status\"};\n    return queryBillConfigs(params, 'statusGroup');\n}\n\nexport const queryBillConfigs = (params, node) => ({\n    type: QUERY_BILL_CONFIGS,\n    params: params,\n    node: node,\n})\nexport const queryBillConfigsFailed = error => ({\n    type: QUERY_BILL_CONFIGS_FAILED,\n    payload: error,\n})\nexport const queryBillConfigsSuccess = (data, meta, node) => ({\n    type: QUERY_BILL_CONFIGS_SUCCESS,\n    meta: meta,\n    payload: data,\n    node: node,\n})\n\nexport const refreshList = () => {\n    return {type: BILL_CONFIG_LIST_REFRESH}\n}\n","/Users/ramon/Repositories/lucy-moie/src/pages/BillConfigEdit/BillConfigForm.js",["1556","1557","1558"],"import React, {useEffect, useState} from \"react\"\nimport {Col, Label, Row} from \"reactstrap\"\nimport {AvForm} from \"availity-reactstrap-validation\"\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport {apiError} from \"../../store/auth/login/actions\";\nimport PropTypes from \"prop-types\";\nimport {getBillConfig, registerBillConfig, updateBillConfig} from \"../../store/billConfig/actions\";\nimport {getMunicipalities, getStates} from \"../../store/location/actions\";\nimport {FieldDate, FieldSwitch, FieldText} from \"../../components/Fields\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\nimport {DATE_MODES} from \"../../components/Fields/InputDate\";\n\nconst BillConfigForm = (props) => {\n    const {getBillConfig, billConfig, showAsModal = false, onCloseModal= false, onAcceptModal= false} = props;\n    const [billConfigData, setBillConfigData] = useState({_status: \"true\"});\n\n    //carga inicial\n    useEffect(() => {\n        if (props.match.params.id && getBillConfig) {\n            getBillConfig(props.match.params.id);\n        }\n    }, [getBillConfig]);\n\n    //cargar la información del cliente\n    useEffect(() => {\n        if (billConfig.id) {\n            setBillConfigData(billConfig);\n        }\n    }, [billConfig]);\n\n    const handleValidSubmit = (event, values) => {\n        const data = filteredValues(values);\n\n        if (!billConfig.id) {\n            props.registerBillConfig(data, props.history)\n        } else {\n            props.updateBillConfig(billConfig.id, data, props.history)\n        }\n\n        if(showAsModal && onAcceptModal){\n            onAcceptModal(billConfig.id);\n        }\n    }\n\n    const filteredValues = (values) => {\n        const data = {...values};\n\n        data.status = values._status === \"true\" ? true : false;\n        delete data._status;\n        return data;\n    }\n\n    return (\n        <React.Fragment>\n            <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => handleValidSubmit(e, v)}>\n                <Row>\n                    <Col xl={12}>\n                        {!showAsModal && (\n                            <div className={\"mt-1 mb-5\"} style={{position: \"relative\"}}>\n                                <div className={\"float-end\"}>\n                                    <Row>\n                                        <Col>\n                                            ¿Activo?\n                                        </Col>\n                                        <Col>\n                                            <FieldSwitch\n                                                id={\"_status\"}\n                                                defaultValue={billConfigData._status}\n                                                name={\"_status\"}\n                                            />\n                                        </Col>\n                                    </Row>\n                                </div>\n                            </div>\n                        )}\n                        <Row>\n                            <Col md=\"6\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"name\">Número Resolución<span className=\"text-danger\">*</span></Label>\n                                    <FieldText\n                                        id={\"number\"}\n                                        name={\"number\"}\n                                        value={billConfigData.number}\n                                        required\n                                    />\n                                </div>\n                            </Col>\n                            <Col md=\"6\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"prefix\">Prefijo<span className=\"text-danger\">*</span></Label>\n                                    <FieldText\n                                        id='prefix'\n                                        name={\"prefix\"}\n                                        value={billConfigData.prefix}\n                                        required />\n                                </div>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md=\"4\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"_startNumber\">Numero Inicial <span className=\"text-danger\">*</span></Label>\n                                    <FieldText\n                                        id='_startNumber'\n                                        name={\"startNumber\"}\n                                        value={billConfigData.startNumber}\n                                        minLength={1}\n                                        maxLength={255}\n                                        required/>\n                                </div>\n                            </Col>\n                            <Col md=\"4\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"_finalNumber\">Numero Final <span className=\"text-danger\">*</span></Label>\n                                    <FieldText\n                                        id='_finalNumber'\n                                        name={\"finalNumber\"}\n                                        value={billConfigData.finalNumber}\n                                        minLength={1}\n                                        maxLength={255}\n                                        required/>\n                                </div>\n                            </Col>\n                            <Col md=\"4\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"resolutionDate\">Fecha de Resolución</Label>\n                                    <FieldDate\n                                        name={\"resolutionDate\"}\n                                        mode={DATE_MODES.SINGLE}\n                                        defaultValue={billConfigData.createdAt}\n                                    />\n                                </div>\n                            </Col>\n\n                        </Row>\n\n                        <hr/>\n                        <Row>\n                            <Col md={12} className=\"text-right\">\n                                {showAsModal && onCloseModal && (\n                                    <button type=\"button\" className=\"btn btn-light\" onClick={() => props.onCloseModal()}>Cancelar</button>\n                                )}\n                                <ButtonSubmit loading={props.loading}/>\n                            </Col>\n                        </Row>\n                    </Col>\n                </Row>\n            </AvForm>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {error, loading} = state.BillConfig\n    return {error,loading}\n}\n\nexport default withRouter(\n    connect(mapStateToProps, {apiError, registerBillConfig, updateBillConfig, getBillConfig})(BillConfigForm)\n)\n\nBillConfigForm.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/components/Fields/Autocomplete.js",["1559"],"import React, {useEffect, useState} from \"react\";\nimport PropTypes from \"prop-types\";\nimport {AvBaseInput} from \"availity-reactstrap-validation\";\nimport messages from \"./messages\";\nimport {FormGroup, FormText} from \"reactstrap\";\nimport theme from './scss/autocomplete.scss';\nimport Autosuggest from 'react-autosuggest';\n\nconst Autocomplete = (props) => {\n    const [selected, setSelected] = useState('');\n    const [suggestions, setSuggestions] = useState([]);\n    const {defaultValue, options} = props;\n\n    const getSuggestions = value => {\n        const inputValue = value.trim().toLowerCase();\n        if(options.length <= 0){\n            return;\n        }\n        return inputValue.length === 0 ? [] : (options || []).filter(item => {\n                return item.name.toLowerCase().includes(inputValue)\n            }\n        );\n    };\n\n    const getSuggestionValue = suggestion => suggestion.name;\n\n    const renderSuggestion = suggestion => (\n        <div className=\"font-size-12\">\n            {suggestion.name}\n        </div>\n    )\n    const onSuggestionSelected = (val) => {\n        setSelected(val.currentTarget.textContent)\n        props.onChange && props.onChange(val.currentTarget.textContent || '')\n    }\n\n    useEffect(() => {\n        setSelected(defaultValue || '');\n    }, [defaultValue]);\n\n    const onSuggestionsFetchRequested = ({value}) => {\n        setSuggestions(getSuggestions(value))\n    };\n\n    // Autosuggest will call this function every time you need to clear suggestions.\n    const onSuggestionsClearRequested = () => {\n        setSuggestions([])\n    };\n\n    const onChange = (e) => {\n        props.onChange(e.target.value || '');\n        setSelected(e.target.value || '');\n    }\n\n    return (\n        <AvAutoSuggestInput\n            validate={{\n                required: {value: props.required === true, errorMessage: messages.required}\n            }}\n            name={props.name}\n            value={selected}\n            placeholder={props.placeholder}\n            disabled={props.disabled}\n            onSuggestionsClearRequested={onSuggestionsClearRequested}\n            onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n            getSuggestionValue={getSuggestionValue}\n            renderSuggestion={renderSuggestion}\n            onSuggestionSelected={onSuggestionSelected}\n            onChange={onChange}\n            suggestions={suggestions || []}\n        />\n    )\n}\n\nAutocomplete.propTypes = {\n    name: PropTypes.string,\n    placeholder: PropTypes.string,\n    onChange: PropTypes.func,\n    options: PropTypes.array,\n    defaultValue: PropTypes.any,\n};\n\nclass AvAutoSuggestInput extends AvBaseInput {\n    render() {\n        const {name, value, onChange, onSuggestionSelected, onSuggestionsFetchRequested, onSuggestionsClearRequested, getSuggestionValue, renderSuggestion, suggestions, placeholder, helpMessage, disabled} = this.props;\n        const validation = this.context.FormCtrl.getInputState(this.props.name);\n        const feedback = validation.errorMessage ? (<div className=\"invalid-feedback\" style={{display: \"block\"}}>{validation.errorMessage}</div>) : null;\n        const help = helpMessage ? (<FormText>{helpMessage}</FormText>) : null;\n        const isInvalid = validation.errorMessage ? \"select-is-invalid\" : \"\";\n\n        return (\n            <FormGroup className={isInvalid}>\n                <div>\n                    <Autosuggest\n                        name={name}\n                        suggestions={suggestions}\n                        onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n                        onSuggestionsClearRequested={onSuggestionsClearRequested}\n                        getSuggestionValue={getSuggestionValue}\n                        renderSuggestion={renderSuggestion}\n                        onSuggestionSelected={onSuggestionSelected}\n                        inputProps={{\n                            placeholder: placeholder,\n                            value,\n                            onChange: onChange,\n                        }}\n                        theme={{\n                            ...theme,\n                            input: 'form-control',\n                            container: 'react-autosuggest__container',\n                            containerOpen: 'react-autosuggest__container--open',\n                            inputOpen: 'react-autosuggest__input--open',\n                            inputFocused: 'react-autosuggest__input--focused',\n                            suggestionsContainer: 'react-autosuggest__suggestions-container',\n                            suggestionsContainerOpen: 'react-autosuggest__suggestions-container--open',\n                            suggestionsList: 'react-autosuggest__suggestions-list',\n                            suggestion: 'react-autosuggest__suggestion',\n                            suggestionFirst: 'react-autosuggest__suggestion--first',\n                            suggestionHighlighted: 'react-autosuggest__suggestion--highlighted',\n                            sectionContainer: 'react-autosuggest__section-container',\n                            sectionContainerFirst: 'react-autosuggest__section-container--first',\n                            sectionTitle: 'react-autosuggest__section-title'\n                        }}\n                    />\n                </div>\n                {feedback}\n                {help}\n            </FormGroup>\n        );\n    }\n};\n\nexport default Autocomplete;\n","/Users/ramon/Repositories/lucy-moie/src/components/Fields/InputDate.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Security/SecurityManagement.js",["1560","1561","1562","1563"],"import React, {useState} from \"react\"\nimport {connect} from \"react-redux\"\nimport {Card, Col, Row} from \"reactstrap\"\nimport SecurityPermissions from \"./SecurityPermissions\";\nimport SecurityRoles from \"./SecurityRoles\";\nimport {PERMISSIONS} from \"../../helpers/security_rol\";\nimport NoAccess from \"../../components/Common/NoAccess\";\nimport HasPermissions from \"../../components/HasPermissions\";\nimport SecurityAuthorizations from \"./SecurityAuthorizations\";\n\nconst SecurityManagement = ({}) => {\n\n    const [activeTab, setActiveTab] = useState(1);\n    const [reloadPermissions, setReloadPermissions] = useState(false);\n\n    const onChangeTab = (tab) => {\n        if (tab === 1) {\n            setReloadPermissions(true);\n        } else {\n            setReloadPermissions(false);\n        }\n        setActiveTab(tab);\n    }\n\n    return (\n        <HasPermissions permissions={[PERMISSIONS.SECURITY_EDIT]} renderNoAccess={() => <NoAccess/>}>\n            <Row>\n                <Col md={12}>\n                    <Card id={'order-tabs'} className=\"p-3\">\n                        <ul className=\"nav nav-tabs nav-tabs-custom nav-justified\" role=\"tablist\">\n                            <li className=\"nav-item\">\n                                <a className={`nav-link ${activeTab === 1 ? 'active' : ''}`} data-bs-toggle=\"tab\" role=\"tab\" aria-selected=\"false\" onClick={() => onChangeTab(1)}>\n                                    <span className=\"d-block d-sm-none\"><i className=\"fas fa-home\"> </i></span>\n                                    <span className=\"d-none d-sm-block\">Roles</span>\n                                </a>\n                            </li>\n                            <li className=\"nav-item\">\n                                <a className={`nav-link ${activeTab === 2 ? 'active' : ''}`} data-bs-toggle=\"tab\" role=\"tab\" aria-selected=\"false\" onClick={() => onChangeTab(2)}>\n                                    <span className=\"d-block d-sm-none\"><i className=\"far fa-user\"> </i></span>\n                                    <span className=\"d-none d-sm-block\">Permisos</span>\n                                </a>\n                            </li>\n                            <li className=\"nav-item\">\n                                <a className={`nav-link ${activeTab === 2 ? 'active' : ''}`} data-bs-toggle=\"tab\" role=\"tab\" aria-selected=\"false\" onClick={() => onChangeTab(3)}>\n                                    <span className=\"d-block d-sm-none\"><i className=\"far fa-user\"> </i></span>\n                                    <span className=\"d-none d-sm-block\">Autorizaciones</span>\n                                </a>\n                            </li>\n                        </ul>\n                        <div className=\"tab-content p-3 text-muted\">\n                            <div className={`tab-pane ${activeTab === 1 ? 'active' : ''}`} role=\"tabpanel\">\n                                <SecurityRoles reloadPermissions={reloadPermissions}/>\n                            </div>\n                            <div className={`tab-pane ${activeTab === 2 ? 'active' : ''}`} role=\"tabpanel\">\n                                <SecurityPermissions/>\n                            </div>\n                            <div className={`tab-pane ${activeTab === 3 ? 'active' : ''}`} role=\"tabpanel\">\n                                <SecurityAuthorizations/>\n                            </div>\n                        </div>\n                    </Card>\n                </Col>\n\n            </Row>\n        </HasPermissions>\n    )\n}\n\nSecurityManagement.propTypes = {}\n\nconst mapStateToProps = state => {\n    return {}\n}\n\nconst mapDispatchToProps = dispatch => ({})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(SecurityManagement)\n","/Users/ramon/Repositories/lucy-moie/src/pages/batchQueries/BatchQueriesForm.js",["1564","1565","1566","1567"],"import React, {useEffect, useState} from \"react\"\nimport {AvForm} from \"availity-reactstrap-validation\";\nimport {Card, Tooltip} from \"@material-ui/core\";\nimport {CardBody, Col, Label, Row} from \"reactstrap\";\nimport {FieldSelect, FieldText} from \"../../components/Fields\";\nimport Conditionals from \"../../common/conditionals\";\nimport {withRouter} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {getProducts, resetProduct} from \"../../store/product/actions\";\nimport {map} from \"lodash\";\nimport {arrayToOptions} from \"../../common/converters\";\nimport {getCategories} from \"../../store/category/actions\";\nimport {getSizes} from \"../../store/sizes/actions\";\nimport {ButtonCopy} from \"../../components/Common/ButtonCopy\";\n\n\nconst BatchQueriesForm = (props) => {\n    const {onGetProducts, products, onResetProduct, loading, categories, sizes, onGetSizes, onGetCategories} = props;\n    const [canclear, setCanclear] = useState(true);\n    const [productRefs, setProductRefs] = useState([]);\n    const [productList, setProductList] = useState([]);\n    const [categoriesList, setCategoriesList] = useState([]);\n    const [sizesList, setSizesList] = useState([]);\n    const [sizeSelected, setSizeSelected] = useState(null);\n    const [categorySelected, setCategorySelected] = useState(null);\n    const [textToCopy, setTextToCopy] = useState(null);\n    const [form, setForm] = useState(null);\n    const [defaultValue, setDefaultValue] = useState(null);\n\n    useEffect(() => {\n        onGetCategories();\n        onGetSizes();\n        onResetProduct();\n    }, [])\n\n    useEffect(() => {\n\n        //categories\n        if (categories && categories.length > 0) {\n            const list = [emptyOptions('Todos'), ...arrayToOptions(categories)]\n            setCategoriesList(list);\n        } else {\n            setCategoriesList([emptyOptions('Todos')]);\n        }\n\n        //sizes\n        if (sizes && sizes.length > 0) {\n            const list = [emptyOptions('Todos'), ...arrayToOptions(sizes)]\n            setSizesList(list);\n        } else {\n            setSizesList([emptyOptions('Todos')]);\n        }\n\n\n    }, [categories, sizes])\n\n    useEffect(() => {\n        if (products && products.length > 0) {\n            const list = products\n                .filter((p) => p.productSize.length > 0)\n                .map((p) => {\n                    return {\n                        reference: p.reference,\n                        productSize: p.productSize.map((s) => {\n                            return {\n                                name: s.name,\n                                quantity: s.quantity,\n                                color: s.color,\n                                label: s.quantity > 0 ? s.color : 'AGOTADO',\n                            }\n                        })\n                    }\n                });\n\n            let tmpProductList = list;\n            if(productList.length > 0) {\n                const _productList = productList.concat(list);\n                setProductList(_productList);\n\n                tmpProductList = _productList;\n            } else {\n                setProductList(list);\n            }\n\n            const listToCopy = tmpProductList.map(p => {\n                const ll = p.productSize.map(s => {\n                    return s.quantity > 0 ? `TALLA ${s.name}: ${s.label}` : 'AGOTADO';\n                })\n                return `${p.reference}\\n${ll.join(\"\\n\")}\\n`\n            });\n            setTextToCopy(listToCopy.join(\"\\n\"));\n\n\n\n        } else if(canclear){\n            setProductList([]);\n            setCanclear(false);\n        }\n    }, [products])\n\n    const emptyOptions = (label) => {\n        return {label: label ? label : '-', value: -1};\n    }\n\n    const onSearchRefs = (e) => {\n\n        if (productRefs.length === 0) {\n            return;\n        }\n        const refs = productRefs.split(\" \");\n\n        const conditions = new Conditionals.Condition;\n        if (productRefs.length > 0) conditions.add(\"reference\", refs.join(\"::\"), Conditionals.OPERATORS.IN);\n        onGetProducts(conditions.all(), refs.length);\n        form.reset();\n    }\n\n    const onSearch = () => {\n        const conditions = new Conditionals.Condition;\n        if (sizeSelected && sizeSelected.value && sizeSelected.value > 0) {\n            conditions.add(\"size.id\", sizeSelected.value, Conditionals.OPERATORS.EQUAL);\n        }\n        if (categorySelected && categorySelected.value && categorySelected.value > 0) {\n            conditions.add(\"category.id\", categorySelected.value, Conditionals.OPERATORS.EQUAL);\n        }\n\n        onGetProducts(conditions.all());\n    }\n\n    const clearFilters = () => {\n        setProductList([]);\n        setTextToCopy([]);\n        setCategorySelected(null)\n        setSizeSelected(null)\n        setProductRefs([])\n        setDefaultValue(-1)\n        if (form) form.reset();\n    }\n\n\n    return (\n        <React.Fragment>\n            <AvForm className=\"needs-validation\" autoComplete=\"off\" ref={c => setForm(c)}>\n                <Card>\n                    <CardBody>\n                        <Row className=\"mb-3\">\n                            <Col xs={6}>\n                                <h4 className=\"text-info\"><i className=\"fa fa-search\"></i> Consultas Masivas</h4>\n                            </Col>\n                            <Col xs={6} className=\"text-right\">\n                                <Tooltip placement=\"bottom\" title=\"Limpiar\" aria-label=\"add\">\n                                    <button onClick={clearFilters} className=\"btn btn-xs btn-primary mr-5\">\n                                        <i className=\"fa fa-eraser\"></i> Limpiar\n                                    </button>\n                                </Tooltip>\n                                <Tooltip placement=\"bottom\" title=\"Copiar\" aria-label=\"add\">\n                                    <ButtonCopy text={textToCopy} disabled={productList.length === 0}/>\n                                </Tooltip>\n                            </Col>\n                        </Row>\n                        <Row className=\"mb-3\">\n                            <Col xs={10}>\n                                <Label htmlFor=\"orders\">Productos</Label>\n                                <FieldText\n                                    id={\"products\"}\n                                    name={\"products\"}\n                                    onKeyPress={e => {\n                                        if (e.key === \"Enter\") {\n                                            e.preventDefault();\n                                            onSearchRefs(e);\n                                        }\n                                    }}\n                                    onChange={(e) => {\n                                        if(e.target.value) {\n                                            setProductRefs(e.target.value);\n                                        }\n                                    }}\n                                />\n                            </Col>\n                            <Col xs={2} style={{display: 'flex', 'alignItems': 'flex-end'}}>\n                                <Tooltip placement=\"bottom\" title=\"Consultar\" aria-label=\"add\">\n                                    <button type=\"button\" className=\"btn btn-primary btn-block waves-effect waves-light mt-2 me-1 w-100\"\n                                            disabled={loading}\n                                            onClick={onSearchRefs}>\n                                        <i className=\"mdi mdi-text-box-search-outline\"> </i>\n                                    </button>\n                                </Tooltip>\n                            </Col>\n                        </Row>\n                        <hr/>\n                        <Row className=\"mb-3\">\n                            <Col xs=\"5\">\n                                <Label className=\"control-label\">Categoria <span className=\"text-danger\">*</span></Label>\n                                <FieldSelect\n                                    id={\"field_category\"}\n                                    name={\"category\"}\n                                    options={categoriesList}\n                                    defaultValue={defaultValue}\n                                    isClearable={true}\n                                    onChange={(e) => {\n                                        setCategorySelected(e);\n                                    }}\n                                    isSearchable\n                                />\n                            </Col>\n                            <Col xs=\"5\">\n                                <Label className=\"control-label\">Tallas</Label>\n                                <FieldSelect\n                                    id={\"field_sizes\"}\n                                    name={\"size\"}\n                                    options={sizesList}\n                                    defaultValue={defaultValue}\n                                    isClearable={true}\n                                    onChange={(e) => {\n                                        setSizeSelected(e);\n                                    }}\n                                    isSearchable\n                                />\n                            </Col>\n                            <Col xs={2} style={{display: 'flex', 'alignItems': 'flex-end'}}>\n                                <Tooltip placement=\"bottom\" title=\"Consultar\" aria-label=\"add\">\n                                    <button type=\"button\" className=\"btn btn-primary btn-block waves-effect waves-light mt-2 me-1 w-100\"\n                                            disabled={loading}\n                                            onClick={onSearch}>\n                                        <i className=\"mdi mdi-text-box-search-outline\"> </i>\n                                    </button>\n                                </Tooltip>\n                            </Col>\n                        </Row>\n                        <hr/>\n                        <Row>\n                            <Col sx={12}>\n\n                                {loading && <div className=\"text-center\"><i className=\"fa fa-spinner fa-spin\"> </i></div>}\n                                {map(productList, (prod, k) => (\n                                    <div key={k}>\n                                        <table className=\"table table-condensed table-bordered text-center table-striped\">\n                                            <thead>\n                                            <tr style={{background: '#50a5f1', color: '#FFF'}}>\n                                                <th colSpan={prod.productSize.length}>{prod.reference}</th>\n                                            </tr>\n                                            </thead>\n                                            <tbody>\n                                            <tr>\n                                                {map(prod.productSize, (pSize, k2) => (\n                                                    <td key={k2}>{pSize.name}</td>\n                                                ))}\n                                            </tr>\n                                            <tr>\n                                                {map(prod.productSize, (pSize, k2) => (\n                                                    <td key={k2}>{pSize.label}</td>\n                                                ))}\n                                            </tr>\n                                            </tbody>\n                                        </table>\n                                    </div>\n                                ))}\n                            </Col>\n                        </Row>\n                    </CardBody>\n                </Card>\n            </AvForm>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {products, error, loading} = state.Product\n    const {categories} = state.Category\n    const {sizes} = state.Sizes\n    return {categories, sizes, products, error, loading}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onResetProduct: () => dispatch(resetProduct()),\n    onGetCategories: (conditional = null, limit = 100, page) => dispatch(getCategories(conditional, limit, page)),\n    onGetSizes: (conditional = null, limit = 100, page) => dispatch(getSizes(conditional, limit, page)),\n    onGetProducts: (conditional = null, limit = 1000, page) => dispatch(getProducts(conditional, limit, page)),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(BatchQueriesForm)\n)\n\nBatchQueriesForm.propTypes = {\n    error: PropTypes.any,\n    onCloseModal: PropTypes.func\n}\n","/Users/ramon/Repositories/lucy-moie/src/helpers/backend_helper.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/category/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Wallet/list/walletList.js",["1568","1569","1570"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from \"prop-types\"\nimport {connect} from \"react-redux\"\nimport {Card, CardBody, Col, Row} from \"reactstrap\"\nimport paginationFactory, {PaginationListStandalone, PaginationProvider,} from \"react-bootstrap-table2-paginator\"\nimport ToolkitProvider, {Search} from \"react-bootstrap-table2-toolkit\"\nimport BootstrapTable from \"react-bootstrap-table-next\"\n\nimport {Link} from \"react-router-dom\"\nimport {Button, Tooltip} from \"@material-ui/core\";\nimport {DEFAULT_PAGE_LIMIT} from \"../../../common/pagination\";\nimport {getWallets, resetWallet} from \"../../../store/wallet/actions\";\nimport walletsColumns from \"./walletColumn\";\nimport {TableFilter} from \"../../../components/TableFilter\";\nimport {normalizeColumnsList} from \"../../../common/converters\";\nimport NoDataIndication from \"../../../components/Common/NoDataIndication\";\nimport HasPermissions from \"../../../components/HasPermissions\";\nimport {PERMISSIONS} from \"../../../helpers/security_rol\";\nimport NoAccess from \"../../../components/Common/NoAccess\";\nimport {walletStatsApi} from \"../../../helpers/backend_helper\";\nimport CountUp from \"react-countup\";\n\nconst WalletList = props => {\n    const {wallets, meta, onGetWallets, onResetwallet, loading, refresh} = props;\n    const [walletsList, setWalletsList] = useState([])\n    const [walletStats, setWalletStats] = useState({})\n    const [filter, setFilter] = useState(false);\n    const [conditional, setConditional] = useState(null);\n    const [defaultPage, setDefaultPage] = useState(1);\n\n    const pageOptions = {\n        sizePerPage: DEFAULT_PAGE_LIMIT,\n        totalSize: meta?.totalRegisters,\n        custom: true,\n        page: defaultPage,\n        onPageChange: (page, sizePerPage) => {\n            setDefaultPage(page);\n        },\n    }\n    const {SearchBar} = Search\n\n    useEffect(() => {\n        if(refresh === null){\n            onResetwallet();\n            onGetWallets()\n        } else {\n            onGetWallets();\n        }\n    }, [refresh, onGetWallets])\n\n    useEffect(() => {\n        setWalletsList(wallets)\n        loadStats();\n    }, [wallets])\n\n    const loadStats = () => {\n        walletStatsApi().then(function (resp) {\n            setWalletStats(resp.wallet);\n        });\n    }\n\n    // eslint-disable-next-line no-unused-vars\n    const handleTableChange = (type, {page, searchText}) => {\n        onGetWallets(conditional, DEFAULT_PAGE_LIMIT, (page - 1)*DEFAULT_PAGE_LIMIT);\n    }\n\n    const onFilterAction = (condition) => {\n        setConditional(condition);\n        onGetWallets(condition, DEFAULT_PAGE_LIMIT, 0);\n        setDefaultPage(1);\n    }\n\n    const columns = walletsColumns();\n\n    return (\n        <Row>\n            {walletStats.fechaUltimoMovimiento && (\n                <Row>\n                    <Col md={4}>\n                        <Card>\n                            <CardBody>\n                                <div className=\"float-end mt-2\">\n                                    <Tooltip placement=\"bottom\" title=\"Saldo inicio de mes\" aria-label=\"add\">\n                                        <i className=\"mdi mdi-scale-balance font-size-24 mr-1 text-primary p-3\"> </i>\n                                    </Tooltip>\n                                </div>\n                                <div>\n                                    <h4 className=\"mb-1 mt-2\">\n                                        <CountUp end={walletStats.inicioMes} separator=\",\" decimals={0}/>\n                                    </h4>\n                                    <p className=\"text-muted mb-0\">{\"Saldo Inicio de Mes\"}</p>\n                                </div>\n                                <p className=\"text-muted mb-0 mt-3\">\n                                </p>\n                            </CardBody>\n                        </Card>\n                    </Col>\n                    <Col md={4}>\n                        <Card>\n                            <CardBody>\n                                <div className=\"float-end mt-2\">\n                                    <Tooltip placement=\"bottom\" title=\"Fecha último movimiento\" aria-label=\"add\">\n                                        <i className=\"mdi mdi-sort-calendar-ascending font-size-24 mr-1 text-muted p-3\"> </i>\n                                    </Tooltip>\n                                </div>\n                                <div>\n                                    <h4 className=\"mb-1 mt-2\">\n                                        {walletStats.fechaUltimoMovimiento}\n                                    </h4>\n                                    <p className=\"text-muted mb-0\">{\"Fecha último movimiento\"}</p>\n                                </div>\n                                <p className=\"text-muted mb-0 mt-3\">\n                                </p>\n                            </CardBody>\n                        </Card>\n                    </Col>\n                    <Col md={4}>\n                        <Card>\n                            <CardBody>\n                                <div className=\"float-end mt-2\">\n                                    <Tooltip placement=\"bottom\" title=\"Saldo\" aria-label=\"add\">\n                                        <i className=\"mdi mdi-currency-usd font-size-24 mr-1 text-muted p-3\"> </i>\n                                    </Tooltip>\n                                </div>\n                                <div>\n                                    <h4 className=\"mb-1 mt-2\">\n                                        <CountUp end={walletStats.saldo} separator=\",\" decimals={0}/>\n                                    </h4>\n                                    <p className=\"text-muted mb-0\">{\"Saldo\"}</p>\n                                </div>\n                                <p className=\"text-muted mb-0 mt-3\">\n                                </p>\n                            </CardBody>\n                        </Card>\n                    </Col>\n                </Row>\n            )}\n            <TableFilter\n                onPressDisabled={() => setFilter(false)}\n                isActive={filter}\n                fields={columns}\n                onSubmit={onFilterAction.bind(this)}/>\n\n            <Col lg={filter ? \"8\" : \"12\"}>\n                <Card>\n                    <CardBody>\n                        <PaginationProvider pagination={paginationFactory(pageOptions)}>\n                            {({paginationProps, paginationTableProps}) => (\n                                <ToolkitProvider\n                                    keyField=\"id\"\n                                    data={walletsList || []}\n                                    columns={normalizeColumnsList(columns)}\n                                    bootstrap4\n                                    search\n                                >\n                                    {toolkitProps => (\n                                        <React.Fragment>\n                                            <Row className=\"row mb-2\">\n                                                <Col md={6}>\n                                                    <div className=\"form-inline mb-3\">\n                                                        <div className=\"search-box ms-2\">\n                                                            <h4 className=\"text-info\"><i className=\"uil-shopping-cart-alt me-2\"></i> Billetera</h4>\n                                                        </div>\n                                                    </div>\n                                                </Col>\n                                                <Col md={6}>\n                                                    <div className=\"mb-3 float-md-end\">\n                                                        {columns.some(s => s.filter) && (\n                                                            <Tooltip placement=\"bottom\" title=\"Filtros Avanzados\" aria-label=\"add\">\n                                                                <Button onClick={() => setFilter(!filter)}>\n                                                                    <i className={\"mdi mdi-filter\"}></i>\n                                                                </Button>\n                                                            </Tooltip>\n                                                        )}\n                                                        <HasPermissions permissions={[PERMISSIONS.LOCALITY_CREATE]} renderNoAccess={() => <NoAccess/>}>\n                                                            <Link to={\"/wallet\"} className=\"btn btn-primary waves-effect waves-light text-light\">\n                                                                <i className=\"mdi mdi-plus\"></i> Nuevo registro\n                                                            </Link>\n                                                        </HasPermissions>\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col xl=\"12\">\n                                                    <div className=\"table-responsive mb-4\">\n                                                        <BootstrapTable\n                                                            remote\n                                                            responsive\n                                                            loading={true}\n                                                            bordered={false}\n                                                            striped={true}\n                                                            classes={\n                                                                \"table table-centered table-nowrap mb-0\"\n                                                            }\n                                                            noDataIndication={() => <NoDataIndication/>}\n                                                            {...toolkitProps.baseProps}\n                                                            onTableChange={handleTableChange}\n                                                            {...paginationTableProps}\n                                                        />\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <div className=\"float-sm-start\">\n                                                <PaginationListStandalone {...paginationProps} />\n                                            </div>\n                                        </React.Fragment>\n                                    )}\n                                </ToolkitProvider>\n                            )}\n                        </PaginationProvider>\n                    </CardBody>\n                </Card>\n            </Col>\n        </Row>\n    )\n}\n\nWalletList.propTypes = {\n    wallets: PropTypes.array,\n    onGetWallets: PropTypes.func,\n    onDeleteWallets: PropTypes.func,\n}\n\nconst mapWalletToProps = state => {\n    const {wallets, loading, meta, refresh} = state.Wallet\n    return {wallets, loading, meta, refresh}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onResetwallet: () => {\n        dispatch(resetWallet());\n    },\n    onGetWallets: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getWallets(conditional, limit, page))\n})\n\nexport default connect(\n    mapWalletToProps,\n    mapDispatchToProps\n)(WalletList)\n","/Users/ramon/Repositories/lucy-moie/src/store/product/actions.js",["1571","1572"],"import {\n    CLEAR_PRODUCTS,\n    GET_PRODUCT,\n    GET_PRODUCT_FAILED,\n    GET_PRODUCT_SUCCESS,\n    GET_PRODUCTS,\n    GET_PRODUCTS_FAILED,\n    GET_PRODUCTS_SUCCESS, ORDER_PRODUCT, ORDER_PRODUCT_FAILED, ORDER_PRODUCT_SUCCESS,\n    QUERY_PENDING_PRODUCTS,\n    QUERY_PRODUCTS,\n    QUERY_PRODUCTS_FAILED,\n    QUERY_PRODUCTS_SUCCESS,\n    REGISTER_PRODUCT,\n    REGISTER_PRODUCT_FAILED,\n    REGISTER_PRODUCT_SUCCESS,\n    RESET_PRODUCT,\n    UPDATE_PRODUCT,\n    UPDATE_PRODUCT_FAILED,\n    UPDATE_PRODUCT_SUCCESS\n} from \"./actionTypes\";\nimport Conditionals from \"../../common/conditionals\";\n\nexport const resetProduct = () => ({\n    type: RESET_PRODUCT,\n})\n\nexport const clearProducts = () => ({\n    type: CLEAR_PRODUCTS,\n})\n\nexport const getProducts = (conditional, limit, offset, order) => ({\n    type: GET_PRODUCTS,\n    conditional: conditional,\n    limit: limit,\n    offset: offset,\n    order: order\n})\n\n\nexport const getProductsByRefs = (refs, offset) => {\n    const conditions = new Conditionals.Condition;\n    if (refs.length > 0) conditions.add(\"reference\", refs.join(\"::\"), Conditionals.OPERATORS.IN);\n    return getProducts(conditions.all(), refs.length, offset);\n}\nexport const getProductsByIds = (ids, offset) => {\n    const conditions = new Conditionals.Condition;\n    if (ids.length > 0) conditions.add(\"id\", ids.join(\"::\"), Conditionals.OPERATORS.IN);\n    return getProducts(conditions.all(), ids.length, offset);\n}\n\nexport const getProductsSuccess = (data, meta) => ({\n    type: GET_PRODUCTS_SUCCESS,\n    meta: meta,\n    payload: data,\n})\n\nexport const getProductsFailed = error => ({\n    type: GET_PRODUCTS_FAILED,\n    payload: error,\n})\n\nexport const getProduct = id => ({\n    type: GET_PRODUCT,\n    id\n})\n\nexport const getProductSuccess = data => ({\n    type: GET_PRODUCT_SUCCESS,\n    payload: data,\n})\n\nexport const getProductFailed = error => ({\n    type: GET_PRODUCT_FAILED,\n    payload: error,\n})\n\nexport const registerProduct = (data, history) => {\n    return {\n        type: REGISTER_PRODUCT,\n        payload: { data, history },\n    }\n}\n\nexport const registerProductSuccess = data => {\n    return {\n        type: REGISTER_PRODUCT_SUCCESS,\n        payload: data.product,\n    }\n}\n\n\nexport const registerProductFailed = data => {\n    return {\n        type: REGISTER_PRODUCT_FAILED,\n        payload: data,\n    }\n}\n\nexport const updateProduct = (id, data, history) => {\n    return {\n        type: UPDATE_PRODUCT,\n        payload: { id, data, history },\n    }\n}\n\nexport const updateProductSuccess = data => {\n    return {\n        type: UPDATE_PRODUCT_SUCCESS,\n        payload: data,\n    }\n}\n\n\nexport const updateProductFail = error => {\n    return {\n        type: UPDATE_PRODUCT_FAILED,\n        payload: error,\n    }\n}\n\n\n\nexport const countProductByStatus = () => {\n    const params = {operation:'id::count', group:\"status\"};\n    return queryProducts(params, 'statusGroup');\n}\n\nexport const pendingProducts = (id) => ({\n    type: QUERY_PENDING_PRODUCTS,\n    id:id\n})\nexport const queryProducts = (params, node) => ({\n    type: QUERY_PRODUCTS,\n    params: params,\n    node: node,\n})\nexport const queryProductsFailed = error => ({\n    type: QUERY_PRODUCTS_FAILED,\n    payload: error,\n})\nexport const queryProductsSuccess = (data, meta, node) => ({\n    type: QUERY_PRODUCTS_SUCCESS,\n    meta: meta,\n    payload: data,\n    node: node,\n})\n\nexport const reorderProduct = (id, data, history) => {\n    return {\n        type: ORDER_PRODUCT,\n        payload: { id, data, history },\n    }\n}\n\nexport const reorderProductSuccess = data => {\n    return {\n        type: ORDER_PRODUCT_SUCCESS,\n        payload: data,\n    }\n}\n\n\nexport const reorderProductFail = error => {\n    return {\n        type: ORDER_PRODUCT_FAILED,\n        payload: error,\n    }\n}\n","/Users/ramon/Repositories/lucy-moie/src/pages/Locality/list/localityList.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/payments/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/fieldOptions/actions.js",["1573","1574","1575"],"import {\n    GET_FIELD_OPTIONS,\n    GET_FIELD_OPTIONS_SUCCESS,\n    GET_FIELD_OPTIONS_FAILED,\n    GET_FIELD_OPTION,\n    GET_FIELD_OPTION_SUCCESS,\n    GET_FIELD_OPTION_FAILED,\n    REGISTER_FIELD_OPTION,\n    REGISTER_FIELD_OPTION_SUCCESS,\n    REGISTER_FIELD_OPTION_FAILED,\n    UPDATE_FIELD_OPTION,\n    UPDATE_FIELD_OPTION_SUCCESS,\n    UPDATE_FIELD_OPTION_FAILED, DELETE_FIELD_OPTION, DELETE_FIELD_OPTION_SUCCESS, DELETE_FIELD_OPTION_FAILED,\n} from \"./actionTypes\";\nimport Conditionals from \"../../common/conditionals\";\n\nexport const getFieldOptions = (conditional, limit, offset) => ({\n    type: GET_FIELD_OPTIONS,\n    conditional: conditional,\n    limit: limit,\n    offset: offset\n})\n\nexport const getFieldOptionByGroups = (groups, limit, offset) => {\n    const conditions = new Conditionals.Condition;\n    if(groups.length > 0) conditions.add(\"groups\", groups.join(\"::\"), Conditionals.OPERATORS.IN);\n    return getFieldOptions(conditions.all(), limit, offset);\n}\n\nexport const getFieldOptionByGroup = (group, limit, offset) => {\n    const conditions = new Conditionals.Condition;\n    conditions.add(\"groups\", group, Conditionals.OPERATORS.EQUAL);\n    return getFieldOptions(conditions.all(), limit, offset);\n}\n\nexport const getProductFieldOption = (limit, offset) => {\n    return getFieldOptionByName(\"PRODUCT\", limit, offset);\n}\n\nexport const getFieldOptionByName = (name, limit, offset) => {\n    const conditions = new Conditionals.Condition;\n    conditions.add(\"name\", name, Conditionals.OPERATORS.EQUAL);\n    return getFieldOptions(conditions.all(), limit, offset);\n}\n\nexport const getFieldOptionsSuccess = (data, meta) => ({\n    type: GET_FIELD_OPTIONS_SUCCESS,\n    meta: meta,\n    payload: data,\n})\n\nexport const getFieldOptionsFailed = error => ({\n    type: GET_FIELD_OPTIONS_FAILED,\n    payload: error,\n})\n\nexport const getFieldOption = id => ({\n    type: GET_FIELD_OPTION,\n    id\n})\n\nexport const getFieldOptionSuccess = data => ({\n    type: GET_FIELD_OPTION_SUCCESS,\n    payload: data,\n})\n\nexport const getFieldOptionFailed = error => ({\n    type: GET_FIELD_OPTION_FAILED,\n    payload: error,\n})\n\nexport const registerFieldOption = (data, history) => {\n    return {\n        type: REGISTER_FIELD_OPTION,\n        payload: { data, history },\n    }\n}\n\nexport const registerFieldOptionSuccess = data => {\n    return {\n        type: REGISTER_FIELD_OPTION_SUCCESS,\n        payload: data,\n    }\n}\n\n\nexport const registerFieldOptionFailed = data => {\n    return {\n        type: REGISTER_FIELD_OPTION_FAILED,\n        payload: data,\n    }\n}\n\nexport const updateFieldOption = (id, data, history) => {\n    return {\n        type: UPDATE_FIELD_OPTION,\n        payload: { id, data, history },\n    }\n}\nexport const updateFieldOptionSuccess = data => {\n    return {\n        type: UPDATE_FIELD_OPTION_SUCCESS,\n        payload: data,\n    }\n}\nexport const updateFieldOptionFail = error => {\n    return {\n        type: UPDATE_FIELD_OPTION_FAILED,\n        payload: error,\n    }\n}\n\nexport const deleteFieldOption = (id, history) => {\n    return {\n        type: DELETE_FIELD_OPTION,\n        payload: { id, history },\n    }\n}\nexport const deleteFieldOptionSuccess = data => {\n    return {\n        type: DELETE_FIELD_OPTION_SUCCESS,\n        payload: data,\n    }\n}\nexport const deleteFieldOptionFail = error => {\n    return {\n        type: DELETE_FIELD_OPTION_FAILED,\n        payload: error,\n    }\n}\n","/Users/ramon/Repositories/lucy-moie/src/pages/BillConfig/list/billConfigList.js",["1576"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from \"prop-types\"\nimport {connect} from \"react-redux\"\nimport {Card, CardBody, Col, Row} from \"reactstrap\"\nimport paginationFactory, {PaginationListStandalone, PaginationProvider,} from \"react-bootstrap-table2-paginator\"\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\"\nimport BootstrapTable from \"react-bootstrap-table-next\"\nimport {Button, Tooltip} from \"@material-ui/core\";\nimport {DEFAULT_PAGE_LIMIT} from \"../../../common/pagination\";\nimport {ConfirmationModalAction} from \"../../../components/Modal/ConfirmationModal\";\nimport {getBillConfigs, registerBillConfig, resetBillConfig} from \"../../../store/billConfig/actions\";\nimport {TableFilter} from \"../../../components/TableFilter\";\nimport billConfigColumns from \"./billConfigColumns\";\nimport {normalizeColumnsList} from \"../../../common/converters\";\nimport NoDataIndication from \"../../../components/Common/NoDataIndication\";\nimport {Link} from \"react-router-dom\";\nimport {PERMISSIONS} from \"../../../helpers/security_rol\";\nimport HasPermissions from \"../../../components/HasPermissions\";\n\nconst BillConfigList = props => {\n    const {billConfigs, onGetBillConfigs, onResetBillConfig, refresh} = props; //onDeleteBillConfig,\n    const [billConfigList, setBillConfigList] = useState([])\n    const [filter, setFilter] = useState(false);\n    const [conditional, setConditional] = useState(null);\n    const [defaultPage, setDefaultPage] = useState(1);\n\n\n    const pageOptions = {\n        sizePerPage: DEFAULT_PAGE_LIMIT,\n        custom: true,\n        page: defaultPage,\n        onPageChange: (page, sizePerPage) => {\n            setDefaultPage(page);\n        },\n    }\n    useEffect(() => {\n        if(refresh === null) {\n            onResetBillConfig();\n        }\n        onGetBillConfigs();\n    }, [refresh, onGetBillConfigs])\n\n    useEffect(() => {\n        setBillConfigList(billConfigs);\n    }, [billConfigs])\n\n    // eslint-disable-next-line no-unused-vars\n    const handleTableChange = (type, {page, searchText}) => {\n        onGetBillConfigs(conditional, DEFAULT_PAGE_LIMIT, (page - 1)*DEFAULT_PAGE_LIMIT);\n    }\n\n    const onFilterAction = (condition) => {\n        setConditional(condition);\n        onGetBillConfigs(condition, DEFAULT_PAGE_LIMIT, 0);\n        setDefaultPage(1);\n    }\n    const onConfirmDelete = (id) => {\n        //onDeleteBillConfig(id);\n    };\n\n    const onDelete = (id) => {\n        ConfirmationModalAction({\n            title: '¿Seguro desea eliminar el Municipio?',\n            description: 'Usted está eliminado este Municipio, una vez eliminado no podrá ser recuperado.',\n            id: '_clienteModal',\n            onConfirm: () => onConfirmDelete(id)\n        });\n    };\n    const columns = billConfigColumns(onDelete);\n\n    return (\n        <>\n            <Row>\n\n                <TableFilter\n                    onPressDisabled={() => setFilter(false)}\n                    isActive={filter}\n                    fields={columns}\n                    onSubmit={onFilterAction.bind(this)}/>\n\n                <Col lg={filter ? \"8\" : \"12\"}>\n                    <Card>\n                        <CardBody>\n                            <PaginationProvider pagination={paginationFactory(pageOptions)}>\n                                {({paginationProps, paginationTableProps}) => (\n                                    <ToolkitProvider\n                                        keyField=\"id\"\n                                        data={billConfigList || []}\n                                        columns={normalizeColumnsList(columns)}\n                                        bootstrap4\n                                        search\n                                    >\n                                        {toolkitProps => (\n                                            <React.Fragment>\n                                                <Row className=\"row mb-2\">\n                                                    <Col md={6}>\n                                                        <div className=\"form-inline mb-3\">\n                                                            <div className=\"search-box ms-2\">\n                                                                <h4 className=\"text-info\"><i className=\"uil-billConfig me-2\"></i> Resoluciones </h4>\n                                                            </div>\n                                                        </div>\n                                                    </Col>\n                                                    <Col md={6}>\n                                                        <div className=\"mb-3 float-md-end\">\n                                                            {columns.some(s => s.filter) && (\n                                                                <Tooltip placement=\"bottom\" title=\"Filtros Avanzados\" aria-label=\"add\">\n                                                                    <Button onClick={() => setFilter(!filter)}>\n                                                                        <i className={\"mdi mdi-filter\"}> </i>\n                                                                    </Button>\n                                                                </Tooltip>\n                                                            )}\n                                                            <HasPermissions permission={PERMISSIONS.BILL_CREATE}>\n                                                                <Link to={\"/billConfig\"} className=\"btn btn-primary waves-effect waves-light text-light\">\n                                                                    <i className=\"mdi mdi-plus\"></i> Nueva resolución\n                                                                </Link>\n                                                            </HasPermissions>\n                                                        </div>\n                                                    </Col>\n                                                </Row>\n                                                <Row>\n                                                    <Col xl=\"12\">\n                                                        <div className=\"table-responsive mb-4\">\n                                                            <BootstrapTable\n                                                                remote\n                                                                responsive\n                                                                loading={true}\n                                                                bordered={false}\n                                                                striped={true}\n                                                                classes={\"table table-centered table-nowrap mb-0\"}\n                                                                noDataIndication={() => <NoDataIndication/>}\n                                                                {...toolkitProps.baseProps}\n                                                                onTableChange={handleTableChange}\n                                                                {...paginationTableProps}\n                                                            />\n                                                        </div>\n                                                    </Col>\n                                                </Row>\n                                                <div className=\"float-sm-start\">\n                                                    <PaginationListStandalone {...paginationProps} />\n                                                </div>\n                                            </React.Fragment>\n                                        )}\n                                    </ToolkitProvider>\n                                )}\n                            </PaginationProvider>\n                        </CardBody>\n                    </Card>\n                </Col>\n            </Row>\n        </>\n\n    )\n}\n\nBillConfigList.propTypes = {\n    states: PropTypes.array,\n    onGetBillConfigs: PropTypes.func,\n    //onDeleteBillConfig: PropTypes.func,\n}\n\nconst mapStateToProps = state => {\n    const {states, billConfigs, loading, meta, refresh} = state.BillConfig\n    return {states, billConfigs, loading, meta, refresh}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onResetBillConfig: () => {\n        dispatch(resetBillConfig());\n    },\n    onGetBillConfigs: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getBillConfigs(conditional, limit, page)),\n    onCreateBillConfig: (ids) => dispatch(registerBillConfig(ids)),\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(BillConfigList)\n","/Users/ramon/Repositories/lucy-moie/src/pages/Payments/list/paymentsList.js",["1577","1578","1579"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from \"prop-types\"\nimport {connect} from \"react-redux\"\nimport {Card, CardBody, Col, Row} from \"reactstrap\"\nimport paginationFactory, {PaginationListStandalone, PaginationProvider,} from \"react-bootstrap-table2-paginator\"\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\"\nimport BootstrapTable from \"react-bootstrap-table-next\"\n\nimport {Link} from \"react-router-dom\"\nimport {Button, Tooltip} from \"@material-ui/core\";\nimport {DEFAULT_PAGE_LIMIT} from \"../../../common/pagination\";\nimport {getPayments} from \"../../../store/payments/actions\";\nimport paymentsColumns from \"./paymentsColumn\";\nimport {TableFilter} from \"../../../components/TableFilter\";\nimport {normalizeColumnsList} from \"../../../common/converters\";\nimport NoDataIndication from \"../../../components/Common/NoDataIndication\";\nimport PaymentOverlay from \"../paymentOverlay\";\nimport {PERMISSIONS} from \"../../../helpers/security_rol\";\nimport HasPermissions from \"../../../components/HasPermissions\";\nimport OutsideClickHandler from \"../../../components/OutsideClickHandler\";\nimport {clearTableConditions, saveTableConditions} from \"../../../store/layout/actions\";\n\n\nconst PaymentsList = props => {\n    const {payments, meta, onGetPayments, onDeletePayment, loading, refresh, onSaveTableConditions, onClearTableConditions, conditionType, conditions, offset} = props;\n    const [paymentsList, setPaymentsList] = useState([])\n    const [paymentSelected, setPaymentSelected] = useState(null);\n    const [filter, setFilter] = useState(false);\n    const [conditional, setConditional] = useState(null);\n    const [defaultPage, setDefaultPage] = useState(1);\n\n\n    const pageOptions = {\n        sizePerPage: DEFAULT_PAGE_LIMIT,\n        totalSize: meta?.totalRegisters,\n        custom: true,\n        page: defaultPage,\n        onPageChange: (page, sizePerPage) => {\n            setDefaultPage(page);\n            onSaveTableConditions(conditions, offset, 'payments');\n        },\n    }\n\n    useEffect(() => {\n        if(conditionType !== 'payments'){\n        onClearTableConditions();\n        onGetPayments();\n        } else {\n            onFilterAction(conditions, offset);\n        }\n    }, [refresh, onGetPayments])\n\n    useEffect(() => {\n        setPaymentsList(payments)\n    }, [payments])\n\n    const handleTableChange = (type, {page}) => {\n        onGetPayments(conditional, DEFAULT_PAGE_LIMIT, (page - 1) * DEFAULT_PAGE_LIMIT);\n    }\n\n    const onFilterAction = (condition) => {\n        const page = Math.floor(offset / DEFAULT_PAGE_LIMIT);\n        setConditional(condition);\n        onGetPayments(condition, DEFAULT_PAGE_LIMIT, offset);\n        setDefaultPage(page + 1);\n        if(condition && condition.length > 0) {\n            onSaveTableConditions(condition, offset, 'payments');\n        } else {\n            onClearTableConditions();\n        }\n    }\n\n    const columns = paymentsColumns(setPaymentSelected);\n\n    return (\n        <>\n            <Row>\n                <TableFilter\n                    onPressDisabled={() => setFilter(false)}\n                    isActive={filter}\n                    fields={columns}\n                    onSubmit={onFilterAction.bind(this)}/>\n\n                <Col lg={filter ? \"8\" : \"12\"}>\n                    <Card>\n                        <CardBody>\n                            <PaginationProvider pagination={paginationFactory(pageOptions)}>\n                                {({paginationProps, paginationTableProps}) => (\n                                    <ToolkitProvider\n                                        keyField=\"id\"\n                                        data={paymentsList || []}\n                                        columns={normalizeColumnsList(columns)}\n                                        bootstrap4\n                                        search\n                                    >\n                                        {toolkitProps => (\n                                            <React.Fragment>\n                                                <Row className=\"row mb-2\">\n                                                    <Col md={6}>\n                                                        <div className=\"form-inline mb-3\">\n                                                            <div className=\"search-box ms-2\">\n                                                                <h4 className=\"text-info\"><i className=\"uil-shopping-cart-alt me-2\"></i> Pagos {conditionType && <small className={'font-size-12 badge rounded-pill bg-grey'}>Filtrados</small>}</h4>\n                                                            </div>\n                                                        </div>\n                                                    </Col>\n                                                    <Col md={6}>\n                                                        <div className=\"mb-3 float-md-end\">\n                                                            {columns.some(s => s.filter) && (\n                                                                <Tooltip placement=\"bottom\" title=\"Filtros Avanzados\" aria-label=\"add\">\n                                                                    <Button onClick={() => setFilter(!filter)}>\n                                                                        <i className={\"mdi mdi-filter\"}></i>\n                                                                    </Button>\n                                                                </Tooltip>\n                                                            )}\n                                                            <HasPermissions permissions={[PERMISSIONS.PAYMENT_CREATE]}>\n                                                                <Link to={\"/payment\"} className=\"btn btn-primary waves-effect waves-light text-light\">\n                                                                    <i className=\"mdi mdi-plus\"></i> Nuevo pago\n                                                                </Link>\n                                                            </HasPermissions>\n\n                                                        </div>\n                                                    </Col>\n                                                </Row>\n                                                <Row>\n                                                    <Col xl=\"12\">\n                                                        <div className=\"table-responsive mb-4\">\n                                                            <BootstrapTable\n                                                                remote\n                                                                responsive\n                                                                loading={true}\n                                                                bordered={false}\n                                                                striped={true}\n                                                                classes={\n                                                                    \"table table-centered table-nowrap mb-0\"\n                                                                }\n                                                                noDataIndication={() => <NoDataIndication/>}\n                                                                {...toolkitProps.baseProps}\n                                                                onTableChange={handleTableChange}\n                                                                {...paginationTableProps}\n                                                            />\n                                                        </div>\n                                                    </Col>\n                                                </Row>\n                                                <div className=\"float-sm-start\">\n                                                    <PaginationListStandalone {...paginationProps} />\n                                                </div>\n                                            </React.Fragment>\n                                        )}\n                                    </ToolkitProvider>\n                                )}\n                            </PaginationProvider>\n                        </CardBody>\n                    </Card>\n                </Col>\n            </Row>\n            <OutsideClickHandler\n                onOutsideClick={() => {\n                    if(paymentSelected){\n                        setPaymentSelected(null)\n                    }\n                }}\n            >\n            {paymentSelected && (<PaymentOverlay paymentSelected={paymentSelected} showOverlay={true} onCloseOverlay={() => setPaymentSelected(null)}/>)}\n            </OutsideClickHandler>\n        </>\n    )\n}\n\nPaymentsList.propTypes = {\n    payments: PropTypes.array,\n    onGetPayments: PropTypes.func,\n    onDeletePayments: PropTypes.func,\n}\n\nconst mapPaymentToProps = state => {\n    const {payments, loading, meta, refresh} = state.Payments\n    const {conditionType, conditions, offset} = state.Layout;\n\n    return {payments, loading, meta, refresh, conditionType, conditions, offset}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGetPayments: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getPayments(conditional, limit, page)),\n    onSaveTableConditions: (conditions, offset, conditionType) => dispatch(saveTableConditions(conditions, offset, conditionType)),\n    onClearTableConditions: () => dispatch(clearTableConditions())\n})\n\nexport default connect(\n    mapPaymentToProps,\n    mapDispatchToProps\n)(PaymentsList)\n","/Users/ramon/Repositories/lucy-moie/src/store/customer/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/bill/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/common/converters.js",[],"/Users/ramon/Repositories/lucy-moie/src/helpers/api_helper.js",[],"/Users/ramon/Repositories/lucy-moie/src/helpers/service.js",["1580","1581","1582","1583","1584","1585","1586"],"import {fetchDataApi, postApi} from \"./backend_helper\";\nimport Conditionals from \"../common/conditionals\";\nimport {showMessage} from \"../components/MessageToast/ShowToastMessages\";\nimport {DEFAULT_PAGE_LIMIT} from \"../common/pagination\";\nimport * as url from \"./url_helper\";\nimport {formatDateToServer, getMoment} from \"../common/utils\";\n\nexport const getData = (urlStr, name, conditionalOptions, defaultConditions, limit = DEFAULT_PAGE_LIMIT) => {\n    const conditions = new Conditionals.Condition;\n    if (defaultConditions) {\n        defaultConditions.forEach(dc => conditions.add(dc.field, dc.value, dc.operator));\n    }\n    if (name) {\n        if (conditionalOptions) {\n            conditions.add(conditionalOptions.fieldName, name, conditionalOptions.operator);\n        } else {\n            conditions.add('name', name, Conditionals.OPERATORS.LIKE);\n        }\n    }\n    \n    const cond = Conditionals.getConditionalFormat(conditions.all());\n    const query = Conditionals.buildHttpGetQuery(cond, limit, 0);\n    return fetchDataApi(urlStr, query);\n}\n\nexport const findOrders = (conditions, limit = null, offset = null) => {\n    const cond = Conditionals.getConditionalFormat(conditions.all());\n    const query = Conditionals.buildHttpGetQuery(cond, limit, offset);\n    return fetchDataApi(url.ORDERS, query);\n}\n\nexport const showResponseMessage = (response, message, errorMessage) => {\n    if (response.status === 200 || response.code === 200) {\n        showMessage.success(message);\n    } else {\n        showMessage.error(errorMessage || message);\n    }\n}\n\nexport const hasCustomerOpenOrders = (customerId) => {\n    const conditions = new Conditionals.Condition;\n    conditions.add('status', '1::4', Conditionals.OPERATORS.BETWEEN);\n    conditions.add('customer', customerId, Conditionals.OPERATORS.EQUAL);\n    return findOrders(conditions, 1);\n}\n\nexport const countCustomersByStatus = () => {\n    return countByStatus(url.CUSTOMER);\n}\n\nexport const countProductsByStatus = () => {\n    return countByStatus(url.PRODUCT);\n}\n\nconst countByStatus = (urlString) => {\n    const query = {};\n    query.operation = 'id::count';\n    query.group = 'status'\n\n    return fetchDataApi(urlString, Conditionals.urlSearchParams(query)).then(resp => {\n        const group = {};\n        resp.data.forEach(item => group[!!item.status ? 1 : 0] = item.id);\n        return group;\n    });\n}\n\nexport const countMayoristas = () => {\n    const query = {};\n    query.operation = 'id::count';\n    query.group = 'isMayorist'\n\n    return fetchDataApi(url.CUSTOMER, Conditionals.urlSearchParams(query)).then(resp => {\n        const group = {};\n        resp.data.forEach(item => group[item.isMayorist ? 1 : 0] = item.id);\n        return group;\n    });\n}\n\nexport const countUsersOrders = () => {\n    const conditions = new Conditionals.Condition;\n    conditions.add('status', [1,2,3,4,5,7].join(\"::\"), Conditionals.OPERATORS.IN);\n    conditions.add('createdAt', formatDateToServer(getMoment().startOf('day')), Conditionals.OPERATORS.GREATER_THAN_OR_EQUAL)\n\n    const query = {};\n    query.conditional = Conditionals.getConditionalFormat(conditions.all());\n    query.operation = 'origen::count,totalAmount::sum';\n    query.group = 'user_id'\n\n    return fetchDataApi(url.ORDERS, Conditionals.urlSearchParams(query));\n}\n\nexport const statsCustomerRegisteredToday = () => {\n    const conditions = new Conditionals.Condition;\n    conditions.add('createdAt', formatDateToServer(getMoment().startOf('day')), Conditionals.OPERATORS.GREATER_THAN_OR_EQUAL)\n    return statsRegistered(url.CUSTOMER, conditions);\n}\n\nexport const statsCustomerRegistered = () => {\n    const conditions = new Conditionals.Condition;\n    conditions.add('createdAt',formatDateToServer(getMoment().isoWeekday(1)), Conditionals.OPERATORS.GREATER_THAN_OR_EQUAL)\n    return statsRegistered(url.CUSTOMER, conditions);\n}\n\nexport const statsRegistered = (urlString, conditions) => {\n    const cond = Conditionals.getConditionalFormat(conditions.all());\n    const query = {conditional: cond, operation: 'id::count'};\n\n    return fetchDataApi(urlString, Conditionals.urlSearchParams(query)).then(resp => {\n        const data = {count: 0};\n        if(resp.data && resp.data.length > 0){\n            data.count = resp.data[0].id;\n        }\n        return data;\n    });\n}\n\nexport const getCatalogBatchRequest = () => {\n    const conditions = new Conditionals.Condition;\n    conditions.add('createdAt', formatDateToServer(getMoment().startOf('day')), Conditionals.OPERATORS.GREATER_THAN_OR_EQUAL)\n    conditions.add('type', [2,3].join(\"::\"), Conditionals.OPERATORS.IN);\n    conditions.add('status', 2, Conditionals.OPERATORS.EQUAL);\n\n    const cond = Conditionals.getConditionalFormat(conditions.all());\n    const query = Conditionals.buildHttpGetQuery(cond, 15);\n    return fetchDataApi(url.BATCH_REQUEST, Conditionals.urlSearchParams(query));\n}\n\nexport const findFieldOptionByGroup = (group, limit = null, offset = null) => {\n    const conditions = new Conditionals.Condition;\n    conditions.add('groups', group, Conditionals.OPERATORS.EQUAL);\n    const cond = Conditionals.getConditionalFormat(conditions.all());\n    const query = Conditionals.buildHttpGetQuery(cond, limit, offset);\n    return fetchDataApi(url.FIELD_OPTIONS, query).then(resp => (resp.data || []));\n}\n\nexport const customerOrdersStats = (customerId, date) => {\n    return fetchDataApi(`${url.CUSTOMER}/${customerId}/order_stats?beforeDate=${date.format(\"YYYY-MM-DD\")}`, {});\n}\nexport const customerProductStats = (customerId, date) => {\n    return fetchDataApi(`${url.CUSTOMER}/${customerId}/stats?beforeDate=${date.format(\"YYYY-MM-DD\")}`, {});\n}\nexport const customerCategoryStats = (customerId, date) => {\n    return fetchDataApi(`${url.CUSTOMER}/${customerId}/stats?beforeDate=${date.format(\"YYYY-MM-DD\")}&categoryMode=true`, {});\n}\n\nexport const markOrderReceived = (orderId) => {\n    return postApi(url.ORDER_CONFIRM_RECEIVED, {order: orderId});\n}\n","/Users/ramon/Repositories/lucy-moie/src/store/location/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/reports/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/Modal/CommosModal.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/order/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Reports/Stats.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/PostSale/postSaleList.js",["1587","1588","1589"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from \"prop-types\"\nimport {connect} from \"react-redux\"\nimport {Card, CardBody, Col, Row, Spinner} from \"reactstrap\"\nimport paginationFactory, {PaginationListStandalone, PaginationProvider,} from \"react-bootstrap-table2-paginator\"\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\"\nimport BootstrapTable from \"react-bootstrap-table-next\"\nimport {DEFAULT_PAGE_LIMIT} from \"../../common/pagination\";\nimport {TableFilter} from \"../../components/TableFilter\";\nimport {normalizeColumnsList} from \"../../common/converters\";\nimport NoDataIndication from \"../../components/Common/NoDataIndication\";\nimport postSaleColumns from \"./postSaleColumn\";\nimport {Button, Tooltip} from \"@material-ui/core\";\nimport {doPrintBatchRequest, getOrders} from \"../../store/order/actions\";\nimport Conditionals from \"../../common/conditionals\";\nimport {importFile} from \"../../store/office/actions\";\nimport CustomModal from \"../../components/Modal/CommosModal\";\nimport PostSaleImportFileForm from \"./PostSaleImportFileForm\";\nimport PostSaleReportForm from \"../Reports/PostSaleReportForm\";\nimport {refreshAllStatusDelivery} from \"../../helpers/backend_helper\";\nimport {showMessage} from \"../../components/MessageToast/ShowToastMessages\";\nimport {PERMISSIONS} from \"../../helpers/security_rol\";\nimport HasPermissions from \"../../components/HasPermissions\";\nimport {clearTableConditions, saveTableConditions} from \"../../store/layout/actions\";\n\nconst PostSaleList = props => {\n    const {orders, meta, onGetOrders, loading, refresh, customActions, onSaveTableConditions, onClearTableConditions, conditionType, conditions, offset} = props;\n    const [statesList, setStatesList] = useState([])\n    const [filter, setFilter] = useState(false);\n    const [conditional, setConditional] = useState(null);\n    const [openImportFileModal, setOpenImportFileModal] = useState(false);\n    const [currentPage, setCurrentPage] = useState(null);\n    const [filterable, setFilterable] = useState(true);\n    const [openReportModal, setOpenReportModal] = useState(false);\n    const [syncing, setSyncing] = useState(false);\n    const [defaultPage, setDefaultPage] = useState(1);\n\n    const pageOptions = {\n        sizePerPage: DEFAULT_PAGE_LIMIT,\n        totalSize: meta?.totalRegisters,\n        custom: true,\n        page: defaultPage,\n        onPageChange: (page, sizePerPage) => {\n            setDefaultPage(page);\n            const offset = (page - 1) * DEFAULT_PAGE_LIMIT;\n            onSaveTableConditions(conditions, offset, 'postSale');\n        },\n    }\n\n    useEffect(() => {\n        if (null !== refresh) {\n            if(conditionType !== 'postSale'){\n                onClearTableConditions();\n                onGetOrders(conditional, DEFAULT_PAGE_LIMIT, currentPage * DEFAULT_PAGE_LIMIT);\n            } else {\n                //reload the filter loaded\n                onFilterAction(conditions, offset);\n            }\n        } else {\n            if(conditionType === 'postSale') {\n                onFilterAction(conditions, offset);\n            } else {\n                onGetOrders(conditional);\n                onClearTableConditions();\n                if (customActions) {\n                    setFilterable(false);\n                }\n            }\n        }\n    }, [refresh, onGetOrders])\n\n    useEffect(() => {\n        setStatesList(orders)\n    }, [orders])\n\n    const handleTableChange = (type, {page, searchText}) => {\n        const offset = (page - 1) * DEFAULT_PAGE_LIMIT;\n        onGetOrders(conditional, DEFAULT_PAGE_LIMIT, offset);\n        onSaveTableConditions(conditional, offset, 'postSale');\n    }\n\n    const onFilterAction = (condition, offset = 0) => {\n\n        const page = Math.floor(offset / DEFAULT_PAGE_LIMIT);\n        setConditional(condition);\n\n        onGetOrders(condition, DEFAULT_PAGE_LIMIT, offset);\n        setDefaultPage(page + 1);\n\n        if(condition && condition.length > 0) {\n            onSaveTableConditions(condition, offset, 'postSale');\n        } else {\n            onClearTableConditions();\n        }\n    }\n\n    const handleImportFile = (reload) => {\n        setOpenImportFileModal(false);\n        if(reload) onGetOrders(conditional, DEFAULT_PAGE_LIMIT, currentPage * DEFAULT_PAGE_LIMIT);\n    }\n//\n    const syncAllDeliveries = async () => {\n        if(!syncing) {\n            setSyncing(true);\n            const response = await refreshAllStatusDelivery();\n            showMessage.success('Se verificaron un total de ' + response.updates + ' pedidos');\n            setSyncing(false);\n            onGetOrders(conditional, DEFAULT_PAGE_LIMIT, currentPage * DEFAULT_PAGE_LIMIT);\n        }\n    }\n\n    const columns = postSaleColumns();\n\n    return (\n        <Row>\n            <TableFilter\n                onPressDisabled={() => setFilter(false)}\n                isActive={filter && filterable}\n                fields={columns}\n                onSubmit={onFilterAction.bind(this)}/>\n\n            <Col lg={filter && filterable ? \"8\" : \"12\"}>\n                <Card>\n                    <CardBody>\n                        <PaginationProvider pagination={paginationFactory(pageOptions)}>\n                            {({paginationProps, paginationTableProps}) => (\n                                <ToolkitProvider\n                                    keyField=\"id\"\n                                    data={statesList || []}\n                                    columns={normalizeColumnsList(columns)}\n                                    bootstrap4\n                                    search\n                                >\n                                    {toolkitProps => (\n                                        <React.Fragment>\n                                            <Row className=\"row mb-2\">\n                                                <Col md={6}>\n                                                    <div className=\"form-inline mb-3\">\n                                                        <div className=\"search-box ms-2\">\n                                                            <h4 className=\"text-info\"><i className=\"uil-shopping-cart-alt me-2\"></i> Post Venta {conditionType && <small className={'font-size-12 badge rounded-pill bg-grey'}>Filtrados</small>}</h4>\n                                                        </div>\n                                                    </div>\n                                                </Col>\n                                                <Col md={6}>\n                                                    <div className=\"mb-3 float-md-end d-flex\">\n                                                        {columns.some(s => s.filter) && (\n                                                            <Tooltip placement=\"bottom\" title=\"Filtros Avanzados\" aria-label=\"add\">\n                                                                <Button onClick={() => setFilter(!filter)}>\n                                                                    <i className={\"mdi mdi-filter\"}> </i>\n                                                                </Button>\n                                                            </Tooltip>\n                                                        )}\n                                                        <HasPermissions permission={PERMISSIONS.POSTSALE_CREATE}>\n                                                        <Tooltip placement=\"bottom\" title=\"Importar archivo\" aria-label=\"add\">\n                                                            <Button onClick={() => setOpenImportFileModal(true)}>\n                                                                <i className={\"mdi mdi-file-excel\"}> </i>\n                                                            </Button>\n                                                        </Tooltip>\n                                                        </HasPermissions>\n                                                        <Tooltip placement=\"bottom\" title=\"Generar reporte\" aria-label=\"add\">\n                                                            <Button onClick={() => setOpenReportModal(true)}>\n                                                                <i className={\"mdi mdi-file\"}> </i>\n                                                            </Button>\n                                                        </Tooltip>\n                                                        <HasPermissions permission={PERMISSIONS.POSTSALE_SYNC}>\n                                                        <Tooltip placement=\"bottom\" title=\"Sincronizar todas\" aria-label=\"add\">\n                                                            <Button onClick={() => syncAllDeliveries()}>\n                                                                {syncing && <Spinner size=\"sm\" className=\"m-1\" color=\"primary\"/>}\n                                                                <i className={\"mdi mdi-refresh\"}> </i>\n                                                            </Button>\n                                                        </Tooltip>\n                                                        </HasPermissions>\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col xl=\"12\">\n                                                    <div className=\"table-responsive mb-4\">\n                                                        <BootstrapTable\n                                                            remote\n                                                            responsive\n                                                            loading={true}\n                                                            bordered={false}\n                                                            striped={true}\n                                                            classes={\"table table-centered table-nowrap mb-0\"}\n                                                            noDataIndication={() => <NoDataIndication/>}\n                                                            {...toolkitProps.baseProps}\n                                                            onTableChange={handleTableChange}\n                                                            {...paginationTableProps}\n                                                        />\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <div className=\"float-sm-start\">\n                                                <PaginationListStandalone {...paginationProps} />\n                                            </div>\n                                        </React.Fragment>\n                                    )}\n                                </ToolkitProvider>\n                            )}\n                        </PaginationProvider>\n                    </CardBody>\n                </Card>\n            </Col>\n            <CustomModal title={\"Importar\"} showFooter={false} isOpen={openImportFileModal} onClose={() => setOpenImportFileModal(false)}>\n                <PostSaleImportFileForm onCloseModal={(reload) => handleImportFile(reload)}/>\n            </CustomModal>\n            <CustomModal title={\"Generar reporte\"} showFooter={false} isOpen={openReportModal} onClose={() => setOpenReportModal(false)}>\n                <PostSaleReportForm onCloseModal={() => setOpenReportModal(false)}/>\n            </CustomModal>\n        </Row>\n    )\n}\n\nPostSaleList.propTypes = {\n    states: PropTypes.array,\n    onGetStates: PropTypes.func,\n    onDeleteStates: PropTypes.func,\n}\n\nconst mapStateToProps = state => {\n    const {orders, loading, meta, refresh} = state.Order\n    const {conditionType, conditions, offset} = state.Layout;\n    return {orders, loading, meta, refresh, conditionType, conditions, offset}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onImportFile: (data) => dispatch(importFile(data)),\n    onGetOrders: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => {\n        if(!conditional) conditional = [];\n        if(conditional && conditional.filter(_item => _item.field === 'postSaleDate').length > 0){\n\n        } else {\n            conditional.push({field: 'postSaleDate', value: '', operator: Conditionals.OPERATORS.NOT_NULL});\n        }\n        //conditional.push({field:'orderDelivery.deliveryMethod', value: [1,3,4,5].join(\"::\"), operator: Conditionals.OPERATORS.IN})\n        const orderFields = {field:'postSaleDate',type: 'DESC'};\n        dispatch(getOrders(conditional, limit, page, orderFields));\n    },\n    onPrintBatchRequest: (conditional) => dispatch(doPrintBatchRequest(conditional)),\n    onSaveTableConditions: (conditions, offset, conditionType) => dispatch(saveTableConditions(conditions, offset, conditionType)),\n    onClearTableConditions: () => dispatch(clearTableConditions())\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(PostSaleList)\n","/Users/ramon/Repositories/lucy-moie/src/helpers/url_helper.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Orders/create/orderSummary.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/office/actions.js",["1590"],"import {\n    ADD_ORDER_OFFICE,\n    ADD_ORDER_OFFICE_FAILED,\n    ADD_ORDER_OFFICE_SUCCESS,\n    CONFIRM_OFFICE,\n    CONFIRM_OFFICE_FAILED,\n    CONFIRM_OFFICE_SUCCESS,\n    DELETE_OFFICE,\n    DELETE_OFFICE_FAILED,\n    DELETE_OFFICE_SUCCESS,\n    DELETE_ORDER_OFFICE,\n    DELETE_ORDER_OFFICE_FAILED,\n    DELETE_ORDER_OFFICE_SUCCESS,\n    GET_OFFICE,\n    GET_OFFICE_FAILED,\n    GET_OFFICE_SUCCESS,\n    GET_OFFICES,\n    GET_OFFICES_FAILED,\n    GET_OFFICES_SUCCESS,\n    IMPORT_FILE,\n    IMPORT_FILE_FAILED,\n    IMPORT_FILE_RESET,\n    IMPORT_FILE_SUCCESS,\n    PRINT_OFFICE_REPORT,\n    PRINT_OFFICE_REPORT_FAILED,\n    PRINT_OFFICE_REPORT_RESET,\n    PRINT_OFFICE_REPORT_SUCCESS,\n    QUERY_OFFICES,\n    QUERY_OFFICES_FAILED,\n    QUERY_OFFICES_SUCCESS,\n    REGISTER_OFFICE,\n    REGISTER_OFFICE_FAILED,\n    REGISTER_OFFICE_SUCCESS,\n    RESET_OFFICE,\n    UPDATE_OFFICE,\n    UPDATE_OFFICE_FAILED,\n    UPDATE_OFFICE_SUCCESS\n} from \"./actionTypes\";\nimport Conditionals from \"../../common/conditionals\";\n\nexport const resetOffice = () => ({\n    type: RESET_OFFICE,\n})\n\nexport const getOffices = (conditional, limit, offset) => ({\n    type: GET_OFFICES,\n    conditional: conditional,\n    limit: limit,\n    offset: offset\n})\n\n\n\nexport const getOfficesByIds = (ids, offset) => {\n    const conditions = new Conditionals.Condition;\n    if(ids.length > 0) conditions.add(\"id\", ids.join(\"::\"), Conditionals.OPERATORS.IN);\n    return getOffices(conditions.all(), ids.length, offset);\n}\n\nexport const getOfficesSuccess = (data, meta) => ({\n    type: GET_OFFICES_SUCCESS,\n    meta: meta,\n    payload: data,\n})\n\nexport const getOfficesFailed = error => ({\n    type: GET_OFFICES_FAILED,\n    payload: error,\n})\n\nexport const getOffice = id => ({\n    type: GET_OFFICE,\n    id\n})\n\nexport const getOfficeSuccess = data => ({\n    type: GET_OFFICE_SUCCESS,\n    payload: data,\n})\n\nexport const getOfficeFailed = error => ({\n    type: GET_OFFICE_FAILED,\n    payload: error,\n})\n\nexport const registerOffice = (data, history) => {\n    return {\n        type: REGISTER_OFFICE,\n        payload: { data, history },\n    }\n}\n\nexport const registerOfficeSuccess = data => {\n    return {\n        type: REGISTER_OFFICE_SUCCESS,\n        payload: data.office,\n    }\n}\n\n\nexport const registerOfficeFailed = data => {\n    return {\n        type: REGISTER_OFFICE_FAILED,\n        payload: data,\n    }\n}\n\nexport const updateOffice = (id, data, history) => {\n    return {\n        type: UPDATE_OFFICE,\n        payload: { id, data, history },\n    }\n}\n\nexport const updateOfficeSuccess = data => {\n    return {\n        type: UPDATE_OFFICE_SUCCESS,\n        payload: data,\n    }\n}\n\n\nexport const updateOfficeFail = error => {\n    return {\n        type: UPDATE_OFFICE_FAILED,\n        payload: error,\n    }\n}\n\nexport const deleteOffice = (id, history) => ({\n    type: DELETE_OFFICE,\n    payload: { id, history}\n})\n\nexport const deleteOfficeSuccess = () => ({\n    type: DELETE_OFFICE_SUCCESS\n})\n\nexport const deleteOfficeFailed = error => ({\n    type: DELETE_OFFICE_FAILED,\n    payload: error,\n})\n\nexport const confirmOffice = (id, history) => ({\n    type: CONFIRM_OFFICE,\n    payload: { id, history}\n})\n\nexport const confirmOfficeSuccess = () => ({\n    type: CONFIRM_OFFICE_SUCCESS\n})\n\nexport const confirmOfficeFailed = error => ({\n    type: CONFIRM_OFFICE_FAILED,\n    payload: error,\n})\n\n\n\nexport const countOfficeByStatus = () => {\n    const params = {operation:'id::count', group:\"status\"};\n    return queryOffices(params, 'statusGroup');\n}\n\nexport const queryOffices = (params, node) => ({\n    type: QUERY_OFFICES,\n    params: params,\n    node: node,\n})\nexport const queryOfficesFailed = error => ({\n    type: QUERY_OFFICES_FAILED,\n    payload: error,\n})\nexport const queryOfficesSuccess = (data, meta, node) => ({\n    type: QUERY_OFFICES_SUCCESS,\n    meta: meta,\n    payload: data,\n    node: node,\n})\n\nexport const addOrderOffice = (id, data, conditional, history) => {\n    return {\n        type: ADD_ORDER_OFFICE,\n        payload: { id, data, conditional, history },\n    }\n}\n\nexport const addOrderOfficeSuccess = data => {\n    return {\n        type: ADD_ORDER_OFFICE_SUCCESS,\n        payload: data.office,\n    }\n}\n\n\nexport const addOrderOfficeFailed = data => {\n    return {\n        type: ADD_ORDER_OFFICE_FAILED,\n        payload: data,\n    }\n}\n\nexport const deleteOrderOffice = (id, data, conditional, history) => {\n    return {\n        type: DELETE_ORDER_OFFICE,\n        payload: { id, data, conditional, history },\n    }\n}\n\nexport const deleteOrderOfficeSuccess = data => {\n    return {\n        type: DELETE_ORDER_OFFICE_SUCCESS\n    }\n}\n\n\nexport const deleteOrderOfficeFailed = data => {\n    return {\n        type: DELETE_ORDER_OFFICE_FAILED\n    }\n}\n\nexport const importFileReset = () => ({\n    type: IMPORT_FILE_RESET\n})\nexport const importFile = (data) => ({\n    type: IMPORT_FILE,\n    payload: {data}\n})\nexport const importFileFailed = error => ({\n    type: IMPORT_FILE_FAILED,\n    payload: error,\n})\nexport const importFileSuccess = () => ({\n    type: IMPORT_FILE_SUCCESS\n})\n\nexport const printOfficeReport = (id) => ({\n    type: PRINT_OFFICE_REPORT,\n    payload: { id}\n})\nexport const printOfficeReportSuccess = (data) => ({\n    type: PRINT_OFFICE_REPORT_SUCCESS,\n    payload: data\n})\nexport const printOfficeReportFailed = error => ({\n    type: PRINT_OFFICE_REPORT_FAILED,\n    payload: error,\n})\nexport const resetPrintOfficeReport = () => ({\n    type: PRINT_OFFICE_REPORT_RESET\n})\n\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/create/orderDeliveryOptions.js",["1591","1592","1593","1594","1595","1596","1597","1598","1599","1600","1601","1602","1603","1604"],"import React, {useEffect, useState} from \"react\"\nimport {Col, Label, Row} from \"reactstrap\"\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {FieldDecimalNumber, FieldNumber, FieldSelect, FieldText} from \"../../../components/Fields\";\nimport {getProduct} from \"../../../store/product/actions\";\nimport {AvForm} from \"availity-reactstrap-validation\";\nimport {getFieldOptionByGroups} from \"../../../store/fieldOptions/actions\";\nimport {\n    DELIVERY_METHODS,\n    DELIVERY_METHODS_IDS,\n    DELIVERY_METHODS_PAYMENT_TYPES,\n    DELIVERY_TYPES,\n    GROUPS,\n    PAYMENT_TYPES,\n    PAYMENT_TYPES_LIST\n} from \"../../../common/constants\";\nimport {getDeliveryMethods, getDeliveryQuote, updateCard} from \"../../../store/order/actions\";\nimport {arrayToOptions, getEmptyOptions} from \"../../../common/converters\";\nimport {Button} from \"@material-ui/core\";\nimport {getAllDeliveryLocalities} from \"../../../store/deliveryLocality/actions\";\nimport {sortAlphanumeric} from \"../../../common/utils\";\nimport OrderList from \"../orderList\";\nimport CustomModal from \"../../../components/Modal/CommosModal\";\nimport LocalityEdit from \"../../LocalityEdit\";\nimport Conditionals from \"../../../common/conditionals\";\nimport HasPermissions from \"../../../components/HasPermissions\";\nimport {PERMISSIONS} from \"../../../helpers/security_rol\";\n\nconst OrderDeliveryOptions = (props) => {\n    const {\n        onUpdateCar, car, fieldOptions, onGetFieldOptions, onGetDeliveryMethods, onGetDeliveryQuote, deliveryMethods, deliveryQuote,\n        showAsModal, onCloseModal, onAcceptModal, pOriginOrder,\n        onGetDeliveryLocalities, deliveryLocalities,\n        order\n    } = props;\n\n    const [initComponent, setInitComponent] = useState(true);\n    const [deliveryMethodList, setDeliveryMethodList] = useState([]);\n    const [deliveryMethod, setDeliveryMethod] = useState(null);\n    const [deliveryLocalitiesList, setDeliveryLocalitiesList] = useState([]);\n    const [deliveryLocality, setDeliveryLocality] = useState(null);\n    const [originOrders, setOriginOrders] = useState([]);\n    const [originOrder, setOriginOrder] = useState(pOriginOrder || null);\n    const [deliveryTypes, setDeliveryTypes] = useState(null);\n    const [deliveryType, setDeliveryType] = useState(null);\n    const [paymentTypes, setPaymentTypes] = useState(null);\n    const [paymentType, setPaymentType] = useState(null);\n    const [tracking, setTracking] = useState(null);\n    const [deliveryCost, setDeliveryCost] = useState(null);\n    const [otherMethod, setOtherMethod] = useState(null);\n    const [pieceToChange, setPieceToChange] = useState(null);\n    const [showPaymentType, setShowPaymentType] = useState(false);\n    const [hasAddress, setHasAddress] = useState(false);\n    const [productQty, setProductQty] = useState(0);\n\n    //Carga inicial\n    useEffect(() => {\n        setDeliveryTypes([getEmptyOptions(), ...DELIVERY_TYPES.map(dt => ({label: dt.label, value: dt.id}))]);\n        setPaymentTypes([getEmptyOptions(), ...PAYMENT_TYPES_LIST]);\n        onGetFieldOptions();\n        if(!deliveryMethods || deliveryMethods.length === 0) onGetDeliveryMethods();\n\n        const conditions = new Conditionals.Condition;\n        conditions.add('status', 1, Conditionals.OPERATORS.EQUAL);\n        onGetDeliveryLocalities(conditions.condition);\n\n        if (car.reset) {\n            setDeliveryMethod(null);\n            setOriginOrder(null);\n            setDeliveryType(null);\n            setPaymentType(null);\n            setDeliveryCost(null);\n            setPieceToChange(null);\n            setShowPaymentType(false);\n            setDeliveryLocality(null);\n            setOtherMethod(null);\n            setProductQty(0);\n            setTracking(\"\");\n            setHasAddress(false);\n        }\n    }, [onGetFieldOptions, car.reset]);\n\n    useEffect(() => {\n        const list = fieldOptions || [];\n        setOriginOrders([getEmptyOptions(), ...list.filter(op => (op.groups === GROUPS.ORDERS_ORIGIN)).map(op => ({label: op.name, value: op.name}))]);\n    }, [fieldOptions]);\n\n    useEffect(() => {\n        if(deliveryMethod === \"INTERRAPIDISIMO\" || deliveryMethod === \"SERVIENTREGA\") {\n            const list = deliveryLocalities.map(item => {\n                if(deliveryMethod === 'SERVIENTREGA') {\n                    if (item.deliveryType == 1) {\n                        //sucursal\n                        item.icon = \"&nbsp;&nbsp;&nbsp;&nbsp;\"+ item.timeInDays +\"&nbsp;&nbsp;<i class='fa fa-building' ></i>\";\n                    }\n                    if (item.deliveryType == 2) {\n                        //delivery\n                        item.icon = \"&nbsp;&nbsp;&nbsp;&nbsp;\"+ item.timeInDays +\"&nbsp;&nbsp;<i class='fa fa-motorcycle' ></i>\";\n                    }\n                    if (item.deliveryType == 3) {\n                        //sucursal y delivery\n                        item.icon = \"&nbsp;&nbsp;&nbsp;&nbsp;\"+ item.timeInDays +\"&nbsp;&nbsp;<span><i class='fa fa-building' ></i>&nbsp;<i class='fa fa-motorcycle' ></i></span>\";\n                    }\n                }\n                return item;\n            }).filter(me => me.deliveryMethodId === DELIVERY_METHODS_IDS[deliveryMethod]) || [];\n            setDeliveryLocalitiesList([getEmptyOptions(), ...arrayToOptions(list, deliveryMethod === \"SERVIENTREGA\")]);\n        }\n    }, [deliveryLocalities, deliveryMethod]);\n\n    useEffect(() => {\n        const list = deliveryMethods || [];\n        const ot = deliveryType + '';\n        setDeliveryMethodList([getEmptyOptions(), ...list.filter(op => (op.settings.includes(ot))).map(op => ({label: op.name, value: op.code}))]);\n\n        if(!(deliveryMethod && !showPaymentType && hasAddress)) {\n            setDeliveryLocality(null);\n        }\n\n        onChangeDeliveryOptions();\n    }, [deliveryType]);\n\n    useEffect(() => {\n        if (deliveryMethod) {\n            setShowPaymentType(DELIVERY_METHODS_PAYMENT_TYPES.includes(deliveryMethod));\n\n            if(deliveryMethod !== DELIVERY_METHODS.OTRO) {\n                setOtherMethod(null);\n            }\n            //getQuote();\n            onChangeDeliveryOptions();\n        }\n    }, [deliveryMethod]);\n\n    useEffect(() => {\n        if (deliveryMethods) {\n            const ot = deliveryType ? deliveryType + '' : null;\n            setDeliveryMethodList([getEmptyOptions(), ...deliveryMethods.filter(op => (!ot || op.settings.includes(ot))).map(op => ({label: op.name, value: op.code}))]);\n        }\n    }, [deliveryMethods]);\n\n    useEffect(() => {\n        if (deliveryMethod && deliveryQuote) {\n            /*if (!car.isEdit) {\n                setDeliveryCost(parseFloat(deliveryQuote.amount));\n            }*/\n            onChangeDeliveryOptions();\n        }\n    }, [deliveryQuote]);\n\n    useEffect(() => {\n        onChangeDeliveryOptions();\n    }, [deliveryCost, paymentType, pieceToChange, tracking, deliveryLocality, otherMethod]);\n\n    useEffect(() => {\n        //getQuote();\n    }, [car.products]);\n\n    useEffect(() => {\n        if (car.isEdit && car.deliveryOptions && car.deliveryOptions.origin && initComponent) {\n            setInitComponent(false);\n            setDeliveryMethod(car.deliveryOptions.method);\n            setOriginOrder(car.deliveryOptions.origin);\n            setDeliveryType(car.deliveryOptions.type);\n            setDeliveryCost(car.deliveryOptions.cost);\n            setPieceToChange(car.deliveryOptions.piecesForChanges);\n            setDeliveryLocality(car.deliveryOptions.deliveryLocality);\n            setTracking(car.deliveryOptions.tracking);\n            setOtherMethod(car.deliveryOptions.otherMethod);\n            setShowPaymentType(DELIVERY_METHODS_PAYMENT_TYPES.includes(car.deliveryOptions.method));\n\n            if (car.deliveryOptions.paymentType)\n                setPaymentType(car.deliveryOptions.paymentType === 1 ? PAYMENT_TYPES.CASH : PAYMENT_TYPES.TRANSFER);\n            //getQuote()\n        }\n    }, [car.deliveryOptions]);\n\n    const getQuote = () => {\n        let qty = 0;\n        car.products.forEach(prod => (qty += prod.quantity));\n        if (qty > 0 && deliveryMethod && (qty !== productQty || car.deliveryOptions.method !== deliveryMethod)) {\n            setProductQty(qty);\n            let products = car.products.map(prod => ({id: prod.origin.id, qty: prod.quantity}));\n            onGetDeliveryQuote({deliveryType: deliveryType, deliveryMethodCode: deliveryMethod, products});\n        }\n    }\n\n    const onChangeDeliveryOptions = () => {\n        let deliveryOps = {\n            origin: originOrder,\n            type: deliveryType,\n            method: deliveryMethod,\n            cost: parseFloat(deliveryCost),\n            paymentType: paymentType,\n            piecesForChanges: pieceToChange,\n            deliveryLocality: deliveryLocality,\n            otherMethod: otherMethod,\n        };\n\n        //Se agrega validacion si es mensajero, previo pago o previo pago cod no tiene direccion de envio\n        setHasAddress(!(deliveryMethod === \"MENSAJERO\" || [1,2].includes(deliveryType)) || deliveryMethod === \"PAYU\");\n\n        if(tracking && tracking !== ''){\n            deliveryOps.tracking = tracking;\n        }\n        onUpdateCar({...car, deliveryOptions: deliveryOps});\n    }\n\n    const acceptModal = () => {\n        onAcceptModal(car);\n    }\n\n    const isDisabled = () => {\n        if(!order || !order.orderDelivery){\n            return false;\n        }\n        return (order.status == 5 && order.orderDelivery && order.orderDelivery.deliveryType === 1);\n    }\n\n    const [openLocalityModal, setOpenLocalityModal] = useState(false);\n    const onCloseLocalityModal = () => {\n        setOpenLocalityModal(false);\n    };\n\n    const onSave = () => {\n        onGetDeliveryLocalities();\n        setOpenLocalityModal(false);\n    }\n\n    const showGuia = () => car.deliveryOptions.tracking\n    return (\n        <React.Fragment>\n            <CustomModal title={\"Editar Localidad\"} size=\"lg\" showFooter={false} isOpen={openLocalityModal} onClose={onCloseLocalityModal}>\n                <LocalityEdit customActions={onSave} showAsModal={true} externalId={deliveryLocality} externalView/>\n            </CustomModal>\n            <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => acceptModal(e, v)}>\n                <Row>\n                    <Col>\n                        <h4 className=\"card-title text-info\"><i className=\"uil uil-truck\"> </i> Opciones de envio</h4>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col md={6} className=\"p-1\">\n                        <Label htmlFor=\"weight\">Origen del pedido</Label>\n                        <FieldSelect\n                            id={\"originOrder\"}\n                            name={\"originOrder\"}\n                            isSearchable={true}\n                            options={sortAlphanumeric(originOrders,'label')}\n                            defaultValue={originOrder}\n                            onChange={item => setOriginOrder(item.value)}\n                            required\n                        />\n                    </Col>\n                    <Col md={6} className=\"p-1\">\n                        <Label htmlFor=\"weight\">Tipo de pedido</Label>\n                        <FieldSelect\n                            id={\"deliveryType\"}\n                            name={\"deliveryType\"}\n                            options={deliveryTypes}\n                            defaultValue={deliveryType}\n                            onChange={item => setDeliveryType(item.value)}\n                            required\n                            disabled={isDisabled()}\n                        />\n                    </Col>\n                    <Col md={6} className=\"p-1\">\n                        <Label htmlFor=\"weight\">Metodo de envio</Label>\n                        <FieldSelect\n                            id={\"deliveryMethod\"}\n                            name={\"deliveryMethod\"}\n                            options={deliveryMethodList}\n                            defaultValue={deliveryMethod}\n                            onChange={item => setDeliveryMethod(item.value)}\n                            required\n                        />\n                    </Col>\n                    <Col md={6} className=\"p-1\">\n                        <Label htmlFor=\"weight\">Costo del envio</Label>\n                        <FieldDecimalNumber\n                            id={\"deliveryCost\"}\n                            name={\"deliveryCost\"}\n                            value={deliveryCost}\n                            onChange={val => setDeliveryCost(val)}\n                            required/>\n                    </Col>\n                    {deliveryMethod === DELIVERY_METHODS.OTRO && (\n                        <Col md={6} className=\"p-1\">\n                            <Label htmlFor=\"weight\">Especifique</Label>\n                            <FieldText\n                                id={\"otherMethod\"}\n                                name={\"otherMethod\"}\n                                value={otherMethod}\n                                onChange={item => setOtherMethod(item.target.value)}\n                                required/>\n                        </Col>\n                    )}\n\n                    {(deliveryMethod && !showPaymentType && hasAddress && deliveryType !== null) && (\n                        <Col md={12} className=\"p-1\">\n                            <Label htmlFor=\"weight\">Localidad</Label>\n                            <FieldSelect\n                                id={\"deliveryLocality\"}\n                                name={\"deliveryLocality\"}\n                                options={deliveryLocalitiesList}\n                                defaultValue={deliveryLocality}\n                                onChange={item => setDeliveryLocality(item.value)}\n                                required\n                                isSearchable\n                            />\n                            <HasPermissions permission={PERMISSIONS.DELIVERY_LOCALITY_EDIT} renderNoAccess={() => \"\"}>\n                            <br />\n                            {deliveryLocality && <button onClick={() => setOpenLocalityModal(true)} className=\"btn btn-sm btn-outline-primary\"><i className=\"mdi mdi-pencil\"></i></button>}\n                            </HasPermissions>\n                        </Col>\n                    )}\n                    {showPaymentType && (\n                        <>\n                            <Col md={6} className=\"p-1\">\n                                <Label htmlFor=\"weight\">Forma de pago</Label>\n                                <FieldSelect\n                                    id={\"paymentType\"}\n                                    name={\"paymentType\"}\n                                    options={paymentTypes}\n                                    defaultValue={paymentType}\n                                    onChange={item => {\n                                        setPaymentType(item.value)\n                                    }}\n                                    required\n                                />\n                            </Col>\n                            <Col md={6} className=\"p-1\">\n                                <Label htmlFor=\"weight\">Prendas para cambio</Label>\n                                <FieldNumber\n                                    id={\"pieceToChange\"}\n                                    name={\"pieceToChange\"}\n                                    value={pieceToChange}\n                                    onChange={val => setPieceToChange(val)}\n                                    />\n                            </Col>\n                        </>\n                    )}\n                    {!!(showGuia() && tracking && tracking !== '') && (\n                        <Col md={6} className=\"p-1\">\n                            <Label htmlFor=\"weight\">Guia número</Label>\n                            <div className=\"form-control\">{tracking}</div>\n                            {/* <FieldText\n                                id={\"tracking\"}\n                                name={\"tracking\"}\n                                value={tracking}\n                                onChange={item => setTracking(item.target.value)}\n                            />*/}\n                        </Col>\n                    )}\n                </Row>\n                {showAsModal && (\n                    <>\n                        <hr/>\n                        <Row>\n                            <Col md={12} className=\"text-right\">\n                                {onCloseModal && (\n                                    <button type=\"button\" className=\"btn btn-light\" onClick={() => props.onCloseModal()}>Cancelar</button>\n                                )}\n                                {onAcceptModal && (\n                                    <Button color=\"primary\" type=\"submit\">Guardar</Button>\n                                )}\n                            </Col>\n                        </Row>\n                    </>\n                )}\n            </AvForm>\n        </React.Fragment>\n    )\n}\n\nOrderDeliveryOptions.propTypes = {\n    history: PropTypes.object\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGetProduct: (id) => dispatch(getProduct(id)),\n    onGetFieldOptions: (conditional = null, limit = 500, page) => dispatch(getFieldOptionByGroups([GROUPS.ORDERS_ORIGIN], limit, page)),\n    onGetDeliveryLocalities: (conditional = null) => dispatch(getAllDeliveryLocalities(conditional)),\n    onGetDeliveryMethods: (conditional = null, limit = 50, page) => dispatch(getDeliveryMethods(conditional, limit, page)),\n    onGetDeliveryQuote: (request) => dispatch(getDeliveryQuote(request)),\n    onUpdateCar: (data) => dispatch(updateCard(data)),\n})\n\nconst mapStateToProps = state => {\n    const {deliveryLocalities} = state.DeliveryLocality\n    const {fieldOptions} = state.FieldOption\n    const {car, deliveryMethods, deliveryQuote, order} = state.Order\n    return {car, deliveryLocalities, deliveryMethods: deliveryMethods.data, deliveryQuote: deliveryQuote.data, fieldOptions, order};\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(OrderDeliveryOptions))\n","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/create/orderCar.js",["1605"],"import React, {useEffect, useState} from \"react\"\nimport {Col, Label, Row} from \"reactstrap\"\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {getProduct} from \"../../../store/product/actions\";\nimport {map} from \"lodash\";\nimport Images from \"../../../components/Common/Image\";\nimport {buildNumericOptions, getImageByQuality, priceFormat} from \"../../../common/utils\";\nimport {FieldDecimalNumber, FieldSelect} from \"../../../components/Fields\";\nimport {HtmlTooltip} from \"../../../components/Common/HtmlTooltip\";\nimport {AvForm} from \"availity-reactstrap-validation\";\nimport {updateCard} from \"../../../store/order/actions\";\n\n\nconst OrderCar = (props) => {\n    const {car, onUpdateCar} = props;\n    const [globalDiscount, setGlobalDiscount] = useState(0);\n    const [totalAmount, setTotalAmount] = useState(0);\n\n    useEffect(() => {\n        if (car.products && car.products.length > 0) {\n            const list = [...car.products];\n            let totaledProductList = getProductListWithTotals(list);\n\n            if(JSON.stringify(totaledProductList) !== JSON.stringify(car.products)){\n                calculateAll(totaledProductList);\n                onUpdateCar({...car, products: totaledProductList})\n            }\n        }\n    }, [car.products, globalDiscount])\n\n    const getProductListWithTotals = (list) => {\n        var map = {};\n        list.map((prod) => {\n            const discountPercentage = globalDiscount > 0 ? globalDiscount : prod.discountPercentage;\n            let total = prod.origin.price * prod.quantity;\n            const discount = total * (discountPercentage / 100);\n            total = total - discount;\n\n            return {\n                ...prod,\n                quantity: parseInt(prod.quantity),\n                discountPercentage: discountPercentage,\n                discount: discount,\n                total: total,\n            };\n        }).forEach((prod) => {\n            const key = prod.origin.id + '_' + prod.color + '_' + prod.sizeId;\n            if (map[key]) {\n                map[key].quantity += prod.quantity;\n                if (map[key].quantity > prod.quantityAvailable) map[key].quantity = prod.quantityAvailable;\n                map[key].total += prod.total;\n            } else {\n                map[key] = prod;\n            }\n        });\n        return Object.keys(map).map((key) => (map[key]));\n    }\n\n    const removeProduct = (prod) => {\n        const list = [...car.products];\n        list.splice(list.indexOf(prod), 1);\n        onUpdateCar({...car, products: list})\n    }\n\n    const onChangeQuantity = (quantity, p) => {\n        if (quantity === 0) {\n            removeProduct(p);\n        } else {\n            const list = [...car.products];\n            list.forEach((prod) => {\n                if (prod.origin.id === p.origin.id) {\n                    prod.quantity = parseInt(quantity);\n                }\n            });\n            calculateAll(list);\n            onUpdateCar({...car, products: getProductListWithTotals(list)})\n        }\n    }\n\n    const calculateAll = (list) => {\n        const totals = getProductListWithTotals(list);\n\n        let _sum = totals.reduce((accumulator, _product) => {\n            return accumulator + _product.total;\n        }, 0);\n\n        if(car.deliveryOptions && car.deliveryOptions.cost) {\n            _sum = _sum + car.deliveryOptions.cost;\n        }\n        setTotalAmount(_sum);\n    }\n\n    const onChangeDiscount = (discountPercentage, p) => {\n        const list = [...car.products];\n        list.forEach((prod) => {\n            if (prod.origin.id === p.origin.id && prod.color === p.color && prod.size === p.size) {\n                prod.discountPercentage = parseFloat(discountPercentage);\n            }\n        });\n        calculateAll(list);\n        onUpdateCar({...car, products: getProductListWithTotals(list)})\n    }\n\n    return (\n        <React.Fragment>\n            <AvForm className=\"needs-validation\" autoComplete=\"off\">\n                <Row>\n                    <Col md={12} className=\"mb-3\">\n                        <h4 className=\"card-title text-info\"><i className=\"uil-box me-2\"> </i> Productos</h4>\n                    </Col>\n                    <Col md={4} className=\"mb-3\">\n                        <Label htmlFor=\"weight\">Descuento Global</Label>\n                        <FieldSelect\n                            id={\"discount\"}\n                            name={\"discount\"}\n                            isSearchable={true}\n                            options={buildNumericOptions(100, 5, 0)}\n                            defaultValue={globalDiscount}\n                            onChange={(item => setGlobalDiscount(parseInt(item.value)))}\n                            required\n                        />\n                    </Col>\n                    <Col md={12}>\n                        <table className=\"table table-sm table-striped table-bordered table-centered table-nowrap font-size-11\">\n                            <thead>\n                            <tr>\n                                <th className=\"text-center\">Código</th>\n                                <th className=\"text-center\">Color</th>\n                                <th className=\"text-center\">Talla</th>\n                                <th className=\"text-center\">Cantidad</th>\n                                <th className=\"text-center\">Precio Unit.</th>\n                                <th className=\"text-center\">% Desc.</th>\n                                <th className=\"text-center\">Total Desc.</th>\n                                <th className=\"text-center\">SubTotal</th>\n                                <th className=\"text-center\"> </th>\n                            </tr>\n                            </thead>\n                            <tbody>\n                            {map(car.products, (product, key) => (\n                                <tr key={key}>\n                                    <td style={{width: '10%'}}>\n                                        <HtmlTooltip\n                                            title={\n                                                <React.Fragment>\n                                                    <Images src={`${getImageByQuality(product.origin.productImage.length > 0 ? product.origin.productImage[0] : {}, 'medium')}`}\n                                                            alt={product.origin.reference}\n                                                            height={100}\n                                                            className=\"img-fluid mx-auto d-block tab-img rounded\"/>\n                                                </React.Fragment>\n                                            }>\n                                            <div className=\"text-info\">{product.origin.reference}</div>\n                                        </HtmlTooltip>\n                                    </td>\n                                    <td style={{width: '25%'}} className=\"text-center\">{product.color}</td>\n                                    <td style={{width: '15%'}} className=\"text-center\">{product.size}</td>\n                                    <td style={{width: '10%'}}>\n                                        <FieldSelect\n                                            id={\"quantity\"}\n                                            name={\"quantity\"}\n                                            options={buildNumericOptions((product.quantityAvailable > 0) ? product.quantityAvailable : product.quantity)}\n                                            defaultValue={product.quantity}\n                                            onChange={item => onChangeQuantity(item.value, product)}\n                                            required\n                                        />\n                                    </td>\n                                    <td style={{width: '10%'}} className=\"text-end\">{priceFormat(product.origin.price)}</td>\n                                    <td style={{width: '10%'}} className=\"text-center\">\n                                        {globalDiscount > 0 && (<>{product.discountPercentage + '%'}</>)}\n                                        {globalDiscount === 0 && (\n                                            <FieldDecimalNumber\n                                                id={\"discountProd\"}\n                                                name={\"discountProd\"}\n                                                value={product.discountPercentage}\n                                                onChange={val => onChangeDiscount((val ? val : 0), product)}\n                                            />\n                                        )}\n                                    </td>\n                                    <td style={{width: '10%'}} className=\"text-end\">{priceFormat(product.discount)}</td>\n                                    <td style={{width: '15%'}} className=\"text-end\">{priceFormat(product.total)}</td>\n                                    <td style={{width: '5%'}} className=\"text-end\">\n                                        <button size=\"small\" className=\"btn btn-sm text-danger\" onClick={() => removeProduct(product)}>\n                                            <i className=\"uil uil-trash-alt font-size-18\"> </i>\n                                        </button>\n                                    </td>\n                                </tr>\n                            ))}\n                            {car.products.length === 0 && (\n                                <tr>\n                                    <td colSpan={8} className=\"text-center text-muted\">Pedido vacio</td>\n                                </tr>\n                            )}\n                            </tbody>\n                            {props.showTotalAmount && (\n                                <tfoot>\n                                <tr>\n                                    <th colSpan={7} className={'text-right p-2'}>Total con Envio:</th>\n                                    <td><b>{priceFormat(totalAmount)}</b></td>\n\n                                </tr>\n                                </tfoot>\n                            )}\n                        </table>\n                    </Col>\n                </Row>\n            </AvForm>\n        </React.Fragment>\n    )\n}\n\nOrderCar.propTypes = {\n    history: PropTypes.object,\n    showTotalAmount: PropTypes.bool\n}\n\nconst mapStateToProps = state => {\n    const {product, error, loading} = state.Product\n    const {car} = state.Order\n    return {car, product, error, loading};\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGetProduct: (id) => dispatch(getProduct(id)),\n    onUpdateCar: (data) => dispatch(updateCard(data)),\n})\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(OrderCar))\n","/Users/ramon/Repositories/lucy-moie/src/pages/Bill/list/billList.js",["1606","1607","1608","1609","1610","1611","1612"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from \"prop-types\"\nimport {connect} from \"react-redux\"\nimport {Card, CardBody, Col, Row} from \"reactstrap\"\nimport paginationFactory, {PaginationListStandalone, PaginationProvider,} from \"react-bootstrap-table2-paginator\"\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\"\nimport BootstrapTable from \"react-bootstrap-table-next\"\nimport {Button, Tooltip} from \"@material-ui/core\";\nimport {DEFAULT_PAGE_LIMIT} from \"../../../common/pagination\";\nimport {ConfirmationModalAction} from \"../../../components/Modal/ConfirmationModal\";\nimport {getBills, registerBill, resetBill} from \"../../../store/bill/actions\";\nimport {TableFilter} from \"../../../components/TableFilter\";\nimport billColumns from \"./billColumns\";\nimport {normalizeColumnsList} from \"../../../common/converters\";\nimport Conditionals from \"../../../common/conditionals\";\nimport NoDataIndication from \"../../../components/Common/NoDataIndication\";\nimport CustomModal from \"../../../components/Modal/CommosModal\";\nimport OrderList from \"../../Orders/orderList\";\nimport BillGenerateReportForm from \"../../Reports/BillsReportForm\";\nimport HasPermissions from \"../../../components/HasPermissions\";\nimport {PERMISSIONS} from \"../../../helpers/security_rol\";\nimport {CHARGE_ON_DELIVERY, DELIVERY_METHODS_IDS, ORDERS_ENUM} from \"../../../common/constants\";\nimport {clearTableConditions, saveTableConditions} from \"../../../store/layout/actions\";\n\nconst BillList = props => {\n    const {states, bills, meta, getStates, onGetBills, onResetBill, loading, refresh, onSaveTableConditions, onClearTableConditions, conditionType, conditions, offset} = props; //onDeleteBill,\n    const [billList, setBillList] = useState([])\n    const [filter, setFilter] = useState(false);\n    const [conditional, setConditional] = useState(null);\n    const [openOrdersModal, setOpenOrdersModal] = useState(false);\n    const [orderListConditions, setOrderListConditions] = useState([]);\n    const [openReportModal, setOpenReportModal] = useState(false);\n    const [defaultPage, setDefaultPage] = useState(1);\n\n    const pageOptions = {\n        sizePerPage: DEFAULT_PAGE_LIMIT,\n        custom: true,\n        totalSize: meta?.totalRegisters,\n        page: defaultPage,\n        onPageChange: (page, sizePerPage) => {\n            setDefaultPage(page);\n            const offset = (page - 1) * DEFAULT_PAGE_LIMIT;\n            onSaveTableConditions(conditions, offset, 'bill');\n        },\n    }\n    useEffect(() => {\n        if(refresh === null){\n            onResetBill();\n        }\n\n        if(conditionType !== 'bill'){\n            onClearTableConditions();\n            onGetBills();\n        } else {\n            //reload the filter loaded\n            onFilterAction(conditions, offset);\n        }\n    }, [refresh, onGetBills])\n\n    useEffect(() => {\n        setBillList(bills);\n    }, [bills])\n\n    // eslint-disable-next-line no-unused-vars\n    const handleTableChange = (type, {page, searchText}) => {\n        const offset = (page - 1) * DEFAULT_PAGE_LIMIT;\n        onGetBills(conditional, DEFAULT_PAGE_LIMIT, offset);\n        onSaveTableConditions(conditional, offset, 'bill');\n    }\n\n    const onFilterAction = (condition, offset = 0) => {\n        const page = Math.floor(offset / DEFAULT_PAGE_LIMIT);\n\n        let creditMemo = condition.find(c => c.field === 'creditMemo');\n\n        if(creditMemo && creditMemo.value === 1){\n            condition.push({field: 'creditMemo.id', value: '', operator: Conditionals.OPERATORS.NOT_NULL});\n        } else if(creditMemo && creditMemo.value === 0){\n            condition.push({field: 'creditMemo.id', value: '', operator: Conditionals.OPERATORS.NULL});\n        } else {\n            condition = condition.filter(c => c.field !== 'creditMemo.id');\n        }\n\n        condition = condition.filter(c => c.field !== 'creditMemo');\n\n        setConditional(condition);\n        onGetBills(condition, DEFAULT_PAGE_LIMIT, offset);\n        setDefaultPage(page + 1);\n        if(condition && condition.length > 0) {\n            onSaveTableConditions(condition, offset, 'bill');\n        } else {\n            onClearTableConditions();\n        }\n    }\n\n    const onConfirmDelete = (id) => {\n        //onDeleteBill(id);\n    };\n\n    const onDelete = (id) => {\n        ConfirmationModalAction({\n            title: '¿Seguro desea eliminar el Municipio?',\n            description: 'Usted está eliminado este Municipio, una vez eliminado no podrá ser recuperado.',\n            id: '_clienteModal',\n            onConfirm: () => onConfirmDelete(id)\n        });\n    };\n    const columns = billColumns(onDelete);\n\n    const addOrders = () => {\n        const conditions = new Conditionals.Condition;\n        conditions.add('bill.id', '', Conditionals.OPERATORS.NULL);\n        conditions.add('office', '', Conditionals.OPERATORS.NOT_NULL);\n        conditions.add('createdAt', '2022-01-01T00:00:00.000Z', Conditionals.OPERATORS.GREATER_THAN_OR_EQUAL);\n        conditions.add('deliveryMethod', DELIVERY_METHODS_IDS.INTERRAPIDISIMO, Conditionals.OPERATORS.EQUAL);\n        conditions.add('orderDelivery.deliveryType', CHARGE_ON_DELIVERY, Conditionals.OPERATORS.EQUAL);\n        conditions.add('status', [ORDERS_ENUM.SENT, ORDERS_ENUM.FINISHED].join(\"::\"), Conditionals.OPERATORS.IN);\n\n        setOrderListConditions(conditions.condition);\n        setOpenOrdersModal(true);\n    };\n\n    const addOrdersPayu = () => {\n        const conditions = new Conditionals.Condition;\n        conditions.add('bill.id', '', Conditionals.OPERATORS.NULL);\n        conditions.add('office', '', Conditionals.OPERATORS.NOT_NULL);\n        conditions.add('createdAt', '2022-01-01T00:00:00.000Z', Conditionals.OPERATORS.GREATER_THAN_OR_EQUAL);\n        conditions.add('deliveryMethod', DELIVERY_METHODS_IDS.PAYU, Conditionals.OPERATORS.EQUAL);\n        conditions.add('status', [ORDERS_ENUM.SENT, ORDERS_ENUM.FINISHED].join(\"::\"), Conditionals.OPERATORS.IN);\n\n        setOrderListConditions(conditions.condition);\n        setOpenOrdersModal(true);\n    };\n\n    const addOrdersServiEntrega = () => {\n        const conditions = new Conditionals.Condition;\n        conditions.add('bill.id', '', Conditionals.OPERATORS.NULL);\n        conditions.add('office', '', Conditionals.OPERATORS.NOT_NULL);\n        conditions.add('createdAt', '2023-05-20T00:00:00.000Z', Conditionals.OPERATORS.GREATER_THAN_OR_EQUAL);\n        conditions.add('deliveryMethod', DELIVERY_METHODS_IDS.SERVIENTREGA, Conditionals.OPERATORS.EQUAL);\n        conditions.add('orderDelivery.deliveryType', CHARGE_ON_DELIVERY, Conditionals.OPERATORS.EQUAL);\n        conditions.add('status', [ORDERS_ENUM.SENT, ORDERS_ENUM.FINISHED].join(\"::\"), Conditionals.OPERATORS.IN);\n\n        setOrderListConditions(conditions.condition);\n        setOpenOrdersModal(true);\n    };\n\n    const onCloseModal = () => {\n        setOpenOrdersModal(false);\n    };\n    const onAcceptModal = (conditionals) => {\n        if (conditionals && conditionals.length > 0) {\n            const value = conditionals[0].value;\n            const ids = value.split ? value.split('::') : [value];\n            props.onCreateBill({ids: ids});\n        }\n        setOpenOrdersModal(false);\n    };\n\n    return (\n        <>\n            <CustomModal title={\"Agregar pedidos\"} size=\"lg\" showFooter={false} isOpen={openOrdersModal} onClose={onCloseModal}>\n                <OrderList customActions={onAcceptModal} showAsModal={true} conditionals={orderListConditions} externalView/>\n            </CustomModal>\n            <CustomModal title={\"Generar Reporte\"} showFooter={false} isOpen={openReportModal} onClose={() => setOpenReportModal(false)}>\n                <BillGenerateReportForm onCloseModal={(reload) => setOpenReportModal(false)}/>\n            </CustomModal>\n            <Row>\n\n                <TableFilter\n                    onPressDisabled={() => setFilter(false)}\n                    isActive={filter}\n                    fields={columns}\n                    onSubmit={onFilterAction.bind(this)}/>\n\n                <Col lg={filter ? \"8\" : \"12\"}>\n                    <Card>\n                        <CardBody>\n                            <PaginationProvider pagination={paginationFactory(pageOptions)}>\n                                {({paginationProps, paginationTableProps}) => (\n                                    <ToolkitProvider\n                                        keyField=\"id\"\n                                        data={billList || []}\n                                        columns={normalizeColumnsList(columns)}\n                                        bootstrap4\n                                        search\n                                    >\n                                        {toolkitProps => (\n                                            <React.Fragment>\n                                                <Row className=\"row mb-2\">\n                                                    <Col md={6}>\n                                                        <div className=\"form-inline mb-3\">\n                                                            <div className=\"search-box ms-2\">\n                                                                <h4 className=\"text-info\"><i className=\"uil-bill me-2\"></i> Facturas {conditionType && <small className={'font-size-12 badge rounded-pill bg-grey'}>Filtrados</small>}</h4>\n                                                            </div>\n                                                        </div>\n                                                    </Col>\n                                                    <Col md={6}>\n                                                        <div className=\"mb-3 float-md-end\">\n                                                            {columns.some(s => s.filter) && (\n                                                                <Tooltip placement=\"bottom\" title=\"Filtros Avanzados\" aria-label=\"add\">\n                                                                    <Button onClick={() => setFilter(!filter)}>\n                                                                        <i className={\"mdi mdi-filter\"}> </i>\n                                                                    </Button>\n                                                                </Tooltip>\n                                                            )}\n                                                            <Tooltip placement=\"bottom\" title=\"Generar reporte\" aria-label=\"add\">\n                                                                <Button onClick={() => setOpenReportModal(true)}>\n                                                                    <i className=\"mdi mdi-file\"> </i>\n                                                                </Button>\n                                                            </Tooltip>\n\n                                                            <HasPermissions permission={PERMISSIONS.BILL_CREATE}>\n                                                                <Tooltip placement=\"bottom\" title=\"Generar Factura\" aria-label=\"add\">\n                                                                <Button color=\"primary\" className=\"btn btn-rounded waves-effect waves-light\" onClick={addOrders}>\n                                                                    <i className=\"uil-bill me-2\"> </i>\n                                                                </Button>\n                                                                </Tooltip>\n                                                            </HasPermissions>\n\n                                                            <HasPermissions permission={PERMISSIONS.BILL_CREATE}>\n                                                                <Tooltip placement=\"bottom\" title=\"Generar Factura (Payu)\" aria-label=\"add\">\n                                                                <Button color=\"primary\" className=\"btn btn-rounded waves-effect waves-effect\" onClick={addOrdersPayu}>\n                                                                    <i className=\"uil-bill me-2\"> </i>\n                                                                </Button>\n                                                                </Tooltip>\n                                                            </HasPermissions>\n\n                                                            <HasPermissions permission={PERMISSIONS.BILL_CREATE}>\n                                                                <Tooltip placement=\"bottom\" title=\"Generar Factura (Servientrega)\" aria-label=\"add\">\n                                                                    <Button color=\"primary\" className=\"btn btn-rounded waves-effect waves-effect\" onClick={addOrdersServiEntrega}>\n                                                                        <i className=\"uil-bill me-2\"> </i>\n                                                                    </Button>\n                                                                </Tooltip>\n                                                            </HasPermissions>\n                                                        </div>\n                                                    </Col>\n                                                </Row>\n                                                <Row>\n                                                    <Col xl=\"12\">\n                                                        <div className=\"table-responsive mb-4\">\n                                                            <BootstrapTable\n                                                                remote\n                                                                responsive\n                                                                loading={true}\n                                                                bordered={false}\n                                                                striped={true}\n                                                                classes={\"table table-centered table-nowrap mb-0\"}\n                                                                noDataIndication={() => <NoDataIndication/>}\n                                                                {...toolkitProps.baseProps}\n                                                                onTableChange={handleTableChange}\n                                                                {...paginationTableProps}\n                                                            />\n                                                        </div>\n                                                    </Col>\n                                                </Row>\n                                                <div className=\"float-sm-start\">\n                                                    <PaginationListStandalone {...paginationProps} />\n                                                </div>\n                                            </React.Fragment>\n                                        )}\n                                    </ToolkitProvider>\n                                )}\n                            </PaginationProvider>\n                        </CardBody>\n                    </Card>\n                </Col>\n            </Row>\n        </>\n\n    )\n}\n\nBillList.propTypes = {\n    states: PropTypes.array,\n    onGetBills: PropTypes.func,\n    //onDeleteBill: PropTypes.func,\n}\n\nconst mapStateToProps = state => {\n    const {states, bills, loading, meta, refresh} = state.Bill\n    const {conditionType, conditions, offset} = state.Layout;\n    return {states, bills, loading, meta, refresh, conditionType, conditions, offset}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onResetBill: () => {\n        dispatch(resetBill());\n    },\n    onGetBills: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getBills(conditional, limit, page)),\n    onCreateBill: (ids) => dispatch(registerBill(ids)),\n    onSaveTableConditions: (conditions, offset, conditionType) => dispatch(saveTableConditions(conditions, offset, conditionType)),\n    onClearTableConditions: () => dispatch(clearTableConditions())\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(BillList)\n","/Users/ramon/Repositories/lucy-moie/src/components/mentions/MultiMention.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/mentions/useHookValue.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/template/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Orders/create/orderProducts.js",["1613","1614"],"import React, {useEffect, useState} from \"react\"\nimport {Col, Label, Row} from \"reactstrap\"\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {FieldAsyncSelect, FieldSelect, FieldText} from \"../../../components/Fields\";\nimport {PRODUCT} from \"../../../helpers/url_helper\";\nimport {getProduct, resetProduct} from \"../../../store/product/actions\";\nimport {getEmptyOptions} from \"../../../common/converters\";\nimport {AvForm} from \"availity-reactstrap-validation\";\nimport {map} from \"lodash\";\nimport Images from \"../../../components/Common/Image\";\nimport {buildNumericOptions, getImageByQuality, priceFormat} from \"../../../common/utils\";\nimport Conditionals from \"../../../common/conditionals\";\nimport {updateCard} from \"../../../store/order/actions\";\n\nconst searchByOptions = [{label: \"Codigo\", value: \"code\"}];\n\nconst OrderProducts = (props) => {\n    const {car, product, onGetProduct, onUpdateCar, onResetProduct} = props;\n    const [searchBy, setSearchBy] = useState(searchByOptions[0].value);\n    const [productData, setProductData] = useState({});\n    const [productDefault, setProductDefault] = useState(getEmptyOptions());\n    const [productReferenceDefault, setProductReferenceDefault] = useState(getEmptyOptions());\n    const [imgSelected, setImgSelected] = useState(0);\n    const [quantityAvailable, setQuantityAvailable] = useState(0);\n    const [colorsMap, setColorsMap] = useState({});\n    const [colors, setColors] = useState([]);\n    const [color, setColor] = useState({});\n    const [sizes, setSizes] = useState([]);\n    const [size, setSize] = useState({});\n    const [defaultQuantity, setDefaultQuantity] = useState({});\n\n    useEffect(() => {\n        if (product.id) {\n            const productImage = product.productImage.length > 0 ? product.productImage : [{}];\n            setProductData({...product, _status: product.status, productImage: productImage});\n\n            const map = {};\n            if (product.productSize.length) {\n                product.productSize.filter(s => s.quantity > 0).forEach((s => {\n                    if (!map[s.color]) map[s.color] = [];\n                    map[s.color].push({label: s.name, value: s.id});\n                }))\n            }\n            setColorsMap(map);\n\n            let productSizeColors = Object.keys(map).map(k => ({label: k, value: k}));\n            setColors(productSizeColors);\n\n            setColor(-1);\n            setSize(-1);\n            setSizes([]);\n            setQuantityAvailable(0);\n            setDefaultQuantity(-1);\n        } else {\n            resetData();\n        }\n    }, [product]);\n\n    useEffect(() => {\n        if (onResetProduct) {\n            onResetProduct();\n        }\n    }, [onResetProduct]);\n\n    const addToOrder = (e, d) => {\n        const prod = {\n            origin: productData,\n            color: d.color.value,\n            size: d.size.label,\n            sizeId: d.size.value,\n            quantity: d.quantity.value,\n            quantityAvailable: quantityAvailable,\n            discountPercentage: 0,\n            discount: 0,\n        };\n\n        onUpdateCar({...car, products: [...car.products, prod]})\n        resetData();\n    }\n\n    const onChangeSize = (e) => {\n        const item = product.productSize.find(s => s.id === e.value);\n        setQuantityAvailable(item.quantity);\n        setSize(sizes.find(s => s.id === e.value));\n    }\n\n    const resetData = () => {\n        setProductDefault(getEmptyOptions());\n        setProductReferenceDefault(getEmptyOptions());\n        setProductData({})\n    }\n\n    return (\n        <React.Fragment>\n            <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => addToOrder(e, v)}>\n                <Row>\n                    <Col>\n                        <h4 className=\"card-title text-info\"><i className=\"uil-filter me-2\"> </i> Agregar productos</h4>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col md={2}>\n                        <Label htmlFor=\"product\">Buscar por</Label>\n                        <FieldSelect\n                            id={\"searchByOptions\"}\n                            name={\"searchByOptions\"}\n                            options={searchByOptions}\n                            defaultValue={searchBy}\n                            onChange={(e) => {\n                                setSearchBy(e.value);\n                            }}\n                        />\n                    </Col>\n                    {searchBy === \"code\" && (\n                        <Col md={10}>\n                            <Label htmlFor=\"product\">Código</Label>\n                            <FieldAsyncSelect\n                                name={\"productCode\"}\n                                urlStr={PRODUCT}\n                                placeholder=\"Código del producto\"\n                                defaultValue={productReferenceDefault}\n                                hasWild={false}\n                                isClearable={true}\n                                conditionalOptions={{fieldName: 'reference', operator: Conditionals.OPERATORS.EQUAL}}\n                                onKeyPress={(e) => {\n                                    if(e.which == 13){\n                                        onGetProduct(e.target.value);\n                                        setProductDefault(getEmptyOptions());\n                                    }\n                                }}\n                                onChange={(d, meta) => {\n                                    if(meta.action === \"clear\"){\n                                        setProductDefault(getEmptyOptions());\n                                        setProductReferenceDefault(getEmptyOptions());\n                                        setProductData({})\n                                    }\n                                }}\n                            />\n                        </Col>\n                    )}\n                    {searchBy === \"name\" && (\n                        <Col md={10}>\n                            <Label htmlFor=\"product\">Nombre</Label>\n                            <FieldAsyncSelect\n                                name={\"productName\"}\n                                urlStr={PRODUCT}\n                                placeholder=\"Nombre del producto\"\n                                defaultValue={productDefault}\n                                hasWild={true}\n                                isClearable={true}\n                                onChange={(d, meta) => {\n                                    if(meta.action === \"clear\"){\n                                        setProductDefault(getEmptyOptions());\n                                        setProductReferenceDefault(getEmptyOptions());\n                                        setProductData({})\n                                    } else {\n                                        onGetProduct(d.value);\n                                        setProductReferenceDefault(getEmptyOptions());\n                                    }\n                                }}\n                            />\n                        </Col>\n                    )}\n                </Row>\n                {productData.id && (\n                    <Row className=\"mt-3\">\n                        <Col md={3} className=\"text-center\">\n                            <Row className=\"\">\n                                <Col md={4} className=\"image-left-panel\" style={{minHeight: '225px'}}>\n                                    <div className={`nav flex-column nav-pills`} id=\"v-pills-tab\" role=\"tablist\" aria-orientation=\"vertical\">\n                                        {map(productData.productImage, (img, key) => (\n                                            <div key={key}\n                                                 className={`cursor-pointer nav-link ${imgSelected === key ? 'custom-active' : ''}`}\n                                                 onClick={() => (setImgSelected(key))}>\n                                                <Images src={`${getImageByQuality(img, 'small')}`}\n                                                        alt={img.filename}\n                                                        className=\"img-fluid mx-auto d-block tab-img rounded\"/>\n                                            </div>\n                                        ))}\n                                    </div>\n                                </Col>\n                                <Col md={8}>\n                                    <div className=\"tab-content position-relative\" id=\"v-pills-tabContent\">\n                                        {map(productData.productImage, (img, key) => (\n                                            <div key={key} className={`tab-pane fade ${imgSelected === key ? 'show active bg-white border-1' : ''}`} id={`product-${key}`} role=\"tabpanel\">\n                                                <div className=\"product-img panel-bordered\">\n                                                    <Images src={`${getImageByQuality(img, 'medium')}`}\n                                                            alt={img.filename}\n                                                            className=\"img-fluid mx-auto d-block\"\n                                                            width={200}/>\n                                                </div>\n                                            </div>\n                                        ))}\n                                    </div>\n                                </Col>\n                            </Row>\n                        </Col>\n                        <Col md={9}>\n                            <Row>\n                                <Col md={8}>\n                                    <Row>\n                                        <Col md={12}>\n                                            <div className=\"p-1\">\n                                                <b className=\"text-info font-size-16\">{productData.reference}</b> - <span>{productData.name}</span>\n                                            </div>\n                                        </Col>\n                                        <Col md={12}>\n                                            <label>Categoria: </label>\n                                            <span className=\"p-1\">{productData.category?.name}</span>\n                                        </Col>\n                                        <Col md={12}>\n                                            <label>Material: </label>\n                                            <span className=\"p-1\">{productData.material}</span>\n                                        </Col>\n                                        {productData.size && (\n                                            <Col md={12}>\n                                                <label>Tipo: </label>\n                                                <span className=\"p-1\">{productData.size.name}</span>\n                                            </Col>\n                                        )}\n                                    </Row>\n                                </Col>\n                                <Col md={4}>\n                                    <Row>\n                                        <Col md={12} className=\"text-right\">\n                                            <div className=\"mt-3\">\n                                                <p className=\"text-muted mb-2\">Precio</p>\n                                                <h5 className=\"font-size-20\">{priceFormat(productData.price)}</h5>\n                                            </div>\n                                        </Col>\n                                    </Row>\n                                </Col>\n                            </Row>\n                            <hr/>\n                            <Row>\n                                <Col md={4}>\n                                    <Label className=\"control-label\">Color</Label>\n                                    <FieldSelect\n                                        id={\"color\"}\n                                        name={\"color\"}\n                                        options={colors}\n                                        defaultValue={color}\n                                        onChange={(e) => {\n                                            setSizes(colorsMap[e.label]);\n                                            setColor(colors.find(s => s.id === e.value));\n                                        }}\n                                        isSearchable\n                                        required\n                                    />\n                                </Col>\n                                <Col md={3}>\n                                    <Label className=\"control-label\">Tallas</Label>\n                                    <FieldSelect\n                                        id={\"size\"}\n                                        name={\"size\"}\n                                        options={sizes}\n                                        defaultValue={size}\n                                        onChange={(e) => onChangeSize(e)}\n                                        isSearchable\n                                        required\n                                    />\n                                </Col>\n                                <Col md={3}>\n                                    <Label htmlFor=\"weight\">Cantidad</Label>\n                                    <FieldSelect\n                                        id={\"quantity\"}\n                                        name={\"quantity\"}\n                                        options={buildNumericOptions(quantityAvailable, 1, 1)}\n                                        defaultValue={(quantityAvailable > 0 && !!defaultQuantity) ? 1 : defaultQuantity}\n                                        onChange={(e) => setDefaultQuantity(e.value)}\n                                        required\n                                    />\n                                </Col>\n                                <Col md={2} style={{display: 'flex', 'alignItems': 'normal'}}>\n                                    <button type=\"submit\" className=\"btn btn-primary btn-block waves-effect waves-light mt-2 me-1 w-100\">\n                                        <i className=\"uil uil-shopping-cart-alt me-2\"> </i> Agregar\n                                    </button>\n                                </Col>\n                            </Row>\n                        </Col>\n\n                    </Row>\n                )}\n            </AvForm>\n        </React.Fragment>\n    )\n}\n\nOrderProducts.propTypes = {\n    onSelect: PropTypes.func.isRequired,\n    history: PropTypes.object\n}\n\nconst mapStateToProps = state => {\n    const {product, error, loading} = state.Product;\n    const {car} = state.Order;\n    return {car, product, error, loading};\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onResetProduct: () => dispatch(resetProduct()),\n    onGetProduct: (id) => dispatch(getProduct(id)),\n    onUpdateCar: (data) => dispatch(updateCard(data)),\n})\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(OrderProducts))\n","/Users/ramon/Repositories/lucy-moie/src/pages/Offices/list/officeList.js",["1615","1616"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from \"prop-types\"\nimport {connect} from \"react-redux\"\nimport {Card, CardBody, Col, Row} from \"reactstrap\"\nimport paginationFactory, {PaginationListStandalone, PaginationProvider,} from \"react-bootstrap-table2-paginator\"\nimport ToolkitProvider, {Search} from \"react-bootstrap-table2-toolkit\"\nimport BootstrapTable from \"react-bootstrap-table-next\"\n\nimport {Link} from \"react-router-dom\"\nimport {Button, Tooltip} from \"@material-ui/core\";\nimport {DEFAULT_PAGE_LIMIT} from \"../../../common/pagination\";\nimport {ConfirmationModalAction} from \"../../../components/Modal/ConfirmationModal\";\nimport {getOffices, resetOffice} from \"../../../store/office/actions\";\nimport {TableFilter} from \"../../../components/TableFilter\";\nimport officeColumns from \"./officeColumns\";\nimport {normalizeColumnsList} from \"../../../common/converters\";\nimport CustomModal from \"../../../components/Modal/CommosModal\";\nimport OfficeReportForm from \"../../Reports/OfficeReportForm\";\nimport NoDataIndication from \"../../../components/Common/NoDataIndication\";\nimport {PERMISSIONS} from \"../../../helpers/security_rol\";\nimport HasPermissions from \"../../../components/HasPermissions\";\nimport {clearTableConditions, saveTableConditions} from \"../../../store/layout/actions\";\n\n\nconst OfficeList = props => {\n    const {offices, onGetOffices, onResetOffices, refresh, meta, onSaveTableConditions, onClearTableConditions, conditionType, conditions, offset} = props; //onDeleteOffice,\n    const [officeList, setOfficeList] = useState([])\n    const [filter, setFilter] = useState(false);\n    const [conditional, setConditional] = useState(null);\n    const [openReportModal, setOpenReportModal] = useState(null);\n    const [defaultPage, setDefaultPage] = useState(1);\n\n    const pageOptions = {\n        sizePerPage: DEFAULT_PAGE_LIMIT,\n        custom: true,\n        totalSize: meta?.totalRegisters,\n        page: defaultPage,\n        onPageChange: (page, sizePerPage) => {\n            setDefaultPage(page);\n            const offset = (page - 1) * DEFAULT_PAGE_LIMIT;\n            onSaveTableConditions(conditions, offset, 'office');\n        },\n    }\n    const {SearchBar} = Search\n\n    useEffect(() => {\n        if(refresh === null){\n            onResetOffices();\n        }\n\n        if(conditionType !== 'office'){\n            onClearTableConditions();\n            onGetOffices();\n        } else {\n            //reload the filter loaded\n            onFilterAction(conditions, offset);\n        }\n\n    }, [refresh, onGetOffices])\n\n    useEffect(() => {\n        setOfficeList(offices);\n    }, [offices])\n\n    const handleTableChange = (type, {page}) => {\n        const offset = (page - 1) * DEFAULT_PAGE_LIMIT;\n        onGetOffices(conditional, DEFAULT_PAGE_LIMIT, offset);\n        onSaveTableConditions(conditional, offset, 'office');\n    }\n\n    const onFilterAction = (condition, offset = 0) => {\n        const page = Math.floor(offset / DEFAULT_PAGE_LIMIT);\n        setConditional(condition);\n        onGetOffices(condition, DEFAULT_PAGE_LIMIT, offset);\n        setDefaultPage(page + 1);\n        if(condition && condition.length > 0) {\n            onSaveTableConditions(condition, offset, 'office');\n        } else {\n            onClearTableConditions();\n        }\n    }\n\n    const onConfirmDelete = (id) => {\n        //onDeleteOffice(id);\n    };\n\n    const onDelete = (id) => {\n        ConfirmationModalAction({\n            title: '¿Seguro desea eliminar el Municipio?',\n            description: 'Usted está eliminado este Municipio, una vez eliminado no podrá ser recuperado.',\n            id: '_clienteModal',\n            onConfirm: () => onConfirmDelete(id)\n        });\n    };\n    const columns = officeColumns(onDelete);\n\n    return (\n        <Row>\n            <TableFilter\n                onPressDisabled={() => setFilter(false)}\n                isActive={filter}\n                fields={columns}\n                onSubmit={onFilterAction.bind(this)}/>\n\n            <Col lg={filter ? \"8\" : \"12\"}>\n                <Card>\n                    <CardBody>\n                        <PaginationProvider pagination={paginationFactory(pageOptions)}>\n                            {({paginationProps, paginationTableProps}) => (\n                                <ToolkitProvider\n                                    keyField=\"id\"\n                                    data={officeList || []}\n                                    columns={normalizeColumnsList(columns)}\n                                    bootstrap4\n                                    search\n                                >\n                                    {toolkitProps => (\n                                        <React.Fragment>\n                                            <Row className=\"row mb-2\">\n                                                <Col md={6}>\n                                                    <div className=\"form-inline mb-3\">\n                                                        <div className=\"search-box ms-2\">\n                                                            <h4 className=\"text-info\"><i className=\"uil-truck me-2\"></i> Despachos {conditionType && <small className={'font-size-12 badge rounded-pill bg-grey'}>Filtrados</small>}</h4>\n                                                        </div>\n                                                    </div>\n                                                </Col>\n                                                <Col md={6}>\n                                                    <div className=\"mb-3 float-md-end\">\n                                                        {columns.some(s => s.filter) && (\n                                                            <Tooltip placement=\"bottom\" title=\"Filtros Avanzados\" aria-label=\"add\">\n                                                                <Button onClick={() => setFilter(!filter)}>\n                                                                    <i className={\"mdi mdi-filter\"}> </i>\n                                                                </Button>\n                                                            </Tooltip>\n                                                        )}\n\n                                                        <Tooltip placement=\"bottom\" title=\"Generar reporte\" aria-label=\"add\">\n                                                            <Button onClick={() => setOpenReportModal(true)}>\n                                                                <i className={\"mdi mdi-file\"}> </i>\n                                                            </Button>\n                                                        </Tooltip>\n\n                                                        <HasPermissions permissions={[PERMISSIONS.OFFICE_CREATE]}>\n                                                            <Link to={\"/office\"} className=\"btn btn-primary waves-effect waves-light text-light\">\n                                                                <i className=\"mdi mdi-plus\"> </i> Generar Despacho\n                                                            </Link>\n                                                        </HasPermissions>\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col xl=\"12\">\n                                                    <div className=\"table-responsive mb-4\">\n                                                        <BootstrapTable\n                                                            remote\n                                                            responsive\n                                                            loading={true}\n                                                            bordered={false}\n                                                            striped={true}\n                                                            classes={\"table table-centered table-nowrap mb-0\"}\n                                                            noDataIndication={() => <NoDataIndication/>}\n                                                            {...toolkitProps.baseProps}\n                                                            onTableChange={handleTableChange}\n                                                            {...paginationTableProps}\n                                                        />\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <div className=\"float-sm-start\">\n                                                <PaginationListStandalone {...paginationProps} />\n                                            </div>\n                                        </React.Fragment>\n                                    )}\n                                </ToolkitProvider>\n                            )}\n                        </PaginationProvider>\n                    </CardBody>\n                </Card>\n            </Col>\n\n\n            <CustomModal title={\"Generar reporte\"} showFooter={false} isOpen={openReportModal} onClose={() => setOpenReportModal(false)}>\n                <OfficeReportForm onCloseModal={() => setOpenReportModal(false)}/>\n            </CustomModal>\n        </Row>\n    )\n}\n\nOfficeList.propTypes = {\n    states: PropTypes.array,\n    onGetOffices: PropTypes.func,\n    //onDeleteOffice: PropTypes.func,\n}\n\nconst mapStateToProps = state => {\n    const {states, offices, loading, meta, refresh} = state.Office\n    const {conditionType, conditions, offset} = state.Layout;\n    return {states, offices, loading, meta, refresh,conditionType, conditions, offset}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    //getStates,\n    onGetOffices: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getOffices(conditional, limit, page)),\n    onResetOffices: () => {\n        dispatch(resetOffice());\n    },\n    onSaveTableConditions: (conditions, offset, conditionType) => dispatch(saveTableConditions(conditions, offset, conditionType)),\n    onClearTableConditions: () => dispatch(clearTableConditions())\n    //onDeleteOffice: (id) => dispatch(deleteOffice(id))\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(OfficeList)\n","/Users/ramon/Repositories/lucy-moie/src/pages/Template/list/templateList.js",["1617","1618","1619"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from \"prop-types\"\nimport {connect} from \"react-redux\"\nimport {Card, CardBody, Col, Row} from \"reactstrap\"\nimport paginationFactory, {PaginationListStandalone, PaginationProvider,} from \"react-bootstrap-table2-paginator\"\nimport ToolkitProvider, {Search} from \"react-bootstrap-table2-toolkit\"\nimport BootstrapTable from \"react-bootstrap-table-next\"\n\nimport {Link} from \"react-router-dom\"\nimport {Button, Tooltip} from \"@material-ui/core\";\nimport {DEFAULT_PAGE_LIMIT} from \"../../../common/pagination\";\nimport {ConfirmationModalAction} from \"../../../components/Modal/ConfirmationModal\";\nimport {TableFilter} from \"../../../components/TableFilter\";\nimport {normalizeColumnsList} from \"../../../common/converters\";\nimport {getTemplates, resetTemplate} from \"../../../store/template/actions\";\nimport templateColumns from \"./templateColumn\";\nimport NoDataIndication from \"../../../components/Common/NoDataIndication\";\nimport {PERMISSIONS} from \"../../../helpers/security_rol\";\nimport HasPermissions from \"../../../components/HasPermissions\";\n\nconst TemplateList = props => {\n    const {templates, meta, onGetTemplates, onResetTemplate, onDeleteState, loading, refresh} = props;\n    const [templatesList, setTemplatesList] = useState([])\n    const [filter, setFilter] = useState(false);\n    const [conditional, setConditional] = useState(null);\n    const [defaultPage, setDefaultPage] = useState(1);\n\n\n    const pageOptions = {\n        sizePerPage: DEFAULT_PAGE_LIMIT,\n        totalSize: meta.totalRegisters,\n        custom: true,\n        page: defaultPage,\n        onPageChange: (page, sizePerPage) => {\n            setDefaultPage(page);\n        },\n    }\n    const {SearchBar} = Search\n\n    useEffect(() => {\n        if(refresh === null){\n            onResetTemplate();\n        }\n        onGetTemplates();\n    }, [refresh, onGetTemplates])\n\n    useEffect(() => {\n        setTemplatesList(templates)\n    }, [templates])\n\n    const handleTableChange = (type, {page}) => {\n        onGetTemplates(conditional, DEFAULT_PAGE_LIMIT, (page - 1) * DEFAULT_PAGE_LIMIT);\n    }\n\n    const onFilterAction = (condition) => {\n        setConditional(condition);\n        onGetTemplates(condition, DEFAULT_PAGE_LIMIT, 0);\n        setDefaultPage(1);\n    }\n    const onConfirmDelete = (id) => {\n        onDeleteState(id);\n    };\n\n    const onDelete = (id) => {\n        ConfirmationModalAction({\n            title: '¿Seguro desea eliminar el Plantilla?',\n            description: 'Usted está eliminado esta Plantilla, una vez eliminado no podrá ser recuperado.',\n            id: '_clienteModal',\n            onConfirm: () => onConfirmDelete(id)\n        });\n    };\n\n    const columns = templateColumns(onDelete);\n\n    return (\n        <Row>\n            <TableFilter\n                onPressDisabled={() => setFilter(false)}\n                isActive={filter}\n                fields={columns}\n                onSubmit={onFilterAction.bind(this)}/>\n\n            <Col lg={filter ? \"8\" : \"12\"}>\n                <Card>\n                    <CardBody>\n                        <PaginationProvider pagination={paginationFactory(pageOptions)}>\n                            {({paginationProps, paginationTableProps}) => (\n                                <ToolkitProvider\n                                    keyField=\"id\"\n                                    data={templatesList || []}\n                                    columns={normalizeColumnsList(columns)}\n                                    bootstrap4\n                                    search\n                                >\n                                    {toolkitProps => (\n                                        <React.Fragment>\n                                            <Row className=\"row mb-2\">\n                                                <Col md={6}>\n                                                    <div className=\"form-inline mb-3\">\n                                                        <div className=\"search-box ms-2\">\n                                                            <h4 className=\"text-info\"><i className=\"uil-shopping-cart-alt me-2\"></i> Plantillas</h4>\n                                                        </div>\n                                                    </div>\n                                                </Col>\n                                                <Col md={6}>\n                                                    <div className=\"mb-3 float-md-end\">\n                                                        {columns.some(s => s.filter) && (\n                                                            <Tooltip placement=\"bottom\" title=\"Filtros Avanzados\" aria-label=\"add\">\n                                                                <Button onClick={() => setFilter(!filter)}>\n                                                                    <i className={\"mdi mdi-filter\"}> </i>\n                                                                </Button>\n                                                            </Tooltip>\n                                                        )}\n                                                        <HasPermissions permissions={[PERMISSIONS.TEMPLATE_CREATE]}>\n                                                            <Link to={\"/template\"} className=\"btn btn-primary waves-effect waves-light text-light\">\n                                                                <i className=\"mdi mdi-plus\"> </i> Nueva Plantilla\n                                                            </Link>\n                                                        </HasPermissions>\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col xl=\"12\">\n                                                    <div className=\"table-responsive mb-4\">\n                                                        <BootstrapTable\n                                                            remote\n                                                            responsive\n                                                            loading={true}\n                                                            bordered={false}\n                                                            striped={true}\n                                                            classes={\n                                                                \"table table-centered table-nowrap mb-0\"\n                                                            }\n                                                            noDataIndication={() => <NoDataIndication/>}\n                                                            {...toolkitProps.baseProps}\n                                                            onTableChange={handleTableChange}\n                                                            {...paginationTableProps}\n                                                        />\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <div className=\"float-sm-start\">\n                                                <PaginationListStandalone {...paginationProps} />\n                                            </div>\n                                        </React.Fragment>\n                                    )}\n                                </ToolkitProvider>\n                            )}\n                        </PaginationProvider>\n                    </CardBody>\n                </Card>\n            </Col>\n        </Row>\n    )\n}\n\nTemplateList.propTypes = {\n    templates: PropTypes.array,\n    onGetTemplates: PropTypes.func,\n    // onDeleteStates: PropTypes.func,\n}\n\nconst mapStateToProps = state => {\n    const {templates, loading, meta, refresh} = state.Template\n    return {templates, loading, meta, refresh}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onResetTemplate: () => {\n        dispatch(resetTemplate());\n    },\n    onGetTemplates: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getTemplates(conditional, limit, page)),\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(TemplateList)\n","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/create/orderCustomer.js",["1620","1621","1622","1623"],"import React, {useEffect, useState} from \"react\"\nimport {Col, Label, Row} from \"reactstrap\"\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {FieldAsyncSelect, FieldSelect} from \"../../../components/Fields\";\nimport {CUSTOMER} from \"../../../helpers/url_helper\";\nimport {getCustomer, updateCustomer} from \"../../../store/customer/actions\";\nimport {getEmptyOptions} from \"../../../common/converters\";\nimport {AvForm} from \"availity-reactstrap-validation\";\nimport {Button, Tooltip} from \"@material-ui/core\";\nimport Conditionals from \"../../../common/conditionals\";\nimport CustomModal from \"../../../components/Modal/CommosModal\";\nimport CustomerForm from \"../../CustomerEdit/CustomerForm\";\nimport {updateCard} from \"../../../store/order/actions\";\nimport {hasCustomerOpenOrders} from \"../../../helpers/service\";\nimport OrdersPieChart from \"../../CustomerEdit/OrdersPieChart\";\nimport CategoriesPieChart from \"../../CustomerEdit/CategoriesPieChart\";\nimport {hiddenPhone, trim} from \"../../../common/utils\";\nimport HasPermissionsFunc from \"../../../components/HasPermissionsFunc\";\nimport {PERMISSIONS} from \"../../../helpers/security_rol\";\nimport HasPermissions from \"../../../components/HasPermissions\";\n\nconst searchByOptions = [{label: \"Nombre\", value: \"name\"}, {label: \"Documento\", value: \"doc\"}, {label: \"Correo\", value: \"email\"}, {label: \"Teléfono\", value: \"phone\"}];\n\nconst OrderCustomer = (props) => {\n    const {car, customer, onGetCustomer, hasCustomerOpenOrders, onUpdateCar, showAsModal, onUpdateCustomer} = props;\n    const [initComponent, setInitComponent] = useState(true);\n    const [searchBy, setSearchBy] = useState(searchByOptions[0].value);\n    const [editCustomer, setEditCustomer] = useState(false);\n    const [openCustomerModal, setOpenCustomerModal] = useState(false);\n    const [openCustomerStatsModal, setOpenCustomerStatsModal] = useState(false);\n    const [hasPendingOrders, setHasPendingOrders] = useState(false);\n    const [customerData, setCustomerData] = useState({});\n    const [customerDefault, setCustomerDefault] = useState(getEmptyOptions());\n    const [customerEmailDefault, setCustomerEmailDefault] = useState(getEmptyOptions());\n    const [customerDocumentDefault, setCustomerDocumentDefault] = useState(getEmptyOptions());\n    const [isNewCustomer, setIsNewCustomer] = useState(true);\n    const hasPhonePermission = HasPermissionsFunc([PERMISSIONS.CUSTOMER_PHONE]);\n\n\n    useEffect(() => {\n        if (showAsModal && car.isEdit && car.customer && car.customer.id && initComponent) {\n            setInitComponent(false);\n            onGetCustomer(car.customer.id);\n        }\n    }, [showAsModal]);\n\n    useEffect(() => {\n        if (customer.id) {\n            setCustomerData(customer);\n            if(customer.id) onUpdateCar({...car, customer});\n            if (car && !car.orderId) hasCustomerOpenOrders(customer.id).then(resp => setHasPendingOrders(resp && resp.data && resp.data.length > 0));\n        } else {\n            resetData();\n        }\n    }, [customer]);\n\n    const toggleCustomerStatsModal = () => {\n        setOpenCustomerStatsModal(!openCustomerStatsModal);\n    }\n    const toggleModalNew = () => {\n        setIsNewCustomer(true);\n        setOpenCustomerModal(!openCustomerModal);\n    }\n    const toggleModal = () => {\n        setIsNewCustomer(false);\n        setOpenCustomerModal(!openCustomerModal);\n    }\n    const toggleActivateCustomer = () => {\n        onUpdateCustomer(customer.id, {status: !customer.status});\n        setTimeout(() => {\n            onGetCustomer(customer.id)\n        }, 500);\n        ;\n        //resetData();\n    }\n\n    const resetData = () => {\n        setCustomerDefault(getEmptyOptions());\n        setCustomerEmailDefault(getEmptyOptions());\n        setCustomerDocumentDefault(getEmptyOptions());\n        setCustomerData({})\n        setHasPendingOrders(false)\n    }\n\n    const onCloseCustomerModal = () => {\n        toggleModal();\n        setEditCustomer(false);\n    }\n\n    const onAcceptCustomerModal = () => {\n        toggleModal();\n        setCustomerDefault(getEmptyOptions());\n        setCustomerEmailDefault(getEmptyOptions());\n        setCustomerDocumentDefault(getEmptyOptions());\n        if (editCustomer) {\n            onGetCustomer(customer.id);\n        }\n        setEditCustomer(false);\n    }\n\n    return (\n        <React.Fragment>\n            <Row>\n                <Col>\n                    <h4 className=\"card-title text-info\"><i className=\"uil-users-alt me-2\"> </i> Datos del cliente</h4>\n                </Col>\n            </Row>\n            <AvForm className=\"needs-validation\" autoComplete=\"off\">\n                <Row>\n                    <Col md={2}>\n                        <Label htmlFor=\"product\">Buscar por</Label>\n                        <FieldSelect\n                            id={\"searchByOptions\"}\n                            name={\"searchByOptions\"}\n                            options={searchByOptions}\n                            defaultValue={searchBy}\n                            onChange={(e) => {\n                                setSearchBy(e.value);\n                            }}\n                        />\n                    </Col>\n                    {searchBy === \"name\" && (\n                        <Col md={9}>\n                            <Label htmlFor=\"customer\">Nombre</Label>\n                            <FieldAsyncSelect\n                                name={\"customer\"}\n                                urlStr={CUSTOMER}\n                                placeholder=\"Buscar por nombre\"\n                                defaultValue={customerDefault}\n                                isClearable={true}\n                                hasWild={true}\n                                noDoubleSpaces={true}\n                                conditionalOptions={{fieldName: 'name', operator: Conditionals.OPERATORS.LIKE}}\n                                onChange={(c, meta) => {\n                                    if(meta.action === \"clear\"){\n                                        resetData();\n                                    }\n                                    else {\n                                        onGetCustomer(c.value);\n                                        setCustomerDocumentDefault(getEmptyOptions());\n                                    }\n                                }}\n                            />\n                        </Col>\n                    )}\n                    {searchBy === \"doc\" && (\n                        <Col md={9}>\n                            <Label htmlFor=\"doc\">Documento</Label>\n                            <FieldAsyncSelect\n                                name={\"doc\"}\n                                urlStr={CUSTOMER}\n                                placeholder=\"Buscar por documento\"\n                                defaultValue={customerDocumentDefault}\n                                noDoubleSpaces={true}\n                                removeDots={true}\n                                isClearable={true}\n                                hasWild={false}\n                                conditionalOptions={{fieldName: 'document', operator: Conditionals.OPERATORS.EQUAL}}\n                                onChange={(c, meta) => {\n                                    if(meta.action === \"clear\"){\n                                        resetData();\n                                    }\n                                    else {\n                                        onGetCustomer(c.value);\n                                        setCustomerDocumentDefault(getEmptyOptions());\n                                    }\n                                }}\n                            />\n                        </Col>\n                    )}\n                    {searchBy === \"email\" && (\n                        <Col md={9}>\n                            <Label htmlFor=\"customer\">Correo</Label>\n                            <FieldAsyncSelect\n                                name={\"email\"}\n                                urlStr={CUSTOMER}\n                                placeholder=\"Buscar por correo\"\n                                defaultValue={customerEmailDefault}\n                                isClearable={true}\n                                hasWild={true}\n                                noDoubleSpaces={true}\n                                conditionalOptions={{fieldName: 'email', operator: Conditionals.OPERATORS.LIKE}}\n                                onChange={(c, meta) => {\n                                    if(meta.action === \"clear\"){\n                                        resetData();\n                                    } else {\n                                        onGetCustomer(c.value);\n                                        setCustomerEmailDefault(getEmptyOptions());\n                                    }\n                                }}\n                            />\n                        </Col>\n                    )}\n                    {searchBy === \"phone\" && (\n                        <Col md={9}>\n                            <Label htmlFor=\"customer\">Teléfono</Label>\n                            <FieldAsyncSelect\n                                name={\"phone\"}\n                                urlStr={CUSTOMER}\n                                noSpaces={true}\n                                placeholder=\"Buscar por número de teléfono\"\n                                defaultValue={customerEmailDefault}\n                                isClearable={true}\n                                noSpaces={true}\n                                hasWild={true}\n                                conditionalOptions={{fieldName: 'cellphone', operator: Conditionals.OPERATORS.EQUAL}}\n                                onChange={(c, meta) => {\n                                    if (meta.action === \"clear\") {\n                                        resetData();\n                                    } else {\n                                        onGetCustomer(c.value);\n                                    }\n                                }}\n                            />\n                        </Col>\n                    )}\n                    <Col md={1} style={{display: 'flex', 'alignItems': 'flex-end'}}>\n                        <Tooltip placement=\"bottom\" title=\"Agregar nuevo cliente\" aria-label=\"add\">\n                            <button type=\"button\" className=\"btn btn-primary btn-block waves-effect waves-light mt-2 me-1 w-100\" onClick={() => toggleModalNew()}>\n                                <i className=\"fa fa-user-plus\"> </i>\n                            </button>\n                        </Tooltip>\n                    </Col>\n                </Row>\n            </AvForm>\n            {customerData.id && (\n                <Row className=\"mt-3\">\n                    <Col md={10}>\n                        <Row>\n                            <Col md={6}>\n                                <label>Nombre: </label>\n                                <span className=\"p-1\">{customerData.name}</span>\n                                {customerData.isMayorist === true && (\n                                    <Tooltip placement=\"bottom\" title=\"Cliente mayorista\" aria-label=\"add\">\n                                        <i className={\"mdi mdi-crown font-size-18 mr-1 text-warning\"}> </i>\n                                    </Tooltip>\n                                )}\n                            </Col>\n                            <Col md={6}>\n                                <label>Correo: </label>\n                                <span className=\"p-1\">{customerData.email}</span>\n                            </Col>\n                            <Col md={6}>\n                                <label>Departamento: </label>\n                                <span className=\"p-1\">{customerData.state?.name}</span>\n                            </Col>\n                            <Col md={6}>\n                                <label>Municipio: </label>\n                                <span className=\"p-1\">{customerData.municipality?.name}</span>\n                            </Col>\n                            <Col md={6}>\n                                <label>Documento: </label>\n                                <span className=\"p-1\">{customerData.document}</span>\n                            </Col>\n                            <Col md={6}>\n                                <label>Teléfono Celular: </label>\n                                <span className=\"p-1\">{hasPhonePermission ? customerData.cellphone : hiddenPhone(customerData.cellphone) }</span>\n                            </Col>\n                            <Col md={6}>\n                                <label>Teléfono Residencial: </label>\n                                <span className=\"p-1\">{hasPhonePermission ? customerData.phonee : hiddenPhone(customerData.phone) }</span>\n                            </Col>\n                            <Col md={12}>\n                                <label>Dirección: </label>\n                                <small className=\"p-1\" style={{wordBreak: 'break-all'}}>{customerData.address}</small>\n                            </Col>\n                            <HasPermissions permission={PERMISSIONS.CUSTOMER_WHATSAPP}>\n                            <Col md={12}>\n                                <a href={`https://wa.me/${customerData.cellphone}`} > Contactar Whatsapp </a>\n                            </Col>\n                            </HasPermissions>\n                        </Row>\n\n                    </Col>\n                    <Col md={2} className=\"text-right\">\n                        <Tooltip placement=\"bottom\" title={`${customer.status ? 'Inactivar Contrapago' : 'Activar Contrapago'}`} aria-label=\"add\">\n                            <button type=\"button\"\n                                    size=\"small\"\n                                    className={`btn btn-sm ${customer.status ? 'text-danger' : 'text-success'}`}\n                                    onClick={() => {\n                                        toggleActivateCustomer();\n                                    }}>\n                                <i className={`uil ${customer.status ? 'uil-multiply' : 'uil-check'} font-size-18`}> </i>\n                            </button>\n                        </Tooltip>\n                        <Tooltip placement=\"bottom\" title=\"Editar cliente\" aria-label=\"add\">\n                            <button type=\"button\"\n                                    size=\"small\"\n                                    className=\"btn btn-sm text-primary\"\n                                    onClick={() => {\n                                        toggleModal();\n                                        setEditCustomer(true);\n                                    }}>\n                                <i className=\"uil uil-pen font-size-18\"> </i>\n                            </button>\n                        </Tooltip>\n                        <Tooltip placement=\"bottom\" title=\"Estadisticas del cliente\" aria-label=\"add\">\n                            <button type=\"button\"\n                                    size=\"small\"\n                                    className=\"btn btn-sm text-primary\"\n                                    onClick={() => {\n                                        toggleCustomerStatsModal();\n                                    }}>\n                                <i className=\"uil uil-chart font-size-18\"> </i>\n                            </button>\n                        </Tooltip>\n\n                    </Col>\n\n                    {hasPendingOrders && (\n                        <Col md={12} >\n                            <div className=\"alert alert-warning m-0 font-size-14\">\n                                <i className=\"uil uil-exclamation-triangle\"> </i> <b>Existe un pedido apartado para el cliente seleccionado, Solicite autorización para realizar este pedido.</b>\n                            </div>\n                        </Col>\n                    )}\n\n                    {!customer.status && (\n                        <Col md={12} >\n                            <div className=\"alert alert-danger m-0 font-size-14\">\n                                <i className=\"uil uil-exclamation-triangle\"> </i> <b>Este cliente no puede generar pedidos ContraPago.</b>\n                            </div>\n                        </Col>\n                    )}\n\n                    {showAsModal && (\n                        <>\n                            <hr/>\n                            <Row>\n                                <Col md={12} className=\"text-right\">\n                                    {props.onCloseModal && (\n                                        <button type=\"button\" className=\"btn btn-light\" onClick={() => props.onCloseModal()}>Cancelar</button>\n                                    )}\n                                    {props.onAcceptModal && (\n                                        <Button color=\"primary\" type=\"button\" onClick={() => props.onAcceptModal()}>Guardar</Button>\n                                    )}\n                                </Col>\n                            </Row>\n                        </>\n                    )}\n                </Row>\n            )}\n            <CustomModal title={editCustomer && !isNewCustomer ? \"Modificar cliente\" : \"Nuevo cliente\"} size=\"lg\" showFooter={false} isOpen={openCustomerModal} onClose={onCloseCustomerModal}>\n                <CustomerForm customer={!isNewCustomer ? customerData : {}}\n                              showAsModal={true}\n                              onCloseModal={onCloseCustomerModal}\n                              onAcceptModal={onAcceptCustomerModal}\n                />\n            </CustomModal>\n            <CustomModal title={\"Estadisticas del cliente\"} size=\"lg\" isOpen={openCustomerStatsModal} onClose={toggleCustomerStatsModal}>\n                <Row>\n                    <Col md={6} className=\"mb-3\">\n                        <OrdersPieChart customerId={customerData.id}/>\n                    </Col>\n                    <Col md={6} className=\"mb-3\">\n                        <CategoriesPieChart customerId={customerData.id}/>\n                    </Col>\n                </Row>\n            </CustomModal>\n        </React.Fragment>\n    )\n}\n\nOrderCustomer.propTypes = {\n    onSelect: PropTypes.func.isRequired,\n    history: PropTypes.object\n}\n\nconst mapStateToProps = state => {\n    const {customer, error, loading} = state.Customer\n    const {car} = state.Order\n    return {car, customer, error, loading};\n}\n\nconst mapDispatchToProps = dispatch => ({\n    hasCustomerOpenOrders,\n    onGetCustomer: (id) => dispatch(getCustomer(id)),\n    onUpdateCustomer: (id, data) => dispatch(updateCustomer(id, data)),\n    onUpdateCar: (data) => dispatch(updateCard(data)),\n})\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(OrderCustomer))\n","/Users/ramon/Repositories/lucy-moie/src/store/user/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/FieldOption/configsList.js",["1624"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from \"prop-types\"\nimport {connect} from \"react-redux\"\nimport {Card, CardBody, Col, Row} from \"reactstrap\"\n\nimport {ConfirmationModalAction} from \"../../components/Modal/ConfirmationModal\";\nimport {deleteFieldOption, getFieldOptionByGroup, registerFieldOption, updateFieldOption} from \"../../store/fieldOptions/actions\";\nimport {GROUPS} from \"../../common/constants\";\nimport {map} from \"lodash\";\nimport {FieldNumber, FieldText} from \"../../components/Fields\";\nimport {AvForm} from \"availity-reactstrap-validation\";\n\nconst ConfigsList = props => {\n    const {fieldOptions, refresh, onGetByGroup, onCreateFieldOption, onUpdateFieldOption, onDeleteFieldOption} = props;\n\n    const [groupsList, setGroupsList] = useState([GROUPS.OP_GROUPS]);\n    const [groupSelected, setGroupSelected] = useState(null);\n    const [fieldOptionsList, setFieldOptionsList] = useState([]);\n    const [fieldOption, setFieldOption] = useState({options: []});\n    const [fieldOptionEdited, setFieldOptionEdited] = useState(null);\n\n    useEffect(() => {\n        onGetByGroup(groupSelected || GROUPS.OP_GROUPS);\n    }, [onGetByGroup, refresh, groupSelected]);\n\n    useEffect(() => {\n        if (fieldOptions && fieldOptions.length > 0) {\n            const options = {};\n\n            if (fieldOptions.some(item => item.groups === GROUPS.OP_GROUPS)) {\n                const list = fieldOptions.map(item => item.name);\n                list.unshift(GROUPS.OP_GROUPS);\n                setGroupsList(list);\n            }\n\n            if (groupSelected) {\n                fieldOptions.forEach(op => {\n                    const key = op.groups;\n                    if (!options[key]) {\n                        options[key] = {groups: op.groups, options: []};\n                    }\n                    options[key].options.push({id: op.id, name: op.name, value: op.value});\n                });\n                const list = [];\n                Object.keys(options).forEach(op => list.push(options[op]))\n                setFieldOptionsList(list);\n\n                setFieldOption(list.find(l => l.groups === groupSelected));\n                setFieldOptionEdited(null);\n            }\n        } else {\n            setFieldOptionsList([])\n            setFieldOption({options: []});\n        }\n    }, [fieldOptions])\n\n    const onAddFieldOptions = (ev, data) => {\n        if (!data.groups || !data.groups.value) return;\n\n        const items = fieldOptionsList ? fieldOptionsList : [];\n\n        //If item doesnt exist It will be added\n        if (items.some(i => i.groups === data.groups.value)) return;\n\n        const item = {groups: data.groups.value, options: [{id: null, name: null, value: ''}]};\n        items.push(item);\n        setFieldOptionsList(items);\n        setGroupSelected(data.groups.value);\n    };\n\n    const onAddFieldOption = () => {\n        //to avoid multiple\n        if (fieldOption && fieldOption.options.some(item => !item.id)) return;\n\n        setFieldOptionEdited(null);\n        setFieldOption({...fieldOption, options: [...fieldOption.options, {id: null, name: null, value: ''}]});\n    };\n\n    const onDeleteOption = (id) => {\n        ConfirmationModalAction({\n            title: '¿Seguro desea eliminar este registro?',\n            description: 'Usted está eliminado este registro, una vez eliminado no podrá ser recuperado.',\n            id: '_fieldOptionsModal',\n            onConfirm: () => onDeleteFieldOption(id)\n        });\n    };\n\n    const handleValidSubmit = (ev, data) => {\n        const name = data.name ? data.name : data.value;\n\n        //avoid duplicate\n        if (fieldOption && fieldOption.options.some(item => item.id && item.name === name && item.value === data.value)) {\n            const optionGroup = {...fieldOption};\n            const option = optionGroup.options.find(item => !item.id && item.name === name && item.value === data.value);\n            optionGroup.options.splice(optionGroup.options.indexOf(option), 1);\n            setFieldOption(optionGroup);\n            return;\n        }\n\n        const payload = {\n            groups: groupSelected,\n            name: data.name ? data.name : data.value,\n            value: data.value\n        }\n\n        if (fieldOptionEdited) {\n            onUpdateFieldOption(fieldOptionEdited, payload);\n        } else {\n            onCreateFieldOption(payload);\n        }\n    };\n\n    const namesAndValueConfig = [GROUPS.REFERENCE_KEY, GROUPS.ALARMS];\n\n    return (\n        <Row>\n            <Col md={5}>\n                <Card>\n                    <CardBody>\n                        <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => onAddFieldOptions(e, v)}>\n                            <Row>\n                                <Col>\n                                    <table className=\"table table-bordered table-condensed\">\n                                        <thead>\n                                        <tr>\n                                            <th style={{width: '80%'}}>Grupo</th>\n                                            <th style={{width: '20%'}}>Acciones</th>\n                                        </tr>\n                                        </thead>\n                                        <tbody>\n                                        {map(groupsList, (group, key) => (\n                                            <tr key={key} className={group === groupSelected ? 'bg-light font-weight-600' : ''}>\n                                                <td>{group}</td>\n                                                <td className=\"text-center\">\n                                                    <ul className=\"list-inline font-size-20 contact-links mb-0\">\n                                                        <li className=\"list-inline-item\">\n                                                            <button type=\"button\" size=\"small\" className=\"btn btn-sm text-primary\" onClick={() => setGroupSelected(group)}>\n                                                                <i className=\"uil uil-eye font-size-18\"> </i>\n                                                            </button>\n                                                        </li>\n                                                    </ul>\n                                                </td>\n                                            </tr>\n                                        ))}\n                                        </tbody>\n                                    </table>\n                                </Col>\n                            </Row>\n                        </AvForm>\n                    </CardBody>\n                </Card>\n            </Col>\n            <Col md={7}>\n                <Card>\n                    <CardBody>\n                        <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => handleValidSubmit(e, v)}>\n                            <Row>\n                                <Col className=\"text-right p-2\">\n                                    {groupSelected && (\n                                        <button size=\"small\" type=\"button\" className=\"btn btn-sm text-primary\" onClick={() => onAddFieldOption()}>\n                                            <i className=\"uil uil-plus font-size-18\"> </i> Agregar\n                                        </button>\n                                    )}\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col>\n                                    <table className=\"table table-bordered table-condensed\">\n                                        <thead>\n                                        <tr>\n                                            <th>Nombre</th>\n                                            {groupSelected === GROUPS.REFERENCE_KEY && (\n                                                <>\n                                                    <th>Inicia en</th>\n                                                </>\n                                            )}\n                                            <th style={{width: '20%'}}>Acciones</th>\n                                        </tr>\n                                        </thead>\n                                        <tbody>\n                                        {map(fieldOption.options, (option, key) => (\n                                            <tr key={key}>\n                                                {namesAndValueConfig.includes(groupSelected) && (\n                                                    <>\n                                                        {fieldOptionEdited !== option.id && (\n                                                            <>\n                                                                <td>{option.name}</td>\n                                                                <td>{option.value}</td>\n                                                            </>\n                                                        )}\n                                                        {fieldOptionEdited === option.id && (\n                                                            <>\n                                                                <td>\n                                                                    <FieldText\n                                                                        id={\"name\"}\n                                                                        name={\"name\"}\n                                                                        value={option.name}\n                                                                        required/>\n                                                                </td>\n                                                                <td>\n                                                                    <FieldNumber\n                                                                        id={\"value\"}\n                                                                        name={\"value\"}\n                                                                        value={option.value}\n                                                                        required/>\n                                                                </td>\n                                                            </>\n                                                        )}\n                                                    </>\n                                                )}\n\n                                                {!(namesAndValueConfig.includes(groupSelected)) && (\n                                                    <td>\n                                                        {fieldOptionEdited !== option.id && (\n                                                            <>\n                                                                {option.value}\n                                                            </>\n                                                        )}\n                                                        {fieldOptionEdited === option.id && (\n                                                            <>\n                                                                <FieldText\n                                                                    id={\"value\"}\n                                                                    name={\"value\"}\n                                                                    value={option.value}\n                                                                    required/>\n                                                            </>\n                                                        )}\n                                                    </td>\n                                                )}\n                                                <td className=\"text-center\">\n                                                    <div className=\"btn-group\">\n\n                                                        {(fieldOptionEdited !== option.id && option.id) && (\n                                                            <div>\n                                                                <button type=\"button\" size=\"small\" className=\"btn btn-sm text-primary\" disabled={fieldOptionEdited} onClick={() => setFieldOptionEdited(option.id)}>\n                                                                    <i className=\"uil uil-pen font-size-18\"> </i>\n                                                                </button>\n                                                                <button type=\"button\" size=\"small\" className=\"btn btn-sm text-danger\" disabled={fieldOptionEdited} onClick={() => onDeleteOption(option.id)}>\n                                                                    <i className=\"uil uil-trash-alt font-size-18\"> </i>\n                                                                </button>\n                                                            </div>\n                                                        )}\n                                                        {(fieldOptionEdited === option.id || !option.id) && (\n                                                            <div>\n                                                                <button type=\"submit\" size=\"small\" className=\"btn btn-sm text-success\">\n                                                                    <i className=\"uil uil-check font-size-18\"> </i>\n                                                                </button>\n                                                                {option.id && (\n                                                                    <button type=\"button\" size=\"small\" className=\"btn btn-sm text-primary\" onClick={() => setFieldOptionEdited(null)}>\n                                                                        <i className=\"uil uil-multiply font-size-18\"> </i>\n                                                                    </button>\n                                                                )}\n                                                            </div>\n                                                        )}\n                                                    </div>\n                                                </td>\n                                            </tr>\n                                        ))}\n                                        </tbody>\n                                    </table>\n                                </Col>\n                            </Row>\n\n                        </AvForm>\n                    </CardBody>\n                </Card>\n            </Col>\n        </Row>\n    )\n}\n\nConfigsList.propTypes = {\n    fieldOptions: PropTypes.array,\n    onGetFieldOptions: PropTypes.func,\n    onCreateFieldOption: PropTypes.func,\n    onUpdateFieldOption: PropTypes.func,\n    onDeleteFieldOption: PropTypes.func,\n}\n\nconst mapStateToProps = state => {\n    const {fieldOptions, loading, meta, refresh} = state.FieldOption\n    return {fieldOptions, loading, meta, refresh}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGetByGroup: (group) => dispatch(getFieldOptionByGroup(group, 500, 0)),\n    onCreateFieldOption: (data, history) => dispatch(registerFieldOption(data, history)),\n    onUpdateFieldOption: (id, data, history) => dispatch(updateFieldOption(id, data, history)),\n    onDeleteFieldOption: (id, history) => dispatch(deleteFieldOption(id, history))\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ConfigsList)\n","/Users/ramon/Repositories/lucy-moie/src/store/billConfig/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/Fields/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Reports/ConciliationReportForm.js",["1625","1626"],"import React, {useEffect, useState} from \"react\"\nimport {CardBody, Col, Label, Row} from \"reactstrap\"\nimport {AvForm} from \"availity-reactstrap-validation\"\nimport {Card} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {FieldDate, FieldSelect} from \"../../components/Fields\";\nimport {DATE_MODES} from \"../../components/Fields/InputDate\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\nimport {formatDateToServer} from \"../../common/utils\";\nimport {DELIVERY_METHODS, REPORT_TYPES} from \"../../common/constants\";\nimport {getEmptyOptions} from \"../../common/converters\";\nimport {getDeliveryMethods} from \"../../store/order/actions\";\nimport {generateReport, generateReportRestart} from \"../../store/reports/actions\";\n\nconst ConciliationReportForm = ({onCloseModal, deliveryMethods, onGetDeliveryMethods, loading, error, success, onGenerateReport, onRestartReport}) => {\n\n    const [deliveryMethodList, setDeliveryMethodList] = useState([]);\n    const [deliveryMethod, setDeliveryMethod] = useState({});\n\n    useEffect(() => {\n        if (onRestartReport) {\n            onRestartReport();\n        }\n        if (onGetDeliveryMethods) onGetDeliveryMethods();\n    }, [onRestartReport]);\n\n    useEffect(() => {\n        if (success && !error) {\n            onCloseModal(true);\n        }\n    }, [success]);\n\n    useEffect(() => {\n        if (deliveryMethods && deliveryMethods.length > 0) {\n            setDeliveryMethod(deliveryMethods.find(op => op.name === DELIVERY_METHODS.INTERRAPIDISIMO).code);\n            setDeliveryMethodList([getEmptyOptions(),\n                ...deliveryMethods.filter(op => op.name === DELIVERY_METHODS.INTERRAPIDISIMO || op.name === DELIVERY_METHODS.MENSAJERO).map(op => ({label: op.name, value: op.code}))]\n            );\n        }\n    }, [deliveryMethods]);\n\n    const handleValidSubmit = (e, values) => {\n        const payload = {\n            deliveryMethod: values.deliveryMethod.value,\n            dateFrom: formatDateToServer(values.reportDate[0]),\n            dateTo: formatDateToServer(values.reportDate[1])\n        };\n        onGenerateReport(payload);\n    }\n\n    return (\n        <React.Fragment>\n            <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => handleValidSubmit(e, v)}>\n                <Card>\n                    <CardBody>\n                        <Row>\n                            <Col md=\"12\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"field_name\">Metodo<span className=\"text-danger\">*</span></Label>\n                                    <FieldSelect\n                                        id={\"deliveryMethod\"}\n                                        name={\"deliveryMethod\"}\n                                        options={deliveryMethodList}\n                                        defaultValue={deliveryMethod}\n                                        required\n                                    />\n                                </div>\n                            </Col>\n                            <Col md=\"12\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"field_name\">Fechas <span className=\"text-danger\">*</span></Label>\n                                    <FieldDate\n                                        name={\"reportDate\"}\n                                        mode={DATE_MODES.RANGE}\n                                    />\n                                </div>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md={12} className=\"text-center\">\n                                {!!(!success && error) && (\n                                    <div className=\"alert alert-danger\">{error}</div>\n                                )}\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md={12} className=\"text-right\">\n                                <ButtonSubmit loading={loading} disabled={loading}/>\n                            </Col>\n                        </Row>\n                    </CardBody>\n                </Card>\n            </AvForm>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {report} = state.PostSale;\n    const {deliveryMethods} = state.Order;\n    return {deliveryMethods: deliveryMethods.data, loading: report.loading, error: report.error, success: report.success}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGenerateReport: (data) => dispatch(generateReport(REPORT_TYPES.CONCILIATION, data)),\n    onRestartReport: () => dispatch(generateReportRestart()),\n    onGetDeliveryMethods: (conditional = null, limit = 50, page) => dispatch(getDeliveryMethods(conditional, limit, page)),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(ConciliationReportForm)\n)\n\nConciliationReportForm.propTypes = {\n    error: PropTypes.any,\n    onCloseModal: PropTypes.func\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/orderConciliationsForm.js",["1627","1628","1629","1630","1631","1632","1633","1634","1635","1636"],"import React, {useEffect, useState} from \"react\"\nimport {CardBody, Col, Label, Row} from \"reactstrap\"\nimport {AvForm} from \"availity-reactstrap-validation\"\nimport {Card, Tooltip} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {FieldAsyncSelect, FieldSelect, FieldText} from \"../../components/Fields\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\nimport {ORDERS, ORDERS_CHARGE_ON_DELIVERY, ORDERS_FOR_CONCILIATE} from \"../../helpers/url_helper\";\nimport {getEmptyOptions} from \"../../common/converters\";\nimport {confirmConciliation, confirmConciliationRestart, getOrder, restartOrder} from \"../../store/order/actions\";\nimport Conditionals from \"../../common/conditionals\";\nimport {priceFormat} from \"../../common/utils\";\nimport {StatusField} from \"../../components/StatusField\";\nimport {ORDER_STATUS} from \"../../common/constants\";\nimport {fetchOrdersApi} from \"../../helpers/backend_helper\";\n\nconst searchByOptions = [{label: \"Pedido\", value: \"ID\"}, {label: \"Guia\", value: \"GUIA\"}, {label: \"Lote Guia\", value: \"LOTE_GUIA\"}, {label: \"Lote pedido\", value: \"LOTE_PEDIDO\"}];\nconst emptyOption = getEmptyOptions();\n\nconst OrderConciliationForm = ({\n                                   onConfirmConciliationRestart,\n                                   conciliationSuccess,\n                                   conciliationError,\n                                   conciliationLoading,\n                                   onGetOrder,\n                                   onCloseModal,\n                                   order,\n                                   loading,\n                                   success,\n                                   error,\n                                   onRestartOrder,\n                                   onConfirmConciliate\n                               }) => {\n\n    const [showNotValid, setShowNotValid] = useState(false);\n    const [orderId, setOrderId] = useState(null);\n    const [orders, setOrders] = useState([]);\n    const [searchBy, setSearchBy] = useState(searchByOptions[0].value);\n    const [defaultOption, setDefaultOption] = useState(emptyOption);\n    const [lote, setLote] = useState(null);\n\n    useEffect(() => {\n        if (order) {\n            const list = [...orders];\n            if (!list.some(o => o.id === order.id)) {\n                list.push(order);\n                list.sort((a, b) => (a.id > b.id) ? 1 : -1);\n                setOrders(list);\n            }\n        } else {\n            setOrders([]);\n        }\n    }, [order]);\n\n    useEffect(() => {\n        if (onRestartOrder) {\n            onRestartOrder();\n        }\n    }, [onRestartOrder]);\n\n    useEffect(() => {\n        if (conciliationSuccess && !conciliationError) {\n            onCloseModal(true);\n            onConfirmConciliationRestart();\n        }\n    }, [conciliationSuccess]);\n\n    const addLote = () => {\n        lote.split(' ')\n            .filter(l => l)\n            .filter(l => !orders.some(o => o.id == l && o.orderDelivery && o.orderDelivery.deliveryType != 3))\n            .forEach(id => {\n                onGetOrder(id);\n            })\n        setLote(\"\");\n    }\n    const addLoteGuia = () => {\n\n        const trackingList = lote.split(' ')\n            .filter(tracking => tracking)\n            .filter(tracking => !orders.some(o => o.orderDelivery && o.orderDelivery.tracking === tracking && o.orderDelivery.deliveryType != 3))\n            .map(tracking => tracking);\n\n        const list = [...orders];\n\n        trackingList.forEach((tracking, index) => {\n            const conditions = new Conditionals.Condition;\n            conditions.add(\"orderDelivery.tracking\", tracking, Conditionals.OPERATORS.EQUAL);\n            const cond = Conditionals.getConditionalFormat(conditions.all());\n            const query = Conditionals.buildHttpGetQuery(cond, 1, 0);\n\n            fetchOrdersApi(query).then(resp => {\n                if (resp && resp.data && resp.data.length === 1) {\n                    let _order = resp.data[0];\n                    if (!list.some(o => o.id === _order.id)) {\n                        list.push(_order);\n                        list.sort((a, b) => (a.id > b.id) ? 1 : -1);\n                    }\n                }\n\n                if ((index + 1) === trackingList.length) {\n                    setOrders(list);\n                }\n            })\n        })\n        setLote(\"\");\n    }\n\n    /*const addLoteGuia = () => {\n\n        const trackingList = lote.split(' ')\n            .filter(tracking=> tracking)\n            .filter(tracking => !orders.some(o => o.orderDelivery && o.orderDelivery.tracking === tracking))\n            .map(tracking=> tracking);\n\n        const conditions = new Conditionals.Condition;\n        conditions.add(\"orderDelivery.tracking\", trackingList, Conditionals.OPERATORS.IN);\n        const cond = Conditionals.getConditionalFormat(conditions.all());\n        const query = Conditionals.buildHttpGetQuery(cond, 1, 0);\n\n        fetchOrdersApi(query).then(o => {\n            if(o && o.data && o.data.length > 0){\n                const list = [...orders];\n                o.data.forEach((_order) => {\n                    if (!list.some(o => o.id === _order.id)) {\n                        list.push(_order);\n                        list.sort((a, b) => (a.id > b.id) ? 1 : -1);\n                    }\n                })\n                setOrders(list);\n            }\n        })\n        setLote(\"\");\n    }*/\n\n    const addOrder = () => {\n        if (searchBy === 'LOTE_GUIA') {\n            addLoteGuia();\n            return;\n        }\n        if (searchBy === 'LOTE_PEDIDO') {\n            addLote();\n            return;\n        }\n        onGetOrder(orderId);\n        setDefaultOption(getEmptyOptions());\n        setOrderId(null);\n    }\n\n    const removeOrder = (orderId) => {\n        const list = [...orders];\n        const orderToRemove = list.find(o => o.id === orderId);\n        list.splice(list.indexOf(orderToRemove), 1);\n        setOrders(list);\n    }\n\n    const doConciliation = (e) => {\n        onConfirmConciliate(orders.filter(o => o.status === 4).map(o => o.id));\n    }\n\n    return (\n        <React.Fragment>\n            <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => doConciliation(e, v)}>\n                <Card>\n                    <CardBody>\n                        <Row className=\"mb-3\">\n                            <Col md={4}>\n                                <Label htmlFor=\"product\">Buscar por</Label>\n                                <FieldSelect\n                                    id={\"searchByOptions\"}\n                                    name={\"searchByOptions\"}\n                                    options={searchByOptions}\n                                    defaultValue={searchBy}\n                                    onChange={(e) => {\n                                        setSearchBy(e.value);\n                                    }}\n                                />\n                            </Col>\n                            {searchBy === \"ID\" && (\n                                <Col md={6}>\n                                    <Label htmlFor=\"product\">Pedido # </Label>\n                                    <FieldAsyncSelect\n                                        name={\"order\"}\n                                        urlStr={ORDERS_FOR_CONCILIATE}\n                                        placeholder=\"Buscar por Pedido\"\n                                        defaultValue={defaultOption}\n                                        conditionalOptions={{fieldName: 'id', operator: Conditionals.OPERATORS.EQUAL}}\n                                        defaultConditions={[]}\n                                        onChange={(c) => {\n                                            setOrderId(c.value);\n                                        }}\n                                    />\n                                </Col>\n                            )}\n                            {searchBy === \"GUIA\" && (\n                                <Col md={6}>\n                                    <Label htmlFor=\"customer\">Guia</Label>\n                                    <FieldAsyncSelect\n                                        name={\"tracking\"}\n                                        urlStr={ORDERS_FOR_CONCILIATE}\n                                        placeholder=\"Buscar por Guia\"\n                                        defaultValue={defaultOption}\n                                        defaultConditions={[]}\n                                        conditionalOptions={{fieldName: 'orderDelivery.tracking', operator: Conditionals.OPERATORS.EQUAL}}\n                                        onChange={(c) => {\n                                            setOrderId(c.value);\n                                        }}\n                                    />\n                                </Col>\n                            )}\n                            {searchBy === \"LOTE_GUIA\" && (\n                                <Col md={6}>\n                                    <Label htmlFor=\"orders\">Lote - Guias</Label>\n                                    <FieldText\n                                        id='loteTracking'\n                                        name={\"loteTracking\"}\n                                        value={lote}\n                                        defaultValue={lote}\n                                        onChange={(e) => {\n                                            setLote(e.target.value);\n                                        }}\n                                        maxLength={3000}\n                                    />\n                                </Col>\n                            )}\n                            {searchBy === \"LOTE_PEDIDO\" && (\n                                <Col md={6}>\n                                    <Label htmlFor=\"orders\">Lote - Pedidos</Label>\n                                    <FieldText\n                                        id='loteOrder'\n                                        name={\"loteOrder\"}\n                                        value={lote}\n                                        defaultValue={lote}\n                                        onChange={(e) => {\n                                            setLote(e.target.value);\n                                        }}\n                                        maxLength={3000}\n                                    />\n                                </Col>\n                            )}\n                            <Col md={2} style={{display: 'flex', 'alignItems': 'flex-end'}}>\n                                <Tooltip placement=\"bottom\" title=\"Agregar\" aria-label=\"add\">\n                                    <button type=\"button\"\n                                            className=\"btn btn-primary btn-block waves-effect waves-light mt-2 me-1 w-100\"\n                                            disabled={(!orderId && !lote) || loading}\n                                            onClick={() => addOrder()}>\n                                        {loading && <i className=\"fa fa-spinner fa-spin\"> </i>}\n                                        {!loading && <i className=\"mdi mdi-plus\"> </i>}\n                                    </button>\n                                </Tooltip>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md={12}>\n                                <table className=\"table table-condensed table-bordered\">\n                                    <thead>\n                                    <tr>\n                                        <th>Pedido</th>\n                                        <th>Estado</th>\n                                        <th>Guia</th>\n                                        <th>Cliente</th>\n                                        <th>Monto</th>\n                                        <th></th>\n                                    </tr>\n                                    </thead>\n                                    <tbody>\n                                    {orders.filter(o => o.status === 4).map(o => (\n                                        <tr>\n                                            <td>{o.id}</td>\n                                            <td>\n                                                <StatusField color={ORDER_STATUS[o.status]?.color}>\n                                                    {ORDER_STATUS[o.status]?.name}\n                                                </StatusField>\n                                            </td>\n                                            <td>{o.orderDelivery?.tracking}</td>\n                                            <td>{o.customer?.name}</td>\n                                            <td className=\"text-end\">{priceFormat(o.totalAmount)}</td>\n                                            <td className=\"text-center\">\n                                                <a title=\"button\" className=\"btn btn-sm text-danger\" onClick={() => removeOrder(o.id)}>\n                                                    <i className=\"uil uil-trash-alt font-size-16\"> </i>\n                                                </a>\n                                            </td>\n                                        </tr>\n                                    ))}\n                                    </tbody>\n                                </table>\n                            </Col>\n                            <Col>\n                                <div><b>Cant pedidos:</b> {orders.filter(o => o.status === 4).length}</div>\n                                <div><b>Total:</b> {priceFormat(orders.filter(o => o.status === 4).reduce((acc, item) => parseFloat(acc) + parseFloat(item.totalAmount), 0))}</div>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md={12} className=\"text-right\">\n                                <ButtonSubmit loading={conciliationLoading} disabled={conciliationLoading || orders.filter(o => o.status === 4).length === 0}/>\n                            </Col>\n                        </Row>\n                    </CardBody>\n                </Card>\n            </AvForm>\n            <div>\n            <button className=\"btn btn-xs btn-primary m-2\" onClick={() => setShowNotValid(!showNotValid)}> No validos  {showNotValid && <i className={\"fa fa-minus\"}></i>} {!showNotValid && <i className={\"fa fa-plus\"}></i>} </button>\n            {showNotValid &&\n            orders.some(o => o.status !== 4) && (\n                <Row className=\"mt-5\">\n                    <Col md={12}>\n                        <h5>Pedidos con estados no validos</h5>\n                        <table className=\"table table-condensed table-bordered\">\n                            <thead>\n                            <tr>\n                                <th>Pedido</th>\n                                <th>Estado</th>\n                                <th>Guia</th>\n                                <th>Cliente</th>\n                                <th>Monto</th>\n                                <th></th>\n                            </tr>\n                            </thead>\n                            <tbody>\n                            {orders.filter(o => o.status !== 4).map(o => (\n                                <tr>\n                                    <td>{o.id}</td>\n                                    <td>\n                                        <StatusField color={ORDER_STATUS[o.status]?.color}>\n                                            {ORDER_STATUS[o.status]?.name}\n                                        </StatusField>\n                                    </td>\n                                    <td>{o.orderDelivery?.tracking}</td>\n                                    <td>{o.customer?.name}</td>\n                                    <td className=\"text-end\">{priceFormat(o.totalAmount)}</td>\n                                    <td className=\"text-center\">\n                                        <a className=\"btn btn-sm text-danger\" onClick={() => removeOrder(o.id)}>\n                                            <i className=\"uil uil-trash-alt font-size-16\"> </i>\n                                        </a>\n                                    </td>\n                                </tr>\n                            ))}\n                            </tbody>\n                        </table>\n                    </Col>\n                    <Col>\n                        <div><b>Cant pedidos:</b> {orders.filter(o => o.status !== 4).length}</div>\n                        <div><b>Total:</b> {priceFormat(orders.filter(o => o.status !== 4).reduce((acc, item) => parseFloat(acc) + parseFloat(item.totalAmount), 0))}</div>\n                    </Col>\n                </Row>\n            )\n            }\n            </div>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {order, loading, conciliation} = state.Order;\n    return {order, loading, conciliationSuccess: conciliation.success, conciliationError: conciliation.error, conciliationLoading: conciliation.loading}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onConfirmConciliationRestart: () => dispatch(confirmConciliationRestart()),\n    onConfirmConciliate: (orders) => dispatch(confirmConciliation(orders)),\n    onRestartOrder: () => dispatch(restartOrder()),\n    onGetOrder: (id) => dispatch(getOrder(id)),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(OrderConciliationForm)\n)\n\nOrderConciliationForm.propTypes = {\n    error: PropTypes.any,\n    onCloseModal: PropTypes.func\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/orderEdit.js",["1637","1638","1639","1640","1641","1642","1643","1644","1645","1646","1647"],"import React, {useEffect, useState} from \"react\"\nimport {Col, Row} from \"reactstrap\"\nimport {Button, Card, Tooltip} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {\n    copyToClipboard,\n    DATE_FORMAT,\n    formatDate,\n    getImageByQuality, hiddenPhone,\n    priceFormat,\n    printPartOfPage,\n    threeDots\n} from \"../../common/utils\";\nimport NoDataIndication from \"../../components/Common/NoDataIndication\";\n\nimport {\n    canceledStatusOrder, generateLinkPayment,\n    getOrder,\n    historicOrder,\n    increasePhotoCounter,\n    nextStatusOrder,\n    printOrder,\n    resumeOrder,\n    updateCard,\n    updateOrder, updateOrderProducts\n} from \"../../store/order/actions\";\nimport CustomModal from \"../../components/Modal/CommosModal\";\nimport OrderDeliveryOptions from \"./create/orderDeliveryOptions\";\nimport {\n    CHARGE_ON_DELIVERY,\n    COMMENT_ENTITIES,\n    DELIVERY_METHODS_IDS,\n    DELIVERY_METHODS_PAYMENT_TYPES,\n    DELIVERY_TYPES,\n    EVENT_STATUS,\n    GROUPS,\n    ORDER_STATUS,\n    ORDERS_ENUM,\n    PAYMENT_TYPES\n} from \"../../common/constants\";\nimport {map} from \"lodash\";\nimport Images from \"../../components/Common/Image\";\nimport OrderCustomer from \"./create/orderCustomer\";\nimport OrderProducts from \"./create/orderProducts\";\nimport OrderCar from \"./create/orderCar\";\nimport {getProductsByIds} from \"../../store/product/actions\";\nimport {HtmlTooltip} from \"../../components/Common/HtmlTooltip\";\n\nimport {StatusField} from \"../../components/StatusField\";\nimport * as htmlToImage from 'html-to-image';\nimport Observations from \"../../components/Common/Observations\";\nimport {isMobile} from \"react-device-detect\";\nimport HasPermissions from \"../../components/HasPermissions\";\nimport {PERMISSIONS} from \"../../helpers/security_rol\";\nimport OrderTracking from \"./create/orderTracking\";\nimport {changePreloader} from \"../../store/layout/actions\";\nimport ButtonLoading from \"../../components/Common/ButtonLoading\";\nimport HasPermissionsFunc from \"../../components/HasPermissionsFunc\";\n\n// import {toPng, toJpeg, toBlob, toPixelData, toSvg} from 'html-to-image';\n\n\nconst OrderEdit = (props) => {\n\n    const {\n        orderId,\n        onGetOrder,\n        onUpdateCar,\n        onUpdateOrder,\n        onUpdateInventary,\n        onDownloadPhoto,\n        onCloseOverlay,\n        onNextStatusOrder,\n        onCanceledStatusOrder,\n        onResumeOrder,\n        onPrintOrder,\n        print,\n        resume,\n        order,\n        car,\n        refresh,\n        showOrderOverlay = false,\n        onGetHistoric,\n        historic,\n        onChangePreloader,\n        linkPayment\n    } = props;\n    const [orderData, setOrderData] = useState({});\n    const [orderResume, setOrderResume] = useState('');\n    const [showAsTable, setShowAsTable] = useState(false);\n    const [orderPrint, setOrderPrint] = useState('');\n    const [downloadingPhoto, setDownloadingPhoto] = useState(false);\n    const [activeTab, setActiveTab] = useState(3);\n\n    const [openPrintConfirmModal, setOpenPrintConfirmModal] = useState(false);\n    const [openCustomerModal, setOpenCustomerModal] = useState(false);\n    const [openDeliveryModal, setOpenDeliveryModal] = useState(false);\n    const [openProductsModal, setOpenProductsModal] = useState(false);\n    const [openTrackingModal, setOpenTrackingModal] = useState(false);\n    const [allowEdit, setAllowEdit] = useState(false);\n    const [allowUpdateTracking, setAllowUpdateTracking] = useState(false);\n    const [carRefresh, setCarRefresh] = useState(false);\n    const hasPhonePermission = HasPermissionsFunc([PERMISSIONS.CUSTOMER_PHONE]);\n\n\n    const productSummaryRef = React.createRef();\n\n    useEffect(() => {\n        if (orderId) {\n            onGetOrder(orderId);\n            onGetHistoric(orderId);\n        }\n    }, [orderId, refresh]);\n\n    useEffect(() => {\n        if (order && order.id) {\n            onResumeOrder(order.id);\n            onPrintOrder(order.id);\n\n            const orderDelivery = order?.orderDelivery;\n\n            let newCar = {\n                ...car,\n                orderId: order.id,\n                customer: {id: order.customer.id},\n                deliveryOptions: {\n                    origin: order.origen,\n                    type: orderDelivery.deliveryType,\n                    method: order.deliveryMethod.name,\n                    cost: orderDelivery.deliveryCost >= 0 ? parseFloat(orderDelivery.deliveryCost) : null,\n                    paymentType: order.paymentMode,\n                    piecesForChanges: order.piecesForChanges || 0,\n                    tracking: orderDelivery.tracking || '',\n                    otherMethod: orderDelivery.deliveryOtherDescription || '',\n                    deliveryLocality: orderDelivery.deliveryLocality.id || null\n                },\n                tracking: false,\n                products: [],\n                isEdit: true\n            };\n\n            const o = {...order}\n            if (o.orderDetails) {\n                o.orderDetails.forEach(prod => {\n                    const total = prod.quantity * prod.price;\n                    prod.discount = total * (prod.discountPercent / 100);\n                    prod.total = total - prod.discount;\n                });\n                o.orderDetails.forEach(prod => {\n                    newCar.products.push({\n                        id: prod.id,\n                        origin: {...prod.product, id: prod.id, price: prod.price},\n                        color: prod?.color,\n                        size: prod.size,\n                        sizeId: prod.productSize?.id || 0,\n                        quantity: prod.quantity,\n                        quantityAvailable: prod.productSize?.quantity || 0,\n                        discountPercentage: prod.discountPercent,\n                        discount: prod.discount,\n                    });\n                })\n            }\n            onUpdateCar(newCar)\n            setOrderData(order);\n\n            //setShowAsTable(order.orderDetails.length > 8);\n            setShowAsTable(isMobile);\n        }\n\n        setAllowEdit(canEdit());\n        setAllowUpdateTracking(canUpdateTracking());\n    }, [order, carRefresh]);\n\n    useEffect(() => {\n        if (resume) {\n            setOrderResume(resume);\n        }\n    }, [resume]);\n\n    useEffect(() => {\n        if (print) {\n            setOrderPrint(print);\n        }\n    }, [print]);\n\n    useEffect(() => {\n        if(linkPayment) {\n            console.log('link de pago: ', linkPayment);\n            copyToClipboard(linkPayment);\n        }\n    }, [linkPayment]);\n\n    const copyResume = () => {\n        copyToClipboard(resume);\n    }\n\n    const payuGenerate = () => {\n        if(order.id) {\n            console.log('generando link de pago para orden: ', order.id);\n            props.onGenerateLinkPayment(order.id);\n        }\n    }\n\n    const printOrder = () => {\n        onChangePreloader(true);\n        printPartOfPage(orderPrint);\n        setOpenPrintConfirmModal(true);\n        onChangePreloader(false);\n    }\n\n    const toggleModal = () => {\n        setOpenCustomerModal(!openCustomerModal);\n    }\n    const onCloseModal = () => {\n        toggleModal();\n        setCarRefresh(!carRefresh);\n        onUpdateCar({...car, customer: {}});\n    }\n    const onAcceptModal = () => {\n        toggleModal();\n        if (car.customer && car.customer.id) {\n            onUpdateOrder(orderData.id, {customer: car.customer.id});\n        }\n    }\n\n    const toggleDeliveryModal = () => {\n        setOpenDeliveryModal(!openDeliveryModal);\n    }\n    const onCloseDeliveryModal = () => {\n        toggleDeliveryModal();\n        setCarRefresh(!carRefresh);\n    }\n    const onAcceptDeliveryModal = () => {\n        if (car.deliveryOptions) {\n            try {\n                const deliveryData = {\n                    deliveryMethod: car.deliveryOptions.method,\n                    deliveryCost: car.deliveryOptions.cost,\n                    chargeOnDelivery: car.deliveryOptions.type === 3,\n                    origen: car.deliveryOptions.origin,\n                    tracking: car.deliveryOptions.tracking,\n                    deliveryLocality: car.deliveryOptions.deliveryLocality,\n                    deliveryType: parseInt(car.deliveryOptions.type),\n                    otherMethod: car.deliveryOptions.otherMethod,\n                };\n\n                if (DELIVERY_METHODS_PAYMENT_TYPES.includes(deliveryData.deliveryMethod)) {\n                    deliveryData.piecesForChanges = parseInt(car.deliveryOptions.piecesForChanges);\n                    deliveryData.paymentMode = car.deliveryOptions.paymentType === PAYMENT_TYPES.CASH ? 1 : 2;\n                }\n\n                if(deliveryData.deliveryType == CHARGE_ON_DELIVERY && deliveryData.deliveryMethod == 'MENSAJERO'){\n                    deliveryData.deliveryLocality = null;\n                }\n\n                if (deliveryData.deliveryType == CHARGE_ON_DELIVERY || deliveryData.deliveryMethod == 'PAYU') {\n                    if (deliveryData.deliveryLocality == null && deliveryData.deliveryMethod != 'MENSAJERO') {\n                        return false;\n                    } else {\n                        toggleDeliveryModal();\n                        onUpdateOrder(orderData.id, deliveryData);\n                    }\n                } else {\n                    toggleDeliveryModal();\n                    onUpdateOrder(orderData.id, deliveryData);\n                }\n            }catch(e){\n                toggleDeliveryModal();\n            }\n\n        }\n    }\n\n    const toggleTrackingModal = () => {\n        setOpenTrackingModal(!openTrackingModal);\n    }\n\n    const onCloseTrackingModal = () => {\n        toggleTrackingModal();\n        setCarRefresh(!carRefresh);\n    }\n\n    const onAcceptTrackingModal = (_tracking) => {\n        toggleTrackingModal();\n        if(_tracking) {\n            const order = {\n                tracking: _tracking\n            };\n            onUpdateOrder(orderData.id, order);\n        }\n    }\n\n    const toggleProductsModal = () => {\n        setOpenProductsModal(!openProductsModal);\n    }\n    const onCloseProductsModal = () => {\n        toggleProductsModal();\n        setCarRefresh(!carRefresh);\n    }\n    const onAcceptProductsModal = () => {\n        toggleProductsModal();\n        if (car.products) {\n            const order = {\n                products: car && car.products && car.products.map(prod => ({\n                    id: prod.origin.id,\n                    productSize: prod.sizeId,\n                    quantity: prod.quantity,\n                    discountPercentage: prod.discountPercentage,\n                }))\n            };\n            onUpdateInventary(orderData.id, order);\n        }\n    }\n\n    const getDeliveryType = (deliveryType) => {\n        let find = DELIVERY_TYPES.find(dt => dt.id === deliveryType);\n        return find ? find.label : '';\n    }\n\n    const getPaymentType = () => {\n        if (!order.paymentMode) return '';\n        return order.paymentMode === 1 ? PAYMENT_TYPES.CASH : PAYMENT_TYPES.TRANSFER;\n    }\n\n    const takePhoto = () => {\n        setDownloadingPhoto(true);\n        htmlToImage.toPng(productSummaryRef.current)\n            .then(function (dataUrl) {\n                setDownloadingPhoto(false);\n                var link = document.createElement('a');\n                link.download = `${order.customer.name.replace(/\\s+/g, '_')}_NRO_${order.id}.png`.toUpperCase();\n                link.href = dataUrl;\n                link.click();\n                onDownloadPhoto(orderData.id);\n                //onUpdateOrder(orderData.id, {photos: order.photos + 1});\n            })\n            .catch(function (error) {\n                console.error('oops, something went wrong!', error);\n                setDownloadingPhoto(false);\n            })\n    }\n\n    //Permite cancelar la orden\n    const canCancel = () => {\n        const isPrevPayment = order?.orderDelivery && ([1, 2].includes(order?.orderDelivery.deliveryType));\n        const canCancelPreviewPayment = [ORDERS_ENUM.PENDING].includes(parseInt(order.status)) && isPrevPayment;\n        const canCancelChargeOnDelivery = [ORDERS_ENUM.PENDING, ORDERS_ENUM.CONFIRMED, ORDERS_ENUM.PRINTED, ORDERS_ENUM.SENT].includes(parseInt(order.status)) && !isPrevPayment;\n\n        const hasPermission = HasPermissionsFunc([PERMISSIONS.ORDER_CANCEL]);\n\n        if (order && hasPermission && (canCancelPreviewPayment || canCancelChargeOnDelivery)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    //Permite confirmar la orden\n    const canConfirm = () => {\n        if (order && order.status === ORDERS_ENUM.PENDING && order?.orderDelivery && ![1].includes(order?.orderDelivery.deliveryType)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    const canEdit = () => {\n        if (order) {\n            const isPrevPayment = order?.orderDelivery && ([1, 2].includes(order?.orderDelivery.deliveryType));\n            const canEditPreviewPayment = [ORDERS_ENUM.PENDING, ORDERS_ENUM.CONCILIED, ORDERS_ENUM.PRINTED].includes(parseInt(order.status)) && isPrevPayment;\n            const canEditChargeOnDelivery = [ORDERS_ENUM.PENDING, ORDERS_ENUM.CONFIRMED, ORDERS_ENUM.PRINTED].includes(parseInt(order.status)) && !isPrevPayment;\n            if (order && (canEditPreviewPayment || canEditChargeOnDelivery)) {\n                if (\n                    order.status === ORDERS_ENUM.PRINTED && !HasPermissionsFunc([PERMISSIONS.CUSTOMER_PRINT_EDIT])\n                ) {\n                    return false;\n                }\n\n                return true;\n\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n\n    const canUpdateTracking = () => {\n        const isPrevPayment = order?.orderDelivery && order?.orderDelivery && ([1, 2].includes(order?.orderDelivery.deliveryType));\n        if((order.deliveryMethod?.id === DELIVERY_METHODS_IDS.OTRO) && !isPrevPayment && order.status === 3){\n            return true;\n        }\n        if((order.deliveryMethod?.id === DELIVERY_METHODS_IDS.OTRO) && isPrevPayment && order.status === 3){\n            return true;\n        }\n        return false;\n    }\n\n    //Permite generar enlaces Payu\n    const canGeneratePayu = () => {\n        const isPrevPayment = order?.orderDelivery && ([1, 2].includes(order?.orderDelivery.deliveryType));\n        if (isPrevPayment && order && order.status == ORDERS_ENUM.PENDING) {\n            return true;\n        }\n        return false;\n    }\n\n    //Permite imprimir la orden\n    const canSent = () => {\n        const isPrevPayment = order?.orderDelivery && ([1, 2].includes(order?.orderDelivery.deliveryType));\n        if (order && order.status === ORDERS_ENUM.PRINTED && isPrevPayment && order.deliveryMethod.name == 'PAYU') {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    //Permite imprimir la orden\n    const canPrint = () => {\n        const isPrevPayment = order?.orderDelivery && ([1, 2].includes(order?.orderDelivery.deliveryType));\n        if (order && order.status < ORDERS_ENUM.CONCILIED) {\n            return true;\n        } else if (order && order.status === ORDERS_ENUM.CONCILIED && isPrevPayment) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    const isNextPrint = () => {\n        const isPrevPayment = order?.orderDelivery && ([1, 2].includes(order?.orderDelivery.deliveryType));\n\n        if (order.status === ORDERS_ENUM.CONFIRMED || (order && order.status === ORDERS_ENUM.CONCILIED && isPrevPayment)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    const onConfirmPrintOrder = () => {\n        setOpenPrintConfirmModal(false);\n        onNextStatusOrder(order.id);\n    }\n\n    const getDeliveryAddress = (orderDelivery) => {\n        let address = null;\n        if (orderDelivery.deliveryState) {\n            address = orderDelivery.deliveryState;\n        }\n        if (orderDelivery.deliveryMunicipality) {\n            address = (address ? address + '/' : '') + orderDelivery.deliveryMunicipality;\n        }\n        return address ? address : '';\n    }\n\n    return orderData.id ? (\n        <div className={showOrderOverlay ? 'orderDetail-overlay pt-2' : ''}>\n            <Row className=\"mb-2\">\n                {props.error && (\n                    <Col md={12} className=\"text-center\">\n                        <div className=\"alert alert-danger\">\n                            {props.error}\n                        </div>\n                    </Col>\n                )}\n                <Col md={12}>\n                    <div className={\"mb-3 float-md-start\"}>\n                        {showOrderOverlay && (\n                            <>\n                                <Tooltip placement=\"bottom\" title=\"Ocultar\" aria-label=\"add\">\n                                    <button className=\"btn btn-outline-default mr-5\" onClick={() => onCloseOverlay()}>\n                                        <i className=\"uil uil-arrow-to-right font-size-16\"> </i>\n                                    </button>\n                                </Tooltip>\n                                <small className=\"badge rounded-pill bg-info font-size-14 mr-5 p-2\">Pedido# {order.id}</small>\n                            </>\n                        )}\n                        <StatusField color={ORDER_STATUS[order.status]?.color} className={\"font-size-14 mr-5\"}>\n                            {ORDER_STATUS[order.status]?.name}\n                        </StatusField>\n                        <small className=\"badge rounded-pill bg-soft-info font-size-14 mr-5 p-2\">Operador: {order.user?.name}</small>\n                        {(order?.dateOfSale != null) &&\n                        <small className=\"badge rounded-pill bg-soft-success font-size-14 mr-5 p-2\">\n                            F. Venta: {formatDate(order?.dateOfSale, DATE_FORMAT.ONLY_DATE)}\n                        </small>}\n                    </div>\n                    <div className={\"mb-3 float-md-end\"}>\n                        <HasPermissions permission={PERMISSIONS.ORDER_EDIT}>\n                            <div className=\"button-items\">\n                                {canCancel() && (\n                                    <Tooltip placement=\"bottom\" title=\"Anular\" aria-label=\"add\">\n                                        <ButtonLoading loading={props.loading} type=\"button\" color=\"primary\" className=\"btn-sm btn btn-outline-danger waves-effect waves-light\" onClick={() => onCanceledStatusOrder(order.id)}>\n                                            <i className={\"mdi mdi-delete\"}> </i>\n                                        </ButtonLoading>\n                                    </Tooltip>\n                                )}\n                                {canConfirm() && (\n                                    <Tooltip placement=\"bottom\" title=\"Confirmar\" aria-label=\"add\">\n                                        <ButtonLoading loading={props.loading} type=\"button\" color=\"primary\" className=\"btn-sm btn btn-outline-success waves-effect waves-light\" onClick={() => onNextStatusOrder(order.id)}>\n                                            <i className={\"mdi mdi-check\"}> </i>\n                                        </ButtonLoading>\n                                    </Tooltip>\n                                )}\n                                {/*{(order && order.status === 3) && (\n                                    <Tooltip placement=\"bottom\" title=\"Confirmar envio\" aria-label=\"add\">\n                                        <button type=\"button\" color=\"primary\" className=\"btn-sm btn btn-outline-success waves-effect waves-light\" onClick={() => onNextStatusOrder(order.id)}>\n                                            <i className={\"mdi mdi-check\"}> </i>\n                                        </button>\n                                    </Tooltip>\n                                )}*/}\n                                {canSent() && (\n                                    <Tooltip placement=\"bottom\" title=\"Enviar\" aria-label=\"add\">\n                                        <ButtonLoading loading={props.loading} type=\"button\" color=\"primary\" className=\"btn-sm btn btn-outline-success waves-effect waves-light\" onClick={() => onNextStatusOrder(order.id)}>\n                                            <i className={\"mdi mdi-share\"}> </i>\n                                        </ButtonLoading>\n                                    </Tooltip>\n                                )}\n\n                                {canPrint() && (\n                                    <Tooltip placement=\"bottom\" title=\"Imprimir\" aria-label=\"add\">\n                                        <ButtonLoading type=\"button\" color=\"primary\" className=\"btn-sm btn btn-outline-info waves-effect waves-light\" onClick={() => printOrder()}>\n                                            <i className={\"mdi mdi-printer\"}> </i>\n                                            {order.prints && order.prints > 0 && (\n                                                <span className=\"badge bg-danger rounded-pill noti-icon\">{order.prints || 0}</span>\n                                            )}\n                                        </ButtonLoading>\n                                    </Tooltip>\n\n                                )}\n                                {canGeneratePayu() && (\n                                <Tooltip placement=\"bottom\" title=\"Generar link de Pago\" aria-label=\"add\">\n                                    <ButtonLoading type=\"button\" color=\"primary\" className=\"btn-sm btn btn-outline-info waves-effect waves-light\" onClick={() => payuGenerate()}>\n                                        <i className={\"mdi mdi-link\"}> </i>\n                                    </ButtonLoading>\n                                </Tooltip>)}\n                                <Tooltip placement=\"bottom\" title=\"Copiar resumen\" aria-label=\"add\">\n                                    <button type=\"button\" color=\"primary\" className=\"btn-sm btn btn-outline-info waves-effect waves-light\" onClick={() => copyResume()}>\n                                        <i className={\"mdi mdi-content-copy\"}> </i>\n                                    </button>\n                                </Tooltip>\n                                <Tooltip placement=\"bottom\" title=\"Descargar foto\" aria-label=\"add\">\n                                    <button type=\"button\" color=\"primary\" className=\"btn-sm btn btn-outline-info waves-effect waves-light \" onClick={() => takePhoto()}>\n                                        <i className={\"mdi mdi-camera\"}> </i> {downloadingPhoto ? 'Descargando...' : ''}\n                                        {order.photos && order.photos > 0 && (\n                                            <span className=\"badge bg-danger rounded-pill noti-icon\">{order.photos || 0}</span>\n                                        )}\n                                    </button>\n                                </Tooltip>\n                            </div>\n                        </HasPermissions>\n                    </div>\n                </Col>\n            </Row>\n            <Row className=\"mb-3\">\n                <Col md={showOrderOverlay ? 12 : 4}>\n                    <Row>\n                        <Col md={showOrderOverlay ? 6 : 12} className=\"mb-3\">\n                            <Card id={'customer-detail'} className=\"p-3\">\n                                <Row>\n                                    <Col xs={10}>\n                                        <h4 className=\"card-title text-info\"><i className=\"uil-users-alt me-2\"> </i> Datos del cliente</h4>\n                                    </Col>\n                                    <Col xs={2} className=\"text-right\">\n                                        <HasPermissions permission={PERMISSIONS.ORDER_EDIT}>\n                                            {allowEdit && (\n                                                <Tooltip placement=\"bottom\" title=\"Editar cliente\" aria-label=\"add\">\n                                                    <button type=\"button\"\n                                                            size=\"small\"\n                                                            className=\"btn btn-sm text-primary\"\n                                                            onClick={() => {\n                                                                toggleModal();\n                                                            }}>\n                                                        <i className=\"uil uil-pen font-size-18\"> </i>\n                                                    </button>\n                                                </Tooltip>\n                                            )}\n                                        </HasPermissions>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col md={12}>\n                                        <label>Nombre: </label>\n                                        <span className=\"p-1\">{orderData.customer.name}</span>\n                                        {orderData.customer.isMayorist === true && (\n                                            <Tooltip placement=\"bottom\" title=\"Cliente mayorista\" aria-label=\"add\">\n                                                <i className={\"mdi mdi-crown font-size-18 mr-1 text-warning\"}> </i>\n                                            </Tooltip>\n                                        )}\n                                    </Col>\n                                    <Col md={12}>\n                                        <label>Correo: </label>\n                                        <span className=\"p-1\">{orderData.customer.email}</span>\n                                    </Col>\n                                    <Col md={12}>\n                                        <label>Departamento: </label>\n                                        <span className=\"p-1\">{orderData.customer.state?.name}</span>\n                                    </Col>\n                                    <Col md={12}>\n                                        <label>Municipio: </label>\n                                        <span className=\"p-1\">{orderData.customer.municipality?.name}</span>\n                                    </Col>\n                                    <Col md={12}>\n                                        <label>Documento: </label>\n                                        <span className=\"p-1\">{orderData.customer.document}</span>\n                                    </Col>\n                                    <Col md={12}>\n                                        <label>Teléfono Celular: </label>\n                                        <span className=\"p-1\">{hasPhonePermission ? orderData.customer.cellphone : hiddenPhone(orderData.customer.cellphone) }</span>\n                                    </Col>\n                                    <Col md={12}>\n                                        <label>Teléfono Residencial: </label>\n                                        <span className=\"p-1\">{hasPhonePermission ? orderData.customer.phone : hiddenPhone(orderData.customer.phone)}</span>\n                                    </Col>\n                                    <Col md={12}>\n                                        <label>Dirección: </label>\n                                        <small className=\"p-1\" style={{wordBreak: 'break-all'}}>{orderData.customer.address}</small>\n                                    </Col>\n                                    <HasPermissions permission={PERMISSIONS.CUSTOMER_WHATSAPP}>\n                                    <Col md={12}>\n                                        <a target=\"_new\" href={`https://wa.me/${orderData.customer.cellphone}`} > <i className=\"fa fa-customer\"></i> Contactar Whatsapp</a>\n                                    </Col>\n                                    </HasPermissions>\n                                </Row>\n                            </Card>\n                        </Col>\n                        <Col md={showOrderOverlay ? 6 : 12} className=\"mb-3\">\n                            <Card id={'delivery-options'} className=\"p-3\">\n                                <Row>\n                                    <Col xs={10}>\n                                        <h4 className=\"card-title text-info\"><i className=\"uil uil-truck\"> </i> Datos de envio</h4>\n                                    </Col>\n                                    <Col xs={2} className=\"text-right\">\n                                        <HasPermissions permission={PERMISSIONS.ORDER_EDIT}>\n                                            {allowEdit && (\n                                                <Tooltip placement=\"bottom\" title=\"Editar envio\" aria-label=\"add\">\n                                                    <button type=\"button\"\n                                                            size=\"small\"\n                                                            className=\"btn btn-sm text-primary\"\n                                                            onClick={toggleDeliveryModal}>\n                                                        <i className=\"uil uil-pen font-size-18\"> </i>\n                                                    </button>\n                                                </Tooltip>\n                                            )}\n                                        </HasPermissions>\n                                        <HasPermissions permission={PERMISSIONS.ORDER_EDIT}>\n                                            {allowUpdateTracking && (\n                                                <Tooltip placement=\"bottom\" title=\"Asignar numero de Guia\" aria-label=\"add\">\n                                                    <button type=\"button\"\n                                                            size=\"small\"\n                                                            className=\"btn btn-sm text-primary\"\n                                                            onClick={toggleTrackingModal}>\n                                                        <i className=\"fa fa-motorcycle font-size-18\"> </i>\n                                                    </button>\n                                                </Tooltip>\n                                            )}\n                                        </HasPermissions>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col md={12}>\n                                        <label>Origen del pedido: </label>\n                                        <span className=\"p-1\">{orderData.origen}</span>\n                                    </Col>\n                                    <Col md={12}>\n                                        <label>Tipo de pedido: </label>\n                                        <span className=\"p-1\">{getDeliveryType(orderData?.orderDelivery?.deliveryType)}</span>\n                                    </Col>\n                                    <Col md={12}>\n                                        <label>Metodo de envio: </label>\n                                        <span className=\"p-1\">{orderData.deliveryMethod.name} {orderData?.orderDelivery?.deliveryOtherDescription && <small> ({orderData?.orderDelivery?.deliveryOtherDescription})</small>}</span>\n                                    </Col>\n                                    <Col md={12}>\n                                        <label>Costo del envio: </label>\n                                        <span className=\"p-1\">{orderData?.orderDelivery?.deliveryCost}</span>\n                                    </Col>\n                                    {DELIVERY_METHODS_PAYMENT_TYPES.includes(orderData.deliveryMethod.name) && (\n                                        <>\n                                            <Col md={12}>\n                                                <label>Forma de pago: </label>\n                                                <span className=\"p-1\">{getPaymentType()}</span>\n                                            </Col>\n                                            <Col md={12}>\n                                                <label>Prendas para cambio: </label>\n                                                <span className=\"p-1\">{orderData.piecesForChanges || 0}</span>\n                                            </Col>\n                                        </>\n                                    )}\n                                    {orderData.orderDelivery?.deliveryLocality?.name && (\n                                    <Col md={12}>\n                                        <label>Localidad: </label>\n                                        <span className=\"p-1\">{orderData.orderDelivery?.deliveryLocality?.name}</span>\n                                    </Col>\n                                    )}\n                                    {orderData.orderDelivery.tracking && (\n                                        <Col md={12}>\n                                            <label>Número de guía: </label>\n                                            <span className=\"p-1\">{orderData.orderDelivery?.tracking}</span>\n                                        </Col>\n                                    )}\n                                    {orderData.orderDelivery.tracking && (\n                                        <Col md={12}>\n                                            <label>Estado de Envio: </label>\n                                            <span className=\"p-1\">{orderData.orderDelivery?.deliveryStatus}</span>\n                                        </Col>\n                                    )}\n                                </Row>\n                            </Card>\n                        </Col>\n                    </Row>\n                </Col>\n                <Col md={showOrderOverlay ? 12 : 8}>\n                    <div id={\"products-summary\"} ref={productSummaryRef}>\n                        <Row>\n                            <Col md={12} className=\"mb-3\">\n                                <Card id={'products'} className=\"p-3\">\n                                    <Row className=\"mb-2\">\n                                        <Col xs={6}>\n                                            <h4 className=\"card-title text-info\"><i className=\"uil-box me-2\"> </i> Productos</h4>\n                                        </Col>\n                                        <Col xs={6} className=\"text-right\">\n                                            {!isMobile && (\n                                                <>\n                                                    <Tooltip placement=\"bottom\" title=\"Mostar como tabla\" aria-label=\"add\">\n                                                        <button type=\"button\"\n                                                                size=\"small\"\n                                                                className=\"btn btn-sm text-primary\"\n                                                                onClick={() => {\n                                                                    setShowAsTable(true);\n                                                                }}>\n                                                            <i className=\"fa fa-list font-size-18\"> </i>\n                                                        </button>\n                                                    </Tooltip>\n                                                    <Tooltip placement=\"bottom\" title=\"Mostrar como tarjetas\" aria-label=\"add\">\n                                                        <button type=\"button\"\n                                                                size=\"small\"\n                                                                className=\"btn btn-sm text-primary\"\n                                                                onClick={() => {\n                                                                    setShowAsTable(false);\n                                                                }}>\n                                                            <i className=\"fa fa-th font-size-18\"> </i>\n                                                        </button>\n                                                    </Tooltip>\n                                                </>\n                                            )}\n                                            <HasPermissions permission={PERMISSIONS.ORDER_EDIT}>\n                                                {allowEdit &&\n                                                    <Tooltip placement=\"bottom\" title=\"Editar productos\" aria-label=\"add\">\n                                                        <button type=\"button\"\n                                                                size=\"small\"\n                                                                className=\"btn btn-sm text-primary\"\n                                                                onClick={() => {\n                                                                    toggleProductsModal();\n                                                                }}>\n                                                            <i className=\"uil uil-pen font-size-18\"> </i>\n                                                        </button>\n                                                    </Tooltip>\n                                                }\n                                            </HasPermissions>\n                                        </Col>\n                                    </Row>\n                                    {!showAsTable && (\n                                        <Row>\n                                            {orderData.orderDetails && map(orderData.orderDetails, (product, k) => (\n                                                <div key={k} className=\"col-md-6 mb-2\">\n                                                    <div className=\"prod-box\">\n                                                        <Row>\n                                                            <Col xs={2} className=\"text-center\" style={{padding: '2px 0 2px 8px'}}>\n                                                                <div className={`border-1`} id={`product-${k}`} role=\"tabpanel\">\n                                                                    <Images src={`${getImageByQuality(product.product.productImage[0], 'medium')}`}\n                                                                            alt={\"\"}\n                                                                            height={80}\n                                                                            className=\"img-fluid d-block\"\n                                                                            styles={{height: '83px', width: '53px', borderRadius: '8px', 'margin-left': '4px'}}\n                                                                    />\n                                                                </div>\n                                                            </Col>\n                                                            <Col xs={5} className=\"p-1\">\n                                                                <Row>\n                                                                    <Col md={12}>\n                                                                        <HtmlTooltip\n                                                                            placement={'right-end'}\n                                                                            title={\n                                                                                <React.Fragment>\n                                                                                    <Images src={`${getImageByQuality(product.product.productImage.length > 0 ? product.product.productImage[0] : {}, 'medium')}`}\n                                                                                            alt={\"\"}\n                                                                                            height={120}\n                                                                                            className=\"img-fluid mx-auto d-block tab-img rounded\"/>\n                                                                                </React.Fragment>\n                                                                            }>\n                                                                            <b className=\"text-info\">{product.product.reference}</b>\n                                                                        </HtmlTooltip>\n                                                                    </Col>\n                                                                    <Col md={12}>\n                                                                        <Tooltip placement=\"bottom\" title={product?.color} aria-label=\"add\">\n                                                                            <small> {threeDots(product?.color, 22)}</small>\n                                                                        </Tooltip>\n                                                                    </Col>\n                                                                    <Col md={12}>\n                                                                        <small><span className=\"font-weight-600\">Cantidad:</span> {product.quantity}</small>\n                                                                    </Col>\n                                                                    <Col md={12}>\n                                                                        <small className=\"badge rounded-pill bg-soft-info\">Talla: {product.size}</small>\n                                                                    </Col>\n                                                                </Row>\n                                                            </Col>\n                                                            <Col xs={5} className=\"p-1\">\n                                                                <Row>\n                                                                    <Col md={12}>\n                                                                        <small><span className=\"font-weight-600\">Precio:</span> {priceFormat(product.price)}</small>\n                                                                    </Col>\n                                                                    <Col md={12}>\n                                                                        <small><span className=\"font-weight-600\">Desc.:</span> <span\n                                                                            className=\"text-danger\">-{priceFormat(product.discount)}</span></small>\n                                                                    </Col>\n                                                                    <Col md={12}>\n                                                                        <div className=\"font-weight-600 font-size-12\"><b>Total: {priceFormat(product.total)}</b></div>\n                                                                    </Col>\n                                                                </Row>\n                                                            </Col>\n                                                        </Row>\n                                                    </div>\n                                                </div>\n                                            ))}\n                                        </Row>\n                                    )}\n                                    {showAsTable && (\n                                        <Row>\n                                            <Col md={12}>\n                                                <table className=\"table table-sm table-striped table-bordered table-centered table-nowrap font-size-11\">\n                                                    <thead>\n                                                    <tr>\n                                                        <th className=\"text-center\">Código</th>\n                                                        <th className=\"text-center\">Color</th>\n                                                        <th className=\"text-center\">Talla</th>\n                                                        <th className=\"text-center\">Cantidad</th>\n                                                        <th className=\"text-center\">Precio Unit.</th>\n                                                        <th className=\"text-center\">% Desc.</th>\n                                                        <th className=\"text-center\">Total Desc.</th>\n                                                        <th className=\"text-center\">SubTotal</th>\n                                                    </tr>\n                                                    </thead>\n                                                    <tbody>\n                                                    {orderData && orderData.orderDetails && map(orderData.orderDetails, (product, key) => (\n                                                        <tr key={key}>\n                                                            <td style={{width: '10%'}}>\n                                                                <HtmlTooltip\n                                                                    title={\n                                                                        <React.Fragment>\n                                                                            <Images src={`${getImageByQuality(product.product.productImage.length > 0 ? product.product.productImage[0] : {}, 'medium')}`}\n                                                                                    alt={product.product.reference}\n                                                                                    height={100}\n                                                                                    className=\"img-fluid mx-auto d-block tab-img rounded\"/>\n                                                                        </React.Fragment>\n                                                                    }>\n                                                                    <div className=\"text-info\">{product.product.reference}</div>\n                                                                </HtmlTooltip>\n                                                            </td>\n                                                            <td style={{width: '25%'}} className=\"text-start\">{product?.color}</td>\n                                                            <td style={{width: '15%'}} className=\"text-center\">{product?.size}</td>\n                                                            <td style={{width: '10%'}} className=\"text-center\">{product?.quantity}</td>\n                                                            <td style={{width: '10%'}} className=\"text-end\">{priceFormat(product?.price)}</td>\n                                                            <td style={{width: '10%'}} className=\"text-center\">{product?.discountPercent || 0}%</td>\n                                                            <td style={{width: '10%'}} className=\"text-end\">{priceFormat(product?.discount)}</td>\n                                                            <td style={{width: '15%'}} className=\"text-end\">{priceFormat(product?.total)}</td>\n                                                        </tr>\n                                                    ))}\n                                                    </tbody>\n                                                </table>\n                                            </Col>\n                                        </Row>\n                                    )}\n                                </Card>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md={12}>\n                                <Card id={'summary-detail'} className=\"p-3\">\n                                    <Row>\n                                        <Row>\n                                            <Col md={8}>\n                                                <h4 className=\"card-title text-info\"><i className=\"uil uil-bill\"> </i> Totales </h4>\n                                            </Col>\n                                            <Col md={2}>\n                                                <div className=\"card-title text-right\"><span><Tooltip placement=\"bottom\" title=\"Prendas\" aria-label=\"add\">\n                                                    <i className=\"fa fa-shopping-bag text-warning\"></i>\n                                                </Tooltip></span> : {orderData.quantity}\n                                                </div>\n                                            </Col>\n                                            <Col md={2}>\n                                                <div className=\"card-title text-right\"><span><Tooltip placement=\"bottom\" title=\"Peso\" aria-label=\"add\">\n                                                    <i className=\"fa fa-weight text-info\"></i>\n                                                </Tooltip></span> : {priceFormat(orderData.totalWeight)}g\n                                                </div>\n                                            </Col>\n                                        </Row>\n                                        <Col md={12}>\n                                            <div className=\"table-responsive\">\n                                                <table className=\"table table-sm mb-0\">\n                                                    <tbody>\n                                                    <tr>\n                                                        <td>Total sin descuento:</td>\n                                                        <td className=\"text-end\">{priceFormat(orderData.subTotalAmount)}</td>\n                                                    </tr>\n                                                    <tr>\n                                                        <td>Descuento:</td>\n                                                        <td className=\"text-end text-danger\">- {priceFormat(orderData.totalDiscount)}</td>\n                                                    </tr>\n                                                    <tr>\n                                                        <td>Total con descuento:</td>\n                                                        <td className=\"text-end\">{priceFormat(orderData.totalWithDiscount)}</td>\n                                                    </tr>\n                                                    <tr>\n                                                        <td>Envio:</td>\n                                                        <td className=\"text-end\">{priceFormat(orderData.orderDelivery.deliveryCost)}</td>\n                                                    </tr>\n                                                    <tr className=\"bg-light\">\n                                                        <th className=\"font-size-16\">Total :</th>\n                                                        <td className=\"text-end\"><span className=\"fw-bold font-size-16\">{priceFormat(orderData.totalAmount)}</span></td>\n                                                    </tr>\n                                                    </tbody>\n                                                </table>\n                                            </div>\n                                        </Col>\n                                    </Row>\n                                </Card>\n                            </Col>\n                        </Row>\n                    </div>\n                </Col>\n            </Row>\n\n            <Row className=\"mb-3\">\n                <Col md={12}>\n                    <Card id={'order-tabs'} className=\"p-3\">\n                        <ul className=\"nav nav-tabs nav-tabs-custom nav-justified\" role=\"tablist\">\n                            <li className=\"nav-item\">\n                                <a className={`nav-link ${activeTab === 1 ? 'active' : ''}`} data-bs-toggle=\"tab\" href=\"#tab1\" role=\"tab\" aria-selected=\"false\" onClick={() => setActiveTab(1)}>\n                                    <span className=\"d-block d-sm-none\"><i className=\"fas fa-home\"> </i></span>\n                                    <span className=\"d-none d-sm-block\">Historial</span>\n                                </a>\n                            </li>\n                            <li className=\"nav-item\">\n                                <a className={`nav-link ${activeTab === 2 ? 'active' : ''}`} data-bs-toggle=\"tab\" href=\"#tab2\" role=\"tab\" aria-selected=\"false\" onClick={() => setActiveTab(2)}>\n                                    <span className=\"d-block d-sm-none\"><i className=\"far fa-user\"> </i></span>\n                                    <span className=\"d-none d-sm-block\">Observaciones del pedido</span>\n                                </a>\n                            </li>\n                            <li className=\"nav-item\">\n                                <a className={`nav-link ${activeTab === 3 ? 'active' : ''}`} data-bs-toggle=\"tab\" href=\"#tab2\" role=\"tab\" aria-selected=\"false\" onClick={() => setActiveTab(3)}>\n                                    <span className=\"d-block d-sm-none\"><i className=\"far fa-user\"> </i></span>\n                                    <span className=\"d-none d-sm-block\">Observaciones del cliente</span>\n                                </a>\n                            </li>\n                        </ul>\n                        <HasPermissions permission={PERMISSIONS.COMMENT_LIST}>\n                            <div className=\"tab-content p-3 text-muted\">\n                                <div className={`tab-pane ${activeTab === 1 ? 'active' : ''}`} id=\"tab1\" role=\"tabpanel\">\n                                    <p className=\"mb-0\">\n                                        <table className=\"table table-sm table-striped table-bordered table-centered table-nowrap\">\n                                            <thead>\n                                            <tr>\n                                                <th className=\"text-center\">Fecha</th>\n                                                <th className=\"text-center\">Usuario</th>\n                                                <th className=\"text-center\">Estado</th>\n                                            </tr>\n                                            </thead>\n                                            <tbody>\n                                            {(historic) ?\n                                                historic.map(item => <tr>\n                                                    <td>\n                                                        {formatDate(item.createdAt)}\n                                                    </td>\n                                                    <td>\n                                                        {item.user.name}\n                                                    </td>\n                                                    <td>\n                                                        <StatusField color={EVENT_STATUS[item.status]?.color} className={\"font-size-14 mr-5\"}>\n                                                            {EVENT_STATUS[item.status]?.name}\n                                                        </StatusField>\n                                                    </td>\n                                                </tr>)\n                                                : (\n                                                    <tr>\n                                                        <td colSpan={3}>\n                                                            No se encontraron datos.\n                                                        </td>\n                                                    </tr>\n                                                )}\n                                            </tbody>\n                                        </table>\n                                    </p>\n                                </div>\n                                <div className={`tab-pane ${activeTab === 2 ? 'active' : ''}`} id=\"tab2\" role=\"tabpanel\">\n                                    <Observations\n                                        entitySuggested={GROUPS.ORDER_OBSERVATIONS}\n                                        entity={COMMENT_ENTITIES.ORDER}\n                                        entityId={orderData.id}/>\n                                </div>\n                                <div className={`tab-pane ${activeTab === 3 ? 'active' : ''}`} id=\"tab2\" role=\"tabpanel\">\n                                    <Observations\n                                        entitySuggested={GROUPS.CUSTOMER_OBSERVATIONS}\n                                        entity={COMMENT_ENTITIES.CUSTOMER}\n                                        entityId={orderData.customer?.id}/>\n                                </div>\n                            </div>\n                        </HasPermissions>\n                    </Card>\n                </Col>\n            </Row>\n\n            <CustomModal title={\"Confirmar\"} showFooter={false} isOpen={isNextPrint() && openPrintConfirmModal} onClose={() => setOpenPrintConfirmModal(false)}>\n                <Row>\n                    <Col md={12}>\n                        ¿Logró imprimir el pedido?\n                    </Col>\n                </Row>\n                <hr/>\n                <Row>\n                    <Col md={12} className=\"text-right\">\n                        <button type=\"button\" className=\"btn btn-light\" onClick={() => setOpenPrintConfirmModal(false)}>NO</button>\n                        <Button color=\"primary\" type=\"button\" onClick={onConfirmPrintOrder}>SI</Button>\n                    </Col>\n                </Row>\n            </CustomModal>\n\n            <CustomModal title={\"Modificar cliente\"} size=\"lg\" showFooter={false} isOpen={openCustomerModal} onClose={onCloseModal}>\n                <OrderCustomer showAsModal={true}\n                               onCloseModal={onCloseModal}\n                               onAcceptModal={onAcceptModal}\n                />\n            </CustomModal>\n\n            <CustomModal title={\"Modificar número de guía\"} size=\"lg\" showFooter={false} isOpen={openTrackingModal} onClose={onCloseTrackingModal}>\n                <OrderTracking orderDelivery={orderData.orderDelivery}\n                                      showAsModal={true}\n                                      onCloseModal={onCloseTrackingModal}\n                                      onAcceptModal={onAcceptTrackingModal}\n                />\n            </CustomModal>\n\n            <CustomModal title={\"Modificar opciones de envio\"} size=\"lg\" showFooter={false} isOpen={openDeliveryModal} onClose={onCloseDeliveryModal}>\n                <OrderDeliveryOptions customer={orderData.customer}\n                                      showAsModal={true}\n                                      onCloseModal={onCloseDeliveryModal}\n                                      onAcceptModal={onAcceptDeliveryModal}\n                />\n            </CustomModal>\n\n            <CustomModal title={\"Modificar productos\"} size=\"lg\" showFooter={false} isOpen={openProductsModal} onClose={onCloseProductsModal}>\n                <Row>\n                    <Col md={12}>\n                        <OrderProducts/>\n                    </Col>\n                </Row>\n                <hr/>\n                <Row>\n                    <Col md={12}>\n                        <OrderCar showTotalAmount={true} />\n                    </Col>\n                </Row>\n                <hr/>\n                <Row>\n                    <Col md={12} className=\"text-right\">\n                        <button type=\"button\" className=\"btn btn-light\" onClick={onCloseProductsModal}>Cancelar</button>\n                        <Button color=\"primary\" type=\"button\" disabled={car.products.length <= 0} onClick={onAcceptProductsModal}>Guardar</Button>\n                    </Col>\n                </Row>\n            </CustomModal>\n\n        </div>\n    ) : <NoDataIndication/>;\n}\n\nconst mapStateToProps = state => {\n    const {products} = state.Product;\n    const {error, car, order, loading, custom, refresh, historic, linkPayment} = state.Order;\n    const print = custom.data && custom.data.print ? custom.data.print : null;\n    const resume = custom.data && custom.data.resume ? custom.data.resume : null;\n    return {error, car, order, products, print, resume, loading, refresh, historic, linkPayment}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onChangePreloader: (preloader) => dispatch(changePreloader(preloader)),\n    onGetOrder: (id) => dispatch(getOrder(id)),\n    onUpdateOrder: (id, payload) => dispatch(updateOrder(id, payload)),\n    onUpdateInventary: (id, payload) => dispatch(updateOrderProducts(id, payload)),\n    onDownloadPhoto: (id) => dispatch(increasePhotoCounter(id)),\n    onUpdateCar: (data) => dispatch(updateCard(data)),\n    onGetProducts: (ids = []) => dispatch(getProductsByIds(ids)),\n    onNextStatusOrder: (id = []) => dispatch(nextStatusOrder({order: id})),\n    onCanceledStatusOrder: (id = []) => dispatch(canceledStatusOrder({order: id})),\n    onResumeOrder: (id = []) => dispatch(resumeOrder(id)),\n    onPrintOrder: (id = []) => dispatch(printOrder(id)),\n    onGetHistoric: (id) => dispatch(historicOrder(id)),\n    onGenerateLinkPayment: (id = []) => dispatch(generateLinkPayment(id)),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(OrderEdit)\n)\n\nOrderEdit.propTypes = {\n    orderId: PropTypes.number.isRequired,\n    showOrderOverlay: PropTypes.bool,\n    onCloseOverlay: PropTypes.func,\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n","/Users/ramon/Repositories/lucy-moie/src/pages/Category/list/categoryList.js",["1648","1649","1650","1651"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from \"prop-types\"\nimport {connect} from \"react-redux\"\nimport {Card, CardBody, Col, Row} from \"reactstrap\"\nimport paginationFactory, {PaginationListStandalone, PaginationProvider,} from \"react-bootstrap-table2-paginator\"\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\"\nimport BootstrapTable from \"react-bootstrap-table-next\"\n\nimport {Link} from \"react-router-dom\"\nimport {Button, Tooltip} from \"@material-ui/core\";\nimport {DEFAULT_PAGE_LIMIT} from \"../../../common/pagination\";\nimport {ConfirmationModalAction} from \"../../../components/Modal/ConfirmationModal\";\nimport {TableFilter} from \"../../../components/TableFilter\";\nimport {normalizeColumnsList} from \"../../../common/converters\";\nimport {doCatalogPrintBatchRequest, getCategories} from \"../../../store/category/actions\";\nimport categoryColumns from \"./categoryColumn\";\nimport Conditionals from \"../../../common/conditionals\";\nimport NoDataIndication from \"../../../components/Common/NoDataIndication\";\nimport {getCatalogBatchRequest} from \"../../../helpers/service\";\nimport {formatDate} from \"../../../common/utils\";\nimport {resetProduct} from \"../../../store/product/actions\";\nimport authHeader from \"../../../helpers/jwt-token-access/auth-token-header\";\nimport {PERMISSIONS} from \"../../../helpers/security_rol\";\nimport HasPermissions from \"../../../components/HasPermissions\";\nimport {showMessage} from \"../../../components/MessageToast/ShowToastMessages\";\nimport {syncCatalog} from \"../../../helpers/backend_helper\";\n\nconst CategoryList = props => {\n    const {categories, onGetCategories, onResetCategories, onDeleteState, getCatalogBatchRequest, onCatalogPrintBatchRequest, refresh, meta} = props;\n    const [categoriesList, setCategoriesList] = useState([])\n    const [filter, setFilter] = useState(false);\n    const [conditional, setConditional] = useState(null);\n    const [currentPage, setCurrentPage] = useState(null);\n    const [printCategoriesId, setPrintCategoriesId] = useState([]);\n    const [catalogs, setCatalogs] = useState([]);\n    const [selectAll, setSelectAll] = useState(false);\n    const [defaultPage, setDefaultPage] = useState(1);\n    const [syncing, setSyncing] = useState(false);\n\n    const pageOptions = {\n        sizePerPage: DEFAULT_PAGE_LIMIT,\n        totalSize: meta?.totalRegisters || 0,\n        custom: true,\n        page: defaultPage,\n        onPageChange: (page, sizePerPage) => {\n            setDefaultPage(page);\n        },\n    }\n\n    useEffect(() => {\n        onResetCategories();\n        if(!conditional){\n            onGetCategories();\n        } else {\n            if (currentPage) onGetCategories(conditional, DEFAULT_PAGE_LIMIT, currentPage * DEFAULT_PAGE_LIMIT);\n        }\n        onGetCatalogBatchRequest();\n    }, [refresh, onGetCategories])\n\n    useEffect(() => {\n        setCategoriesList(categories)\n    }, [categories])\n\n    const handleTableChange = (type, {page}) => {\n        let p = page - 1;\n        setCurrentPage(p);\n        onGetCategories(conditional, DEFAULT_PAGE_LIMIT, p * DEFAULT_PAGE_LIMIT);\n    }\n\n    const onFilterAction = (condition) => {\n        setConditional(condition);\n        onGetCategories(condition, DEFAULT_PAGE_LIMIT, 0);\n        setDefaultPage(1);\n    }\n    const onConfirmDelete = (id) => {\n        onDeleteState(id);\n    };\n    const onGetCatalogBatchRequest = () => {\n        getCatalogBatchRequest().then(resp => {\n            if(resp && resp.data && resp.data.length > 0){\n                let arr = [...resp.data];\n                arr = arr.sort((a, b) => a.id === b.id ? 0 : (a.id > b.id) ? -1 : 1);\n                if(arr.length > 4){\n                    arr.splice(4);\n                }\n                setCatalogs(arr);\n            }\n        });\n    };\n\n    const onDelete = (id) => {\n        ConfirmationModalAction({\n            title: '¿Seguro desea eliminar el Estado?',\n            description: 'Usted está eliminado este Estado, una vez eliminado no podrá ser recuperado.',\n            id: '_clienteModal',\n            onConfirm: () => onConfirmDelete(id)\n        });\n    };\n\n    const syncCatalogs = async () => {\n        setSyncing(true);\n        const response = await syncCatalog();\n        showMessage.success('Solicitud procesada, favor espere unos minutos');\n        setSyncing(false);\n    }\n\n    const printCatalogs= (hasReferences) => {\n        let conditionals = conditional || [];\n\n        if(hasReferences){\n            conditionals.push({field:'references', value: '', operator: Conditionals.OPERATORS.TRUE});\n        }\n\n        if(printCategoriesId && printCategoriesId.length === 1){\n            conditionals.push({field:'category', value:printCategoriesId[0], operator: Conditionals.OPERATORS.EQUAL});\n        }\n        if(printCategoriesId && printCategoriesId.length > 1){\n            conditionals.push({field:'category', value:printCategoriesId.join('::'), operator: Conditionals.OPERATORS.IN});\n        }\n        onCatalogPrintBatchRequest(conditionals);\n    }\n\n    const columns = categoryColumns(onDelete);\n\n    var selectRowProp = {\n        mode: \"checkbox\",\n        clickToSelect: true,\n        onSelect: (row, selected, b) => {\n            let list = [...printCategoriesId]\n            const index = list.indexOf(row.id);\n            if (index >= 0) {\n                list.splice(index, 1);\n            } else {\n                list.push(row.id);\n            }\n            setPrintCategoriesId(list);\n        },\n        onSelectAll: (selected) => {\n            setPrintCategoriesId([]);\n            setSelectAll(selected);\n        }\n    };\n\n    const onOpenCatalog = (catalog) => {\n            // Change this to use your HTTP client\n            const headers = authHeader();\n            fetch(process.env.REACT_APP_BASE_SERVICE + catalog.body.url, {headers: headers}) // FETCH BLOB FROM IT\n                .then((response) => response.status == 200 && response.blob())\n                .then((blob) => { // RETRIEVE THE BLOB AND CREATE LOCAL URL\n                    var _url = window.URL.createObjectURL(blob);\n                    window.open(_url, \"_blank\").focus(); // window.open + focus\n                }).catch((err) => {\n                showMessage.error(\"Preparando fichero, espere un momento\");\n            });\n    }\n\n    return (\n        <>\n            {!!(catalogs && catalogs.length > 0) && (\n                <Row className=\"text-center\">\n                    {catalogs.map((catalog, k) => (\n                        <Col sm={6} md={3} key={k}>\n                            <Card>\n                                <CardBody>\n                                    <Row>\n                                        <Col xs={8}>\n                                            <h6 className=\"mb-1 mt-2\"> Catálogo { catalog.type === 3 ? 'Ref' : ''}</h6>\n                                            <p className=\"badge bg-info\">{catalog.body.name}</p>\n                                            <div className=\"text-muted mb-0 mt-1\">\n                                                <small>{formatDate(catalog.createdAt)}</small>\n                                            </div>\n                                        </Col>\n                                        <Col xs={4}>\n                                            <Tooltip placement=\"bottom\" title=\"Descargar Catálogo\" aria-label=\"add\">\n                                                <Button color=\"primary\" onClick={() => onOpenCatalog(catalog)}>\n                                                    <i className=\"mdi mdi-download font-size-24\"> </i>\n                                                </Button>\n                                            </Tooltip>\n                                        </Col>\n                                    </Row>\n                                </CardBody>\n                            </Card>\n                        </Col>\n                    ))}\n\n                </Row>\n            )}\n            <Row>\n                <TableFilter\n                    onPressDisabled={() => setFilter(false)}\n                    isActive={filter}\n                    fields={columns}\n                    onSubmit={onFilterAction.bind(this)}/>\n\n                <Col lg={filter ? \"8\" : \"12\"}>\n                    <Card>\n                        <CardBody>\n                            <PaginationProvider pagination={paginationFactory(pageOptions)}>\n                                {({paginationProps, paginationTableProps}) => (\n                                    <ToolkitProvider\n                                        keyField=\"id\"\n                                        data={categoriesList || []}\n                                        columns={normalizeColumnsList(columns)}\n                                        bootstrap4\n                                        search\n                                    >\n                                        {toolkitProps => (\n                                            <React.Fragment>\n                                                <Row className=\"row mb-2\">\n                                                    <Col md={6}>\n                                                        <div className=\"form-inline mb-3\">\n                                                        <div className=\"search-box ms-2\">\n                                                            <h4 className=\"text-info\"><i className=\"uil-box me-2 me-2\"></i> Categorias</h4>\n                                                        </div>\n                                                    </div>\n                                                    </Col>\n                                                    <Col md={6}>\n                                                        <div className=\"mb-3 float-md-end\">\n                                                            {columns.some(s => s.filter) && (\n                                                                <Tooltip placement=\"bottom\" title=\"Filtros Avanzados\" aria-label=\"add\" >\n                                                                    <Button onClick={() => setFilter(!filter)}>\n                                                                        <i className={\"mdi mdi-filter\"}> </i>\n                                                                    </Button>\n                                                                </Tooltip>\n                                                            )}\n                                                            <HasPermissions permission={PERMISSIONS.CATEGORY_DOWNLOAD}>\n                                                                <Tooltip placement=\"bottom\" title=\"Descargar Catalogo\" aria-label=\"add\">\n                                                                    <Button color=\"primary\" onClick={() => printCatalogs(false)}\n                                                                            disabled={(printCategoriesId.length === 0 && !selectAll) && (!conditional || conditional.length === 0)}>\n                                                                        <i className=\"mdi mdi-download\"> </i>\n                                                                    </Button>\n                                                                </Tooltip>\n                                                            </HasPermissions>\n                                                            <HasPermissions permission={PERMISSIONS.CATEGORY_DOWNLOAD}>\n                                                                <Tooltip placement=\"bottom\" title=\"Descargar Catalogo con Referencias\" aria-label=\"add\">\n                                                                    <Button color=\"primary\" onClick={() => printCatalogs(true)}\n                                                                            disabled={(printCategoriesId.length === 0 && !selectAll) && (!conditional || conditional.length === 0)}>\n                                                                        <i className=\"mdi mdi-download-circle\"> </i>\n                                                                    </Button>\n                                                                </Tooltip>\n                                                            </HasPermissions>\n                                                            <HasPermissions permission={PERMISSIONS.CATALOG_SYNC}>\n                                                                <Tooltip placement=\"bottom\" title=\"Sincronizar Catalogo\" aria-label=\"add\">\n                                                                    <Button color=\"primary\" onClick={() => syncCatalogs()}>\n                                                                        <i className=\"mdi mdi-sync-circle\"></i>\n                                                                    </Button>\n                                                                </Tooltip>\n                                                            </HasPermissions>\n                                                            <HasPermissions permission={PERMISSIONS.CATEGORY_CREATE}>\n                                                                <Link to={\"/category\"} className=\"btn btn-primary waves-effect waves-light text-light\">\n                                                                    <i className=\"mdi mdi-plus\"> </i> Nueva Categoria\n                                                                </Link>\n                                                            </HasPermissions>\n                                                        </div>\n                                                    </Col>\n\n                                                </Row>\n                                                <Row>\n                                                    <Col xl=\"12\">\n                                                        <div className=\"table-responsive mb-4\">\n                                                            <BootstrapTable\n                                                                selectRow={selectRowProp}\n                                                                remote\n                                                                responsive\n                                                                loading={true}\n                                                                bordered={false}\n                                                                striped={true}\n                                                                classes={\"table table-centered table-nowrap mb-0\"}\n                                                                noDataIndication={() => <NoDataIndication/>}\n                                                                {...toolkitProps.baseProps}\n                                                                onTableChange={handleTableChange}\n                                                                {...paginationTableProps}\n                                                            />\n                                                        </div>\n                                                    </Col>\n                                                </Row>\n                                                <div className=\"float-sm-start\">\n                                                    <PaginationListStandalone {...paginationProps} />\n                                                </div>\n                                            </React.Fragment>\n                                        )}\n                                    </ToolkitProvider>\n                                )}\n                            </PaginationProvider>\n                        </CardBody>\n                    </Card>\n                </Col>\n            </Row>\n        </>\n\n    )\n}\n\nCategoryList.propTypes = {\n    categories: PropTypes.array,\n    onGetCategories: PropTypes.func,\n}\n\nconst mapStateToProps = state => {\n    const {categories, loading, meta, refresh} = state.Category\n    return {categories, loading, meta, refresh}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onResetCategories: () => {\n        dispatch(resetProduct());\n    },\n    onGetCategories: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getCategories(conditional, limit, page)),\n    onCatalogPrintBatchRequest: (conditional, catalog ) => dispatch(doCatalogPrintBatchRequest(conditional, catalog)),\n    getCatalogBatchRequest,\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(CategoryList)\n","/Users/ramon/Repositories/lucy-moie/src/pages/Municipality/list/municipalityList.js",["1652","1653","1654","1655","1656"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from \"prop-types\"\nimport {connect} from \"react-redux\"\nimport {Card, CardBody, Col, Row} from \"reactstrap\"\nimport paginationFactory, {PaginationListStandalone, PaginationProvider,} from \"react-bootstrap-table2-paginator\"\nimport ToolkitProvider, {Search} from \"react-bootstrap-table2-toolkit\"\nimport BootstrapTable from \"react-bootstrap-table-next\"\n\nimport {Link} from \"react-router-dom\"\nimport {Button, Tooltip} from \"@material-ui/core\";\nimport {DEFAULT_PAGE_LIMIT} from \"../../../common/pagination\";\nimport {ConfirmationModalAction} from \"../../../components/Modal/ConfirmationModal\";\nimport {deleteMunicipality, getMunicipalities, getStates, resetLocation} from \"../../../store/location/actions\";\nimport {TableFilter} from \"../../../components/TableFilter\";\nimport municipalityColumns from \"./municipalityColumns\";\nimport {normalizeColumnsList} from \"../../../common/converters\";\nimport NoDataIndication from \"../../../components/Common/NoDataIndication\";\nimport {PERMISSIONS} from \"../../../helpers/security_rol\";\nimport NoAccess from \"../../../components/Common/NoAccess\";\nimport HasPermissions from \"../../../components/HasPermissions\";\n\nconst MunicipalityList = props => {\n    const {states, municipalities, meta, getStates, onGetMunicipalities, onResetLocation, onDeleteMunicipality, loading, refresh} = props;\n    const [municipalityList, setMunicipalityList] = useState([])\n    const [filter, setFilter] = useState(false);\n    const [conditional, setConditional] = useState(null);\n    const [defaultPage, setDefaultPage] = useState(1);\n\n    const pageOptions = {\n        sizePerPage: DEFAULT_PAGE_LIMIT,\n        //totalSize: meta?.totalRegisters, // replace later with size(users),\n        custom: true,\n        page: defaultPage,\n        onPageChange: (page, sizePerPage) => {\n            setDefaultPage(page);\n        },\n    }\n    const {SearchBar} = Search\n\n    useEffect(() => {\n        if(refresh === null) {\n            onResetLocation();\n            getStates();\n        }\n        onGetMunicipalities();\n    }, [refresh, onGetMunicipalities])\n\n    useEffect(() => {\n        setMunicipalityList(municipalities.map(m => {\n            m.state = m.state.name;\n            return m;\n        }))\n    }, [municipalities])\n\n    const handleTableChange = (type, {page}) => {\n        onGetMunicipalities(conditional, DEFAULT_PAGE_LIMIT, (page - 1) * DEFAULT_PAGE_LIMIT);\n    }\n\n    const onFilterAction = (condition) => {\n        setConditional(condition);\n        onGetMunicipalities(condition, DEFAULT_PAGE_LIMIT, 0);\n        setDefaultPage(1);\n    }\n    const onConfirmDelete = (id) => {\n        onDeleteMunicipality(id);\n    };\n\n    const onDelete = (id) => {\n        ConfirmationModalAction({\n            title: '¿Seguro desea eliminar el Municipio?',\n            description: 'Usted está eliminado este Municipio, una vez eliminado no podrá ser recuperado.',\n            id: '_clienteModal',\n            onConfirm: () => onConfirmDelete(id)\n        });\n    };\n    const columns = municipalityColumns(onDelete);\n\n    return (\n        <Row>\n            <TableFilter\n                onPressDisabled={() => setFilter(false)}\n                isActive={filter}\n                fields={columns}\n                onSubmit={onFilterAction.bind(this)}/>\n\n            <Col lg={filter ? \"8\" : \"12\"}>\n                <Card>\n                    <CardBody>\n                        <PaginationProvider pagination={paginationFactory(pageOptions)}>\n                            {({paginationProps, paginationTableProps}) => (\n                                <ToolkitProvider\n                                    keyField=\"id\"\n                                    data={municipalityList || []}\n                                    columns={normalizeColumnsList(columns)}\n                                    bootstrap4\n                                    search\n                                >\n                                    {toolkitProps => (\n                                        <React.Fragment>\n                                            <Row className=\"row mb-2\">\n                                                <Col md={6}>\n                                                    <div className=\"form-inline mb-3\">\n                                                        <div className=\"search-box ms-2\">\n                                                            <h4 className=\"text-info\"><i className=\"uil-shopping-cart-alt me-2\"></i> Municipios</h4>\n                                                            {/*{!filter && (\n                                                                <div className=\"position-relative\">\n                                                                    <SearchBar {...toolkitProps.searchProps}/>\n                                                                    <i className=\"mdi mdi-magnify search-icon\"> </i>\n                                                                </div>\n                                                            )}*/}\n                                                        </div>\n                                                    </div>\n                                                </Col>\n                                                <Col md={6}>\n                                                    <div className=\"mb-3 float-md-end\">\n                                                        {columns.some(s => s.filter) && (\n                                                            <Tooltip placement=\"bottom\" title=\"Filtros Avanzados\" aria-label=\"add\">\n                                                                <Button onClick={() => setFilter(!filter)}>\n                                                                    <i className={\"mdi mdi-filter\"}> </i>\n                                                                </Button>\n                                                            </Tooltip>\n                                                        )}\n                                                        <HasPermissions permissions={[PERMISSIONS.LOCALITY_CREATE]} renderNoAccess={() => <NoAccess/>}>\n                                                            <Link to={\"/municipality\"} className=\"btn btn-primary waves-effect waves-light text-light\">\n                                                                <i className=\"mdi mdi-plus\"> </i> Nuevo Municipio\n                                                            </Link>\n                                                        </HasPermissions>\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col xl=\"12\">\n                                                    <div className=\"table-responsive mb-4\">\n                                                        <BootstrapTable\n                                                            remote\n                                                            responsive\n                                                            loading={true}\n                                                            bordered={false}\n                                                            striped={true}\n                                                            classes={\"table table-centered table-nowrap mb-0\"}\n                                                            noDataIndication={() => <NoDataIndication/>}\n                                                            {...toolkitProps.baseProps}\n                                                            onTableChange={handleTableChange}\n                                                            {...paginationTableProps}\n                                                        />\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <div className=\"float-sm-start\">\n                                                <PaginationListStandalone {...paginationProps} />\n                                            </div>\n                                        </React.Fragment>\n                                    )}\n                                </ToolkitProvider>\n                            )}\n                        </PaginationProvider>\n                    </CardBody>\n                </Card>\n            </Col>\n        </Row>\n    )\n}\n\nMunicipalityList.propTypes = {\n    states: PropTypes.array,\n    onGetMunicipalities: PropTypes.func,\n    onDeleteMunicipality: PropTypes.func,\n}\n\nconst mapStateToProps = state => {\n    const {states, municipalities, loading, meta, refresh} = state.Location\n    return {states, municipalities, loading, meta, refresh}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    getStates,\n    onResetLocation: () => {\n        dispatch(resetLocation());\n    },\n    onGetMunicipalities: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getMunicipalities(conditional, limit, page)),\n    onDeleteMunicipality: (id) => dispatch(deleteMunicipality(id))\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(MunicipalityList)\n","/Users/ramon/Repositories/lucy-moie/src/pages/User/list/userList.js",["1657"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from \"prop-types\"\nimport {connect} from \"react-redux\"\nimport {Card, CardBody, Col, Row} from \"reactstrap\"\nimport paginationFactory, {PaginationListStandalone, PaginationProvider,} from \"react-bootstrap-table2-paginator\"\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\"\nimport BootstrapTable from \"react-bootstrap-table-next\"\n\nimport {Link} from \"react-router-dom\"\nimport {Button, Tooltip} from \"@material-ui/core\";\nimport {DEFAULT_PAGE_LIMIT} from \"../../../common/pagination\";\nimport {TableFilter} from \"../../../components/TableFilter\";\nimport {normalizeColumnsList} from \"../../../common/converters\";\nimport {getUsers, resetUser, setUserToChangePassword} from \"../../../store/user/actions\";\nimport userColumns from \"./userColumn\";\nimport NoDataIndication from \"../../../components/Common/NoDataIndication\";\nimport ForgetPassword from \"./forgetPassword\";\nimport {PERMISSIONS} from \"../../../helpers/security_rol\";\nimport HasPermissions from \"../../../components/HasPermissions\";\n\nconst UserList = props => {\n    const {users, meta, onGetUsers, onResetUsers, onSelectUser, refresh} = props;\n    const [usersList, setCategoriesList] = useState([])\n    const [filter, setFilter] = useState(false);\n    const [conditional, setConditional] = useState(null);\n    const [defaultPage, setDefaultPage] = useState(1);\n\n\n    const pageOptions = {\n        sizePerPage: DEFAULT_PAGE_LIMIT,\n        totalSize: meta?.totalRegisters, // replace later with size(users),\n        custom: true,\n        page: defaultPage,\n        onPageChange: (page, sizePerPage) => {\n            setDefaultPage(page);\n        },\n    }\n    // const {SearchBar} = Search\n\n    useEffect(() => {\n        if(refresh === null){\n            onResetUsers();\n        }\n        onGetUsers();\n    }, [refresh, onGetUsers])\n\n    useEffect(() => {\n        setCategoriesList(users)\n    }, [users])\n\n    const handleTableChange = (type, {page}) => {\n        onGetUsers(conditional, DEFAULT_PAGE_LIMIT, (page - 1) * DEFAULT_PAGE_LIMIT);\n    }\n\n    const onFilterAction = (condition) => {\n        setConditional(condition);\n        onGetUsers(condition, DEFAULT_PAGE_LIMIT, 0);\n        setDefaultPage(1);\n    }\n\n    const columns = userColumns(onSelectUser);\n\n    return (\n        <>\n            <Row>\n                <TableFilter\n                    onPressDisabled={() => setFilter(false)}\n                    isActive={filter}\n                    fields={columns}\n                    onSubmit={onFilterAction.bind(this)}/>\n\n                <Col lg={filter ? \"8\" : \"12\"}>\n                    <Card>\n                        <CardBody>\n                            <PaginationProvider pagination={paginationFactory(pageOptions)}>\n                                {({paginationProps, paginationTableProps}) => (\n                                    <ToolkitProvider\n                                        keyField=\"id\"\n                                        data={usersList || []}\n                                        columns={normalizeColumnsList(columns)}\n                                        bootstrap4\n                                        search\n                                    >\n                                        {toolkitProps => (\n                                            <React.Fragment>\n                                                <Row className=\"row mb-2\">\n                                                    <Col md={6}>\n                                                        <div className=\"form-inline mb-3\">\n                                                        <div className=\"search-box ms-2\">\n                                                            <h4 className=\"text-info\"><i className=\"uil-users-alt me-2\"></i> Usuarios</h4>\n                                                        </div>\n                                                    </div>\n                                                    </Col>\n                                                    <Col md={6}>\n                                                        <div className=\"mb-3 float-md-end\">\n                                                            {columns.some(s => s.filter) && (\n                                                                <Tooltip placement=\"bottom\" title=\"Filtros Avanzados\" aria-label=\"add\">\n                                                                    <Button onClick={() => setFilter(!filter)}>\n                                                                        <i className={\"mdi mdi-filter\"}> </i>\n                                                                    </Button>\n                                                                </Tooltip>\n                                                            )}\n                                                            <HasPermissions permissions={[PERMISSIONS.USER_CREATE]}>\n                                                                <Link to={\"/user\"} className=\"btn btn-primary waves-effect waves-light text-light\">\n                                                                    <i className=\"mdi mdi-plus\"> </i> Nuevo usuario\n                                                                </Link>\n                                                            </HasPermissions>\n                                                        </div>\n                                                    </Col>\n                                                </Row>\n                                                <Row>\n                                                    <Col xl=\"12\">\n                                                        <div className=\"table-responsive mb-4\">\n                                                            <BootstrapTable\n                                                                remote\n                                                                responsive\n                                                                loading={true}\n                                                                bordered={false}\n                                                                striped={true}\n                                                                classes={\"table table-centered table-nowrap mb-0\"}\n                                                                noDataIndication={() => <NoDataIndication/>}\n                                                                {...toolkitProps.baseProps}\n                                                                onTableChange={handleTableChange}\n                                                                {...paginationTableProps}\n                                                            />\n                                                        </div>\n                                                    </Col>\n                                                </Row>\n                                                <div className=\"float-sm-start\">\n                                                    <PaginationListStandalone {...paginationProps} />\n                                                </div>\n                                            </React.Fragment>\n                                        )}\n                                    </ToolkitProvider>\n                                )}\n                            </PaginationProvider>\n                        </CardBody>\n                    </Card>\n                </Col>\n            </Row>\n            <ForgetPassword/>\n        </>\n    )\n}\n\nUserList.propTypes = {\n    users: PropTypes.array,\n    onGetUsers: PropTypes.func,\n}\n\nconst mapStateToProps = state => {\n    const {users, loading, meta, refresh} = state.User\n    return {users, loading, meta, refresh}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onResetUsers: () => {\n        dispatch(resetUser());\n    },\n    onGetUsers: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getUsers(conditional, limit, page)),\n    onSelectUser: (user) => dispatch(setUserToChangePassword(user)),\n    // onDeleteStates: (id) => dispatch(deleteState(id))\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(UserList)\n","/Users/ramon/Repositories/lucy-moie/src/pages/State/list/statesList.js",["1658","1659","1660"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from \"prop-types\"\nimport {connect} from \"react-redux\"\nimport {Card, CardBody, Col, Row} from \"reactstrap\"\nimport paginationFactory, {PaginationListStandalone, PaginationProvider,} from \"react-bootstrap-table2-paginator\"\nimport ToolkitProvider, {Search} from \"react-bootstrap-table2-toolkit\"\nimport BootstrapTable from \"react-bootstrap-table-next\"\n\nimport {Link} from \"react-router-dom\"\nimport {Button, Tooltip} from \"@material-ui/core\";\nimport {DEFAULT_PAGE_LIMIT} from \"../../../common/pagination\";\nimport {ConfirmationModalAction} from \"../../../components/Modal/ConfirmationModal\";\nimport {deleteState, getStates, resetLocation} from \"../../../store/location/actions\";\nimport statesColumns from \"./statesColumn\";\nimport {TableFilter} from \"../../../components/TableFilter\";\nimport {normalizeColumnsList} from \"../../../common/converters\";\nimport NoDataIndication from \"../../../components/Common/NoDataIndication\";\nimport HasPermissions from \"../../../components/HasPermissions\";\nimport {PERMISSIONS} from \"../../../helpers/security_rol\";\nimport NoAccess from \"../../../components/Common/NoAccess\";\n\nconst StatesList = props => {\n    const {states, meta, onGetStates, onDeleteState, onResetLocation, loading, refresh} = props;\n    const [statesList, setStatesList] = useState([])\n    const [filter, setFilter] = useState(false);\n    const [conditional, setConditional] = useState(null);\n    const [defaultPage, setDefaultPage] = useState(1);\n\n    const pageOptions = {\n        sizePerPage: DEFAULT_PAGE_LIMIT,\n        totalSize: meta?.totalRegisters,\n        custom: true,\n        page: defaultPage,\n        onPageChange: (page, sizePerPage) => {\n            setDefaultPage(page);\n        },\n    }\n    const {SearchBar} = Search\n\n    useEffect(() => {\n        if(refresh === null) {\n            onResetLocation();\n        }\n        onGetStates();\n    }, [refresh, onGetStates])\n\n    useEffect(() => {\n        setStatesList(states)\n    }, [states])\n\n    // eslint-disable-next-line no-unused-vars\n    const handleTableChange = (type, {page, searchText}) => {\n        onGetStates(conditional, DEFAULT_PAGE_LIMIT, (page - 1)*DEFAULT_PAGE_LIMIT);\n    }\n\n    const onFilterAction = (condition) => {\n        setConditional(condition);\n        onGetStates(condition, DEFAULT_PAGE_LIMIT, 0);\n        setDefaultPage(1);\n    }\n    const onConfirmDelete = (id) => {\n        onDeleteState(id);\n    };\n\n    const onDelete = (id) => {\n        ConfirmationModalAction({\n            title: '¿Seguro desea eliminar el Estado?',\n            description: 'Usted está eliminado este Estado, una vez eliminado no podrá ser recuperado.',\n            id: '_clienteModal',\n            onConfirm: () => onConfirmDelete(id)\n        });\n    };\n\n    const columns = statesColumns(onDelete);\n\n    return (\n        <Row>\n            <TableFilter\n                onPressDisabled={() => setFilter(false)}\n                isActive={filter}\n                fields={columns}\n                onSubmit={onFilterAction.bind(this)}/>\n\n            <Col lg={filter ? \"8\" : \"12\"}>\n                <Card>\n                    <CardBody>\n                        <PaginationProvider pagination={paginationFactory(pageOptions)}>\n                            {({paginationProps, paginationTableProps}) => (\n                                <ToolkitProvider\n                                    keyField=\"id\"\n                                    data={statesList || []}\n                                    columns={normalizeColumnsList(columns)}\n                                    bootstrap4\n                                    search\n                                >\n                                    {toolkitProps => (\n                                        <React.Fragment>\n                                            <Row className=\"row mb-2\">\n                                                <Col md={6}>\n                                                    <div className=\"form-inline mb-3\">\n                                                        <div className=\"search-box ms-2\">\n                                                            <h4 className=\"text-info\"><i className=\"uil-shopping-cart-alt me-2\"></i> Estados</h4>\n                                                            {/*{!filter && (\n                                                                <div className=\"position-relative\">\n                                                                    <SearchBar {...toolkitProps.searchProps}/>\n                                                                    <i className=\"mdi mdi-magnify search-icon\"> </i>\n                                                                </div>\n                                                            )}*/}\n                                                        </div>\n                                                    </div>\n                                                </Col>\n                                                <Col md={6}>\n                                                    <div className=\"mb-3 float-md-end\">\n                                                        {columns.some(s => s.filter) && (\n                                                            <Tooltip placement=\"bottom\" title=\"Filtros Avanzados\" aria-label=\"add\">\n                                                                <Button onClick={() => setFilter(!filter)}>\n                                                                    <i className={\"mdi mdi-filter\"}></i>\n                                                                </Button>\n                                                            </Tooltip>\n                                                        )}\n                                                        <HasPermissions permissions={[PERMISSIONS.LOCALITY_CREATE]} renderNoAccess={() => <NoAccess/>}>\n                                                            <Link to={\"/state\"} className=\"btn btn-primary waves-effect waves-light text-light\">\n                                                                <i className=\"mdi mdi-plus\"></i> Nuevo Estado\n                                                            </Link>\n                                                        </HasPermissions>\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col xl=\"12\">\n                                                    <div className=\"table-responsive mb-4\">\n                                                        <BootstrapTable\n                                                            remote\n                                                            responsive\n                                                            loading={true}\n                                                            bordered={false}\n                                                            striped={true}\n                                                            classes={\n                                                                \"table table-centered table-nowrap mb-0\"\n                                                            }\n                                                            noDataIndication={() => <NoDataIndication/>}\n                                                            {...toolkitProps.baseProps}\n                                                            onTableChange={handleTableChange}\n                                                            {...paginationTableProps}\n                                                        />\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <div className=\"float-sm-start\">\n                                                <PaginationListStandalone {...paginationProps} />\n                                            </div>\n                                        </React.Fragment>\n                                    )}\n                                </ToolkitProvider>\n                            )}\n                        </PaginationProvider>\n                    </CardBody>\n                </Card>\n            </Col>\n        </Row>\n    )\n}\n\nStatesList.propTypes = {\n    states: PropTypes.array,\n    onGetStates: PropTypes.func,\n    onDeleteStates: PropTypes.func,\n}\n\nconst mapStateToProps = state => {\n    const {states, loading, meta, refresh} = state.Location\n    return {states, loading, meta, refresh}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onResetLocation: () => {\n        dispatch(resetLocation());\n    },\n    onGetStates: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getStates(conditional, limit, page)),\n    onDeleteStates: (id) => dispatch(deleteState(id))\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(StatesList)\n","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/orderColumn.js",["1661"],"import React from \"react\"\nimport {Link} from \"react-router-dom\"\nimport {StatusField} from \"../../components/StatusField\";\nimport {buildOptions} from \"../../common/converters\";\nimport {DELIVERY_METHODS_LIST, DELIVERY_TYPES, DELIVERY_TYPES_LIST, ORDER_STATUS, ORDER_STATUS_LIST} from \"../../common/constants\";\nimport Conditionals from \"../../common/conditionals\";\nimport {formatDate, priceFormat} from \"../../common/utils\";\nimport {Tooltip} from \"@material-ui/core\";\nimport {CUSTOMER, USER} from \"../../helpers/url_helper\";\nimport HasPermissionsFunc from \"../../components/HasPermissionsFunc\";\nimport {PERMISSIONS} from \"../../helpers/security_rol\";\n\nconst statusOptions = buildOptions(ORDER_STATUS_LIST);\nconst deliveryMethodsOptions = buildOptions(DELIVERY_METHODS_LIST);\nconst deliveryTypeOptions = buildOptions(DELIVERY_TYPES_LIST);\n\nconst orderColumns = (onSelectedOrder, showAsModal, conciliationView) => {\n    let columns = [\n        {\n            text: \"Pedido #\",\n            dataField: \"id\",\n            sort: true,\n            formatter: (cellContent, item) => {\n                if (onSelectedOrder) {\n                    return (\n                        <button className=\"btn btn-outline-default\" onClick={() => onSelectedOrder(item.id)}>\n                            <b className=\"text-info\">{item.id}</b>\n                        </button>\n                    );\n                }\n                return  (\n                    <Link to={`/order/${item.id}`} className=\"text-body\">\n                        <b className=\"text-info\">{item.id}</b>\n                    </Link>\n                );\n            },\n            filter: true,\n            filterType: \"text\",\n            filterCondition: Conditionals.OPERATORS.EQUAL,\n        },\n        {\n            text: \"Cliente\",\n            dataField: \"customer__name\",\n            sort: false,\n            filter: true,\n            filterType: \"text\",\n            filterCondition: Conditionals.OPERATORS.LIKE,\n            formatter: (cellContent, item) => (\n                !showAsModal ? (\n                        <Link to={`/customer/detail/${item.customer.id}`} className=\"text-body\">\n                            <div>\n                            {item.customer.isMayorist === true && (\n                                <Tooltip placement=\"bottom\" title=\"Cliente mayorista\" aria-label=\"add\">\n                                    <i className={\"mdi mdi-crown font-size-18 mr-1 text-warning\"}> </i>\n                                </Tooltip>\n                            )}\n\n                                {item.customer.name}\n                                <span>\n                                    <span className=\"badge rounded-pill bg-secondary m-1\">{ item.ordersFinished }</span>\n                                </span>\n                            </div>\n                            <div>\n                            <small className=\"bg-grey badge badge-soft-secondary\"><i className=\"fa fa-user\"></i> { item.user.name }</small>\n                        </div>\n                    </Link>)\n                    : (<>\n                        {item.customer.name}\n                        {item.customer.isMayorist === true && (\n                            <Tooltip placement=\"bottom\" title=\"Cliente mayorista\" aria-label=\"add\">\n                                <i className={\"mdi mdi-crown font-size-18 mr-1 text-warning\"}> </i>\n                            </Tooltip>\n                        )}\n                    </>)\n            ),\n        },\n        {\n            text: \"Tipo de envio\",\n            dataField: \"orderDelivery__deliveryType\",\n            sort: true,\n            filter: true,\n            filterType: \"select\",\n            filterOptions: deliveryTypeOptions,\n            filterDefaultOption: deliveryTypeOptions[0],\n            hidden: true,\n        },\n        {\n            text: \"Fecha\",\n            dataField: \"createdAt\",\n            sort: true,\n            filter: true,\n            filterType: \"dateRange\",\n            formatter: (cellContent, item) => (\n                <div>{item.modifiedDate ? formatDate(item.modifiedDate) : formatDate(item.createdAt)}</div>\n            ),\n        },\n        {\n            text: \"Envio\",\n            dataField: \"deliveryMethod\",\n            sort: true,\n            filter: true,\n            filterType: \"select\",\n            filterOptions: deliveryMethodsOptions,\n            filterDefaultOption: deliveryMethodsOptions[0],\n            formatter: (cellContent, item) => (\n                <>\n                    <div>{item.deliveryMethod.name}</div>\n                    <small>{item.tracking}</small>\n\n                    {item.orderDelivery.deliveryType === 1 && (\n                        <Tooltip placement=\"bottom\" title={DELIVERY_TYPES[0].label} aria-label=\"add\">\n                            <i className={\"mdi mdi-cash font-size-18 mr-1 text-info\"}> </i>\n                        </Tooltip>\n                    )}\n                    {item.orderDelivery.deliveryType === 2 && (\n                        <Tooltip placement=\"bottom\" title={DELIVERY_TYPES[1].label} aria-label=\"add\">\n                            <i className={\"mdi mdi-cash font-size-18 mr-1 text-warning\"}> </i>\n                        </Tooltip>\n                    )}\n                    {item.orderDelivery.deliveryType === 3 && (\n                        <Tooltip placement=\"bottom\" title={DELIVERY_TYPES[2].label} aria-label=\"add\">\n                            <i className={\"mdi mdi-handshake font-size-18 mr-1 text-info\"}> </i>\n                        </Tooltip>\n                    )}\n                    {item.prints > 0 && (\n                        <Tooltip placement=\"bottom\" title={`Pedido tiene ${item.prints} impresiones`} aria-label=\"add\">\n                            <i className={\"badge rounded-pill bg-soft-danger mdi mdi-printer\"}> </i>\n                        </Tooltip>\n                    )}\n                </>\n            ),\n        },\n        {\n            text: \"Prendas\",\n            dataField: \"quantity\",\n            sort: false,\n            filter: false,\n        },\n        {\n            text: \"Monto\",\n            dataField: \"totalAmount\",\n            sort: false,\n            filter: false,\n            formatter: (cellContent, item) => priceFormat(cellContent),\n        },\n        {\n            text: \"Estado\",\n            dataField: \"status\",\n            sort: true,\n            filter: true,\n            filterType: \"select\",\n            filterOptions: statusOptions,\n            filterDefaultOption: statusOptions[0],\n            formatter: (cellContent, item) => (\n                <StatusField color={ORDER_STATUS[item.status]?.color}>\n                    {ORDER_STATUS[item.status]?.name}\n                </StatusField>\n            ),\n        },\n        {\n            text: \"Operador\",\n            dataField: \"user\",\n            hidden: true,\n            sort: false,\n            filterType: \"asyncSelect\",\n            filter: true,\n            urlStr: USER,\n            hasWild: true,\n            conditionalOptions: {fieldName: 'name', operator: Conditionals.OPERATORS.LIKE},\n            defaultConditions: [{field: 'status', value: '', operator: Conditionals.OPERATORS.TRUE}],\n            formatter: (cellContent, item) => (\n                <div>{item.user.name}</div>\n            ),\n        }\n    ];\n\n    if (!showAsModal && !conciliationView && HasPermissionsFunc([PERMISSIONS.ORDER_EDIT])) {\n        columns.push({\n            dataField: \"menu\",\n            isDummyField: true,\n            text: \"Acción\",\n            formatter: (cellContent, item) => (\n                <ul className=\"list-inline font-size-20 contact-links mb-0\">\n                    <li className=\"list-inline-item\">\n                        <Link to={`/order/${item.id}`} className=\"px-2 text-primary\">\n                            <i className=\"uil uil-pen font-size-18\"> </i>\n                        </Link>\n                    </li>\n                </ul>\n            ),\n        });\n    }\n\n    if (conciliationView) {\n        columns.push({\n            text: \"Precio\",\n            dataField: \"totalAmount\",\n            sort: true,\n            headerStyle: (colum, colIndex) => {\n                return {textAlign: 'center'};\n            },\n            formatter: (cellContent, item) => (\n                <div className=\"text-right\">\n                    {priceFormat(item.totalAmount, \"\", true)}\n                </div>\n            ),\n            filter: true,\n            filterType: \"number\",\n        });\n    }\n\n    return columns;\n}\n\nexport default orderColumns;\n","/Users/ramon/Repositories/lucy-moie/src/store/wallet/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Security/SecurityRoles.js",["1662","1663","1664"],"import React, {useEffect, useState} from \"react\"\nimport {connect} from \"react-redux\"\nimport {Card, CardBody, Col, Label, Row} from \"reactstrap\"\nimport {map} from \"lodash\";\nimport {AvForm} from \"availity-reactstrap-validation\";\nimport {deleteDataApi, fetchDataApi, postApi, registerDataApi, updateDataApi} from \"../../helpers/backend_helper\";\nimport * as url from \"../../helpers/url_helper\";\nimport {FieldSelect, FieldText} from \"../../components/Fields\";\nimport PropTypes from \"prop-types\";\nimport {sortList} from \"../../common/utils\";\n\nconst SecurityRoles = ({reloadPermissions}) => {\n\n    const [permissions, setPermissions] = useState([]);//list\n    const [permissionsOptions, setPermissionsOptions] = useState([]);\n    const [permissionsOptionSelected, setPermissionsOptionSelected] = useState({});\n    const [roles, setRoles] = useState([]);//group\n    const [roleSelected, setRoleSelected] = useState({});\n    const [rolEdited, setRolEdited] = useState(null);\n\n    useEffect(() => {\n        getPermissions();\n        getRoles();\n    }, [setPermissions]);\n\n    useEffect(() => {\n        if (reloadPermissions && permissions && permissions.length > 0) {\n            filterPermissionsOptions();\n        }\n    }, [permissions]);\n\n    useEffect(() => {\n        if (roleSelected && roleSelected.id) {\n            filterPermissionsOptions();\n        }\n    }, [roleSelected]);\n\n    useEffect(() => {\n        if (reloadPermissions) {\n            getPermissions();\n        }\n    }, [reloadPermissions]);\n\n    const filterPermissionsOptions = () => {\n        if (!roleSelected || !roleSelected.permissions) return;\n        setPermissionsOptions(permissions.filter(p => !roleSelected.permissions.includes(p.permission)).map(p => ({label: p.permission, value: p.id})));\n    };\n\n    const getRoles = (rol) => {\n        fetchDataApi(url.SECURITY_ROLES).then(resp => {\n            let data = sortList(resp.data, 'name');\n            setRoles(data);\n            let selected = null;\n            if (rol && rol.id && (!roleSelected || roleSelected.id !== rol.id)) {\n                selected = data.find(d => d.id === rol.id);\n            } else if (roleSelected && roleSelected.id) {\n                selected = data.find(d => d.id === roleSelected.id);\n            }\n            setRoleSelected(selected || {});\n        })\n    };\n\n    const getPermissions = () => {\n        fetchDataApi(url.SECURITY_PERMISSIONS).then(resp => {\n            setPermissions(sortList(resp.data, 'permission'));\n        })\n    };\n\n    const onAddPermission = (data) => {\n        if (!data || !data.label) return;\n        const payload = {permission: data.label};\n        postApi(`${url.SECURITY_ROLES}/${roleSelected.id}/addPermission`, payload).then(resp => {\n            if (resp.status === 200) {\n                getRoles();\n                filterPermissionsOptions();\n                setPermissionsOptionSelected(-1);\n            }\n        })\n    };\n\n    const onRemovePermission = (permission) => {\n        postApi(`${url.SECURITY_ROLES}/${roleSelected.id}/removePermission`, {permission: permission}).then(resp => {\n            if (resp.status === 200) {\n                getRoles();\n                filterPermissionsOptions();\n                setPermissionsOptionSelected(-1);\n            }\n        })\n    };\n\n    const onAddRole = () => {\n        setRolEdited(null);\n        const list = [...roles];\n        list.unshift({id: null, name: ''});\n        setRoles(list);\n    };\n\n    const onSaveRole = (ev, data) => {\n        let func;\n        if (rolEdited) {\n            func = updateDataApi(url.SECURITY_ROLES, rolEdited, {name: data.name});\n        } else {\n            func = registerDataApi(url.SECURITY_ROLES, {name: data.name});\n        }\n\n        func.then(resp => {\n            if (resp.status === 200) {\n                getRoles(resp.securityrol);\n            }\n            setRolEdited(null)\n        })\n    };\n\n    const onDeleteRole = (role) => {\n        deleteDataApi(url.SECURITY_ROLES, role.id, {}).then(resp => {\n            if (resp.status === 200) {\n                if (roleSelected && roleSelected.id === role.id) {\n                    setRoleSelected({});\n                }\n                getRoles();\n            }\n        })\n    };\n\n    const onCancel = (index) => {\n        const list = [...roles];\n        list.splice(index, 1);\n        setRoles(list);\n    };\n\n    return (\n        <Row>\n            <Col md={6}>\n                <Card>\n                    <CardBody>\n                        <Row className=\"mb-3\">\n                            <Col sm={12}>\n                                <button size=\"small\" type=\"button\" className=\"btn btn-sm text-primary float-md-end\" onClick={() => onAddRole()}>\n                                    <i className=\"uil uil-plus font-size-18\"> </i> Agregar\n                                </button>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col>\n                                <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => onSaveRole(e, v)}>\n                                    <table className=\"table table-bordered table-condensed\">\n                                        <thead>\n                                        <tr>\n                                            <th style={{width: '70%'}}>Rol</th>\n                                            <th style={{width: '30%'}}>Acciones</th>\n                                        </tr>\n                                        </thead>\n                                        <tbody>\n                                        {map(roles, (rol, key) => (\n                                            <tr key={key} className={rol.id === roleSelected.id ? 'bg-light font-weight-600' : ''}>\n                                                <td>\n                                                    {rolEdited !== rol.id && (\n                                                        <>\n                                                            {rol.name}\n                                                        </>\n                                                    )}\n                                                    {rolEdited === rol.id && (\n                                                        <>\n                                                            <FieldText id={\"name\"} name={\"name\"} value={rol.name} required/>\n                                                        </>\n                                                    )}\n                                                </td>\n                                                <td className=\"text-center\">\n                                                    <ul className=\"list-inline font-size-20 contact-links mb-0\">\n                                                        <li className=\"list-inline-item\">\n                                                            <div className=\"btn-group\">\n                                                                <div className=\"btn-group\">\n\n                                                                    {(rolEdited !== rol.id && rol.id) && (\n                                                                        <div>\n                                                                            <button type=\"button\" size=\"small\" className=\"btn btn-sm text-primary\" disabled={rolEdited}\n                                                                                    onClick={() => setRoleSelected(rol)}>\n                                                                                <i className=\"uil uil-eye font-size-18\"> </i>\n                                                                            </button>\n                                                                            <button type=\"button\" size=\"small\" className=\"btn btn-sm text-primary\" disabled={rolEdited}\n                                                                                    onClick={() => setRolEdited(rol.id)}>\n                                                                                <i className=\"uil uil-pen font-size-18\"> </i>\n                                                                            </button>\n                                                                            <button type=\"button\" size=\"small\" className=\"btn btn-sm text-danger\" disabled={rolEdited}\n                                                                                    onClick={() => onDeleteRole(rol)}>\n                                                                                <i className=\"uil uil-trash-alt font-size-18\"> </i>\n                                                                            </button>\n                                                                        </div>\n                                                                    )}\n                                                                    {(rolEdited === rol.id || !rol.id) && (\n                                                                        <div>\n                                                                            <button type=\"submit\" size=\"small\" className=\"btn btn-sm text-success\">\n                                                                                <i className=\"uil uil-check font-size-18\"> </i>\n                                                                            </button>\n                                                                            {!rol.id && (\n                                                                                <button type=\"submit\" size=\"small\" className=\"btn btn-sm text-danger\" onClick={() => onCancel(key)}>\n                                                                                    <i className=\"uil uil-multiply font-size-18\"> </i>\n                                                                                </button>\n                                                                            )}\n                                                                            {rol.id && (\n                                                                                <button type=\"button\" size=\"small\" className=\"btn btn-sm text-primary\" onClick={() => setRolEdited(null)}>\n                                                                                    <i className=\"uil uil-multiply font-size-18\"> </i>\n                                                                                </button>\n                                                                            )}\n                                                                        </div>\n                                                                    )}\n                                                                </div>\n                                                            </div>\n                                                        </li>\n                                                    </ul>\n                                                </td>\n                                            </tr>\n                                        ))}\n                                        </tbody>\n                                    </table>\n                                </AvForm>\n                            </Col>\n                        </Row>\n                    </CardBody>\n                </Card>\n            </Col>\n            <Col md={6}>\n                <Card>\n                    <CardBody>\n                        <AvForm className=\"needs-validation\" autoComplete=\"off\">\n                            <Row className=\"mb-3\">\n                                <Col sm={12}>\n                                    <Label className=\"control-label\">Permisos</Label>\n                                    <FieldSelect\n                                        id={\"permission\"}\n                                        name={\"permission\"}\n                                        options={permissionsOptions}\n                                        defaultValue={permissionsOptionSelected}\n                                        onChange={(e) => onAddPermission(e)}\n                                        isSearchable\n                                        disabled={!(roleSelected && roleSelected.id)}\n                                    />\n                                </Col>\n                            </Row>\n                        </AvForm>\n                        <Row>\n                            <Col>\n                                <table className=\"table table-bordered table-condensed\">\n                                    <thead>\n                                    <tr>\n                                        <th>Nombre</th>\n                                        <th style={{width: '20%'}}>Acciones</th>\n                                    </tr>\n                                    </thead>\n                                    <tbody>\n                                    {map(roleSelected.permissions, (permission, key) => (\n                                        <tr key={key}>\n                                            <td>{permission}</td>\n                                            <td className=\"text-center\">\n                                                <button type=\"button\" size=\"small\" className=\"btn btn-sm text-danger\" onClick={() => onRemovePermission(permission)}>\n                                                    <i className=\"uil uil-trash-alt font-size-18\"> </i>\n                                                </button>\n                                            </td>\n                                        </tr>\n                                    ))}\n                                    </tbody>\n                                </table>\n                            </Col>\n                        </Row>\n                    </CardBody>\n                </Card>\n            </Col>\n        </Row>\n    )\n}\n\nSecurityRoles.propTypes = {\n    reloadPermissions: PropTypes.bool\n}\n\nconst mapStateToProps = state => {\n    return {}\n}\n\nconst mapDispatchToProps = dispatch => ({})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(SecurityRoles)\n","/Users/ramon/Repositories/lucy-moie/src/store/layout/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/Common/ButtonCopy.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/sizes/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Payments/list/paymentsColumn.js",["1665","1666"],"import React from \"react\"\nimport Conditionals from \"../../../common/conditionals\";\nimport {formatDate, PAYMENT_OPTIONS, priceFormat, STATUS_OPTIONS} from \"../../../common/utils\";\nimport {StatusField} from \"../../../components/StatusField\";\nimport {ORDER_STATUS, PAYMENT_STATUS} from \"../../../common/constants\";\n\nconst paymentsColumns = (onSelected) => [\n    {\n        text: \"ID\",\n        dataField: \"id\",\n        sort: true,\n        formatter: (cellContent, item) => (\n            <>\n                <button className=\"btn btn-outline-default\" onClick={() => onSelected(item)}>\n                    <b className=\"text-info\">{item.id}</b>\n                </button>\n            </>\n        ),\n        filter: true,\n        filterType: \"text\",\n        filterCondition: Conditionals.OPERATORS.LIKE,\n    },\n    {\n        text: \"Nombre\",\n        dataField: \"name\",\n        sort: true,\n        filter: true,\n        filterType: \"text\",\n        filterCondition: Conditionals.OPERATORS.LIKE,\n        formatter: (cellContent, item) => (\n            <>\n                {cellContent} &nbsp; {item.status > 0 && <span><i className={\"mdi mdi-check font-size-18 mr-1 text-success\"}> </i></span>}\n            </>\n        ),\n    },\n    {\n        text: \"Fecha\",\n        dataField: \"createdAt\",\n        sort: true,\n        filter: true,\n        filterType: \"dateRange\",\n        formatter: (cellContent, item) => (\n            <div>\n                {formatDate(item.createdAt)}\n            </div>\n        ),\n    },\n    {\n        text: \"Forma de pago\",\n        dataField: \"type\",\n        sort: true,\n        filter: true,\n        filterType: \"text\",\n    },\n    {\n        text: \"Origen\",\n        dataField: \"originBank\",\n        sort: true,\n        filter: true,\n        filterType: \"text\",\n    },\n    {\n        text: \"Destino\",\n        dataField: \"targetBank\",\n        sort: true,\n        filter: true,\n        filterType: \"text\",\n    },\n    {\n        text: \"Monto\",\n        dataField: \"consignmentAmount\",\n        sort: true,\n        filter: true,\n        filterType: \"text\",\n        formatter: (cellContent, item) => (\n            <div className=\"text-right\">\n                {priceFormat(item.consignmentAmount, \"\", true)}\n            </div>\n        ),\n    },\n    {\n        text: \"Estado\",\n        dataField: \"status\",\n        sort: true,\n        filter: true,\n        filterType: \"select\",\n        filterOptions: PAYMENT_OPTIONS,\n        filterDefaultOption: PAYMENT_OPTIONS[0],\n        formatter: (cellContent, item) => (\n            <StatusField color={PAYMENT_STATUS[item.status]?.color}>\n                {PAYMENT_STATUS[item.status]?.name}\n            </StatusField>\n        ),\n    },\n]\n\nexport default paymentsColumns;\n","/Users/ramon/Repositories/lucy-moie/src/pages/Payments/paymentOverlay.js",["1667","1668","1669","1670"],"import React, {useEffect, useState} from \"react\"\nimport {Col, Row} from \"reactstrap\"\nimport {Card, Tooltip} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport NoDataIndication from \"../../components/Common/NoDataIndication\";\nimport {getOrders} from \"../../store/order/actions\";\nimport Conditionals from \"../../common/conditionals\";\nimport {formatDate, hiddenPhone, priceFormat} from \"../../common/utils\";\nimport {ConfirmationModalAction} from \"../../components/Modal/ConfirmationModal\";\nimport {StatusField} from \"../../components/StatusField\";\nimport {ORDER_STATUS, PAYMENT_STATUS} from \"../../common/constants\";\nimport {applyPayment, deletePayment, getPayment} from \"../../store/payments/actions\";\nimport {PERMISSIONS} from \"../../helpers/security_rol\";\nimport HasPermissions from \"../../components/HasPermissions\";\nimport HasPermissionsFunc from \"../../components/HasPermissionsFunc\";\n\nconst PaymentOverlay = (props) => {\n\n    const {paymentSelected, payment, onRelateOrder, onCloseOverlay, onGetOrders, orders, onGetPayment, refresh, onCancelPayment} = props;\n    const [findOrderBy, setFindOrderBy] = useState(null);\n    const hasPhonePermission = HasPermissionsFunc([PERMISSIONS.CUSTOMER_PHONE]);\n\n    useEffect(() => {\n        if (paymentSelected) {\n            onReload();\n        }\n    }, [paymentSelected, refresh]);\n\n    const onReload = () => {\n        onGetPayment(paymentSelected.id);\n\n        const conditions = new Conditionals.Condition;\n        conditions.add(\"payment\", null, Conditionals.OPERATORS.NULL);\n        conditions.add(\"orderDelivery.deliveryType\", [1,2].join(\"::\"), Conditionals.OPERATORS.IN);\n        conditions.add('status', 1);\n        onGetOrders(conditions);\n        setFindOrderBy(\"NO_PAYMENT\");\n    }\n\n    const selectOrder = (order) => {\n        ConfirmationModalAction({\n            title: 'Confirmación',\n            description: `Usted está asociando el pago# ${paymentSelected.id} con el pedido# ${order.id}, ¿Desea continuar?`,\n            id: '_cancelPaymentModal',\n            onConfirm: () => {\n                onRelateOrder(paymentSelected.id, {orderId: order.id});\n                onReload();\n            }\n        });\n    }\n\n    const cancelPayment = () => {\n        ConfirmationModalAction({\n            title: 'Confirmación',\n            description: `Usted está anulando el pago# ${paymentSelected.id}, ¿Desea continuar?`,\n            id: '_clienteModal',\n            onConfirm: () => {\n                onCancelPayment(paymentSelected.id);\n                onReload();\n            }\n        });\n    }\n\n    return paymentSelected && payment && payment.id ? (\n        <div className={'orderDetail-overlay pt-2'}>\n            <Row className=\"mb-2\">\n                <Col md={12}>\n                    <div className={\"mb-3 float-md-start\"}>\n                        <Tooltip placement=\"bottom\" title=\"Ocultar\" aria-label=\"add\">\n                            <button className=\"btn btn-outline-default mr-5\" onClick={() => onCloseOverlay()}>\n                                <i className=\"uil uil-arrow-to-right font-size-16\"> </i>\n                            </button>\n                        </Tooltip>\n                        <small className=\"badge rounded-pill bg-info font-size-14 mr-5 p-2\">Pago# {payment.id}</small>\n                    </div>\n                    <div className={\"mb-3 float-md-end\"}>\n                        {payment.status === 0 && (\n                            <Tooltip placement=\"bottom\" title=\"Anular pago\" aria-label=\"add\">\n                                <button className=\"btn btn-sm text-danger mr-5\" onClick={() => cancelPayment()}>\n                                    <i className=\"uil uil-trash-alt font-size-18\"> </i>\n                                </button>\n                            </Tooltip>\n                        )}\n                    </div>\n                </Col>\n            </Row>\n            <Row className=\"mb-3\">\n                <Col md={12} className=\"p-3\">\n                    <Card id={'payment-detail'} className=\"p-3\">\n                        <Row>\n                            <Col xs={10}>\n                                <h4 className=\"card-title text-info\"><i className=\"uil uil-truck\"> </i> Datos del pago</h4>\n                            </Col>\n                            <Col xs={2}>\n                                <StatusField color={PAYMENT_STATUS[payment.status]?.color}>\n                                    {PAYMENT_STATUS[payment.status]?.name}\n                                </StatusField>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md={6}>\n                                <label>Nombre: </label>\n                                <span className=\"p-1\">{payment.name}</span>\n                            </Col>\n                            <Col md={6}>\n                                <label>Teléfono: </label>\n                                <span className=\"p-1\">{hasPhonePermission ? payment.phone : hiddenPhone(payment.phone)}</span>\n                            </Col>\n                            <Col md={6}>\n                                <label>Correo: </label>\n                                <span className=\"p-1\">{payment.email}</span>\n                            </Col>\n                            <Col md={6}>\n                                <label>Forma de pago: </label>\n                                <span className=\"p-1\">{payment.type}</span>\n                            </Col>\n                            {payment.originBank && (\n                                <Col md={6}>\n                                    <label>Banco origen: </label>\n                                    <span className=\"p-1\">{payment.originBank}</span>\n                                </Col>\n                            )}\n                            <Col md={6}>\n                                <label>Banco destino: </label>\n                                <span className=\"p-1\">{payment.targetBank}</span>\n                            </Col>\n                            <Col md={6}>\n                                <label>Fecha: </label>\n                                <span className=\"p-1\">{formatDate(payment.createdAt)}</span>\n                            </Col>\n                            <Col md={6}>\n                                <label>Número de comprobante: </label>\n                                <span className=\"p-1\">{payment.consignmentNumber}</span>\n                            </Col>\n                            <Col md={6}>\n                                <label>Monto: </label>\n                                <span className=\"p-1\">{priceFormat(payment.consignmentAmount, \"\", true)}</span>\n                            </Col>\n                        </Row>\n                    </Card>\n                </Col>\n                <Col md={12} className=\"p-3\">\n                    {!payment.order && payment.status == 0 && (\n                        <Card id={'orders'} className=\"p-3\">\n                            <Col xs={10}>\n                                <h4 className=\"card-title text-info\"><i className=\"uil uil-truck\"> </i> Seleccionar venta</h4>\n                            </Col>\n                            <Row>\n                                <table className=\"table table-sm table-striped table-bordered table-centered table-nowrap font-size-11\">\n                                    <thead>\n                                    <tr>\n                                        <th style={{width: '10%'}}># Pedido</th>\n                                        <th style={{width: '35%'}}>Cliente</th>\n                                        <th style={{width: '15%'}}>Fecha</th>\n                                        <th style={{width: '15%'}}>Total con descuento</th>\n                                        <th style={{width: '10%'}}>Envio</th>\n                                        <th style={{width: '15%'}}>Total</th>\n                                        <HasPermissions permissions={[PERMISSIONS.PAYMENT_EDIT]}>\n                                            <th></th>\n                                        </HasPermissions>\n                                    </tr>\n                                    </thead>\n                                    <tbody>\n                                    {orders.length === 0 && (\n\n                                        <tr>\n                                            <HasPermissions permissions={[PERMISSIONS.PAYMENT_EDIT]} renderNoAccess={() => <td colSpan={5} style={{\"textAlign\": \"center\"}}>No hay registros que mostrar</td>}>\n                                                <td colSpan={6} style={{\"textAlign\": \"center\"}}>No hay registros que mostrar</td>\n                                            </HasPermissions>\n                                        </tr>\n                                    )}\n                                    {orders.map((order, k) => (\n                                        <tr>\n                                            <td>{order.id}</td>\n                                            <td>{order.customer.name}</td>\n                                            <td>{formatDate(order.createdAt)}</td>\n                                            <td className=\"text-end\">{priceFormat(order.totalWithDiscount)}</td>\n                                            <td className=\"text-end\">{priceFormat(order.orderDelivery.deliveryCost)}</td>\n                                            <td className=\"text-end\">{priceFormat(order.totalAmount)}</td>\n                                            <HasPermissions permissions={[PERMISSIONS.PAYMENT_EDIT]}>\n                                                <td>\n                                                    <Tooltip placement=\"bottom\" title=\"Asociar pedido\" aria-label=\"add\">\n                                                        <button size=\"small\" className=\"btn btn-sm btn-primary\" onClick={() => selectOrder(order)}>\n                                                            <i className=\"uil uil-plus-circle font-size-18\"> </i>\n                                                        </button>\n                                                    </Tooltip>\n                                                </td>\n                                            </HasPermissions>\n                                        </tr>\n                                    ))}\n                                    </tbody>\n                                </table>\n                            </Row>\n                        </Card>\n                    )}\n                    {payment.order && (\n                        <Card id={'order-detail'} className=\"p-3\">\n                            <Col xs={10}>\n                                <h4 className=\"card-title text-info\"><i className=\"uil uil-truck\"> </i> Pedido asociado</h4>\n                            </Col>\n                            <Row>\n                                <Col md={6}>\n                                    <label>Pedido #: </label>\n                                    <span className=\"p-1\">{payment.order.id}</span>\n                                </Col>\n                                <Col md={6}>\n                                    <label>Estado: </label>\n                                    <span className=\"p-1\">\n                                         <StatusField color={ORDER_STATUS[payment.order.status]?.color} className={\"font-size-10 mr-5\"}>\n                                            {ORDER_STATUS[payment.order.status].name}\n                                        </StatusField>\n                                    </span>\n                                </Col>\n                                <Col md={6}>\n                                    <label>Cliente: </label>\n                                    <span className=\"p-1\">{payment.order.customer.name}</span>\n                                </Col>\n                                <Col md={6}>\n                                    <label>Correo: </label>\n                                    <span className=\"p-1\">{payment.order.customer.email}</span>\n                                </Col>\n                                <Col md={6}>\n                                    <label>Fecha: </label>\n                                    <span className=\"p-1\">{formatDate(payment.order.createdAt)}</span>\n                                </Col>\n                                <Col md={6}>\n                                    <label>Cantidad de prendas: </label>\n                                    <span className=\"p-1\">{payment.order.quantity}</span>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col md={4}>\n                                    <label>Monto con Descuento: </label>\n                                    <span className=\"p-1\">{priceFormat(payment.order.totalWithDiscount, \"\", true)}</span>\n                                </Col>\n                                <Col md={4}>\n                                    <label>Envio: </label>\n                                    <span className=\"p-1\">{priceFormat(payment.order.orderDelivery.deliveryCost, \"\", true)}</span>\n                                </Col>\n                                <Col md={4}>\n                                    <label>Total: </label>\n                                    <span className=\"p-1\">{priceFormat(payment.order.totalAmount, \"\", true)}</span>\n                                </Col>\n                            </Row>\n                        </Card>\n                    )}\n                </Col>\n            </Row>\n\n        </div>\n    ) : <NoDataIndication/>;\n}\n\nconst mapStateToProps = state => {\n    const {orders} = state.Order\n    const {payment, refresh} = state.Payments;\n    return {orders, payment, refresh}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGetPayment: (id) => dispatch(getPayment(id)),\n    onGetOrders: (conditions) => dispatch(getOrders(conditions.all(), 500, 0)),\n    onCancelPayment: (id) => dispatch(deletePayment(id)),\n    onRelateOrder: (paymentId, payload) => dispatch(applyPayment(paymentId, payload))\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(PaymentOverlay)\n)\n\nPaymentOverlay.propTypes = {\n    paymentSelected: PropTypes.object.isRequired,\n    showOverlay: PropTypes.bool,\n    onCloseOverlay: PropTypes.func,\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n","/Users/ramon/Repositories/lucy-moie/src/pages/BillConfig/list/billConfigColumns.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/customer/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/fieldOptions/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Locality/list/localityColumn.js",["1671","1672","1673","1674","1675","1676","1677"],"import React from \"react\"\nimport Conditionals from \"../../../common/conditionals\";\nimport {Link} from \"react-router-dom\";\nimport HasPermissionsFunc from \"../../../components/HasPermissionsFunc\";\nimport {PERMISSIONS} from \"../../../helpers/security_rol\";\nimport {DELIVERY_METHODS_LIST, DELIVERY_TYPES} from \"../../../common/constants\";\nimport {buildOptions} from \"../../../common/converters\";\nimport {STATUS_OPTIONS} from \"../../../common/utils\";\nimport {STATUS_COLORS, StatusField} from \"../../../components/StatusField\";\nimport {ConverterCustomerStatus} from \"../../Customer/customer_status\";\n\nconst getDeliveryType = (_type = \"\") => {\n    if(_type == 1){\n        return \"Contado\";\n    } else if(_type == 2){\n        return \"Contado - AlCobro\";\n    } else if(_type == 3){\n        return \"AlCobro\";\n    }\n\n    return _type;\n}\n\nconst metodos = {\n    \"1\": 'Interrapidisimo',\n    \"4\": 'ServiEntrega'\n};\n\nconst colors = {\n  \"1\": 'badge-success bg-warning',\n  \"4\": 'badge-success bg-success'\n};\n\nconst deliveryTimeCalc = (item) => {\n    if (item.deliveryType == 1) {\n        //sucursal\n        item.icon = \"&nbsp;&nbsp;&nbsp;&nbsp;\"+ item.timeInDays +\"&nbsp;&nbsp;<i class='fa fa-building' ></i>\";\n    }\n    if (item.deliveryType == 2) {\n        //delivery\n        item.icon = \"&nbsp;&nbsp;&nbsp;&nbsp;\"+ item.timeInDays +\"&nbsp;&nbsp;<i class='fa fa-motorcycle' ></i>\";\n    }\n    if (item.deliveryType == 3) {\n        //sucursal y delivery\n        item.icon = \"&nbsp;&nbsp;&nbsp;&nbsp;\"+ item.timeInDays +\"&nbsp;&nbsp;<span><i class='fa fa-building' ></i>&nbsp;<i class='fa fa-motorcycle' ></i></span>\";\n    }\n\n    return item.icon;\n}\n\nconst deliveryMethodsOptions = buildOptions(DELIVERY_METHODS_LIST);\n\nconst localityColumns = (onDelete = false) => {\n    const cols = [\n        {\n            text: \"Nombre\",\n            dataField: \"name\",\n            sort: true,\n            formatter: (cellContent, item) => (\n                <>\n                    <Link to=\"#\" className=\"text-body\">\n                        {item.name}\n                        <div>\n                        <span className={`badge ${colors[item.deliveryMethodId]}`}>{ metodos[item.deliveryMethodId] }</span>\n                        </div>\n                    </Link>\n                </>\n            ),\n            filter: true,\n            filterType: \"text\",\n            filterCondition: Conditionals.OPERATORS.LIKE,\n        },\n        {\n            text: \"Forma de Pago\",\n            dataField: \"deliveryType\",\n            sort: true,\n            filter: true,\n            filterType: \"text\",\n            formatter: (cellContent, item) => (\n                <div>\n                    {getDeliveryType(item.deliveryType)}\n                </div>\n            ),\n        },\n        {\n            text: \"Tiempo de Entrega\",\n            dataField: \"timeInDays\",\n            sort: true,\n            filter: true,\n            filterType: \"text\",\n            formatter: (cellContent, item) => (\n                <div dangerouslySetInnerHTML={{__html: deliveryTimeCalc(item)}}/>\n            ),\n},\n    {\n        text: \"Flete\",\n            dataField: \"priceFirstKilo\",\n            sort: true,\n            filter: true,\n            filterType: \"text\"\n    },\n    {\n        text: \"Método de Envio\",\n        dataField: \"deliveryMethodId\",\n        hidden: true,\n        sort: true,\n        filter: true,\n        filterType: \"select\",\n        filterOptions: deliveryMethodsOptions,\n        filterCondition: Conditionals.OPERATORS.EQUAL,\n        formatter: (cellContent, item) => (\n            <>\n                <div>{item.deliveryMethodId}</div>\n            </>\n        ),\n    },\n    {\n        text: \"Activo\",\n        dataField: \"status\",\n        sort: true,\n        filter: true,\n        filterType: \"select\",\n        filterOptions: STATUS_OPTIONS,\n        filterDefaultOption: STATUS_OPTIONS[0],\n        formatter: (cellContent, item) => (\n            <StatusField color={item.status === true ? STATUS_COLORS.SUCCESS : STATUS_COLORS.DANGER}>\n                {ConverterCustomerStatus(item.status)}\n            </StatusField>\n        ),\n    },\n    ];\n\n    if (HasPermissionsFunc([PERMISSIONS.DELIVERY_LOCALITY_EDIT])) {\n        cols.push({\n            dataField: \"menu\",\n            isDummyField: true,\n            text: \"Acción\",\n            formatter: (cellContent, item) => (\n                <ul className=\"list-inline font-size-20 contact-links mb-0\">\n                    <li className=\"list-inline-item\">\n                        <Link to={`/deliveryLocality/${item.id}`} className=\"px-2 text-primary\">\n                            <i className=\"uil uil-pen font-size-18\"> </i>\n                        </Link>\n                    </li>\n                    {onDelete && (\n                        <li className=\"list-inline-item\">\n                            <button size=\"small\" className=\"btn btn-sm text-danger\" onClick={() => onDelete(item.id)}>\n                                <i className=\"uil uil-trash-alt font-size-18\"> </i>\n                            </button>\n                        </li>\n                    )}\n                </ul>\n            ),\n        })\n    }\n\n    return cols;\n}\n\nexport default localityColumns;\n","/Users/ramon/Repositories/lucy-moie/src/store/product/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/payments/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Wallet/list/walletColumn.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/category/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/deliveryLocality/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/helpers/jwt-token-access/accessToken.js",[],"/Users/ramon/Repositories/lucy-moie/src/helpers/jwt-token-access/auth-token-header.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/StatusField/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/reports/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Reports/PostSaleReportForm.js",["1678","1679","1680"],"import React, {useEffect, useState} from \"react\"\nimport {CardBody, Col, Label, Row} from \"reactstrap\"\nimport {AvForm} from \"availity-reactstrap-validation\"\nimport {Card, Tooltip} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {FieldDate, FieldSelect} from \"../../components/Fields\";\nimport {DATE_MODES} from \"../../components/Fields/InputDate\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\nimport {formatDateToServer} from \"../../common/utils\";\nimport {DELIVERY_METHODS, ORDER_STATUS_LIST, ORDER_STATUS_LIST_POST_SALE, REPORT_TYPES} from \"../../common/constants\";\nimport {getEmptyOptions} from \"../../common/converters\";\nimport {getDeliveryMethods} from \"../../store/order/actions\";\nimport {generateReport, generateReportRestart} from \"../../store/reports/actions\";\n\nconst PostSaleReportForm = ({onCloseModal, deliveryMethods, onGetDeliveryMethods, loading, error, success, onGenerateReport, onRestartReport}) => {\n\n    const [deliveryMethodList, setDeliveryMethodList] = useState([]);\n    const [deliveryMethod, setDeliveryMethod] = useState({});\n\n    useEffect(() => {\n        if (onRestartReport) {\n            onRestartReport();\n        }\n        if (onGetDeliveryMethods) onGetDeliveryMethods();\n    }, [onRestartReport]);\n\n    useEffect(() => {\n        if (success && !error) {\n            onCloseModal(true);\n        }\n    }, [success]);\n\n    useEffect(() => {\n        if (deliveryMethods && deliveryMethods.length > 0) {\n            setDeliveryMethod(deliveryMethods.find(op => op.name === DELIVERY_METHODS.INTERRAPIDISIMO).code);\n            setDeliveryMethodList([getEmptyOptions(),\n                ...deliveryMethods.filter(op => [DELIVERY_METHODS.INTERRAPIDISIMO, DELIVERY_METHODS.SERVIENTREGA].includes(op.name)).map(op => ({label: op.name, value: op.id}))]\n            );\n        }\n    }, [deliveryMethods]);\n\n    const handleValidSubmit = (e, values) => {\n        const payload = {\n            status: values._status.value,\n            deliveryMethod: values.deliveryMethod.value,\n            dateFrom: formatDateToServer(values.reportDate[0]),\n            dateTo: formatDateToServer(values.reportDate[1])\n        };\n        onGenerateReport(payload);\n    }\n\n    return (\n        <React.Fragment>\n            <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => handleValidSubmit(e, v)}>\n                <Card>\n                    <CardBody>\n                        <Row>\n                            <Col md=\"6\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"field_name\">Metodo<span className=\"text-danger\">*</span></Label>\n                                    <FieldSelect\n                                        id={\"deliveryMethod\"}\n                                        name={\"deliveryMethod\"}\n                                        options={deliveryMethodList}\n                                        defaultValue={deliveryMethod}\n                                        required\n                                    />\n                                </div>\n                            </Col>\n                            <Col md=\"6\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"field_name\">Estatus<span className=\"text-danger\">*</span></Label>\n                                    <FieldSelect\n                                        id={\"_status\"}\n                                        name={\"_status\"}\n                                        options={ORDER_STATUS_LIST_POST_SALE}\n                                        defaultValue={ORDER_STATUS_LIST_POST_SALE[0]}\n                                        required\n                                    />\n                                </div>\n                            </Col>\n                            <Col md=\"12\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"field_name\">Fechas <span className=\"text-danger\">*</span> &nbsp; <Tooltip placement=\"bottom\" title=\"Fecha de Envio\" aria-label=\"add\"><p className=\"fa fa-question-circle\"></p></Tooltip></Label>\n                                    <FieldDate\n                                        name={\"reportDate\"}\n                                        mode={DATE_MODES.RANGE}\n                                    />\n                                </div>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md={12} className=\"text-center\">\n                                {!!(!success && error) && (\n                                    <div className=\"alert alert-danger\">{error}</div>\n                                )}\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md={12} className=\"text-right\">\n                                <ButtonSubmit loading={loading} disabled={loading}/>\n                            </Col>\n                        </Row>\n                    </CardBody>\n                </Card>\n            </AvForm>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {report} = state.PostSale;\n    const {deliveryMethods} = state.Order;\n    return {deliveryMethods: deliveryMethods.data, loading: report.loading, error: report.error, success: report.success}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGenerateReport: (data) => dispatch(generateReport(REPORT_TYPES.POST_SALE, data)),\n    onRestartReport: () => dispatch(generateReportRestart()),\n    onGetDeliveryMethods: (conditional = null, limit = 50, page) => dispatch(getDeliveryMethods(conditional, limit, page)),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(PostSaleReportForm)\n)\n\nPostSaleReportForm.propTypes = {\n    error: PropTypes.any,\n    onCloseModal: PropTypes.func\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/PostSale/PostSaleImportFileForm.js",["1681","1682","1683","1684"],"import React, {useEffect, useState} from \"react\"\nimport {CardBody, Col, Label, Row} from \"reactstrap\"\nimport {AvForm} from \"availity-reactstrap-validation\"\nimport {Card, Tooltip} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {getDeliveryMethods} from \"../../store/order/actions\";\nimport {FieldDate, FieldSelect} from \"../../components/Fields\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\nimport {DATE_MODES} from \"../../components/Fields/InputDate\";\nimport DropZoneIcon from \"../../components/Common/DropZoneIcon\";\nimport {getEmptyOptions} from \"../../common/converters\";\nimport {importFile, importFileReset} from \"../../store/office/actions\";\nimport {DATE_FORMAT, formatDate, formatDateToServerEndOfDay} from \"../../common/utils\";\nimport {DELIVERY_METHODS} from \"../../common/constants\";\n\nconst PostSaleImportFileForm = ({onCloseModal, deliveryMethods, loading, error, success, getDeliveryMethods, importFileReset, importFile}) => {\n\n    const [deliveryMethodList, setDeliveryMethodList] = useState([]);\n    const [deliveryMethod, setDeliveryMethod] = useState({});\n    const [file, setFile] = useState(null);\n\n    //carga inicial\n    useEffect(() => {\n        if (importFileReset) importFileReset();\n        if (onGetDeliveryMethods) onGetDeliveryMethods();\n    }, [importFileReset]);\n\n\n    useEffect(() => {\n        if (deliveryMethods && deliveryMethods.length > 0) {\n            setDeliveryMethod(deliveryMethods.find(op => [DELIVERY_METHODS.INTERRAPIDISIMO, DELIVERY_METHODS.SERVIENTREGA].includes(op.name)).code);\n            setDeliveryMethodList([getEmptyOptions(),\n                ...deliveryMethods.filter(op => [DELIVERY_METHODS.INTERRAPIDISIMO, DELIVERY_METHODS.PAYU, DELIVERY_METHODS.SERVIENTREGA].includes(op.name)).map(op => ({label: op.name, value: op.code}))]\n            );\n        }\n    }, [deliveryMethods]);\n\n    useEffect(() => {\n        if (success && !error) {\n            onCloseModal(true);\n        }\n    }, [success]);\n\n    const handleValidSubmit = (e, values) => {\n        const payload = {\n            file: file.base64.replace('data:image/xlsx;base64,', ''),\n            deliveryMethod: values.deliveryMethod.value,\n            deliveryDate: values.deliveryDate[0] ? formatDateToServerEndOfDay(values.deliveryDate[0]) : null\n        };\n        onImportFile(payload);\n    }\n\n    const onGetDeliveryMethods = (conditional = null, limit = 50, page) => getDeliveryMethods(conditional, limit, page);\n    const onImportFile = (data) => importFile(data);\n\n    return (\n        <React.Fragment>\n            <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => handleValidSubmit(e, v)}>\n                <Card>\n                    <CardBody>\n                        <Row>\n                            <Col md=\"6\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"field_name\">Fecha <span className=\"text-danger\">*</span></Label>\n                                    <FieldDate\n                                        name={\"deliveryDate\"}\n                                        mode={DATE_MODES.SINGLE}\n                                    />\n                                </div>\n                            </Col>\n                            <Col md=\"6\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"field_name\">Metodo<span className=\"text-danger\">*</span></Label>\n                                    <FieldSelect\n                                        id={\"deliveryMethod\"}\n                                        name={\"deliveryMethod\"}\n                                        options={deliveryMethodList}\n                                        defaultValue={deliveryMethod}\n                                        required\n                                    />\n                                </div>\n                            </Col>\n                            <Col md=\"12\">\n                                <div className=\"mb-3 text-center\">\n                                    <Tooltip placement=\"bottom\" title=\"Importar archivo\" aria-label=\"add\">\n                                        <div className={\"btn\"}>\n                                            <DropZoneIcon\n                                                maxFiles={1}\n                                                mode=\"icon\"\n                                                iconClass=\"display-4 mdi mdi-file-excel\"\n                                                onDrop={(f) => setFile(f)}>\n                                            </DropZoneIcon>\n                                            {(file && file.f)? (<span>{file.f.name}</span>) : (<span>Seleccione un archivo</span>)}\n                                        </div>\n                                    </Tooltip>\n                                </div>\n                            </Col>\n                        </Row>\n\n                        <Row>\n                            <Col md={12} className=\"text-center\">\n                                {!!(!success && error) && (\n                                    <div className=\"alert alert-danger\">{error}</div>\n                                )}\n                            </Col>\n                        </Row>\n\n                        <Row>\n                            <Col md={12} className=\"text-right\">\n                                <ButtonSubmit loading={loading} disabled={loading || !file || !file.f}/>\n                            </Col>\n                        </Row>\n                    </CardBody>\n                </Card>\n            </AvForm>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {deliveryMethods} = state.Order;\n    const {importFile} = state.Office\n    return {deliveryMethods: deliveryMethods.data, loading: importFile.loading, error: importFile.error, success: importFile.success}\n}\n\nexport default withRouter(\n    connect(mapStateToProps, {getDeliveryMethods, importFile, importFileReset})(PostSaleImportFileForm)\n)\n\nPostSaleImportFileForm.propTypes = {\n    error: PropTypes.any,\n    onCloseModal: PropTypes.func\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/PostSale/postSaleColumn.js",["1685","1686"],"import React from \"react\"\nimport {Link} from \"react-router-dom\"\nimport {StatusField} from \"../../components/StatusField\";\nimport {buildOptions} from \"../../common/converters\";\nimport {\n    DELIVERY_METHODS_LIST,\n    ORDER_STATUS,\n    ORDER_STATUS_LIST,\n    ORDER_STATUS_LIST_POST_SALE\n} from \"../../common/constants\";\nimport Conditionals from \"../../common/conditionals\";\nimport {DATE_FORMAT, formatDate} from \"../../common/utils\";\nimport {Tooltip} from \"@material-ui/core\";\nimport {CUSTOMER} from \"../../helpers/url_helper\";\n\nconst postSaleColumns = () => {\n    const statusOptions = buildOptions(ORDER_STATUS_LIST_POST_SALE);\n    const deliveryMethodsOptions = buildOptions(DELIVERY_METHODS_LIST);\n\n    return [\n        {\n            text: \"Pedido #\",\n            dataField: \"id\",\n            sort: true,\n            formatter: (cellContent, item) => {\n                return (\n                    <Link to={`/postSales/detail/${item.id}`} className=\"text-body\">\n                        <b className=\"text-info\">{item.id}</b>\n                    </Link>\n                );\n            },\n            filter: true,\n            filterType: \"text\",\n            filterCondition: Conditionals.OPERATORS.EQUAL,\n        },\n        {\n            text: \"Fecha de importación / (Sync)\",\n            dataField: \"postSaleDate\",\n            sort: true,\n            filter: false,\n            filterType: \"dateRange\",\n            formatter: (cellContent, item) => (\n                <div>{formatDate(item.postSaleDate, DATE_FORMAT.ONLY_DATE)} / {item.orderDelivery.syncDate ? formatDate(item.orderDelivery.syncDate) : ''}</div>\n            ),\n        },\n        {\n            text: \"Fecha de importación\",\n            dataField: \"postSaleDate\",\n            sort: true,\n            filter: true,\n            filterType: \"dateRange\",\n            hidden: true,\n        },\n        {\n            text: \"Estado del Pedido\",\n            dataField: \"status\",\n            sort: true,\n            filter: true,\n            filterType: \"select\",\n            filterOptions: statusOptions,\n            filterDefaultOption: statusOptions[0],\n            formatter: (cellContent, item) => (\n                <StatusField color={ORDER_STATUS[item.status]?.color}>\n                    {ORDER_STATUS[item.status]?.name}\n                </StatusField>\n            ),\n        },\n        {\n            text: \"Cliente\",\n            dataField: \"customer__name\",\n            sort: false,\n            filter: true,\n            filterType: \"text\",\n            filterCondition: Conditionals.OPERATORS.LIKE,\n            formatter: (cellContent, item) => (\n                <Link to={`/customer/detail/${item.customer.id}`} className=\"text-body\">\n                    {item.customer.name}\n                    {item.customer.isMayorist === true && (\n                        <Tooltip placement=\"bottom\" title=\"Cliente mayorista\" aria-label=\"add\">\n                            <i className={\"mdi mdi-crown font-size-18 mr-1 text-warning\"}> </i>\n                        </Tooltip>\n                    )}\n                </Link>\n            ),\n        },\n        {\n            text: \"Metodo de envío\",\n            dataField: \"deliveryMethod\",\n            sort: true,\n            filter: true,\n            filterType: \"select\",\n            filterOptions: deliveryMethodsOptions,\n            filterDefaultOption: deliveryMethodsOptions[0],\n            formatter: (cellContent, item) => (\n                <>\n                    <div>{item.deliveryMethod.name}</div>\n                    <small>{item.tracking}</small>\n                </>\n            ),\n        },\n        {\n            text: \"Guía\",\n            dataField: \"orderDelivery.tracking\",\n            sort: true,\n            filter: true,\n            filterType: \"text\",\n            formatter: (cellContent, item) => (\n                <div className=\"badge p-2 bg-soft-info\">{item.orderDelivery.tracking}</div>\n            ),\n        },\n        {\n            text: \"Estado del envío\",\n            dataField: \"orderDelivery.deliveryStatus\",\n            sort: true,\n            filter: true,\n            filterType: \"text\",\n            formatter: (cellContent, item) => {\n                if (item.orderDelivery.deliveryStatus) {\n                    return <small className=\"text-muted\">{item.orderDelivery.deliveryStatus} &nbsp;{item.manualReceived && <Tooltip placement=\"bottom\" title=\"Marcado como recibido\" aria-label=\"add\"><span className={\"mb-0 badge bg-soft-success p-1\"}><i className=\"mdi mdi-check\"></i></span></Tooltip>}</small>;\n                }\n                return '';\n            },\n        }\n    ];\n}\n\nexport default postSaleColumns;\n","/Users/ramon/Repositories/lucy-moie/src/pages/Stats/Reincidents.js",["1687","1688","1689","1690","1691"],"import React, {useEffect, useState} from \"react\"\nimport {CardBody, Col, Label, Row} from \"reactstrap\"\nimport {Card} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {DATE_FORMAT, formatDate} from \"../../common/utils\";\nimport {REPORT_TYPES} from \"../../common/constants\";\nimport {generateReport} from \"../../store/reports/actions\";\nimport {statsApi} from \"../../helpers/backend_helper\";\n\nimport Highcharts from 'highcharts'\nimport {FieldDate} from \"../../components/Fields\";\nimport {DATE_MODES} from \"../../components/Fields/InputDate\";\nimport {DEFAULT_PAGE_LIMIT} from \"../../common/pagination\";\nimport {getUsers} from \"../../store/user/actions\";\nimport HighChartsWrapper from \"../../components/Common/HishChartsWrapper\";\nimport {AvForm} from \"availity-reactstrap-validation\";\n\nconst hoy = new Date();\nconst defaultDates = [new Date(hoy.getTime() - 518400000), new Date()];\nconst initialState = {\n    cargando: '',\n    usuarios: [],\n    reincidencias: {\n        data: {\n            chart: {\n                type: 'column'\n            },\n            title: {\n                text: 'Reincidencias'\n            },\n            subtitle: {\n                text: null\n            },\n            xAxis: {\n                categories: []\n            },\n            yAxis: [{\n                labels: {\n                    format: '$ {value}'\n                },\n                title: {\n                    text: 'Monto'\n                }\n            }],\n            series: [{\n                name: 'Clientes',\n                data: []\n            },\n                {\n                    name: 'Reincidentes',\n                    data: []\n                }]\n        },\n        fecha: {\n            inicial: new Date(hoy.getTime() - 518400000),\n            final: new Date(hoy.getTime())\n        }\n    },\n}\n\nconst Reincidents = ({className}) => {\n\n    const [stats, setStats] = useState(initialState);\n\n    useEffect(() => {\n        if (stats.reincidencias) {\n            reincidenciasCargar()\n        }\n    }, [stats.reincidencias.fecha]);\n\n    const getStatsLabel = (stats, node) => {\n        if(parserClientDate(stats[node].fecha.inicial) == parserClientDate(stats[node].fecha.final)){\n            return parserClientDate(stats[node].fecha.inicial);\n        }\n        else {\n            return parserClientDate(stats[node].fecha.inicial) + ' a ' + parserClientDate(stats[node].fecha.final)\n        }\n    }\n\n    const reincidenciasCargar = () => {\n        if (valida(stats.reincidencias.fecha)) {\n            stats.cargando = 'Cargando estadisticas de ventas...';\n            //definir la url para la consulta a la API\n            var url = '/stats/estadistica_reincidencias';\n            url += '/' + parserServerDate(stats.reincidencias.fecha.inicial);\n            url += '/' + parserServerDate(stats.reincidencias.fecha.final);\n            //leer estadisticas de ventas\n            statsApi(url).then(function (data) {\n                var fechas = [];\n                var datosClientes = data.clientes;\n                var datosReincidentes = data.reincidentes;\n\n                const newStats = {...stats};\n                newStats.reincidencias.data.subtitle.text = getStatsLabel(newStats,'reincidencias');\n                newStats.reincidencias.data.xAxis.categories = ['Total'];\n                newStats.reincidencias.data.series[0].data = datosClientes;\n                newStats.reincidencias.data.series[1].data = datosReincidentes;\n                newStats.cargando = '';\n                setStats(newStats);\n            })\n        }\n    }\n\n    const parserServerDate = (date) => {\n        return formatDate(date, DATE_FORMAT.ONLY_DATE);\n    }\n\n    const valida = (node) => {\n        if (!node) return;\n        let v = false;\n        if (node.inicial && node.final && (node.inicial <= node.final)) {\n            v = true;\n        } else if (node.inicial || node.final){\n            v = true;\n        }\n        return v;\n    }\n\n    const parserClientDate = (date) => {\n        return formatDate(date, DATE_FORMAT.DD_MM_YYYY);\n    }\n\n    const onChangeDate = (dates, node) => {\n        if (dates.length > 0) {\n            const s = {...stats}\n            if ((dates.length === 1) || (dates[0].toString() == dates[1].toString())) {\n                s[node] = {...stats[node], fecha: {...stats[node].fecha, inicial: dates[0], final: dates[0]}};\n            } else {\n                s[node] = {...stats[node], fecha: {...stats[node].fecha, inicial: dates[0], final: dates[1]}};\n            }\n            setStats(s);\n        }\n    }\n\n    return (\n        <AvForm className=\"needs-validation\" autoComplete=\"off\">\n        <Card className={className}>\n            <CardBody>\n                <Row id=\"reincidencias\">\n                    <Col md={12}>\n                        <h4 className=\"card-title text-info\"> Reincidencias</h4>\n                    </Col>\n                    <Col md={4}>\n                        <div className=\"mb-3\">\n                            <Label>Fecha</Label>\n                            <FieldDate\n                                name=\"reincidencias_dates\"\n                                mode={DATE_MODES.RANGE}\n                                defaultValue={defaultDates}\n                                onChange={(dates) => onChangeDate(dates, \"reincidencias\")}\n                            />\n                        </div>\n                    </Col>\n                    <Col md={12}>\n                        <HighChartsWrapper options={stats.reincidencias.data}/>\n                    </Col>\n                </Row>\n            </CardBody>\n        </Card>\n        </AvForm>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGenerateReport: (data) => dispatch(generateReport(REPORT_TYPES.CONCILIATION, data)),\n    onGetUsers: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getUsers(conditional, limit, page)),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(Reincidents)\n)\n\nReincidents.propTypes = {\n    error: PropTypes.any,\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/components/Common/HtmlTooltip.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/CustomerEdit/CategoriesPieChart.js",["1692","1693","1694","1695"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from \"prop-types\";\nimport {customerCategoryStats, customerOrdersStats} from \"../../helpers/service\";\nimport moment from \"moment\";\nimport {ORDER_STATUS, ORDERS_ENUM} from \"../../common/constants\";\nimport PieChart from \"../../components/Common/PieChart\";\nimport BarChart from \"../../components/Common/BarChart\";\nimport {priceFormat} from \"../../common/utils\";\n\nconst CategoriesPieChart = ({customerId}) => {\n\n    const [categoryChart, setCategoryChart] = useState({series: [], labels:[]});\n\n    useEffect(() => {\n        if (customerId) {\n            customerCategoryStats(customerId, moment()).then(resp => {\n\n                const chartData = {\n                    series: [],\n                    labels:[],\n                    fullseries: [],\n                    tooltip: {\n                        z: {\n                            formatter: function(val) {\n                                return val\n                            },\n                            title: 'Cantidad'\n                        },\n                        y: {\n                            formatter: function(val) {\n                                return priceFormat(val) + ' COP'\n                            },\n                            title: 'Monto'\n                        },\n                    }\n                };\n\n                //const chartData = {series: [], labels:[]};\n                if(resp){\n\n                    chartData.fullseries[0] = {data: [], name: 'Monto'};\n\n                    resp.forEach(pc => {\n\n                        let name = pc.name !== null ? pc.name : \"SIN CATEGORIA\";\n                        name = pc.name !== \"\" ? name : \"SIN NOMBRE\";\n\n                        chartData.fullseries[0].data.push({x: name, y: pc.sumPrices, z: parseInt(pc.qty)});\n                        chartData.labels.push(name);\n                        //chartData.colors.push(ORDER_STATUS[pc.status].colorCss);\n                    })\n                }\n\n                setCategoryChart(chartData);\n            });\n        }\n    }, [customerId]);\n\n    return (\n        <>\n            <h4 className=\"card-title text-info\">Categorias</h4>\n            <div style={{background: '#f6f6f6', height: '100%'}}>\n                <BarChart data={categoryChart}  tooltip={categoryChart.tooltip}/>\n            </div>\n        </>\n    );\n}\n\nCategoriesPieChart.propTypes = {\n    customerId: PropTypes.number.isRequired\n}\n\nexport default CategoriesPieChart;\n","/Users/ramon/Repositories/lucy-moie/src/pages/CustomerEdit/OrdersPieChart.js",["1696","1697"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from \"prop-types\";\nimport {customerOrdersStats} from \"../../helpers/service\";\nimport moment from \"moment\";\nimport {ORDER_COLORS, ORDER_STATUS, ORDERS_ENUM} from \"../../common/constants\";\nimport PieChart from \"../../components/Common/PieChart\";\nimport BarChart from \"../../components/Common/BarChart\";\nimport {priceFormat} from \"../../common/utils\";\n\nconst OrdersPieChart = ({customerId}) => {\n\n    const [orderChart, setOrderChart] = useState({series: [], labels:[]});\n\n    useEffect(() => {\n        if (customerId) {\n            customerOrdersStats(customerId, moment()).then(resp => {\n                const chartData = {\n                    series: [],\n                    labels:[],\n                    colors: [],\n                    fullseries: [],\n                    tooltip: {\n                        z: {\n                            formatter: function(val) {\n                                return val\n                            },\n                            title: 'Cantidad'\n                        },\n                        y: {\n                            formatter: function(val) {\n                                return priceFormat(val) + ' COP'\n                            },\n                            title: 'Monto'\n                        },\n                    }\n                };\n                if(resp){\n                    //CONCILIADAS Y ANULADAS\n\n                    chartData.fullseries[0] = {data: [], name: 'Monto'};\n\n                    resp.filter(pc => pc.status >= ORDERS_ENUM.CONFIRMED).forEach(pc => {\n\n                        chartData.fullseries[0].data.push({x: ORDER_STATUS[pc.status].name, y: pc.sumPrices, z: pc.qty});\n                        chartData.labels.push(ORDER_STATUS[pc.status].name);\n                        chartData.colors.push(ORDER_STATUS[pc.status].colorCss);\n                    })\n                }\n                setOrderChart(chartData);\n            });\n        }\n    }, [customerId]);\n\n    return (\n        <>\n            <h4 className=\"card-title text-info\">Pedidos</h4>\n            <div style={{background: '#f6f6f6', height: '100%'}}>\n                <BarChart data={orderChart} colors={orderChart.colors} tooltip={orderChart.tooltip} />\n            </div>\n        </>\n    );\n}\n\nOrdersPieChart.propTypes = {\n    customerId: PropTypes.number.isRequired\n}\n\nexport default OrdersPieChart;\n","/Users/ramon/Repositories/lucy-moie/src/components/Fields/InputSelectBasicField.js",["1698","1699","1700","1701","1702","1703","1704","1705","1706"],"import React, {useEffect, useState} from \"react\";\nimport PropTypes from \"prop-types\";\nimport Select from \"react-select\";\nimport {AvBaseInput} from \"availity-reactstrap-validation\";\nimport messages from \"./messages\";\nimport {FormText, FormGroup} from \"reactstrap\";\nimport './style.scss';\nimport {map} from \"lodash\";\nimport InputAsyncSearchField from \"./InputAsyncSearchField\";\nimport {FieldSelectBasic} from \"./index\";\n\nconst InputSelectBasicField = (props) => {\n    return (\n        <select\n            id={props.id}\n            name={props.name}\n            value={props.value}\n            onChange={(e => props.onChange?props.onChange(e.target.value):'')}\n            className={props.className || \"form-control\"}>\n            {map(props.options, (option, k) => (<option key={k} value={option.value}>{option.label}</option>))}\n        </select>\n    )\n}\n\nInputSelectBasicField.propTypes = {\n    name: PropTypes.string,\n    placeholder: PropTypes.string,\n    onChange: PropTypes.func,\n    options: PropTypes.array.isRequired,\n};\n\nexport default InputSelectBasicField;","/Users/ramon/Repositories/lucy-moie/src/components/Fields/InputAsyncSearchField.js",["1707","1708"],"import React, {useEffect, useState} from \"react\";\nimport PropTypes from \"prop-types\";\nimport AsyncSelect from 'react-select/async';\nimport {FormGroup, FormText} from \"reactstrap\";\nimport './style.scss';\nimport {getData} from \"../../helpers/service\";\nimport {arrayToOptionsByFieldName, getEmptyOptions} from \"../../common/converters\";\nimport {AvBaseInput} from \"availity-reactstrap-validation\";\nimport messages from \"./messages\";\nimport Conditionals from \"../../common/conditionals\";\nimport {__trim, trim} from \"../../common/utils\";\n\nconst InputAsyncSearchField = (props) => {\n    const {defaultValue, conditionalOptions, defaultConditions} = props;\n    const [selected, setSelected] = useState(null);\n\n    useEffect(() => {\n        setSelected(defaultValue);\n    }, [defaultValue]);\n\n    return (\n        <AvAsyncSearchInput\n            validate={{required: {value: props.required === true, errorMessage: messages.required}}}\n            name={props.name}\n            hasWild={props.hasWild || false}\n            value={selected}\n            placeholder={props.placeholder}\n            removeDots={props.removeDots}\n            urlStr={props.urlStr}\n            isClearable={props.isClearable}\n            noSpaces={props.noSpaces}\n            noDoubleSpaces={props.noDoubleSpaces}\n            onKeyPress={props.onKeyPress ? props.onKeyPress : null}\n            onChange={(value, meta) => {\n                setSelected(value)\n                if (props.onChange) {\n                    props.onChange(value, meta);\n                }\n            }}\n            conditionalOptions={conditionalOptions}\n            defaultConditions={defaultConditions}\n        />\n    )\n}\n\nInputAsyncSearchField.propTypes = {\n    urlStr: PropTypes.string.isRequired,\n};\n\n\nclass AvAsyncSearchInput extends AvBaseInput {\n    render() {\n        const {name, value, onChange, validate, isClearable, hasWild, urlStr, conditionalOptions, defaultConditions, placeholder, helpMessage, onKeyPress, removeDots, noSpaces, noDoubleSpaces} = this.props;\n        const validation = this.context.FormCtrl.getInputState(this.props.name);\n        const feedback = validation.errorMessage ? (<div className=\"invalid-feedback\" style={{display: \"block\"}}>{validation.errorMessage}</div>) : null;\n        const help = helpMessage ? (<FormText>{helpMessage}</FormText>) : null;\n        const isInvalid = validation.errorMessage ? \"select-is-invalid\" : \"\";\n\n        return (\n            <FormGroup className={isInvalid}>\n                <div>\n                    <AsyncSelect\n                        cacheOptions\n                        defaultOptions\n                        name={name}\n                        value={value}\n                        onChange={onChange}\n                        placeholder={placeholder}\n                        removeDots={removeDots}\n                        isClearable={isClearable}\n                        onKeyDown={onKeyPress ? onKeyPress : null}\n                        loadOptions={inputValue => {\n                            const cond = {...conditionalOptions};\n                            let textSearch = inputValue +'';\n                            if(removeDots){\n                                textSearch = textSearch.replace(/\\./g, '');\n                            }\n                            if(noSpaces){\n                                textSearch = trim(textSearch);\n                            }\n                            if(noDoubleSpaces){\n                                textSearch = __trim(textSearch);\n                            }\n\n\n                            if(hasWild && inputValue.includes(\"*\")){\n                                cond.operator = Conditionals.OPERATORS.LIKE;\n                                textSearch = textSearch.replace('*', '')\n                            } else if(hasWild) {\n                                cond.operator = Conditionals.OPERATORS.LIKE;\n                            } else {\n                                cond.operator = Conditionals.OPERATORS.EQUAL;\n                            }\n\n                           return getData(urlStr, textSearch, cond, defaultConditions).then(response => {\n                               const fieldName = conditionalOptions && conditionalOptions.fieldName ? conditionalOptions.fieldName : 'name';\n                               const options = arrayToOptionsByFieldName(response.data, fieldName);\n                               //options.unshift(getEmptyOptions());\n                               return options\n                           })\n\n                        }}\n                    />\n                </div>\n                {feedback}\n                {help}\n            </FormGroup>\n        );\n    }\n};\n\n\nexport default InputAsyncSearchField;\n","/Users/ramon/Repositories/lucy-moie/src/components/TableFilter/index.js",["1709","1710","1711"],"import React, {useState} from \"react\";\nimport {Button, Card, CardBody, Col, Label, Row} from \"reactstrap\";\nimport {AvForm} from \"availity-reactstrap-validation\";\nimport PropTypes from \"prop-types\";\nimport {Button as ButtonMaterial} from \"@material-ui/core\";\nimport Conditionals from \"../../common/conditionals\";\nimport {FieldAsyncSelect, FieldDate, FieldNumber, FieldSelect, FieldText} from \"../Fields\";\nimport {\n    __trim,\n    formatDateToServer,\n    formatDateToServerEndOfDay,\n    formatDateToServerStartOfDay,\n    isValidObject,\n    isValidOption\n} from \"../../common/utils\";\nimport moment from \"moment\";\nimport {DATE_MODES} from \"../Fields/InputDate\";\n\nexport const TableFilter = (props) => {\n    const {fields} = props;\n    const [show, setShow] = useState(true);\n    const form = React.createRef();\n\n    if (!props.isActive) {\n        return false;\n    }\n\n    const handleValidSubmit = (event, values) => {\n        if (props.onSubmit) {\n\n            let data = {...values};\n            const ranges = {};\n            Object.keys(values).filter(v => v.includes('_number')).forEach(v => {\n                const key = \"_\"+v.replace('_numberA_', '').replace('_numberB_', '');\n                if(!ranges[key]) ranges[key] = [];\n                ranges[key].push(values[v]);\n                delete data[v]\n            });\n\n            data = {...data, ...ranges};\n\n            const conditions = new Conditionals.Condition;\n            Object.keys(data)//FieldNames\n                .filter(dataField => data[dataField] && data[dataField] !== \"\")\n                .forEach(dataField => {\n\n                    // const isObject = data[dataField];\n                    //Se borra el \"_\" del inicio porque algunos campos se renderizan mal, ejemplo el status\n                    const fieldName = dataField.substr(1);\n\n                    let field = fields.filter(field => field.filter).filter(field => field.dataField === fieldName);\n\n                    if (!field || field.length === 0) {\n                        //para buscar dentro de nodos\n                        field = fields.filter(field => field.filter)\n                            .filter(field => field.dataField.includes('.') || field.dataField.includes('__'))\n                            .filter(field => field.dataField.startsWith(fieldName));\n                    }\n\n                    if (field && field.length > 0) {\n                        if (field.length === 1) {\n                            addConditionals(conditions, data, field, dataField, fieldName);\n                        }else{\n                            //agregar los los valores de los distintos nodos\n                            field.forEach(f => {\n                                const attr = f.dataField.split('.')[1];\n                                const d = {};\n                                d[f.dataField] = data[dataField][attr];\n\n                                if(d[f.dataField] && d[f.dataField] !== \"\"){\n                                    addConditionals(conditions, d, [f], f.dataField, f.dataField);\n                                }\n                            })\n                        }\n                    }\n                });\n\n            props.onSubmit(conditions.all());\n        }\n    }\n\n    const addConditionals = (conditions, data, field, dataField, fieldName) => {\n        if (field && field.length) {\n            fieldName = fieldName.replace('__', \".\")\n            const filter = field[0];\n            let value = data[dataField];\n\n            let operator;\n            if (filter.filterType === \"text\") {\n                operator = filter.filterCondition ? filter.filterCondition : Conditionals.OPERATORS.LIKE;\n                value = __trim(value);\n                conditions.add(fieldName, value, operator);\n            }\n            if (filter.filterType === \"voyed\") {//for status\n                    operator = resolveOperator(filter, value.value ? Conditionals.OPERATORS.NOT_NULL : Conditionals.OPERATORS.NULL);\n                    conditions.add(fieldName, null, operator);\n            }\n            if (filter.filterType === \"select\" && isValidOption(filter.filterOptions, value.value)) {//for status\n                if(value.value === true || value.value === false){\n                    operator = resolveOperator(filter, value.value ? Conditionals.OPERATORS.TRUE : Conditionals.OPERATORS.FALSE);\n                    conditions.add(fieldName, null, operator);\n                }else{\n                    operator = resolveOperator(filter, Conditionals.OPERATORS.EQUAL);\n                    conditions.add(fieldName, value.value, operator);\n                }\n            }\n            if (filter.filterType === \"asyncSelect\" && value.value) {\n                operator = resolveOperator(filter, Conditionals.OPERATORS.EQUAL);\n                conditions.add(fieldName, value.value, operator);\n            }\n\n            if (filter.filterType === \"number\" && isValidObject(value) && value.length > 0) {\n\n                if (value.length > 1 && value[0] && value[1]) {\n                    conditions.add(fieldName, value[0], Conditionals.OPERATORS.BETWEEN,[value[1]]);\n\n                } else if (value.length > 0 && value[0]) {\n                    conditions.add(fieldName, value[1], Conditionals.OPERATORS.GREATER_THAN_OR_EQUAL);\n\n                } else if (value.length > 1 && value[1]) {\n                    conditions.add(fieldName, value[1], Conditionals.OPERATORS.LESS_THAN);\n                }\n\n            }\n            if (filter.filterType === \"dateRange\" && value && value.length > 0) {\n                if(moment(value[0]).isSame(moment(value[1]))){\n                    conditions.add(fieldName,formatDateToServerStartOfDay(value[0]), Conditionals.OPERATORS.BETWEEN,[formatDateToServerEndOfDay(value[0])]);\n                }\n                else {\n                    conditions.add(fieldName,formatDateToServerStartOfDay(value[0]), Conditionals.OPERATORS.BETWEEN,[formatDateToServerEndOfDay(value[1])]);\n                }\n            }\n        }\n    }\n\n    const resolveOperator = (filter, defaultOperator) => {\n        return  filter.filterCondition ? filter.filterCondition : defaultOperator;\n    }\n\n    const cleanFilters = () => {\n        const conditions = new Conditionals.Condition;\n        props.onSubmit(conditions.all());\n        form && form.current && form.current.reset();\n        setShow(false);\n        setTimeout(() => {\n            setShow(true);\n        }, 10)\n    }\n\n    return (<div className=\"col-md-4\">\n        <Card>\n            <CardBody>\n                {props.onPressDisabled && (\n                    <div className={\"float-end\"}>\n                        <ButtonMaterial color=\"primary\" size=\"small\" onClick={props.onPressDisabled}>\n                            <i className={\"mdi mdi-minus\"}> </i>\n                        </ButtonMaterial>\n                    </div>\n                )}\n                <div className=\"mb-4\">\n                    <h5><i className={\"mdi mdi-filter-menu\"}> </i> Filtros Avanzados &nbsp;</h5>\n                </div>\n                {show && (\n                    <AvForm className=\"needs-validation\" autoComplete=\"off\"\n                            onValidSubmit={(e, v) => {\n                                handleValidSubmit(e, v)\n                            }}\n                            ref={form}>\n\n                        {fields.filter(f => f.filter).map((field, idx) => (\n                            <Row key={idx}>\n                                {field.filterType === 'text' && (\n                                    <Col md=\"12\">\n                                        <div className=\"mb-3\">\n                                            <Label htmlFor={\"_\" + field.dataField}>{field.text}</Label>\n                                            <FieldText name={\"_\" + field.dataField}\n                                                       defaultValue={field.filterDefaultOption}\n                                                       placeholder={field.text}/>\n                                        </div>\n                                    </Col>\n                                )}\n                                {field.filterType === 'number' && (\n                                    <Col md=\"12\">\n                                        <div className=\"mb-3\">\n                                            <Label htmlFor={\"_\" + field.dataField}>{field.text}</Label>\n                                            <Row>\n                                                <Col xs=\"6\">\n                                                    <FieldNumber name={\"_numberA_\" + field.dataField}\n                                                                 defaultValue={field.filterDefaultOption}\n                                                                 placeholder=\"Desde\"\n                                                    />\n                                                </Col>\n                                                <Col xs=\"6\">\n                                                    <FieldNumber name={\"_numberB_\" + field.dataField}\n                                                                 defaultValue={field.filterDefaultOption}\n                                                                 placeholder=\"Hasta\"\n                                                    />\n                                                </Col>\n                                            </Row>\n                                        </div>\n                                    </Col>\n                                )}\n                                {field.filterType === 'select' && (\n                                    <Col md=\"12\" >\n                                        <div className=\"mb-3\">\n                                            <Label htmlFor={\"_\" + field.dataField}>{field.text}</Label>\n                                            <FieldSelect\n                                                id={\"_\" + field.dataField}\n                                                name={\"_\" + field.dataField}\n                                                options={field.filterOptions}\n                                                defaultValue={field.filterDefaultOption}\n                                                placeholder={field.text}\n                                            />\n                                        </div>\n                                    </Col>\n                                )}\n                                {field.filterType === 'voyed' && (\n                                    <Col md=\"12\" >\n                                        <div className=\"mb-3\">\n                                            <Label htmlFor={\"_\" + field.dataField}>{field.text}</Label>\n                                            <FieldSelect\n                                                name={\"_\" + field.dataField}\n                                                options={field.filterOptions}\n                                                defaultValue={field.filterDefaultOption}\n                                                placeholder={field.text}\n                                            />\n                                        </div>\n                                    </Col>\n                                )}\n                                {field.filterType === 'asyncSelect' && (\n                                    <Col md=\"12\" >\n                                        <div className=\"mb-3\">\n                                            <Label htmlFor={\"_\" + field.dataField}>{field.text}</Label>\n                                            <FieldAsyncSelect\n                                                name={\"_\" + field.dataField}\n                                                urlStr={field.urlStr}\n                                                placeholder={field.text}\n                                                defaultValue={field.filterDefaultOption}\n                                                conditionalOptions={field.conditionalOptions}\n                                                defaultConditions={field.defaultConditions}\n                                                hasWild={field.hasWild}\n                                            />\n                                        </div>\n                                    </Col>\n                                )}\n                                {field.filterType === 'dateRange' && (\n                                    <Col md=\"12\" >\n                                        <div className=\"mb-3\">\n                                            <Label htmlFor={\"_\" + field.dataField}>{field.text}</Label>\n                                            <FieldDate\n                                                name={\"_\" + field.dataField}\n                                                mode={DATE_MODES.RANGE}\n                                            />\n                                        </div>\n                                    </Col>\n                                )}\n                            </Row>\n                        ))}\n                        <Row>\n                            <Col md={\"12\"}>\n                                <div className={\"float-end\"}>\n                                    <Button type=\"submit\" color=\"primary\" className=\"btn-sm btn-rounded waves-effect waves-light\">\n                                        <i className={\"mdi mdi-magnify\"}> </i> Buscar\n                                    </Button>\n                                </div>\n                                <div className={\"float-end ml-5\"}>\n                                    <Button type=\"button\"\n                                            onClick={cleanFilters}\n                                            color=\"default\"\n                                            className=\"btn-sm btn-rounded waves-effect waves-light\">\n                                        Limpiar\n                                    </Button>\n                                </div>\n                            </Col>\n                        </Row>\n                    </AvForm>\n                )}\n            </CardBody>\n        </Card>\n    </div>)\n}\nTableFilter.propTypes = {\n    isActive: PropTypes.bool,\n    onSubmit: PropTypes.func,\n    onPressDisabled: PropTypes.func,\n    fields: PropTypes.array.isRequired\n};\n","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/create/orderTracking.js",["1712","1713","1714"],"import React, {useEffect, useState} from \"react\"\nimport {Col, Label, Row} from \"reactstrap\"\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {FieldText} from \"../../../components/Fields\";\nimport {AvForm} from \"availity-reactstrap-validation\";\nimport {Button} from \"@material-ui/core\";\nimport {updateCard} from \"../../../store/order/actions\";\n\nconst OrderTracking = (props) => {\n    const {\n        car, showAsModal, onCloseModal, onAcceptModal, orderDelivery, onUpdateCar\n    } = props;\n\n    const [tracking, setTracking] = useState(null);\n\n    //Carga inicial\n    useEffect(() => {\n            setTracking(orderDelivery.tracking || \"\");\n    }, [showAsModal]);\n\n    const acceptModal = () => {\n        onAcceptModal(tracking);\n    }\n\n    return (\n        <React.Fragment>\n            <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => acceptModal(e, v)}>\n                <Row>\n                    <Col>\n                        <h4 className=\"card-title text-info\"><i className=\"uil uil-truck\"> </i> Opciones de envio</h4>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col md={12} className=\"p-1\">\n                        <Label htmlFor=\"weight\">Guia número</Label>\n                        <FieldText\n                            id={\"tracking\"}\n                            name={\"tracking\"}\n                            value={tracking}\n                            onChange={item => setTracking(item.target.value)}\n                        />\n                    </Col>\n                </Row>\n                {showAsModal && (\n                    <>\n                        <hr/>\n                        <Row>\n                            <Col md={12} className=\"text-right\">\n                                {onCloseModal && (\n                                    <button type=\"button\" className=\"btn btn-light\" onClick={() => props.onCloseModal()}>Cancelar</button>\n                                )}\n                                {onAcceptModal && (\n                                    <Button color=\"primary\" type=\"submit\">Guardar</Button>\n                                )}\n                            </Col>\n                        </Row>\n                    </>\n                )}\n            </AvForm>\n        </React.Fragment>\n    )\n}\n\nOrderTracking.propTypes = {\n    history: PropTypes.object\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onUpdateCar: (data) => dispatch(updateCard(data)),\n})\n\nconst mapStateToProps = state => {\n    const {car} = state.Order\n    return {car};\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(OrderTracking))\n","/Users/ramon/Repositories/lucy-moie/src/pages/State/list/statesColumn.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/User/list/forgetPassword.js",["1715","1716"],"import PropTypes from 'prop-types'\nimport React, {useEffect, useState} from \"react\"\n\n// Redux\nimport {connect} from \"react-redux\"\nimport {withRouter} from \"react-router-dom\"\nimport {AvField, AvForm} from \"availity-reactstrap-validation\"\nimport {changePassword, resetPasswordState} from \"../../../store/user/actions\";\nimport CustomModal from \"../../../components/Modal/CommosModal\";\n\nconst ForgetPassword = ({user, changePassword, resetPasswordState, passwordChanged}) => {\n\n    const [userSelected, setUserSelected] = useState(null);\n    const [newPassword, setNewPassword] = useState(null);\n    const [openChangePasswordModal, setOpenChangePasswordModal] = useState(false);\n    const [isValidPassword, setIsValidPassword] = useState(false);\n\n    useEffect(() => {\n        return function cleanup() {\n            resetPasswordState();\n        };\n    });\n\n    useEffect(() => {\n        resetPasswordState();\n\n        if (user) {\n            setUserSelected(user);\n            toggleChangePasswordModal();\n        }\n    }, [user])\n\n    useEffect(() => {\n        if (passwordChanged) {\n            onCloseChangePasswordModal();\n        }\n    }, [passwordChanged])\n\n    const toggleChangePasswordModal = () => {\n        setOpenChangePasswordModal(!openChangePasswordModal);\n    }\n\n    const onCloseChangePasswordModal = () => {\n        toggleChangePasswordModal();\n        setUserSelected(null);\n        resetPasswordState();\n    }\n\n    const onAcceptChangePasswordModal = () => {\n        if(!isValidPassword){\n            return;\n        }\n        const payload = {\n            username: user.username,\n            password: newPassword\n        };\n        changePassword(payload);\n    }\n\n    const validatePasswords = (cPassword) => {\n        let isValid = newPassword === cPassword;\n        setIsValidPassword(isValid);\n        if (!isValid) {\n            return 'Las contraseñas no son iguales';\n        }\n        return true;\n    }\n\n    return (\n        <React.Fragment>\n            <CustomModal title={`Cambio de contraseña`}\n                         isOpen={openChangePasswordModal}\n                         onClose={onCloseChangePasswordModal}\n                         onAccept={onAcceptChangePasswordModal}>\n                <div className=\"p-2\">\n                    <div className=\"alert alert-success text-center mb-4\" role=\"alert\"> Ingrese la nueva contraseña para el usuario <b>{`${userSelected?.name} ${userSelected?.lastname}`}</b></div>\n\n                    <AvForm className=\"form-horizontal\"  autoComplete=\"off\" >\n                        <div className=\"mb-1\">\n                                <AvField\n                                    name=\"password\"\n                                    label=\"Contraseña\"\n                                    defaultValue={newPassword}\n                                    type=\"password\"\n                                    autoComplete=\"off\"\n                                    required\n                                    placeholder=\"*********\"\n                                    onChange={(e) => {\n                                        setNewPassword(e.target.value);\n                                    }}\n                                />\n                        </div>\n                        <div className=\"mb-1\">\n                            <AvField\n                                name=\"confirmPassword\"\n                                label=\"Confirmar Contraseña\"\n                                type=\"password\"\n                                autoComplete=\"off\"\n                                required\n                                placeholder=\"*********\"\n                                validate={{myValidation: validatePasswords}}\n                            />\n                        </div>\n                    </AvForm>\n                </div>\n            </CustomModal>\n        </React.Fragment>\n    )\n}\n\nForgetPassword.propTypes = {\n    loading: PropTypes.bool,\n    user: PropTypes.object,\n}\n\nconst mapStateProps = state => {\n    const {changePassword} = state.User\n    return {loading: changePassword.loading, user: changePassword.user, passwordChanged: changePassword.success}\n}\n\nexport default withRouter(\n    connect(mapStateProps, {changePassword, resetPasswordState})(ForgetPassword)\n)\n","/Users/ramon/Repositories/lucy-moie/src/store/layout/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/User/list/userColumn.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/sizes/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Municipality/list/municipalityColumns.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Customer/customer_status.js",["1717","1718"],"import React from \"react\";\n\nexport const CUSTOMER_STATUS = {\n    ACTIVE: true,\n    INACTIVE: false\n};\n\nexport const ConverterCustomerStatus = (status) => {\n    switch(status) {\n        case CUSTOMER_STATUS.ACTIVE:\n            return 'Si';\n            break;\n        default:\n            return 'No';\n    }\n}\n","/Users/ramon/Repositories/lucy-moie/src/pages/Category/list/categoryColumn.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/Fields/InputPhoneField.js",["1719","1720"],"import React, {useEffect, useState} from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport PhoneInput from 'react-phone-input-2'\nimport 'react-phone-input-2/lib/style.css'\nimport es from 'react-phone-input-2/lang/es.json'\nimport {AvBaseInput} from \"availity-reactstrap-validation\";\nimport messages from \"./messages\";\nimport {FormText, FormGroup} from \"reactstrap\";\nimport './style.scss';\n\nconst InputPhoneField = (props) => {\n\n    return (\n        <AvPhoneInput\n            id={props.id}\n            name={props.name}\n            value={props.value}\n            required={props.required}\n            country={props.country || 'co'}\n            placeholder={props.placeholder}\n            onChange={(value) => props.onChange && props.onChange(value)}\n            validate={\n                {\n                    required: {value: props.required ? true : false, errorMessage: messages.required}\n                }\n            }\n            onValidate={props.onValidate}\n        />\n    )\n}\n\nInputPhoneField.propTypes = {\n    name: PropTypes.string,\n    placeholder: PropTypes.string,\n    onChange: PropTypes.func,\n    country: PropTypes.string,\n    required: PropTypes.bool,\n    defaultValue: PropTypes.any,\n};\n\nclass AvPhoneInput extends AvBaseInput {\n    render() {\n        const {id, name, value, onChange, required, country, placeholder, helpMessage, onValidate} = this.props;\n        const validation = this.context.FormCtrl.getInputState(this.props.name);\n        const feedback = validation.errorMessage ? (<div className=\"invalid-feedback\" style={{display: \"block\"}}>{validation.errorMessage}</div>) : null;\n        const help = helpMessage ? (<FormText>{helpMessage}</FormText>) : null;\n        const isInvalid = validation.errorMessage ? \"select-is-invalid\" : \"\";\n\n        return (\n            <FormGroup className={isInvalid}>\n                <div>\n                    <PhoneInput\n                        id={id || name}\n                        country={country}\n                        onlyCountries={[country]}\n                        preferredCountries={[country]}\n                        value={value}\n                        name={name}\n                        placeholder={placeholder}\n                        localization={es}\n                        inputClass=\"form-control w-100\"\n                        inputProps={{\n                            name: {name},\n                            required: {required}\n                        }}\n                        onChange={(value, country, e, formattedValue) => {\n                            onChange(formattedValue);\n                        }}\n                        isValid={onValidate}\n                    />\n                </div>\n                {feedback}\n                {help}\n            </FormGroup>\n        );\n    }\n};\n\nexport default InputPhoneField;\n","/Users/ramon/Repositories/lucy-moie/src/components/Common/Observations.js",["1721","1722","1723","1724","1725"],"import React, {useEffect, useState} from \"react\"\nimport {AvForm} from \"availity-reactstrap-validation\"\nimport {Col, Row} from \"reactstrap\"\nimport {Card, Tooltip} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport CustomizedTimeline from \"../../pages/CustomerEdit/TimeLine\";\nimport ButtonSubmit from \"./ButtonSubmit\";\nimport {ConfirmationModalAction} from \"../Modal/ConfirmationModal\";\nimport {threeDots} from \"../../common/utils\";\nimport {deleteComment, getCommentsByEntity, registerComment} from \"../../store/comment/actions\";\nimport {findFieldOptionByGroup} from \"../../helpers/service\";\nimport HasPermissions from \"../HasPermissions\";\nimport {PERMISSIONS} from \"../../helpers/security_rol\";\nimport HasPermissionsFunc from \"../HasPermissionsFunc\";\nimport {showMessage} from \"../MessageToast/ShowToastMessages\";\nimport Autocomplete from \"../Fields/Autocomplete\";\nimport {GROUPS} from \"../../common/constants\";\nimport {getFieldOptionByGroups, registerFieldOption} from \"../../store/fieldOptions/actions\";\n\nconst Observations = (props) => {\n\n    const {user, observations, onGetObservations, onCreateObservation, onDeleteObservation, onGetCommentSuggested, entitySuggested, entity, entityId, fieldOptions, onCreateFieldOption,onGetFieldOptions} = props;\n    const [observation, setObservation] = useState(undefined);\n    const [observationsSuggested, setObservationsSuggested] = useState([]);\n    const [observationList, setObservationList] = useState([]);\n    const [entityobservationList, setEntityobservationList] = useState([]);\n\n    useEffect(() => {\n        onGetFieldOptions();\n        onGetObservations(entity, entityId);\n        if(entitySuggested) onGetCommentSuggested(entitySuggested).then(data => setObservationsSuggested(data.map(item => item.value)));\n    }, [entityId]);\n\n    useEffect(() => {\n        if (fieldOptions && fieldOptions.length > 0) {\n            setEntityobservationList(filterFieldOptions(fieldOptions, entitySuggested + '_LIST').map(op => {\n                const key = op.name ? op.name : '';\n                return {name: key, value: key};\n            }));\n        } else {\n            setEntityobservationList([]);\n        }\n    }, [fieldOptions])\n\n    const filterFieldOptions = (arr, groups) => {\n        return arr.filter(op => (op.groups === groups)).map(op => ({name: op.name}));\n    }\n\n    useEffect(() => {\n        if (observations[entity] && observations[entity].length > 0) {\n            if(observations[entity].some(o => o.entity === entity)) setObservationList(observations[entity].filter(o => o.entity === entity));\n        }else{\n            setObservationList([]);\n        }\n    }, [observations[entity]]);\n\n    const onDelete = (id) => {\n        if (HasPermissionsFunc([PERMISSIONS.COMMENT_DELETE])) {\n            ConfirmationModalAction({\n                title: '¿Seguro desea eliminar este registro?',\n                description: 'Usted está eliminado este registro, una vez eliminado no podrá ser recuperado.',\n                id: '_observationsModal',\n                onConfirm: () => {\n                    const item = observationList.find(cl => cl.id === id);\n                    if (onDeleteObservation) onDeleteObservation(item);\n                }\n            });\n        } else {\n            showMessage.error('Usted no tiene permiso para eliminar comentarios');\n        }\n    }\n\n    const onAdd = (comment) => {\n        if(onCreateObservation) onCreateObservation(entityId, {entity: entity, comment: comment});\n    }\n\n    const handleValidSubmit = (event) => {\n        if (!observation || observation === '') return;\n        setObservation(undefined);\n        event.target.reset();\n\n        if (!entityobservationList.some(op => op.name === observation)) {\n            onCreateFieldOption({groups: entitySuggested + '_LIST', name: observation, value: observation}, props.history);\n        }\n\n        onAdd(observation);\n\n    }\n\n    return (\n        <React.Fragment>\n            <Card id={''} className=\"p-3\">\n                {(observationsSuggested && observationsSuggested.length > 0) && (\n                    <Row>\n                        <Col md={12}>\n                            <h4 className=\"card-title text-info\">Observaciones sugeridas</h4>\n                        </Col>\n                        <Col md={12}>\n                            {observationsSuggested.map((suggest, k) => (\n                               <span key={k}>\n                                   <Tooltip placement=\"bottom\" title={suggest} aria-label=\"add\">\n                                       <button className=\"btn bg-light m-1\" onClick={() => onAdd(suggest)}>\n                                        <span className=\"font-sm m-0\"><i className={\"uil uil-star\"}> </i> &nbsp;\n                                            {threeDots(suggest, 30)}\n                                        </span>\n                                       </button>\n                                   </Tooltip>\n                               </span>\n                            ))}\n                        </Col>\n                        <hr/>\n                    </Row>\n                )}\n                <Row>\n                    <Col md={12}>\n                        <h4 className=\"card-title text-info\">Agregar observación</h4>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col md={12}>\n                        <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => handleValidSubmit(e, v)}>\n                            <Row>\n                                <Col md={10}>\n                                    <HasPermissions permission={PERMISSIONS.ORDER_AUTOSAVE_COMMENT} renderNoAccess={() =>\n                                        <input id={\"observation\"} name={\"observation\"} className=\"form-control\" value={observation} onChange={(e) => setObservation(e.target.value)} required/>\n                                    }>\n                                        <Autocomplete\n                                            id={\"observation\"}\n                                            name={\"observation\"}\n                                            options={entityobservationList}\n                                            defaultValue={observation}\n                                            onChange={(observation) => setObservation(observation)}\n                                        />\n                                    </HasPermissions>\n                                </Col>\n                                <Col md={2}>\n                                    <HasPermissions permission={PERMISSIONS.COMMENT_CREATE}>\n                                        <ButtonSubmit loading={props.loading} disabled={!observation}/>\n                                    </HasPermissions>\n                                </Col>\n                            </Row>\n                        </AvForm>\n                    </Col>\n                    <Col md={12}>\n                        <hr/>\n                        <h4 className=\"card-title text-info\">Observaciones</h4>\n                    </Col>\n                    <HasPermissions permission={PERMISSIONS.COMMENT_SHOW}>\n                        <Col md={12} style={{maxHeight: '500px', overflowY: 'auto'}}>\n                            {observationList.length > 0 ? (<CustomizedTimeline data={observationList} onDelete={onDelete}/>) : \"No hay observaciones\"}\n                        </Col>\n                    </HasPermissions>\n                </Row>\n            </Card>\n        </React.Fragment>\n    );\n}\n\nconst mapStateToProps = state => {\n    const {fieldOptions, refresh} = state.FieldOption\n    const {user} = state.Login\n    const {comments} = state.Comment\n    return {user, observations: comments, fieldOptions, refresh}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGetFieldOptions: (conditional = null, limit = 500, page) => dispatch(getFieldOptionByGroups([GROUPS.ORDER_OBSERVATIONS_LIST, GROUPS.CUSTOMER_OBSERVATIONS_LIST], limit, page)),\n    onGetObservations: (entity, idRelated) => dispatch(getCommentsByEntity(entity, idRelated)),\n    onCreateObservation: (entityId, comment) => dispatch(registerComment(entityId, comment)),\n    onDeleteObservation: (comment) => dispatch(deleteComment(comment)),\n    onGetCommentSuggested: findFieldOptionByGroup,\n    onCreateFieldOption: (data, history) => dispatch(registerFieldOption(data, history)),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(Observations)\n)\n\nObservations.propTypes = {\n    entitySuggested: PropTypes.string,\n    entity: PropTypes.string.isRequired,\n    entityId: PropTypes.number.isRequired,\n}\n","/Users/ramon/Repositories/lucy-moie/src/components/Fields/InputTextField.js",["1726","1727"],"import {AvField} from \"availity-reactstrap-validation\";\nimport React, {useEffect, useState} from \"react\";\nimport PropTypes from \"prop-types\";\nimport messages from './messages';\n\nconst TextField = (props) => (\n    <AvField\n        id ={props.id}\n        name={props.name}\n        value={props.value}\n        placeholder={props.placeholder}\n        onChange={props.onChange ? props.onChange : null}\n        onBlur={props.onBlur ? props.onBlur : null}\n        onKeyPress={props.onKeyPress ? props.onKeyPress : null}\n        type={props.type ? props.type : \"text\"}\n        className={`form-control ${props.className ? props.className : ''}` }\n        disabled={!!props.disabled}\n        pattern={props.pattern ? props.pattern : false}\n        validate={ !(props.pattern || props.required || props.minLength || props.maxLength) ? {} :\n            {\n                pattern:  { value: props.pattern ? props.pattern : false, errorMessage: props.patternMessage ? props.patternMessage : 'Formato de campo invalido' },\n                required: { value: props.required ? true : false, errorMessage: messages.required },\n                minLength: { value: props.minLength ? props.minLength: 0, errorMessage: messages.minLength.replace(\"{length}\", props.minLength)},\n                maxLength: { value: props.maxLength ? props.maxLength: 255, errorMessage: messages.maxLength.replace(\"{length}\", props.maxLength)}\n            }\n        }\n    />\n)\n\nTextField.propTypes = {\n    name: PropTypes.string,\n    value: PropTypes.string,\n    placeholder: PropTypes.string,\n    type: PropTypes.string,\n    required: PropTypes.bool,\n    disabled: PropTypes.bool,\n    minLength: PropTypes.number,\n    maxLength: PropTypes.number,\n    onPressEnter: PropTypes.func,\n    pattern: PropTypes.string,\n    patternMessage: PropTypes.string,\n}\n\nconst TextAlphaField = (props) => (\n    <AvField\n        id ={props.id}\n        name={props.name}\n        value={props.value}\n        placeholder={props.placeholder}\n        onChange={props.onChange ? props.onChange : null}\n        onBlur={props.onBlur ? props.onBlur : null}\n        type={props.type ? props.type : \"text\"}\n        className={`form-control ${props.className ? props.className : ''}` }\n        onPressEnter={this.onPressEnter}\n        validate={\n            {\n                required: { value: props.required ? true : false, errorMessage: messages.required },\n                minLength: { value: props.minLength ? props.minLength: 0, errorMessage: messages.minLength.replace(\"{length}\", props.minLength)},\n                maxLength: { value: props.maxLength ? props.maxLength: 255, errorMessage: messages.maxLength.replace(\"{length}\", props.maxLength)},\n                pattern: {value: '^[A-Za-z]+$', errorMessage: messages.onlyAlpha},\n            }\n        }\n    />\n)\n\nTextAlphaField.propTypes = {\n    name: PropTypes.string,\n    value: PropTypes.string,\n    placeholder: PropTypes.string,\n    type: PropTypes.string,\n    required: PropTypes.bool,\n    disabled: PropTypes.bool,\n    minLength: PropTypes.number,\n    maxLength: PropTypes.number,\n}\n\nconst NumberField = (props) => {\n\n    const [value, setValue] = useState(props.value);\n\n    useEffect(() => {\n        if (null != props.value && props.value !== value) {\n            setValue(isNaN(props.value) ? \"\" : props.value);\n        }\n    }, [props.value])\n\n    const onChange = (e) => {\n        let val = e.target.value;\n        setValue(val);\n        if (isNaN(Number(val))) {\n            val = value || val;\n            setTimeout(() => {\n                setValue(clearValue(val));\n            }, 10)\n        }\n        if (props.onChange) {\n            props.onChange(clearValue(val));\n        }\n    }\n\n    const clearValue = (val) => {\n        return val && val.replace ? parseFloat(val.replace(/[^\\d]/g, '')) : null;\n    }\n\n    return <AvField\n        id={props.id}\n        name={props.name}\n        value={props.value}\n        defaultValue={value}\n        placeholder={props.placeholder}\n        disabled={props.disabled}\n        onChange={onChange}\n        onKeyPress={(event) => {\n            if (!/[0-9]/.test(event.key)) {\n                event.preventDefault();\n            }\n        }}\n        type={\"text\"}\n        className=\"form-control\"\n        validate={\n            {\n                required: {value: props.required === true, errorMessage: messages.required},\n            }\n        }\n    />\n}\n\nNumberField.propTypes = {\n    name: PropTypes.string,\n    value: PropTypes.number,\n    placeholder: PropTypes.string,\n    required: PropTypes.bool\n}\n\nconst NumberDecimalField = (props) => {\n\n    const [value, setValue] = useState(props.value);\n\n    useEffect(() => {\n        if (null != props.value && props.value !== value) {\n            setValue(isNaN(props.value) ? \"\" : props.value);\n        }\n    }, [props.value])\n\n    const onChange = (e) => {\n        let val = e.target.value;\n        setValue(val);\n        if (isNaN(Number(val))) {\n            val = value || val;\n            setTimeout(() => {\n                setValue(clearValue(val));\n            }, 10)\n        }\n        if (props.onChange) {\n            props.onChange(clearValue(val));\n        }\n    }\n\n    const clearValue = (val) => {\n        return val && val.replace ? parseFloat(val.replace(/[^\\d.]/g, '')) : null;\n    }\n\n    return <AvField\n        id={props.id}\n        name={props.name}\n        value={value}\n        defaultValue={value}\n        placeholder={props.placeholder}\n        onChange={onChange}\n        onKeyPress={(event) => {\n            if (!/[0-9.]/.test(event.key)) {\n                event.preventDefault();\n            }\n        }}\n        type=\"text\"\n        className=\"form-control\"\n        validate={\n            {\n                required: {value: props.required === true, errorMessage: messages.required},\n            }\n        }\n    />\n}\n\nNumberDecimalField.propTypes = {\n    name: PropTypes.string,\n    value: PropTypes.number,\n    placeholder: PropTypes.string,\n    required: PropTypes.bool\n}\n\nconst EmailField = (props) => (\n    <AvField\n        id ={props.id}\n        name={props.name}\n        value={props.value}\n        placeholder={props.placeholder}\n        type={props.type}\n        className=\"form-control\"\n        validate={\n            {   required: {\n                    value: props.required ? true : false,\n                    errorMessage: messages.required },\n                email: { value: true, errorMessage: messages.email_invalid } }\n        }\n    />\n)\n\nEmailField.propTypes = {\n    name: PropTypes.string,\n    value: PropTypes.string,\n    placeholder: PropTypes.string,\n    type: PropTypes.string,\n    required: PropTypes.bool\n}\n\nexport {\n    TextField,\n    NumberField,\n    NumberDecimalField,\n    EmailField,\n    TextAlphaField\n};\n","/Users/ramon/Repositories/lucy-moie/src/components/Fields/InputSearchField.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/Fields/InputSwitchField.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/user/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Template/list/templateColumn.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/CustomerEdit/CustomerForm.js",["1728","1729","1730","1731","1732","1733"],"import React, {useEffect, useState} from \"react\"\nimport {Col, Label, Row} from \"reactstrap\"\nimport {AvField, AvForm} from \"availity-reactstrap-validation\"\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport {apiError} from \"../../store/auth/login/actions\";\nimport PropTypes from \"prop-types\";\nimport {getCustomer, registerCustomer, updateCustomer} from \"../../store/customer/actions\";\nimport {getMunicipalities, getStates} from \"../../store/location/actions\";\nimport Conditionals from \"../../common/conditionals\";\nimport {FieldEmail, FieldPhone, FieldSelect, FieldSwitch, FieldText} from \"../../components/Fields\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\nimport {hiddenPhone} from \"../../common/utils\";\nimport HasPermissionsFunc from \"../../components/HasPermissionsFunc\";\nimport {PERMISSIONS} from \"../../helpers/security_rol\";\n\nconst CustomerForm = (props) => {\n    const {getCustomer, customer, showAsModal = false, onCloseModal= false, onAcceptModal= false} = props;\n    const [customerData, setCustomerData] = useState({_status: \"true\"});\n    const [validPhone, setValidPhone] = useState(false);\n\n    // definición de localidades\n    const {getStates, states} = props;\n    const {getMunicipalities, municipalities} = props;\n    const [state, setState] = useState(null);\n    const [municipality, setMunicipality] = useState(null);\n    const [phoneedit, setPhoneedit] = useState(false);\n    const [cellphoneedit, setCellphoneedit] = useState(false);\n\n    const [statesOptions, setStates] = useState([]);\n    const [municipalitiesOptions, setMunicipalities] = useState([]);\n\n    const hasPhonePermission = HasPermissionsFunc([PERMISSIONS.CUSTOMER_PHONE]);\n\n    //carga inicial\n    useEffect(() => {\n        if (props.match.params.id && getCustomer) {\n            getCustomer(props.match.params.id);\n        }\n        getStates();\n    }, [getCustomer]);\n\n    //cargar la información del cliente\n    useEffect(() => {\n        if (customer.id) {\n\n            if(!hasPhonePermission) {\n                setCustomerData({...customer, phone: '', cellphone: ''});\n            } else {\n                setCustomerData(customer);\n            }\n\n            //definir estado por defecto\n            const defaultState = customer.state?.id || null;\n            setState(defaultState);\n\n            //definir municipalidad por defecto\n            const defaultMunicipality = customer.municipality?.id || null;\n            setMunicipality(defaultMunicipality);\n\n        }\n    }, [customer]);\n\n    //cargar estados\n    useEffect(() => {\n        if (states && states.length > 0) {\n            const itemsConverter = item => ({\n                label: item.name,\n                value: item.id\n            });\n            setStates(states.map(itemsConverter));\n        } else {\n            setStates([]);\n        }\n    }, [states]);\n\n    //cargar municipios\n    useEffect(() => {\n        if (municipalities && municipalities.length > 0) {\n            const itemsConverter = item => ({\n                label: item.name,\n                value: item.id\n            });\n            setMunicipalities(municipalities.map(itemsConverter));\n        } else {\n            setMunicipalities([]);\n        }\n    }, [municipalities]);\n\n    useEffect(() => {\n        if (state != null) {\n            const conditions = new Conditionals.Condition;\n            conditions.add('state', state);\n            getMunicipalities(conditions.all(), 500);\n        }\n    }, [state]);\n\n    const handleValidSubmit = (event, values) => {\n        const data = filteredValues(values);\n\n        if(!validPhone && !phoneedit){\n            return false;\n        }\n\n        if (!customer.id) {\n            props.registerCustomer(data, props.history)\n        } else {\n            props.updateCustomer(customer.id, data, props.history)\n        }\n        if(showAsModal && onAcceptModal){\n            onAcceptModal(customer.id);\n        }\n    }\n\n    const filteredValues = (values) => {\n        const data = {...values};\n        data.state = values.state?.value;\n        data.municipality = values.municipality?.value;\n        data.status = values._status;\n\n        if(data.cellphone) {\n            data.cellphone = values.cellphone ? values.cellphone.replace(/\\s/g, '') : '';\n        }\n        if(data.phone) {\n            data.phone = values.phone ? values.phone.replace(/\\s/g, '') : '';\n        }\n\n        if(data.document) {\n            data.document = data.document.replace(/\\./g, '');\n            data.document = data.document.trim();\n            data.document = data.document.replace(/\\s+/g, ' ').trim();\n        }\n\n        if(data.name){\n            data.name = data.name.trim();\n            data.name = data.name.replace(/\\s+/g, ' ').trim();\n        }\n\n        if(data.phone){\n            data.phone = data.phone.trim();\n            data.phone = data.phone.replace(/\\s+/g, ' ').trim();\n        }\n\n        if(data.cellphone){\n            data.cellphone = data.cellphone.trim();\n            data.cellphone = data.cellphone.replace(/\\s+/g, ' ').trim();\n        }\n\n        delete data._status;\n        return data;\n    }\n\n    function handleSelectDepartment(option) {\n        setState(option.value);\n    }\n\n\n    return (\n        <React.Fragment>\n            <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => handleValidSubmit(e, v)}>\n                <Row>\n                    <Col xl={12}>\n                        {!showAsModal && (\n                            <div className={\"mt-1 mb-5\"} style={{position: \"relative\"}}>\n                                <div className={\"float-end\"}>\n                                    <Row>\n                                        <Col>\n                                            ¿Contrapago?\n                                        </Col>\n                                        <Col>\n                                            <FieldSwitch\n                                                value={customerData.status}\n                                                defaultValue={customerData.document ? customerData.status : true}\n                                                name={\"_status\"}\n                                            />\n                                        </Col>\n                                    </Row>\n                                </div>\n                            </div>\n                        )}\n                        <Row>\n                            <Col md=\"6\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"name\">Nombre <span className=\"text-danger\">*</span></Label>\n                                    <FieldText\n                                        id={\"name\"}\n                                        name={\"name\"}\n                                        value={customerData.name}\n                                        required\n                                    />\n                                </div>\n                            </Col>\n                            <Col md=\"6\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"validationCustom02\">Email </Label>\n                                    <FieldEmail\n                                        name={\"email\"}\n                                        value={customerData.email}\n                                    />\n                                </div>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md=\"4\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"document\">Documento <span className=\"text-danger\">*</span></Label>\n                                    <FieldText\n                                        id='document'\n                                        name={\"document\"}\n                                        value={customerData.document}\n                                        pattern={\"/^[0-9]{0,}$/\"}\n                                        patternMessage={'Debe contener solo numeros sin espacios'}\n                                        required/>\n                                </div>\n                            </Col>\n                            <Col md=\"4\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"cellphone\">Teléfono Celular {!hasPhonePermission && <a href=\"#\" onClick={() => setCellphoneedit(!cellphoneedit)}>{!cellphoneedit ? \"( Edit )\" : \"( Show )\" }</a>} <span className=\"text-danger\">*</span></Label>\n\n                                    {customer.id && !cellphoneedit && !hasPhonePermission ? <FieldText\n                                        id='cellphone'\n                                        name={\"cellphone\"}\n                                        value={hiddenPhone(customer.cellphone)}\n                                        disabled={true}\n                                    /> : <FieldPhone\n                                        id=\"cellphone\"\n                                        name=\"cellphone\"\n                                        placeholder=\"\"\n                                        type=\"text\"\n                                        value={customerData.cellphone}\n                                        errorMessage=\"Ingrese un número valido (Ejemplo: 00000000)\"\n                                        className=\"form-control\"\n                                        validate={{required: {value: true}}}\n                                        onChange={(value) => setCustomerData({...customerData, cellphone: value})}\n                                        onValidate={(value, country) => {\n                                            if(country.iso2 === 'co' && (value && value.length === 12)){\n                                                setValidPhone(true);\n                                                return true\n                                            }\n                                            setValidPhone(false);\n                                            return false;\n                                        }}\n                                    />}\n                                </div>\n                            </Col>\n                            <Col md=\"4\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"phone\">Teléfono Residencial {!hasPhonePermission && <a href=\"#\" onClick={() => setPhoneedit(!phoneedit)}>{!phoneedit ? \"( Edit )\" : \"( Show )\" }</a>}</Label>\n                                    {customer.id && !phoneedit && !hasPhonePermission ? <FieldText\n                                        id='phone'\n                                        name={\"phone\"}\n                                        value={hiddenPhone(customer.phone)}\n                                        disabled={true}\n                                    /> :<FieldPhone\n                                        id=\"phone\"\n                                        name=\"phone\"\n                                        value={customerData.phone}\n                                        placeholder=\"\"\n                                        type=\"text\"\n                                        errorMessage=\"Ingrese un número valido (Ejemplo: 00000000)\"\n                                        className=\"form-control\"\n                                        validate={{required: {value: true}}}\n                                        onChange={(value) => setCustomerData({...customerData, phone: value})}\n                                    />}\n                                </div>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md=\"6\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"state\">Departamento <span className=\"text-danger\">*</span></Label>\n                                    <FieldSelect\n                                        id=\"state\"\n                                        defaultValue={state}\n                                        name={\"state\"}\n                                        placeholder={\"Indique un departamento\"}\n                                        options={statesOptions}\n                                        onChange={handleSelectDepartment}\n                                        required\n                                        isSearchable\n                                    />\n                                </div>\n                            </Col>\n                            <Col md=\"6\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"validationCustom03\">Municipio <span className=\"text-danger\">*</span></Label>\n                                    <FieldSelect\n                                        id=\"municipality\"\n                                        defaultValue={municipality}\n                                        name={\"municipality\"}\n                                        placeholder={\"Indique un municipio\"}\n                                        options={municipalitiesOptions}\n                                        required\n                                        isSearchable\n                                    />\n                                </div>\n                            </Col>\n                            <Col md=\"12\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"validationCustom03\">Dirección</Label>\n                                    <FieldText\n                                        id='address'\n                                        name={\"address\"}\n                                        value={customerData.address}\n                                        maxLength={80}\n                                        required/>\n                                </div>\n                            </Col>\n                        </Row>\n\n                        {(customerData.temporalAddress && customerData.temporalAddress.length > 0) && (\n                            <Row>\n                                <hr/>\n                                <p className=\"alert alert-warning\">Este cliente tiene una dirección de una versión anterior, es recomendable que por favor agregue la dirección en la parte superior.</p>\n                                <Col md=\"12\">\n                                    <div className=\"mb-3\">\n                                        <h4>Dirección temporal</h4>\n                                    </div>\n                                </Col>\n                                <Col md=\"6\">\n                                    <div className=\"mb-3\">\n                                        <Label htmlFor=\"validationCustom04\">Departamento temporal</Label>\n                                        <div className=\"form-control\">\n                                            {customerData.temporalAddress[0].state}\n                                        </div>\n                                    </div>\n                                </Col>\n                                <Col md=\"6\">\n                                    <div className=\"mb-3\">\n                                        <Label htmlFor=\"validationCustom04\">Municipio temporal</Label>\n                                        <div className=\"form-control\">\n                                            {customerData.temporalAddress[0].municipality}\n                                        </div>\n                                    </div>\n                                </Col>\n                            </Row>\n                        )}\n                        <Row>\n                            <Col>\n                                <div className=\"\">\n                                    <AvField\n                                        checked={customerData.hasNotification ? true : false}\n                                        className=\"form-check-input\"\n                                        type=\"checkbox\"\n                                        name=\"hasNotification\"\n                                        label=\"Recibe notificaciones\"/>\n                                </div>\n                            </Col>\n                        </Row>\n                        <hr/>\n                        <Row>\n                            <Col md={12} className=\"text-right\">\n                                {showAsModal && onCloseModal && (\n                                    <button type=\"button\" className=\"btn btn-light\" onClick={() => props.onCloseModal()}>Cancelar</button>\n                                )}\n                                <ButtonSubmit loading={props.loading}/>\n                            </Col>\n                        </Row>\n                    </Col>\n                </Row>\n            </AvForm>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {error, loading} = state.Customer\n    const {states, municipalities} = state.Location\n    return {error, states, municipalities, loading}\n}\n\nexport default withRouter(\n    connect(mapStateToProps, {apiError, registerCustomer, updateCustomer, getCustomer, getStates, getMunicipalities})(CustomerForm)\n)\n\nCustomerForm.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/Reports/OfficeReportForm.js",["1734"],"import React, {useEffect} from \"react\"\nimport {CardBody, Col, Label, Row} from \"reactstrap\"\nimport {AvForm} from \"availity-reactstrap-validation\"\nimport {Card} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {FieldDate, FieldSelect} from \"../../components/Fields\";\nimport {DATE_MODES} from \"../../components/Fields/InputDate\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\nimport {formatDateToServer} from \"../../common/utils\";\nimport {OFFICE_REPORT_TYPE_LIST, REPORT_TYPES} from \"../../common/constants\";\nimport {generateReport, generateReportRestart} from \"../../store/reports/actions\";\n\nconst OfficeReportForm = ({onCloseModal, loading, error, success, onGenerateReport, onRestartReport}) => {\n\n\n    useEffect(() => {\n        if (onRestartReport) {\n            onRestartReport();\n        }\n    }, [onRestartReport]);\n\n    useEffect(() => {\n        if (success && !error) {\n            onCloseModal(true);\n        }\n    }, [success]);\n\n\n    const handleValidSubmit = (e, values) => {\n        const payload = {\n            type: values.type.value,\n            date: formatDateToServer(values.reportDate[0])\n        };\n        onGenerateReport(payload);\n    }\n\n    return (\n        <React.Fragment>\n            <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => handleValidSubmit(e, v)}>\n                <Card>\n                    <CardBody>\n                        <Row>\n                            <Col md=\"12\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"field_name\">Tipo<span className=\"text-danger\">*</span></Label>\n                                    <FieldSelect\n                                        id={\"type\"}\n                                        name={\"type\"}\n                                        options={OFFICE_REPORT_TYPE_LIST}\n                                        defaultValue={OFFICE_REPORT_TYPE_LIST[0]}\n                                        required\n                                    />\n                                </div>\n                            </Col>\n                            <Col md=\"12\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"field_name\">Fecha <span className=\"text-danger\">*</span></Label>\n                                    <FieldDate\n                                        name={\"reportDate\"}\n                                        mode={DATE_MODES.SINGLE}\n                                    />\n                                </div>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md={12} className=\"text-center\">\n                                {!!(!success && error) && (\n                                    <div className=\"alert alert-danger\">{error}</div>\n                                )}\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md={12} className=\"text-right\">\n                                <ButtonSubmit loading={loading} disabled={loading}/>\n                            </Col>\n                        </Row>\n                    </CardBody>\n                </Card>\n            </AvForm>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {report} = state.PostSale;\n    const {deliveryMethods} = state.Order;\n    return {deliveryMethods: deliveryMethods.data, loading: report.loading, error: report.error, success: report.success}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGenerateReport: (data) => dispatch(generateReport(REPORT_TYPES.OFFICE, data)),\n    onRestartReport: () => dispatch(generateReportRestart()),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(OfficeReportForm)\n)\n\nOfficeReportForm.propTypes = {\n    error: PropTypes.any,\n    onCloseModal: PropTypes.func\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/Offices/list/officeColumns.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/template/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/mentions/mentionStyles.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Reports/BillsReportForm.js",["1735"],"import React, {useEffect} from \"react\"\nimport {CardBody, Col, Label, Row} from \"reactstrap\"\nimport {AvForm} from \"availity-reactstrap-validation\"\nimport {Card} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {FieldDate, FieldSelect} from \"../../components/Fields\";\nimport {DATE_MODES} from \"../../components/Fields/InputDate\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\nimport {formatDateToServer, formatDateToServerEndOfDay} from \"../../common/utils\";\nimport {generateReport, generateReportRestart} from \"../../store/reports/actions\";\nimport { BILL_MEMO_TYPES, REPORT_TYPES } from \"../../common/constants\";\n\nconst types = [{label: 'Facturas electrónicas', value: BILL_MEMO_TYPES.INVOICE }, {label: 'Notas de crédito', value: BILL_MEMO_TYPES.CREDIT }];\n\nconst BillsReportForm = ({onCloseModal, loading, error, success, onGenerateReport, onRestartReport}) => {\n\n    useEffect(() => {\n        if (onRestartReport) {\n            onRestartReport();\n        }\n    }, [onRestartReport]);\n\n    useEffect(() => {\n        if (success && !error) {\n            onCloseModal(true);\n        }\n    }, [success]);\n\n    const handleValidSubmit = (e, values) => {\n        const payload = {\n            type: values.type.value,\n            dateFrom: formatDateToServer(values.reportDate[0]),\n            dateTo: formatDateToServerEndOfDay(values.reportDate[1])\n        };\n        onGenerateReport(payload);\n    }\n\n    return (\n        <React.Fragment>\n            <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => handleValidSubmit(e, v)}>\n                <Card>\n                    <CardBody>\n                        <Row>\n                            <Col md=\"12\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"field_name\">Tipo<span className=\"text-danger\">*</span></Label>\n                                    <FieldSelect\n                                        id={\"type\"}\n                                        name={\"type\"}\n                                        options={types}\n                                        defaultValue={types[0]}\n                                        required\n                                    />\n                                </div>\n                            </Col>\n                            <Col md=\"12\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"field_name\">Fechas <span className=\"text-danger\">*</span></Label>\n                                    <FieldDate\n                                        name={\"reportDate\"}\n                                        mode={DATE_MODES.RANGE}\n                                    />\n                                </div>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md={12} className=\"text-center\">\n                                {!!(!success && error) && (\n                                    <div className=\"alert alert-danger\">{error}</div>\n                                )}\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md={12} className=\"text-right\">\n                                <ButtonSubmit loading={loading} disabled={loading}/>\n                            </Col>\n                        </Row>\n                    </CardBody>\n                </Card>\n            </AvForm>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {report} = state.Bill;\n    return {loading: report.loading, error: report.error, success: report.success}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGenerateReport: (data) => dispatch(generateReport(REPORT_TYPES.BILLS, data)),\n    onRestartReport: () => dispatch(generateReportRestart()),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(BillsReportForm)\n)\n\nBillsReportForm.propTypes = {\n    error: PropTypes.any,\n    onCloseModal: PropTypes.func\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/store/deliveryLocality/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Stats/Hours.js",["1736","1737","1738","1739"],"import React, {useEffect, useState} from \"react\"\nimport {CardBody, Col, Label, Row} from \"reactstrap\"\nimport {Card} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {DATE_FORMAT, formatDate} from \"../../common/utils\";\nimport {REPORT_TYPES} from \"../../common/constants\";\nimport {generateReport} from \"../../store/reports/actions\";\nimport {statsApi} from \"../../helpers/backend_helper\";\n\nimport Highcharts from 'highcharts'\nimport {FieldDate} from \"../../components/Fields\";\nimport {DATE_MODES} from \"../../components/Fields/InputDate\";\nimport {DEFAULT_PAGE_LIMIT} from \"../../common/pagination\";\nimport HighChartsWrapper from \"../../components/Common/HishChartsWrapper\";\nimport {AvForm} from \"availity-reactstrap-validation\";\n\nconst hoy = new Date();\nconst defaultDates = [new Date(hoy.getTime() - 518400000), new Date()];\nconst initialState = {\n    cargando: '',\n    usuarios: [],\n    horas: {\n        data: {\n            chart: {\n                zoomType: 'xy'\n            },\n            title: {\n                text: 'Pedidos por hora'\n            },\n            subtitle: {\n                text: \"sub\"\n            },\n            xAxis: {\n                categories: [],\n                crosshair: true\n            },\n            yAxis: [\n                {\n                    labels: {\n                        format: '$ {value}',\n                        style: {\n                            color: Highcharts.getOptions().colors[1]\n                        }\n                    },\n                    title: {\n                        text: 'Monto',\n                        style: {\n                            color: Highcharts.getOptions().colors[1]\n                        }\n                    }\n                },\n                // Secondary yAxis\n                {\n                    labels: {\n                        format: '{value}',\n                        style: {\n                            color: Highcharts.getOptions().colors[0]\n                        }\n                    },\n                    title: {\n                        text: 'Pedidos',\n                        style: {\n                            color: Highcharts.getOptions().colors[0]\n                        }\n                    },\n                    opposite: true\n                }],\n            series: [\n                {\n                    name: 'Monto',\n                    type: 'column',\n                    yAxis: 1,\n                    data: []\n                },\n                {\n                    name: 'Cantidad',\n                    type: 'spline',\n                    data: []\n                }\n            ]\n        },\n        fecha: {\n            inicial: new Date(hoy.getTime() - 518400000),\n            final: new Date(hoy.getTime()),\n        }\n    }\n}\n\nconst Hours = ({className}) => {\n\n    const [stats, setStats] = useState(initialState);\n\n    useEffect(() => {\n        if (stats.horas) {\n            horasCargar()\n        }\n    }, [stats.horas.fecha]);;\n\n    const getStatsLabel = (stats, node) => {\n        if(parserClientDate(stats[node].fecha.inicial) == parserClientDate(stats[node].fecha.final)){\n            return parserClientDate(stats[node].fecha.inicial);\n        }\n        else {\n            return parserClientDate(stats[node].fecha.inicial) + ' a ' + parserClientDate(stats[node].fecha.final)\n        }\n    }\n\n    const horasCargar = () => {\n        if (valida(stats.horas.fecha)) {\n            stats.cargando = 'Cargando estadisticas de ventas...';\n            //definir la url para la consulta a la API\n            var url = '/stats/estadistica_horas';\n            url += '/' + parserServerDate(stats.horas.fecha.inicial);\n            url += '/' + parserServerDate(stats.horas.fecha.final);\n            //leer estadisticas de ventas\n            statsApi(url).then(function (resp) {\n                var horas = [];\n                var cantidad = [];\n                var monto = [];\n                var keys = Object.keys(resp);\n                for (var i = 0; i < keys.length; i++) {\n                    var data = resp[keys[i]];\n                    horas[i] = data.hora;\n                    cantidad[i] = parseInt(data.cantidad);\n                    monto[i] = parseFloat(data.monto);\n                }\n                const newStats = {...stats};\n                newStats.horas.data.subtitle.text = getStatsLabel(newStats,'horas');\n                newStats.horas.data.xAxis.categories = horas;\n                newStats.horas.data.series[0].data = monto;\n                newStats.horas.data.series[1].data = cantidad;\n                newStats.cargando = '';\n                setStats(newStats);\n            })\n        }\n    }\n\n    const parserServerDate = (date) => {\n        return formatDate(date, DATE_FORMAT.ONLY_DATE);\n    }\n\n    const valida = (node) => {\n        if (!node) return;\n        let v = false;\n        if (node.inicial && node.final && (node.inicial <= node.final)) {\n            v = true;\n        } else if (node.inicial || node.final){\n            v = true;\n        }\n        return v;\n    }\n\n    const parserClientDate = (date) => {\n        return formatDate(date, DATE_FORMAT.DD_MM_YYYY);\n    }\n\n    const onChangeDate = (dates, node) => {\n        if (dates.length > 0) {\n            const s = {...stats}\n            if ((dates.length === 1) || (dates[0].toString() == dates[1].toString())) {\n                s[node] = {...stats[node], fecha: {...stats[node].fecha, inicial: dates[0], final: dates[0]}};\n            } else {\n                s[node] = {...stats[node], fecha: {...stats[node].fecha, inicial: dates[0], final: dates[1]}};\n            }\n            setStats(s);\n            console.log(s);\n        }\n    }\n\n    return (\n        <AvForm className=\"needs-validation\" autoComplete=\"off\">\n        <Card className={className}>\n            <CardBody>\n                <Row id=\"horas\">\n                    <Col md={12}>\n                        <h4 className=\"card-title text-info\"> Pedidos por hora</h4>\n                    </Col>\n                    <Col md={4}>\n                        <div className=\"mb-3\">\n                            <Label>Fecha</Label>\n                            <FieldDate\n                                name=\"horas_dates\"\n                                mode={DATE_MODES.RANGE}\n                                defaultValue={defaultDates}\n                                onChange={(dates) => onChangeDate(dates, \"horas\")}\n                            />\n                        </div>\n                    </Col>\n                    <Col md={12}>\n                        <HighChartsWrapper options={stats.horas.data}/>\n                    </Col>\n                </Row>\n            </CardBody>\n        </Card>\n        </AvForm>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGenerateReport: (data) => dispatch(generateReport(REPORT_TYPES.CONCILIATION, data)),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(Hours)\n)\n\nHours.propTypes = {\n    error: PropTypes.any,\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/Bill/list/billColumns.js",["1740"],"import React from \"react\"\nimport {Link} from \"react-router-dom\"\nimport {StatusField} from \"../../../components/StatusField\";\nimport {buildOptions} from \"../../../common/converters\";\nimport {ORDER_STATUS, ORDER_STATUS_LIST,} from \"../../../common/constants\";\nimport Conditionals from \"../../../common/conditionals\";\nimport {DATE_FORMAT, formatDate} from \"../../../common/utils\";\nimport {CUSTOMER} from \"../../../helpers/url_helper\";\nimport {Tooltip} from \"@material-ui/core\";\nimport HasPermissions from \"../../../components/HasPermissions\";\nimport {PERMISSIONS} from \"../../../helpers/security_rol\";\n\nconst statusOptions = buildOptions(ORDER_STATUS_LIST);\n\nconst municipalityColumns = (onDelete = false) => [\n    {\n        text: \"#\",\n        dataField: \"id\",\n        sort: true,\n        formatter: (cellContent, item) => (\n            <>\n                <HasPermissions permission={PERMISSIONS.BILL_CREATE} renderNoAccess={() => item.id}>\n                    <Link to={`/bill/detail/${item.id}`} className=\"text-body\">\n                        <b className=\"text-info\">{item.id}</b>\n                    </Link>\n                </HasPermissions>\n            </>\n        ),\n        filter: true,\n        filterType: \"text\",\n        filterCondition: Conditionals.OPERATORS.LIKE,\n    },\n    {\n        text: \"Fecha\",\n        dataField: \"createdAt\",\n        sort: true,\n        filter: true,\n        filterType: \"dateRange\",\n        formatter: (cellContent, item) => (\n            <div>{formatDate(item.createdAt, DATE_FORMAT.ONLY_DATE)}</div>\n        ),\n    },\n    {\n        text: \"Num. Legal\",\n        dataField: \"legalNumber\",\n        sort: true,\n        filter: true,\n        filterType: \"text\"\n    },\n    {\n        text: \"Estado\",\n        dataField: \"status\",\n        sort: true,\n        filter: true,\n        filterType: \"text\"\n    },\n    {\n        text: \"Impuesto\",\n        dataField: \"tax\",\n        sort: true,\n        filter: false,\n        filterType: \"number\"\n    },\n    {\n        text: \"Nota de Crédito\",\n        dataField: \"creditMemo\",\n        sort: true,\n        filter: true,\n        filterType: \"select\",\n        filterOptions: [\n            { label: \"No\", value: 0 },\n            { label: \"Si\", value: 1 }\n        ],\n        formatter: (cellContent, item) => (\n            <>\n                {item?.creditNote?.id ? \"Si\" : \"No\"}\n                {item?.creditNote?.id && item?.creditNote?.status != 1 ? <small>&nbsp;<span className=\"badge rounded-pill p-2 bg-soft-danger\">Error Dian</span></small> : \"\"}\n            </>\n        ),\n    },\n    {\n        text: \"# Pedido\",\n        dataField: \"order.id\",\n        sort: true,\n        filter: true,\n        filterType: \"text\",\n        filterCondition: Conditionals.OPERATORS.LIKE,\n    },\n    {\n        text: \"Cliente\",\n        dataField: \"customer\",\n        sort: true,\n        filter: false,\n        filterType: \"asyncSelect\",\n        urlStr: CUSTOMER,\n        formatter: (cellContent, item) => (\n            <>\n                {item.order.customer.name}\n                {item.order.customer.isMayorist === true && (\n                    <Tooltip placement=\"bottom\" title=\"Cliente mayorista\" aria-label=\"add\">\n                        <i className={\"mdi mdi-crown font-size-18 mr-1 text-warning\"}> </i>\n                    </Tooltip>\n                )}\n            </>\n        ),\n    },\n    {\n        text: \"Estado del pedido\",\n        dataField: \"order.status\",\n        sort: true,\n        filter: true,\n        filterType: \"select\",\n        filterOptions: statusOptions,\n        filterDefaultOption: statusOptions[0],\n        formatter: (cellContent, item) => (\n            <StatusField color={ORDER_STATUS[item.order.status]?.color}>\n                {ORDER_STATUS[item.order.status].name}\n            </StatusField>\n        ),\n    },\n]\n\nexport default municipalityColumns;\n","/Users/ramon/Repositories/lucy-moie/src/store/office/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Stats/Bests.js",["1741","1742","1743","1744"],"import React, {useEffect, useState} from \"react\"\nimport {CardBody, Col, Label, Row} from \"reactstrap\"\nimport {Card} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {DATE_FORMAT, formatDate} from \"../../common/utils\";\nimport {REPORT_TYPES} from \"../../common/constants\";\nimport {generateReport} from \"../../store/reports/actions\";\nimport {statsApi} from \"../../helpers/backend_helper\";\n\nimport Highcharts from 'highcharts'\nimport {FieldDate} from \"../../components/Fields\";\nimport {DATE_MODES} from \"../../components/Fields/InputDate\";\nimport HighChartsWrapper from \"../../components/Common/HishChartsWrapper\";\nimport {AvForm} from \"availity-reactstrap-validation\";\n\nconst hoy = new Date();\nconst defaultDates = [new Date(hoy.getTime() - 518400000), new Date()];\nconst initialState = {\n    cargando: '',\n    usuarios: [],\n    masVendidos: {\n        data: {\n            chart: {\n                type: 'column'\n            },\n            title: {\n                text: 'Productos más vendidos'\n            },\n            subtitle: {\n                text: null\n            },\n            xAxis: {\n                categories: []\n            },\n            yAxis: [{\n                labels: {\n                    format: '{value}'\n                },\n                title: {\n                    text: 'Piezas'\n                }\n            }],\n            series: [{\n                name: 'Cantidad',\n                data: []\n            },\n                {\n                    name: 'Existencia',\n                    data: []\n                }]\n        },\n        fecha: {\n            inicial: new Date(hoy.getTime() - 518400000),\n            final: new Date(hoy.getTime()),\n        },\n    },\n}\n\nconst Bests = ({className}) => {\n\n    const [stats, setStats] = useState(initialState);\n\n    useEffect(() => {\n        if (stats.masVendidos) {\n            masVendidosCargar()\n        }\n    }, [stats.masVendidos.fecha]);\n\n    const getStatsLabel = (stats, node) => {\n        if(parserClientDate(stats[node].fecha.inicial) == parserClientDate(stats[node].fecha.final)){\n            return parserClientDate(stats[node].fecha.inicial);\n        }\n        else {\n            return parserClientDate(stats[node].fecha.inicial) + ' a ' + parserClientDate(stats[node].fecha.final)\n        }\n    }\n\n    const masVendidosCargar = () => {\n        if (valida(stats.masVendidos.fecha)) {\n            stats.cargando = 'Cargando estadisticas de ventas...';\n            //definir la url para la consulta a la API\n            var url = '/stats/estadistica_mas_vendidos';\n            url += '/' + parserServerDate(stats.masVendidos.fecha.inicial);\n            url += '/' + parserServerDate(stats.masVendidos.fecha.final);\n            //leer estadisticas de ventas\n            statsApi(url).then(function (resp) {\n                var ids = [];\n                var cantidad = [];\n                var existencia = [];\n                var keys = Object.keys(resp);\n                for (var i = 0; i < keys.length; i++) {\n                    var data = resp[keys[i]];\n                    ids[i] = data.id;\n                    cantidad[i] = parseFloat(data.cantidad);\n                    existencia[i] = parseFloat(data.existencia);\n                }\n                const newStats = {...stats};\n                newStats.masVendidos.data.subtitle.text = getStatsLabel(newStats,'masVendidos');\n                newStats.masVendidos.data.xAxis.categories = ids;\n                newStats.masVendidos.data.series[0].data = cantidad;\n                newStats.masVendidos.data.series[1].data = existencia;\n                newStats.cargando = '';\n                setStats(newStats);\n            })\n        }\n    }\n\n    const parserServerDate = (date) => {\n        return formatDate(date, DATE_FORMAT.ONLY_DATE);\n    }\n\n    const valida = (node) => {\n        if (!node) return;\n        let v = false;\n        if (node.inicial && node.final && (node.inicial <= node.final)) {\n            v = true;\n        } else if (node.inicial || node.final){\n            v = true;\n        }\n        return v;\n    }\n\n    const parserClientDate = (date) => {\n        return formatDate(date, DATE_FORMAT.DD_MM_YYYY);\n    }\n\n    const onChangeDate = (dates, node) => {\n        if (dates.length > 0) {\n            const s = {...stats}\n            if ((dates.length === 1) || (dates[0].toString() == dates[1].toString())) {\n                s[node] = {...stats[node], fecha: {...stats[node].fecha, inicial: dates[0], final: dates[0]}};\n            } else {\n                s[node] = {...stats[node], fecha: {...stats[node].fecha, inicial: dates[0], final: dates[1]}};\n            }\n            setStats(s);\n            console.log(s);\n        }\n    }\n\n    return (\n        <AvForm className=\"needs-validation\" autoComplete=\"off\">\n        <Card className={className}>\n            <CardBody>\n                <Row id=\"masVendidos\">\n                    <Col md={12}>\n                        <h4 className=\"card-title text-info\"> Productos más vendidos</h4>\n                    </Col>\n                    <Col md={4}>\n                        <div className=\"mb-3\">\n                            <Label>Fecha</Label>\n                            <FieldDate\n                                name=\"masVendidos_dates\"\n                                mode={DATE_MODES.RANGE}\n                                defaultValue={defaultDates}\n                                onChange={(dates) => onChangeDate(dates, \"masVendidos\")}\n                            />\n                        </div>\n                    </Col>\n                    <Col md={12}>\n                        <HighChartsWrapper options={stats.masVendidos.data}/>\n                    </Col>\n                </Row>\n            </CardBody>\n        </Card>\n        </AvForm>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGenerateReport: (data) => dispatch(generateReport(REPORT_TYPES.CONCILIATION, data)),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(Bests)\n)\n\nBests.propTypes = {\n    error: PropTypes.any,\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/Stats/SaleType.js",["1745","1746","1747","1748","1749","1750"],"import React, {useEffect, useState} from \"react\"\nimport {CardBody, Col, Label, Row} from \"reactstrap\"\nimport {Card} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {DATE_FORMAT, formatDate} from \"../../common/utils\";\nimport {REPORT_TYPES, showByList} from \"../../common/constants\";\nimport {generateReport} from \"../../store/reports/actions\";\nimport {statsApi} from \"../../helpers/backend_helper\";\n\nimport Highcharts from 'highcharts'\nimport {FieldDate, FieldSelect} from \"../../components/Fields\";\nimport {DATE_MODES} from \"../../components/Fields/InputDate\";\nimport {getEmptyOptions} from \"../../common/converters\";\nimport HighChartsWrapper from \"../../components/Common/HishChartsWrapper\";\nimport {AvForm} from \"availity-reactstrap-validation\";\n\nconst hoy = new Date();\nconst defaultDates = [new Date(hoy.getTime() - 518400000), new Date()];\nconst initialState = {\n    cargando: '',\n    usuarios: [],\n    ventasTipo: {\n        data: {\n            title: {\n                text: 'Ventas por tipo'\n            },\n            subtitle: {\n                text: null\n            },\n            tooltip: {\n                shared: true\n            },\n            xAxis: {\n                crosshair: true,\n                categories: []\n            },\n            yAxis: [{\n                labels: {\n                    format: '$ {value}'\n                },\n                title: {\n                    text: 'Monto'\n                }\n            }, {\n                labels: {\n                    format: '{value}'\n                },\n                title: {\n                    text: 'Pedidos'\n                },\n                opposite: true\n            }],\n            series: [\n                {\n                    name: 'Monto Previo Pago',\n                    type: 'column',\n                    color: '#aad0f3',\n                    data: []\n                },\n                {\n                    name: 'Monto Contra Entrega',\n                    type: 'column',\n                    color: '#5b5b62',\n                    data: []\n                },\n                {\n                    name: 'Pedidos Previo Pago',\n                    yAxis: 1,\n                    color: '#7CB5EC',\n                    data: []\n                },\n                {\n                    name: 'Pedidos Contra Entrega',\n                    yAxis: 1,\n                    color: '#434348',\n                    data: []\n                }]\n        },\n        opciones: {\n            grupo: 'dia'\n        },\n        fecha: {\n            inicial: new Date(hoy.getTime() - 518400000),\n            final: new Date(hoy.getTime()),\n        }\n    },\n}\n\nconst SaleType = ({className}) => {\n\n    const [stats, setStats] = useState(initialState);\n\n    useEffect(() => {\n        if (stats.ventasTipo) {\n            ventasTipoCargar()\n        }\n    }, [stats.ventasTipo.fecha]);\n\n    useEffect(() => {\n        if (stats.ventasTipo) {\n            ventasTipoCargar()\n        }\n    }, [stats.ventasTipo.opciones]);\n\n    const getStatsLabel = (stats, node) => {\n        if(parserClientDate(stats[node].fecha.inicial) == parserClientDate(stats[node].fecha.final)){\n            return parserClientDate(stats[node].fecha.inicial);\n        }\n        else {\n            return parserClientDate(stats[node].fecha.inicial) + ' a ' + parserClientDate(stats[node].fecha.final)\n        }\n    }\n\n    const ventasTipoCargar = () => {\n        if (valida(stats.ventasTipo.fecha)) {\n            stats.cargando = 'Cargando estadisticas de ventas...';\n            //definir la url para la consulta a la API\n            var url = '/stats/estadistica_ventas_tipo';\n            url += '/' + parserServerDate(stats.ventasTipo.fecha.inicial);\n            url += '/' + parserServerDate(stats.ventasTipo.fecha.final);\n            url += '/' + stats.ventasTipo.opciones.grupo;\n            //leer estadisticas de ventas\n            statsApi(url).then(function (resp) {\n                var fechas = [];\n                var cantidadPrevioPago = [];\n                var montoPrevioPago = [];\n                var cantidadContraEntrega = [];\n                var montoContraEntrega = [];\n                var keys = Object.keys(resp);\n                for (var i = 0; i < keys.length; i++) {\n                    var data = resp[keys[i]];\n                    fechas[i] = data.fecha;\n                    cantidadPrevioPago[i] = parseFloat(data.cantidadPrevioPago);\n                    montoPrevioPago[i] = parseFloat(data.montoPrevioPago);\n                    cantidadContraEntrega[i] = parseFloat(data.cantidadContraEntrega);\n                    montoContraEntrega[i] = parseFloat(data.montoContraEntrega);\n                }\n                const newStats = {...stats};\n                newStats.ventasTipo.data.subtitle.text = getStatsLabel(newStats,'ventasTipo');\n                newStats.ventasTipo.data.xAxis.categories = fechas;\n                newStats.ventasTipo.data.series[0].data = montoPrevioPago;\n                newStats.ventasTipo.data.series[1].data = montoContraEntrega;\n                newStats.ventasTipo.data.series[2].data = cantidadPrevioPago;\n                newStats.ventasTipo.data.series[3].data = cantidadContraEntrega;\n                newStats.cargando = '';\n                setStats(newStats);\n            })\n        }\n    }\n\n    const parserServerDate = (date) => {\n        return formatDate(date, DATE_FORMAT.ONLY_DATE);\n    }\n\n    const valida = (node) => {\n        if (!node) return;\n        let v = false;\n        if (node.inicial && node.final && (node.inicial <= node.final)) {\n            v = true;\n        } else if (node.inicial || node.final){\n            v = true;\n        }\n        return v;\n    }\n\n    const parserClientDate = (date) => {\n        return formatDate(date, DATE_FORMAT.DD_MM_YYYY);\n    }\n\n    const onChangeDate = (dates, node) => {\n        if (dates.length > 0) {\n            const s = {...stats}\n            if ((dates.length === 1) || (dates[0].toString() == dates[1].toString())) {\n                s[node] = {...stats[node], fecha: {...stats[node].fecha, inicial: dates[0], final: dates[0]}};\n            } else {\n                s[node] = {...stats[node], fecha: {...stats[node].fecha, inicial: dates[0], final: dates[1]}};\n            }\n            setStats(s);\n            console.log(s);\n        }\n    }\n\n    const onChangeGrupo = (grupo, node) => {\n        if (grupo && grupo.value) {\n            const s = {...stats}\n            s[node] = {...stats[node], opciones: {...stats[node].opciones, grupo: grupo.value}}\n            setStats(s);\n        }\n    }\n\n    return (\n        <AvForm className=\"needs-validation\" autoComplete=\"off\">\n        <Card className={className}>\n            <CardBody>\n                <Row id=\"ventasTipo\">\n                    <Col md={12}>\n                        <h4 className=\"card-title text-info\"> Ventas por tipo</h4>\n                    </Col>\n                    <Col md={4}>\n                        <div className=\"mb-3\">\n                            <Label>Fecha</Label>\n                            <FieldDate\n                                name=\"ventasTipo_dates\"\n                                mode={DATE_MODES.RANGE}\n                                defaultValue={defaultDates}\n                                onChange={(dates) => onChangeDate(dates, \"ventasTipo\")}\n                            />\n                        </div>\n                    </Col>\n                    <Col md={4}>\n                        <div className=\"mb-3\">\n                            <Label>Mostrar por</Label>\n                            <FieldSelect\n                                name=\"ventasTipo_grupo\"\n                                options={showByList}\n                                defaultValue={showByList.length > 0 ? showByList[0] : null}\n                                onChange={(data) => onChangeGrupo(data, \"ventasTipo\")}\n                            />\n                        </div>\n                    </Col>\n                    <Col md={12}>\n                        <HighChartsWrapper options={stats.ventasTipo.data}/>\n                    </Col>\n                </Row>\n            </CardBody>\n        </Card>\n        </AvForm>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGenerateReport: (data) => dispatch(generateReport(REPORT_TYPES.CONCILIATION, data))\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(SaleType)\n)\n\nSaleType.propTypes = {\n    error: PropTypes.any,\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/Stats/Whatsapp.js",["1751","1752","1753","1754"],"import React, {useEffect, useState} from \"react\"\nimport {CardBody, Col, Label, Row} from \"reactstrap\"\nimport {Card} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {DATE_FORMAT, formatDate} from \"../../common/utils\";\nimport {statsApi} from \"../../helpers/backend_helper\";\n\nimport Highcharts from 'highcharts'\nimport {FieldDate} from \"../../components/Fields\";\nimport {DATE_MODES} from \"../../components/Fields/InputDate\";\nimport HighChartsWrapper from \"../../components/Common/HishChartsWrapper\";\nimport {AvForm} from \"availity-reactstrap-validation\";\nimport {generateReport} from \"../../store/bill/actions\";\nimport {REPORT_TYPES} from \"../../common/constants\";\n\nconst hoy = new Date();\nconst defaultDates = [new Date(hoy.getTime() - 518400000), new Date()];\nconst initialState = {\n    cargando: '',\n    usuarios: [],\n    ventasWhatsapp: {\n        data: {\n            chart: {\n                type: 'column'\n            },\n            title: {\n                text: 'Ventas por Whatsapp'\n            },\n            subtitle: {\n                text: null\n            },\n            xAxis: {\n                categories: []\n            },\n            yAxis: [{\n                labels: {\n                    format: '$ {value}'\n                },\n                title: {\n                    text: 'Monto'\n                }\n            }],\n            series: [{\n                name: 'Venta ($)',\n                data: []\n            }]\n        },\n        fecha: {\n            inicial: new Date(hoy.getTime() - 518400000),\n            final: new Date(hoy.getTime()),\n        }\n    },\n}\n\nconst Whatsapp = ({className}) => {\n\n    const [stats, setStats] = useState(initialState);\n\n    useEffect(() => {\n        if (stats.ventasWhatsapp) {\n            ventasWhatsappCargar()\n        }\n    }, [stats.ventasWhatsapp.fecha]);\n\n    const getStatsLabel = (stats, node) => {\n        if(parserClientDate(stats[node].fecha.inicial) == parserClientDate(stats[node].fecha.final)){\n            return parserClientDate(stats[node].fecha.inicial);\n        }\n        else {\n            return parserClientDate(stats[node].fecha.inicial) + ' a ' + parserClientDate(stats[node].fecha.final)\n        }\n    }\n\n    const ventasWhatsappCargar = () => {\n        if (valida(stats.ventasWhatsapp.fecha)) {\n            stats.cargando = 'Cargando estadisticas de ventas...';\n            //definir la url para la consulta a la API\n            var url = '/stats/estadistica_ventas_whatsapp';\n            url += '/' + parserServerDate(stats.ventasWhatsapp.fecha.inicial);\n            url += '/' + parserServerDate(stats.ventasWhatsapp.fecha.final);\n            //leer estadisticas de ventas\n            statsApi(url).then(function (resp) {\n                var whatsapp = [];\n                var datosVentas = [];\n                var keys = Object.keys(resp);\n                for (var i = 0; i < keys.length; i++) {\n                    var data = resp[keys[i]];\n                    whatsapp[i] = data.origen;\n                    datosVentas[i] = parseFloat(data.monto);\n                }\n\n                const newStats = {...stats};\n                newStats.ventasWhatsapp.data.subtitle.text = getStatsLabel(newStats,'ventasWhatsapp');\n                newStats.ventasWhatsapp.data.xAxis.categories = whatsapp;\n                newStats.ventasWhatsapp.data.series[0].data = datosVentas;\n                newStats.cargando = '';\n                setStats(newStats);\n            })\n        }\n    }\n\n\n\n    const parserServerDate = (date) => {\n        return formatDate(date, DATE_FORMAT.ONLY_DATE);\n    }\n\n    const valida = (node) => {\n        if (!node) return;\n        let v = false;\n        if (node.inicial && node.final && (node.inicial <= node.final)) {\n            v = true;\n        } else if (node.inicial || node.final){\n            v = true;\n        }\n        return v;\n    }\n\n    const parserClientDate = (date) => {\n        return formatDate(date, DATE_FORMAT.DD_MM_YYYY);\n    }\n\n    const onChangeDate = (dates, node) => {\n        if (dates.length > 0) {\n            const s = {...stats}\n            if ((dates.length === 1) || (dates[0].toString() == dates[1].toString())) {\n                s[node] = {...stats[node], fecha: {...stats[node].fecha, inicial: dates[0], final: dates[0]}};\n            } else {\n                s[node] = {...stats[node], fecha: {...stats[node].fecha, inicial: dates[0], final: dates[1]}};\n            }\n            setStats(s);\n            console.log(s);\n        }\n    }\n\n    return (\n        <AvForm className=\"needs-validation\" autoComplete=\"off\">\n            <Card className={className}>\n                <CardBody>\n                    <Row id=\"ventasWhatsapp\">\n                        <Col md={12}>\n                            <h4 className=\"card-title text-info\"> Ventas por Whatsapp</h4>\n                        </Col>\n                        <Col md={4}>\n                            <div className=\"mb-3\">\n                                <Label>Fecha</Label>\n                                <FieldDate\n                                    name=\"ventasWhatsapp_dates\"\n                                    mode={DATE_MODES.RANGE}\n                                    defaultValue={defaultDates}\n                                    onChange={(dates) => onChangeDate(dates, \"ventasWhatsapp\")}\n                                />\n                            </div>\n                        </Col>\n                        <Row>\n                        <Col md={12}>\n                            <HighChartsWrapper options={stats.ventasWhatsapp.data}/>\n                        </Col>\n                        </Row>\n                    </Row>\n                </CardBody>\n            </Card>\n        </AvForm>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGenerateReport: (data) => dispatch(generateReport(REPORT_TYPES.CONCILIATION, data))\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(Whatsapp)\n)\n\nWhatsapp.propTypes = {\n    error: PropTypes.any,\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/Stats/Origens.js",["1755","1756","1757","1758","1759","1760","1761","1762"],"import React, {useEffect, useState} from \"react\"\nimport {CardBody, Col, Label, Row} from \"reactstrap\"\nimport {Card} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {DATE_FORMAT, formatDate} from \"../../common/utils\";\nimport {REPORT_TYPES, showByList} from \"../../common/constants\";\nimport {generateReport} from \"../../store/reports/actions\";\nimport {statsApi} from \"../../helpers/backend_helper\";\n\nimport Highcharts from 'highcharts'\nimport {FieldDate, FieldSelect} from \"../../components/Fields\";\nimport {DATE_MODES} from \"../../components/Fields/InputDate\";\nimport {DEFAULT_PAGE_LIMIT} from \"../../common/pagination\";\nimport {getUsers} from \"../../store/user/actions\";\nimport {getEmptyOptions} from \"../../common/converters\";\nimport HighChartsWrapper from \"../../components/Common/HishChartsWrapper\";\nimport {AvForm} from \"availity-reactstrap-validation\";\n\nconst hoy = new Date();\nconst defaultDates = [new Date(hoy.getTime() - 518400000), new Date()];\nconst initialState = {\n    cargando: '',\n    usuarios: [],\n    ventasOrigen: {\n        data: {\n            chart: {\n                type: 'column'\n            },\n            title: {\n                text: 'Ventas por origen'\n            },\n            subtitle: {\n                text: null\n            },\n            xAxis: {\n                categories: []\n            },\n            yAxis: [{\n                labels: {\n                    format: '$ {value}'\n                },\n                title: {\n                    text: 'Monto'\n                }\n            }],\n            series: [\n                {\n                    name: 'Página Web',\n                    data: []\n                },\n                {\n                    name: 'Facebook',\n                    data: []\n                },\n                {\n                    name: 'Whatsapp',\n                    data: []\n                },\n                {\n                    name: 'Otros',\n                    data: []\n                }\n            ]\n        },\n        opciones: {\n            grupo: 'dia'\n        },\n        fecha: {\n            inicial: new Date(hoy.getTime() - 518400000),\n            final: new Date(hoy.getTime()),\n        }\n    },\n}\n\nconst Origens = ({className}) => {\n\n    const [stats, setStats] = useState(initialState);\n    const [ventasOrigenReload, setVentasOrigenReload] = useState(false);\n\n    useEffect(() => {\n        if (ventasOrigenReload) {\n            setVentasOrigenReload(false);\n        }\n    }, [ventasOrigenReload]);\n\n    useEffect(() => {\n        if (stats.ventasOrigen) {\n            ventasOrigenCargar()\n        }\n    }, [stats.ventasOrigen.fecha]);\n\n    useEffect(() => {\n        if (stats.ventasOrigen) {\n            ventasOrigenCargar()\n        }\n    }, [stats.ventasOrigen.opciones]);\n\n    const getStatsLabel = (stats, node) => {\n        if(parserClientDate(stats[node].fecha.inicial) == parserClientDate(stats[node].fecha.final)){\n            return parserClientDate(stats[node].fecha.inicial);\n        }\n        else {\n            return parserClientDate(stats[node].fecha.inicial) + ' a ' + parserClientDate(stats[node].fecha.final)\n        }\n    }\n\n    const ventasOrigenCargar = () => {\n        if (valida(stats.ventasOrigen.fecha)) {\n            stats.cargando = 'Cargando estadisticas de ventas...';\n            //definir la url para la consulta a la API\n            var url = '/stats/estadistica_ventas_origen';\n            url += '/' + parserServerDate(stats.ventasOrigen.fecha.inicial);\n            url += '/' + parserServerDate(stats.ventasOrigen.fecha.final);\n            url += '/' + stats.ventasOrigen.opciones.grupo;\n            //leer estadisticas de ventas\n            statsApi(url).then(function (resp) {\n                var fechas = [];\n                var series = [];\n\n                var seriesList = [];\n                for (var i = 0; i < resp.length; i++) {\n                    var r = resp[i];\n                    Object.keys(r).filter(k => k !== 'fecha').forEach(k => {\n                        if (!seriesList.includes(k)) {\n                            seriesList.push(k);\n                        }\n                    });\n                }\n\n                var seriesMap = {};\n\n                for (var i = 0; i < resp.length; i++) {\n                    var data = resp[i];\n                    fechas[i] = data.fecha;\n\n                    seriesList.forEach(serieName => {\n                        if (!seriesMap[serieName]) {\n                            seriesMap[serieName] = {name: serieName, data: []};\n                        }\n                        if (!data[serieName]) {\n                            seriesMap[serieName].data.push(parseFloat(0));\n                        } else {\n                            seriesMap[serieName].data.push(parseFloat(data[serieName]));\n                        }\n                    })\n                }\n                Object.keys(seriesMap).filter(k => k !== 'fecha').forEach(k => {\n                    series.push(seriesMap[k]);\n                });\n\n                if (series.length === 0) {\n                    series = initialState.ventasOrigen.data.series;\n                }\n\n                const newStats = {...stats};\n                newStats.ventasOrigen.data.subtitle.text = getStatsLabel(newStats,'ventasOrigen');\n                newStats.ventasOrigen.data.xAxis.categories = fechas;\n                newStats.ventasOrigen.data.series = series;\n                newStats.cargando = '';\n                setStats(newStats);\n                setVentasOrigenReload(true);\n            })\n        }\n    }\n\n    const parserServerDate = (date) => {\n        return formatDate(date, DATE_FORMAT.ONLY_DATE);\n    }\n\n    const valida = (node) => {\n        if (!node) return;\n        let v = false;\n        if (node.inicial && node.final && (node.inicial <= node.final)) {\n            v = true;\n        } else if (node.inicial || node.final){\n            v = true;\n        }\n        return v;\n    }\n\n    const parserClientDate = (date) => {\n        return formatDate(date, DATE_FORMAT.DD_MM_YYYY);\n    }\n\n    const onChangeDate = (dates, node) => {\n        if (dates.length > 0) {\n            const s = {...stats}\n            if ((dates.length === 1) || (dates[0].toString() == dates[1].toString())) {\n                s[node] = {...stats[node], fecha: {...stats[node].fecha, inicial: dates[0], final: dates[0]}};\n            } else {\n                s[node] = {...stats[node], fecha: {...stats[node].fecha, inicial: dates[0], final: dates[1]}};\n            }\n            setStats(s);\n            console.log(s);\n        }\n    }\n\n    const onChangeGrupo = (grupo, node) => {\n        if (grupo && grupo.value) {\n            const s = {...stats}\n            s[node] = {...stats[node], opciones: {...stats[node].opciones, grupo: grupo.value}}\n            setStats(s);\n        }\n    }\n\n    return (\n        <AvForm className=\"needs-validation\" autoComplete=\"off\">\n        <Card className={className}>\n            <CardBody>\n                <Row id=\"ventasOrigen\">\n                    <Col md={12}>\n                        <h4 className=\"card-title text-info\"> Ventas por origen</h4>\n                    </Col>\n                    <Col md={4}>\n                        <div className=\"mb-3\">\n                            <Label>Fecha</Label>\n                            <FieldDate\n                                name=\"ventasOrigen_dates\"\n                                mode={DATE_MODES.RANGE}\n                                defaultValue={defaultDates}\n                                onChange={(dates) => onChangeDate(dates, \"ventasOrigen\")}\n                            />\n                        </div>\n                    </Col>\n                    <Col md={4}>\n                        <div className=\"mb-3\">\n                            <Label>Mostrar por</Label>\n                            <FieldSelect\n                                name=\"ventasOrigen_grupo\"\n                                options={showByList}\n                                defaultValue={showByList.length > 0 ? showByList[0] : null}\n                                onChange={(data) => onChangeGrupo(data, \"ventasOrigen\")}\n                            />\n                        </div>\n                    </Col>\n                    <Col md={12}>\n                        {!ventasOrigenReload && (\n                            <HighChartsWrapper options={stats.ventasOrigen.data}/>\n                        )}\n                    </Col>\n                </Row>\n            </CardBody>\n        </Card>\n        </AvForm>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGenerateReport: (data) => dispatch(generateReport(REPORT_TYPES.CONCILIATION, data)),\n    onGetUsers: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getUsers(conditional, limit, page)),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(Origens)\n)\n\nOrigens.propTypes = {\n    error: PropTypes.any,\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/Stats/Departments.js",["1763","1764","1765","1766"],"import React, {useEffect, useState} from \"react\"\nimport {CardBody, Col, Label, Row} from \"reactstrap\"\nimport {AvForm} from \"availity-reactstrap-validation\"\nimport {Card} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {DATE_FORMAT, formatDate} from \"../../common/utils\";\nimport {REPORT_TYPES} from \"../../common/constants\";\nimport {generateReport} from \"../../store/reports/actions\";\nimport {statsApi} from \"../../helpers/backend_helper\";\n\nimport Highcharts from 'highcharts'\nimport {FieldDate} from \"../../components/Fields\";\nimport {DATE_MODES} from \"../../components/Fields/InputDate\";\nimport HighChartsWrapper from \"../../components/Common/HishChartsWrapper\";\n\nconst hoy = new Date();\nconst defaultDates = [new Date(hoy.getTime() - 518400000), new Date()];\nconst initialState = {\n    cargando: '',\n    usuarios: [],\n    ventasEstado: {\n        data: {\n            chart: {\n                type: 'column'\n            },\n            title: {\n                text: 'Ventas por departamento'\n            },\n            subtitle: {\n                text: null\n            },\n            xAxis: {\n                categories: []\n            },\n            yAxis: [{\n                labels: {\n                    format: '$ {value}'\n                },\n                title: {\n                    text: 'Monto'\n                }\n            }],\n            series: [{\n                name: 'Venta ($)',\n                data: []\n            }]\n        },\n        fecha: {\n            inicial: new Date(hoy.getTime() - 518400000),\n            final: new Date(hoy.getTime()),\n        }\n    }\n}\n\nconst Departments = ({className}) => {\n\n    const [stats, setStats] = useState(initialState);\n\n    useEffect(() => {\n        if (stats.ventasEstado) {\n            ventasEstadoCargar()\n        }\n    }, [stats.ventasEstado.fecha]);\n\n    const getStatsLabel = (stats, node) => {\n        if(parserClientDate(stats[node].fecha.inicial) == parserClientDate(stats[node].fecha.final)){\n            return parserClientDate(stats[node].fecha.inicial);\n        }\n        else {\n            return parserClientDate(stats[node].fecha.inicial) + ' a ' + parserClientDate(stats[node].fecha.final)\n        }\n    }\n\n    const ventasEstadoCargar = () => {\n        if (valida(stats.ventasEstado.fecha)) {\n            stats.cargando = 'Cargando estadisticas de ventas...';\n            //definir la url para la consulta a la API\n            var url = '/stats/estadistica_ventas_estado';\n\n            url += '/' + parserServerDate(stats.ventasEstado.fecha.inicial);\n            url += '/' + parserServerDate(stats.ventasEstado.fecha.final);\n\n            //leer estadisticas de ventas\n\n            statsApi(url).then(function (resp) {\n                var estados = [];\n                var datosVentas = [];\n                var keys = Object.keys(resp);\n                for (var i = 0; i < keys.length; i++) {\n                    var data = resp[keys[i]];\n                    estados[i] = data.estado;\n                    datosVentas[i] = parseFloat(data.monto);\n                }\n                const newStats = {...stats};\n                newStats.ventasEstado.data.subtitle.text = getStatsLabel(newStats,'ventasEstado');\n                newStats.ventasEstado.data.xAxis.categories = estados;\n                newStats.ventasEstado.data.series[0].data = datosVentas;\n                newStats.cargando = '';\n                setStats(newStats);\n            })\n        }\n    }\n\n    const parserServerDate = (date) => {\n        return formatDate(date, DATE_FORMAT.ONLY_DATE);\n    }\n\n    const valida = (node) => {\n        if (!node) return;\n        let v = false;\n        if (node.inicial && node.final && (node.inicial <= node.final)) {\n            v = true;\n        } else if (node.inicial || node.final){\n            v = true;\n        }\n        return v;\n    }\n\n    const parserClientDate = (date) => {\n        return formatDate(date, DATE_FORMAT.DD_MM_YYYY);\n    }\n\n    const onChangeDate = (dates, node) => {\n        if (dates.length > 0) {\n            const s = {...stats}\n            if ((dates.length === 1) || (dates[0].toString() == dates[1].toString())) {\n                s[node] = {...stats[node], fecha: {...stats[node].fecha, inicial: dates[0], final: dates[0]}};\n            } else {\n                s[node] = {...stats[node], fecha: {...stats[node].fecha, inicial: dates[0], final: dates[1]}};\n            }\n            setStats(s);\n            console.log(s);\n        }\n    }\n\n    return (\n        <AvForm className=\"needs-validation\" autoComplete=\"off\">\n            <Card className={className}>\n                <CardBody>\n                    <Row id=\"ventasEstado\">\n                        <Col md={12}>\n                            <h4 className=\"card-title text-info\"> Ventas por departamento</h4>\n                        </Col>\n                        <Col md={4}>\n                            <div className=\"mb-3\">\n                                <Label>Fecha</Label>\n                                <FieldDate\n                                    name=\"ventasEstado_dates\"\n                                    mode={DATE_MODES.RANGE}\n                                    defaultValue={defaultDates}\n                                    onChange={(dates) => onChangeDate(dates, \"ventasEstado\")}\n                                />\n                            </div>\n                        </Col>\n                        <Col md={12}>\n                            <HighChartsWrapper options={stats.ventasEstado.data}/>\n                        </Col>\n                    </Row>\n                </CardBody>\n            </Card>\n        </AvForm>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGenerateReport: (data) => dispatch(generateReport(REPORT_TYPES.CONCILIATION, data))\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(Departments)\n)\n\nDepartments.propTypes = {\n    error: PropTypes.any,\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/components/Common/BarChart.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/Fields/messages.js",["1767"],"export default {\n    required: 'Campo requerido',\n    minLength: 'Debe ingresar al menos {length} caracteres.',\n    maxLength: 'Solo puede ingresar {length} caracteres.',\n    email_invalid: 'Email es invalido',\n    minValue: 'Este campo es invalido',\n    onlyAlpha: 'Este campo solo permite valores de [A-Z]',\n};\n","/Users/ramon/Repositories/lucy-moie/src/pages/CustomerEdit/TimeLine.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/comment/actions.js",["1768"],"import {\n    DELETE_COMMENT,\n    DELETE_COMMENT_FAILED,\n    DELETE_COMMENT_SUCCESS,\n    GET_COMMENT,\n    GET_COMMENT_FAILED,\n    GET_COMMENT_SUCCESS,\n    GET_COMMENTS,\n    GET_COMMENTS_FAILED,\n    GET_COMMENTS_SUCCESS,\n    REGISTER_COMMENT,\n    REGISTER_COMMENT_FAILED,\n    REGISTER_COMMENT_SUCCESS,\n    UPDATE_COMMENT,\n    UPDATE_COMMENT_FAILED,\n    UPDATE_COMMENT_SUCCESS,\n} from \"./actionTypes\";\nimport Conditionals from \"../../common/conditionals\";\n\nexport const getCommentsByEntity = (entity, idRelated) => {\n    const conditions = new Conditionals.Condition;\n    conditions.add('entity', entity, Conditionals.OPERATORS.EQUAL);\n    conditions.add('idRelated', idRelated, Conditionals.OPERATORS.EQUAL);\n    return getComments(conditions.all(), 100, 0);\n}\n\nexport const getComments = (conditional, limit, offset) => ({\n    type: GET_COMMENTS,\n    conditional: conditional,\n    limit: limit,\n    offset: offset\n})\nexport const getCommentsSuccess = (data, meta, entity) => ({\n    type: GET_COMMENTS_SUCCESS,\n    meta: meta,\n    payload: data,\n    entity: entity\n})\nexport const getCommentsFailed = error => ({\n    type: GET_COMMENTS_FAILED,\n    payload: error,\n})\nexport const getComment = id => ({\n    type: GET_COMMENT,\n    id\n})\nexport const getCommentSuccess = data => ({\n    type: GET_COMMENT_SUCCESS,\n    payload: data,\n})\nexport const getCommentFailed = error => ({\n    type: GET_COMMENT_FAILED,\n    payload: error,\n})\nexport const registerComment = (idRelated, data) => {\n    return {\n        type: REGISTER_COMMENT,\n        payload: {idRelated, data},\n    }\n}\nexport const registerCommentSuccess = data => {\n    return {\n        type: REGISTER_COMMENT_SUCCESS,\n        payload: data.comment,\n    }\n}\nexport const registerCommentFailed = data => {\n    return {\n        type: REGISTER_COMMENT_FAILED,\n        payload: data,\n    }\n}\nexport const updateComment = (id, data, history) => {\n    return {\n        type: UPDATE_COMMENT,\n        payload: { id, data, history },\n    }\n}\nexport const updateCommentSuccess = data => {\n    return {\n        type: UPDATE_COMMENT_SUCCESS,\n        payload: data,\n    }\n}\nexport const updateCommentFail = error => {\n    return {\n        type: UPDATE_COMMENT_FAILED,\n        payload: error,\n    }\n}\nexport const deleteComment = (comment) => {\n    return {\n        type: DELETE_COMMENT,\n        payload: { comment },\n    }\n}\nexport const deleteCommentSuccess = id => {\n    return {\n        type: DELETE_COMMENT_SUCCESS,\n        payload: id,\n    }\n}\nexport const deleteCommentFail = error => {\n    return {\n        type: DELETE_COMMENT_FAILED,\n        payload: error,\n    }\n}\n","/Users/ramon/Repositories/lucy-moie/src/components/Common/HishChartsWrapper.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/comment/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/Common/PieChart.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Stats/Sales.js",["1769","1770","1771","1772","1773","1774"],"import React, {useEffect, useState} from \"react\"\nimport {CardBody, Col, Label, Row} from \"reactstrap\"\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {DATE_FORMAT, formatDate} from \"../../common/utils\";\nimport {REPORT_TYPES, showByList} from \"../../common/constants\";\nimport {generateReport} from \"../../store/reports/actions\";\nimport {statsApi} from \"../../helpers/backend_helper\";\n\nimport Highcharts from 'highcharts'\nimport {FieldDate, FieldSelect} from \"../../components/Fields\";\nimport {DATE_MODES} from \"../../components/Fields/InputDate\";\nimport {DEFAULT_PAGE_LIMIT} from \"../../common/pagination\";\nimport {getUsers} from \"../../store/user/actions\";\nimport {getEmptyOptions} from \"../../common/converters\";\nimport HighChartsWrapper from \"../../components/Common/HishChartsWrapper\";\nimport {AvForm} from \"availity-reactstrap-validation\";\nimport {Card} from \"@material-ui/core\";\n\nconst hoy = new Date();\nconst defaultDates = [new Date(hoy.getTime() - 518400000), new Date()];\nconst initialState = {\n    cargando: '',\n    usuarios: [],\n    ventasTotal: {\n        data: {\n            title: {\n                text: 'Ventas'\n            },\n            subtitle: {\n                text: null\n            },\n            xAxis: {\n                categories: []\n            },\n            yAxis: [{\n                labels: {\n                    format: '$ {value}'\n                },\n                title: {\n                    text: 'Monto'\n                }\n            },\n                {\n                    labels: {\n                        format: '{value} Pz.'\n                    },\n                    title: {\n                        text: 'Piezas'\n                    },\n                    opposite: true\n                }],\n            series: [{\n                name: 'Venta ($)',\n                data: []\n            },\n                {\n                    name: 'Ganancia ($)',\n                    data: []\n                },\n                {\n                    name: 'Piezas',\n                    yAxis: 1,\n                    dashStyle: 'shortdot',\n                    data: []\n                }]\n        },\n        opciones: {\n            usuario: '',\n            grupo: 'dia'\n        },\n        fecha: {\n            inicial: new Date(hoy.getTime() - 518400000),\n            final: new Date(hoy.getTime())\n        },\n    }\n}\n\nconst Sales = ({users, onGetUsers, className}) => {\n\n    const [stats, setStats] = useState(initialState);\n    const [userList, setUserList] = useState([]);\n\n    useEffect(() => {\n        if (onGetUsers) {\n            onGetUsers(null, 250);\n        }\n    }, [onGetUsers]);\n\n    useEffect(() => {\n        if (stats.ventasTotal) {\n            cargarVentas()\n        }\n    }, [stats.ventasTotal.fecha]);\n\n    useEffect(() => {\n        if (stats.ventasTotal) {\n            cargarVentas()\n        }\n    }, [stats.ventasTotal.opciones]);\n\n    useEffect(() => {\n        if (users) {\n            const options = users.map((user) => ({label: user.name, value: user.id}))\n            setStats({...stats, usuarios: [getEmptyOptions(), ...options]});\n            const addedUsers = users.filter(user => !!user.status).map(user => ({label: user.username, value: user.id}));\n            addedUsers.unshift({value: null, label: \"Todos\"});\n            setUserList(addedUsers);\n        }\n    }, [users]);\n\n    const getStatsLabel = (stats, node) => {\n        if(parserClientDate(stats[node].fecha.inicial) == parserClientDate(stats[node].fecha.final)){\n            return parserClientDate(stats[node].fecha.inicial);\n        }\n        else {\n            return parserClientDate(stats[node].fecha.inicial) + ' a ' + parserClientDate(stats[node].fecha.final)\n        }\n    }\n\n    const cargarVentas = () => {\n        if (valida(stats.ventasTotal.fecha)) {\n            stats.cargando = 'Cargando estadisticas de ventas...';\n            //definir la url para la consulta a la API\n            var url = '/stats/estadistica_ventas/sales';\n            url += '/' + parserServerDate(stats.ventasTotal.fecha.inicial);\n            url += '/' + parserServerDate(stats.ventasTotal.fecha.final);\n            url += '/' + stats.ventasTotal.opciones.grupo;\n            url += '/' + stats.ventasTotal.opciones.usuario;\n            //leer estadisticas de ventas\n            statsApi(url).then((resp) => {\n                var fechas = [];\n                var datosVentas = [];\n                var datosGanancias = [];\n                var datosPiezas = [];\n\n                var keys = Object.keys(resp);\n\n                for (var i = 0; i < keys.length; i++) {\n                    var data = resp[keys[i]];\n                    fechas[i] = data.fecha;\n                    datosVentas[i] = parseFloat(data.monto);\n                    datosGanancias[i] = parseFloat(data.ganancia);\n                    datosPiezas[i] = parseFloat(data.piezas);\n                }\n                const newStats = {...stats};\n                newStats.ventasTotal.data.subtitle.text = getStatsLabel(newStats,'ventasTotal');\n                newStats.ventasTotal.data.xAxis.categories = fechas;\n                newStats.ventasTotal.data.series[0].data = datosVentas;\n                newStats.ventasTotal.data.series[1].data = datosGanancias;\n                newStats.ventasTotal.data.series[2].data = datosPiezas;\n                newStats.cargando = '';\n                setStats(newStats);\n            })\n        }\n    }\n\n    const parserServerDate = (date) => {\n        return formatDate(date, DATE_FORMAT.ONLY_DATE);\n    }\n\n    const valida = (node) => {\n        if (!node) return;\n        let v = false;\n        if (node.inicial && node.final && (node.inicial <= node.final)) {\n            v = true;\n        } else if (node.inicial || node.final){\n            v = true;\n        }\n        return v;\n    }\n\n    const parserClientDate = (date) => {\n        return formatDate(date, DATE_FORMAT.DD_MM_YYYY);\n    }\n\n    const onChangeDate = (dates, node) => {\n        if (dates.length > 0) {\n            const s = {...stats}\n            if ((dates.length === 1) || (dates[0].toString() == dates[1].toString())) {\n                s[node] = {...stats[node], fecha: {...stats[node].fecha, inicial: dates[0], final: dates[0]}};\n            } else {\n                s[node] = {...stats[node], fecha: {...stats[node].fecha, inicial: dates[0], final: dates[1]}};\n            }\n            setStats(s);\n        }\n    }\n\n    const onChangeUser = (user, node) => {\n        const s = {...stats}\n        s[node] = {...stats[node], opciones: {...stats[node].opciones, usuario: user.value || null}}\n        setStats(s);\n    }\n\n    const onChangeGrupo = (grupo, node) => {\n        if (grupo && grupo.value) {\n            const s = {...stats}\n            s[node] = {...stats[node], opciones: {...stats[node].opciones, grupo: grupo.value}}\n            setStats(s);\n        }\n    }\n\n    return (\n        <AvForm className=\"needs-validation\" autoComplete=\"off\">\n        <Card className={className}>\n        <CardBody>\n            <Row id=\"ventasTotal\">\n                <Col md={12}>\n                    <h4 className=\"card-title text-info\"> Total de ventas</h4>\n                </Col>\n                <Col md={4}>\n                    <div className=\"mb-3\">\n                        <Label>Fecha</Label>\n                        <FieldDate\n                            name=\"ventas_total_dates\"\n                            mode={DATE_MODES.RANGE}\n                            defaultValue={defaultDates}\n                            onChange={(dates) => onChangeDate(dates, \"ventasTotal\")}\n                        />\n                    </div>\n                </Col>\n                <Col md={4}>\n                    <div className=\"mb-3\">\n                        <Label>Mostrar por</Label>\n                        <FieldSelect\n                            name=\"ventas_total_grupo\"\n                            options={showByList}\n                            defaultValue={showByList.length > 0 ? showByList[0] : null}\n                            onChange={(data) => onChangeGrupo(data, \"ventasTotal\")}\n                        />\n                    </div>\n                </Col>\n                <Col md={4}>\n                    <div className=\"mb-3\">\n                        <Label>Usuarios</Label>\n                        <FieldSelect\n                            name=\"ventas_total_users\"\n                            options={userList}\n                            defaultValue={stats.usuarios.length > 0 ? stats.usuarios[0] : null}\n                            onChange={(data) => onChangeUser(data, \"ventasTotal\")}\n                        />\n                    </div>\n                </Col>\n                <Col md={12}>\n                    <HighChartsWrapper options={stats.ventasTotal.data}/>\n                </Col>\n            </Row>\n        </CardBody>\n        </Card>\n        </AvForm>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {users} = state.User\n    return {users}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGenerateReport: (data) => dispatch(generateReport(REPORT_TYPES.CONCILIATION, data)),\n    onGetUsers: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getUsers(conditional, limit, page)),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(Sales)\n)\n\nSales.propTypes = {\n    error: PropTypes.any,\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/Security/SecurityPermissions.js",["1775"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from \"prop-types\"\nimport {connect} from \"react-redux\"\nimport {Card, CardBody, Col, Row} from \"reactstrap\"\nimport {map} from \"lodash\";\nimport {AvForm} from \"availity-reactstrap-validation\";\nimport {deleteDataApi, fetchDataApi, registerDataApi, updateDataApi} from \"../../helpers/backend_helper\";\nimport * as url from \"../../helpers/url_helper\";\nimport {FieldText} from \"../../components/Fields\";\n\nconst SecurityPermissions = (props) => {\n\n    const [permissions, setPermissions] = useState([]);\n    const [permissionEdited, setPermissionEdited] = useState(null);\n\n    useEffect(() => {\n        getPermissions();\n    }, [setPermissions]);\n\n    const getPermissions = () => {\n        fetchDataApi(url.SECURITY_PERMISSIONS).then(resp => {\n            setPermissions(sort(resp.data, 'permission'));\n        });\n    };\n\n    const sort = (data, fieldName) => {\n        return (data || []).sort((a, b) => a[fieldName] === b[fieldName] ? 0 : (a[fieldName] > b[fieldName]) ? 1 : -1)\n    };\n\n    const onDelete = (permission) => {\n        deleteDataApi(url.SECURITY_PERMISSIONS, permission.id, {}).then(resp => {\n            if (resp.status === 200) {\n                getPermissions();\n            }\n        })\n    };\n\n    const onAdd = () => {\n        setPermissionEdited(null);\n        const list = [...permissions];\n        list.unshift({id: null, name: ''});\n        setPermissions(list);\n    };\n\n    const onSave = (ev, data) => {\n        let payload = {permission: data.permission, description: data.description};\n\n        let func;\n        if (permissionEdited) {\n            func = updateDataApi(url.SECURITY_PERMISSIONS, permissionEdited, payload);\n        } else {\n            func = registerDataApi(url.SECURITY_PERMISSIONS, payload);\n        }\n\n        func.then(resp => {\n            if (resp.status === 200) {\n                getPermissions();\n            }\n            setPermissionEdited(null)\n        })\n    };\n\n    const onCancel = (index) => {\n        const list = [...permissions];\n        list.splice(index, 1);\n        setPermissions(list);\n    };\n\n    return (\n        <Row>\n            <Col md={12}>\n                <Card>\n                    <CardBody>\n                        <Row className=\"mb-3\">\n                            <Col sm={12}>\n                                <button size=\"small\" type=\"button\" className=\"btn btn-sm text-primary float-md-end\" onClick={() => onAdd()}>\n                                    <i className=\"uil uil-plus font-size-18\"> </i> Agregar\n                                </button>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col>\n                                <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => onSave(e, v)}>\n                                    <table className=\"table table-bordered table-condensed\">\n                                        <thead>\n                                        <tr>\n                                            <th style={{width: '30%'}}>Permiso</th>\n                                            <th style={{width: '55%'}}>Descripcion</th>\n                                            <th style={{width: '15%'}}>Acciones</th>\n                                        </tr>\n                                        </thead>\n                                        <tbody>\n                                        {map(permissions, (permission, key) => (\n                                            <tr key={key}>\n                                                <td>\n                                                    {permissionEdited !== permission.id && (\n                                                        <>\n                                                            {permission.permission}\n                                                        </>\n                                                    )}\n                                                    {permissionEdited === permission.id && (\n                                                        <>\n                                                            <FieldText id={\"permission\"} name={\"permission\"} value={permission.permission} required/>\n                                                        </>\n                                                    )}\n                                                </td>\n                                                <td>\n                                                    {permissionEdited !== permission.id && (\n                                                        <>\n                                                            {permission.description}\n                                                        </>\n                                                    )}\n                                                    {permissionEdited === permission.id && (\n                                                        <>\n                                                            <FieldText id={\"description\"} name={\"description\"} value={permission.description} required/>\n                                                        </>\n                                                    )}\n                                                </td>\n                                                <td className=\"text-center\">\n                                                    <ul className=\"list-inline font-size-20 contact-links mb-0\">\n                                                        <li className=\"list-inline-item\">\n                                                            <div className=\"btn-group\">\n                                                                <div className=\"btn-group\">\n\n                                                                    {(permissionEdited !== permission.id && permission.id) && (\n                                                                        <div>\n                                                                            <button type=\"button\" size=\"small\" className=\"btn btn-sm text-primary\" disabled={permissionEdited}\n                                                                                    onClick={() => setPermissionEdited(permission.id)}>\n                                                                                <i className=\"uil uil-pen font-size-18\"> </i>\n                                                                            </button>\n                                                                            <button type=\"button\" size=\"small\" className=\"btn btn-sm text-danger\" disabled={permissionEdited}\n                                                                                    onClick={() => onDelete(permission)}>\n                                                                                <i className=\"uil uil-trash-alt font-size-18\"> </i>\n                                                                            </button>\n                                                                        </div>\n                                                                    )}\n                                                                    {(permissionEdited === permission.id || !permission.id) && (\n                                                                        <div>\n                                                                            <button type=\"submit\" size=\"small\" className=\"btn btn-sm text-success\">\n                                                                                <i className=\"uil uil-check font-size-18\"> </i>\n                                                                            </button>\n                                                                            {!permission.id && (\n                                                                                <button type=\"submit\" size=\"small\" className=\"btn btn-sm text-danger\" onClick={() => onCancel(key)}>\n                                                                                    <i className=\"uil uil-multiply font-size-18\"> </i>\n                                                                                </button>\n                                                                            )}\n                                                                            {permission.id && (\n                                                                                <button type=\"button\" size=\"small\" className=\"btn btn-sm text-primary\" onClick={() => setPermissionEdited(null)}>\n                                                                                    <i className=\"uil uil-multiply font-size-18\"> </i>\n                                                                                </button>\n                                                                            )}\n                                                                        </div>\n                                                                    )}\n                                                                </div>\n                                                            </div>\n                                                        </li>\n                                                    </ul>\n\n                                                </td>\n                                            </tr>\n                                        ))}\n                                        </tbody>\n                                    </table>\n                                </AvForm>\n                            </Col>\n                        </Row>\n                    </CardBody>\n                </Card>\n            </Col>\n        </Row>\n    )\n}\n\nSecurityPermissions.propTypes = {\n    onChange: PropTypes.func\n}\n\nconst mapStateToProps = state => {\n    return {}\n}\n\nconst mapDispatchToProps = dispatch => ({})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(SecurityPermissions)\n","/Users/ramon/Repositories/lucy-moie/src/pages/ProductEdit/ProductPublish.js",["1776","1777"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from 'prop-types'\nimport {Col, Label, Row} from \"reactstrap\"\nimport {FieldSwitch, FieldText} from \"../../components/Fields\";\nimport {connect} from \"react-redux\";\nimport {AvForm} from \"availity-reactstrap-validation\";\nimport {updateProduct} from \"../../store/product/actions\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\nimport {map} from \"lodash\";\n\nconst ProductPublish = props => {\n    const {product, updateProduct} = props\n    const [productData, setProductData] = useState(product);\n    const [discount, setDiscount] = useState(0);\n    const [selectValues, setSelectValues] = useState([]);\n\n    useEffect(() => {\n        fillValues();\n    }, [product])\n\n    const handleValidSubmit = (event, values) => {\n        const data = {\n            video: values.video || null,\n            published: values.published === true,\n            discount: Number.parseFloat(discount)\n        };\n        updateProduct(product.id, data, props.history);\n    }\n\n    const fillValues = () => {\n        if (selectValues.length === 0) {\n            const valueList = [];\n            for (let i = 0; i <= 100;) {\n                valueList.push({label: i, value: i});\n                i += 5;\n            }\n            setSelectValues(valueList);\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => handleValidSubmit(e, v)}>\n                <div className=\"p-4 border-top\">\n                    <Row>\n                        <Col lg={6}>\n                            <div className=\"mb-3\">\n                                <Label htmlFor=\"productpublished\">Publicación Activa</Label>\n                                <FieldSwitch name={\"published\"} defaultValue={productData.published}/>\n                            </div>\n                        </Col>\n                        <Col lg={6}>\n                            <div className=\"mb-3\">\n                                <Label htmlFor=\"field_discount\">Descuento especial</Label>\n                                <select\n                                    id={\"field_discount\"}\n                                    name={\"discount\"}\n                                    value={discount}\n                                    onChange={(e) => setDiscount(e.target.value)}\n                                    className=\"form-control\"\n                                >\n                                    {map(selectValues, (o, k3) => (\n                                        <option key={k3} value={o.value}>{o.label}</option>\n                                    ))}\n                                </select>\n                            </div>\n                        </Col>\n                        <Col lg={12}>\n                            <div className=\"mb-3\">\n                                <Label htmlFor=\"video\">Enlace de Video</Label>\n                                <FieldText\n                                    id={\"field_video\"}\n                                    name={\"video\"}\n                                    value={productData.video}\n                                    maxLength={300}\n                                    />\n                            </div>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col md={12} className=\"text-right\">\n                            <ButtonSubmit loading={props.loading}/>\n                        </Col>\n                    </Row>\n                </div>\n            </AvForm>\n        </React.Fragment>\n    )\n}\n\nProductPublish.propTypes = {\n    product: PropTypes.object,\n    onGetProductSizes: PropTypes.func,\n}\n\nconst mapStateToProps = state => {\n    const {product, loading, meta, refresh} = state.Product\n    return {product, loading, meta, refresh}\n}\n\n\nexport default connect(mapStateToProps, {updateProduct})(ProductPublish)\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/ProductEdit/ProductImage.js",["1778","1779","1780","1781","1782","1783","1784","1785"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from 'prop-types'\nimport {Card, CardBody, Col, Row, Spinner} from \"reactstrap\"\nimport {Button} from \"@material-ui/core\";\nimport {getProductImage, updateProductImage} from \"../../store/productImages/actions\";\nimport {connect} from \"react-redux\";\nimport {AvForm} from \"availity-reactstrap-validation\";\nimport Images from \"../../components/Common/Image\";\nimport DropZoneIcon from \"../../components/Common/DropZoneIcon\";\nimport {getImageByQuality} from \"../../common/utils\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\n\n\nconst groups = [\n    {group: 'Izquierda', groupId: 1},\n    {group: 'Centro', groupId: 2},\n    {group: 'Derecha', groupId: 3}\n];\n\nconst ProductImage = props => {\n    const {product, onGetProductImage, productImages, refresh} = props\n    const [productImageList, setProductImageList] = useState(false);\n    const [selectedFiles, setSelectedFiles] = useState([]);\n    const [productImageGroups, setProductImageGroups] = useState(groups);\n    const form = React.createRef();\n\n    useEffect(() => {\n        const files = groups.map(g => ({...g, file: {name: '', preview: ''}}));\n        if (product.productImage && product.productImage.length > 0) {\n            files.forEach((f, i) => {\n                    const imgData = (product.productImage.filter(_pi => _pi.group === f.groupId))[0];\n                    if (imgData) {\n                        // f.groupId = imgData.group;\n                        f.file.preview = `${getImageByQuality(imgData, 'high')}`\n                        f.file.name = imgData.filename;\n                    }\n            })\n        }\n\n        setSelectedFiles(files);\n    }, [product])\n\n    useEffect(() => {\n        if (productImages && productImages.length > 0) {\n            setProductImageList(productImages);\n        } else {\n            setProductImageList([]);\n        }\n    }, [productImages])\n\n    function handleAcceptedFiles(groupId, file) {\n        const filesSelected = [...selectedFiles];\n        let group = filesSelected.find(f => f.groupId === groupId);\n        group.file = {\n            ...file,\n            preview: URL.createObjectURL(file.f),\n            formattedSize: formatBytes(file.f.size)\n        }\n        setSelectedFiles(filesSelected);\n\n    }\n\n    function formatBytes(bytes, decimals = 2) {\n        if (bytes === 0) return \"0 Bytes\"\n        const k = 1024\n        const dm = decimals < 0 ? 0 : decimals\n        const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"]\n\n        const i = Math.floor(Math.log(bytes) / Math.log(k))\n        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + \" \" + sizes[i]\n    }\n\n    const handleValidSubmit = (event, values) => {\n        const files = selectedFiles.filter(selectedFile => selectedFile.groupId && selectedFile.file.base64).map(f => ({group: f.groupId, file: f.file.base64}));\n        if (files.length > 0) {\n            props.onUpdateProductImage(product.id, files, props.history);\n        }\n    }\n\n    const onDeletePhoto = (fileNumber) => {\n        if(props.onDeleteProductImage){\n            props.onDeleteProductImage(product.id, fileNumber);\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <AvForm ref={form} className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => handleValidSubmit(e, v)}>\n                <Row className=\"p-4 border-top\">\n                    {selectedFiles.map((f, i) => (\n                        <Col md={4} key={i + \"-file\"}>\n                            <Card className=\"mt-1 mb-0 shadow-none border dz-processing dz-image-preview dz-success dz-complete\">\n                                <div className=\"p-2\">\n                                    <Row className=\"align-items-center\" style={{borderBottom: '1px solid #f5f6f8'}}>\n                                        <div>\n                                            <button className=\"btn btn-danger m-2\" onClick={() => onDeletePhoto(i)}>\n                                            <i className=\"fa fa-trash\"></i>\n                                            </button>\n                                        </div>\n\n                                        <Col md={12} className=\"text-center p-2\" style={{height: '400px'}}>\n                                            <DropZoneIcon\n                                                maxFiles={1}\n                                                mode=\"block\"\n                                                hasImage={f.file && f.file.preview}\n                                                onDrop={(files) => {\n                                                    handleAcceptedFiles(f.groupId, files);\n                                                }}>\n                                                <Images className=\"img-fluid mx-auto d-block tab-img rounded\"\n                                                        height={370}\n                                                        alt={f.file?.f?.name}\n                                                        src={f.file?.preview}\n                                                />\n                                            </DropZoneIcon>\n                                        </Col>\n                                    </Row>\n                                    <Row className=\"p-2\">\n                                        <Col md={8}>\n                                            <>\n                                                <div className=\"text.muted\"><strong>Grupo:</strong> {f.groupId}</div>\n                                                {(f.file && f.file.f) && (\n                                                    <>\n                                                        <div className=\"text.muted\">{f.file.f.path}</div>\n                                                        <div className=\"text.muted\">{f.file.formattedSize}</div>\n                                                    </>\n                                                )}\n                                            </>\n                                        </Col>\n                                        <Col md={4} className=\"text-right\">\n                                            <DropZoneIcon\n                                                maxFiles={1}\n                                                mode=\"icon\"\n                                                onDrop={(files) => {\n                                                    handleAcceptedFiles(f.groupId, files);\n                                                }}\n                                            />\n                                        </Col>\n                                    </Row>\n                                </div>\n                            </Card>\n                        </Col>\n                    ))}\n                </Row>\n                <Row className=\"p-4\">\n                    <Col md={12} className=\"text-right\">\n                        <ButtonSubmit loading={props.loading}/>\n                    </Col>\n                </Row>\n            </AvForm>\n        </React.Fragment>\n    )\n}\n\nProductImage.propTypes = {\n    product: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => {\n    const {productImages, loading, meta, refresh} = state.ProductImage\n    return {productImages, loading, meta, refresh}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGetProductImage: (productId) => {\n        if (productId) dispatch(getProductImage(productId, null, 0));\n    },\n    onUpdateProductImage: (id, data, history) => dispatch(updateProductImage(id, data, history))\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ProductImage)\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/Product/ProductList/products-list.js",["1786","1787","1788","1789","1790"],"import {Card, CardBody, Col, Row} from \"reactstrap\";\nimport {Link} from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport {connect} from \"react-redux\";\nimport {getProducts, resetProduct, updateProduct} from \"../../../store/product/actions\";\nimport React, {useEffect, useState} from \"react\";\nimport {TableFilter} from \"../../../components/TableFilter\";\nimport paginationFactory, {PaginationListStandalone, PaginationProvider} from \"react-bootstrap-table2-paginator\";\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\nimport {normalizeColumnsList} from \"../../../common/converters\";\nimport {Button, Tooltip} from \"@material-ui/core\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport NoDataIndication from \"../../../components/Common/NoDataIndication\";\nimport productColumns from \"./productColumn\";\nimport StatsStatusCard from \"../../../components/Common/StatsStatusCard\";\nimport {countProductsByStatus} from \"../../../helpers/service\";\nimport HasPermissions from \"../../../components/HasPermissions\";\nimport {PERMISSIONS} from \"../../../helpers/security_rol\";\nimport {clearTableConditions, saveTableConditions} from \"../../../store/layout/actions\";\n\nconst DEFAULT_PAGE_LIMIT = 30;\n\n\nconst series2 = [70]\n\nconst options2 = {\n    fill: {\n        colors: ['#34c38f']\n    },\n    chart: {\n        sparkline: {\n            enabled: !0\n        }\n    },\n    dataLabels: {\n        enabled: !1\n    },\n    plotOptions: {\n        radialBar: {\n            hollow: {\n                margin: 0,\n                size: '60%'\n            },\n            track: {\n                margin: 0\n            },\n            dataLabels: {\n                show: !1\n            }\n        }\n    }\n};\n\nconst series3 = [55]\n\nconst options3 = {\n    fill: {\n        colors: ['#5b73e8']\n    },\n    chart: {\n        sparkline: {\n            enabled: !0\n        }\n    },\n    dataLabels: {\n        enabled: !1\n    },\n    plotOptions: {\n        radialBar: {\n            hollow: {\n                margin: 0,\n                size: '60%'\n            },\n            track: {\n                margin: 0\n            },\n            dataLabels: {\n                show: !1\n            }\n        }\n    }\n};\n\n\nconst ProductList = props => {\n\n    const {refresh, onGetProducts, onResetProducts, countProductsByStatus, products, meta, onUpdateProduct, onSaveTableConditions, onClearTableConditions, conditionType, conditions, offset} = props;\n    const [productList, setProductList] = useState([]);\n    const [filter, setFilter] = useState(false);\n    const [conditional, setConditional] = useState(null);\n    const [defaultPage, setDefaultPage] = useState(1);\n\n    const pageOptions = {\n        sizePerPage: DEFAULT_PAGE_LIMIT,\n        totalSize: meta?.totalRegisters || 0,\n        custom: true,\n        showTotal: true,\n        page: defaultPage,\n        onPageChange: (page, sizePerPage) => {\n            setDefaultPage(page);\n            const offset = (page - 1) * DEFAULT_PAGE_LIMIT;\n            onSaveTableConditions(conditions, offset, 'product');\n        },\n    };\n\n    useEffect(() => {\n        if (null !== refresh) {\n            onResetProducts();\n        }\n\n\n        if(conditionType !== 'product'){\n            onClearTableConditions();\n            onGetProducts();\n        } else {\n            //reload the filter loaded\n            onFilterAction(conditions, offset);\n        }\n    }, [refresh, onGetProducts])\n\n    useEffect(() => {\n        setProductList(products)\n    }, [products])\n\n    const onFilterAction = (condition, offset = 0) => {\n        const page = Math.floor(offset / DEFAULT_PAGE_LIMIT);\n        setConditional(condition);\n        onGetProducts(condition, DEFAULT_PAGE_LIMIT, offset);\n        setDefaultPage(page + 1);\n        if(condition && condition.length > 0) {\n            onSaveTableConditions(condition, offset, 'product');\n        } else {\n            onClearTableConditions();\n        }\n    }\n\n    const handleTableChange = (type, {page, searchText}) => {\n        const offset = (page - 1) * DEFAULT_PAGE_LIMIT;\n        onGetProducts(conditional, DEFAULT_PAGE_LIMIT, offset);\n        onSaveTableConditions(conditional, offset, 'product');\n    }\n\n    const onUpdateStatusProduct = (id, _status) => {\n\n        const product = {\n            id: id,\n            published: _status\n        };\n\n        onUpdateProduct(id, product);\n    }\n\n    const columns = productColumns(false, onUpdateStatusProduct);\n\n    return (\n        <>\n            <Row className=\"text-center\">\n                <Col md={4}>\n                    <StatsStatusCard title=\"Productos\" getData={countProductsByStatus}/>\n                </Col>\n            </Row>\n            <Row>\n                <TableFilter\n                    onPressDisabled={() => setFilter(false)}\n                    isActive={filter}\n                    fields={columns}\n                    onSubmit={onFilterAction.bind(this)}/>\n\n                <Col lg={filter ? \"8\" : \"12\"}>\n                    <Card>\n                        <CardBody>\n                            <PaginationProvider pagination={paginationFactory(pageOptions)}>\n                                {({paginationProps, paginationTableProps}) => (\n                                    <ToolkitProvider\n                                        keyField=\"id\"\n                                        data={productList || []}\n                                        columns={normalizeColumnsList(columns)}\n                                        bootstrap4\n                                        search\n                                    >\n                                        {toolkitProps => (\n                                            <React.Fragment>\n                                                <Row className=\"row mb-2\">\n                                                    <Col md={6}>\n                                                        <div className=\"form-inline mb-3\">\n                                                            <div className=\"search-box ms-2\">\n                                                                <h4 className=\"text-info\"><i className=\"uil-box me-2 me-2\"></i> Productos {conditionType && <small className={'font-size-12 badge rounded-pill bg-grey'}>Filtrados</small>}</h4>\n                                                            </div>\n                                                        </div>\n                                                    </Col>\n                                                    <Col md={6}>\n                                                        <div className=\"mb-3 float-md-end\">\n                                                            {columns.some(s => s.filter) && (\n                                                                <Tooltip placement=\"bottom\" title=\"Filtros Avanzados\" aria-label=\"add\">\n                                                                    <Button onClick={() => setFilter(!filter)}>\n                                                                        <i className={\"mdi mdi-filter\"}> </i>\n                                                                    </Button>\n                                                                </Tooltip>\n                                                            )}\n                                                            <Tooltip placement=\"bottom\" title=\"Busqueda masiva\" aria-label=\"add\">\n                                                                <Link to={\"/bq\"} className=\"btn\">\n                                                                    <i className=\"mdi mdi-text-box-search-outline\"> </i>\n                                                                </Link>\n                                                            </Tooltip>\n                                                            <HasPermissions permission={PERMISSIONS.PRODUCT_CREATE}>\n                                                                <Link to={\"/product\"} className=\"btn btn-primary waves-effect waves-light text-light\">\n                                                                    <i className=\"mdi mdi-plus\"> </i> Nuevo Producto\n                                                                </Link>\n                                                            </HasPermissions>\n                                                        </div>\n                                                    </Col>\n                                                </Row>\n                                                <Row>\n                                                    <Col xl=\"12\">\n                                                        <div className=\"table-responsive mb-4\">\n                                                            <BootstrapTable\n                                                                remote\n                                                                responsive\n                                                                loading={true}\n                                                                bordered={false}\n                                                                striped={true}\n                                                                classes={\"table table-centered table-nowrap mb-0\"}\n                                                                noDataIndication={() => <NoDataIndication/>}\n                                                                onTableChange={handleTableChange}\n                                                                {...toolkitProps.baseProps}\n                                                                {...paginationTableProps}\n                                                            />\n                                                        </div>\n                                                    </Col>\n                                                </Row>\n                                                <div className=\"float-sm-start\">\n                                                    <PaginationListStandalone {...paginationProps} />\n                                                </div>\n                                            </React.Fragment>\n                                        )}\n                                    </ToolkitProvider>\n                                )}\n                            </PaginationProvider>\n                        </CardBody>\n                    </Card>\n                </Col>\n            </Row>\n        </>\n    )\n}\n\nProductList.propTypes = {\n    onGetProducts: PropTypes.func,\n    products: PropTypes.array,\n    meta: PropTypes.object,\n    loading: PropTypes.bool,\n    refresh: PropTypes.bool,\n}\n\nconst mapStateToProps = state => {\n    const {products, loading, meta, refresh, custom} = state.Product\n    const {conditionType, conditions, offset} = state.Layout;\n    return {customData: custom, products, loading, meta, refresh, conditionType, conditions, offset}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onResetProducts: () => {\n        dispatch(resetProduct());\n    },\n    onUpdateProduct: (id, data, history) => dispatch(updateProduct(id, data, history)),\n    onGetProducts: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getProducts(conditional, limit, page)),\n    countProductsByStatus,\n    onSaveTableConditions: (conditions, offset, conditionType) => dispatch(saveTableConditions(conditions, offset, conditionType)),\n    onClearTableConditions: () => dispatch(clearTableConditions())\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ProductList);\n","/Users/ramon/Repositories/lucy-moie/src/pages/ProductEdit/ProductSize.js",["1791","1792","1793","1794","1795","1796","1797","1798","1799","1800"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from 'prop-types'\nimport {Col, Row} from \"reactstrap\"\nimport {FieldText} from \"../../components/Fields\";\nimport {map} from \"lodash\";\nimport {Button} from \"@material-ui/core\";\nimport {updateProductSizeList} from \"../../store/productSize/actions\";\nimport {connect} from \"react-redux\";\nimport Conditionals from \"../../common/conditionals\";\nimport {AvForm} from \"availity-reactstrap-validation\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\n\nconst ProductSize = props => {\n    const {product, template, productSizes, refresh, readonly} = props\n    const [productSizesList, setProductSizesList] = useState([]);\n    const [selectValues, setSelectValues] = useState([]);\n    const [sizeTotals, setSizeTotals] = useState({});\n    const form = React.createRef();\n\n    useEffect(() => {\n        if (product.productSize.length) {\n            setProductSizesList(parseList(product.productSize));\n        } else {\n            setProductSizesList([]);\n        }\n\n        fillSelectValues();\n    }, [product])\n\n    useEffect(() => {\n        calculateTotals();\n    }, [productSizesList])\n\n    const getModel = () => {\n        const model = {color: '', sizes: {}};\n        if (template && template.sizes) {\n            template.sizes.forEach(size => model.sizes[size] = 0)\n        }\n        return model;\n    }\n    const fillSelectValues = () => {\n        if (selectValues.length === 0) {\n            const valueList = [];\n            for (let i = 0; i <= 1000; i++) {\n                valueList.push({label: i, value: i});\n            }\n            setSelectValues(valueList);\n        }\n    }\n    const addColor = () => {\n        const list = [...productSizesList, getModel()];\n        setProductSizesList(list);\n        calculateTotals();\n    }\n    const removeColor = (index) => {\n        let list = [...productSizesList];\n        list.splice(index);\n        setProductSizesList(list);\n        calculateTotals();\n    }\n    const parseDefaultValue = (model, sizeName) => {\n        if (!model || !model.sizes) return 0;\n        return model.sizes[sizeName] ? model.sizes[sizeName] : 0;\n    }\n    const parseValues = () => {\n        //flat data\n        const dataList = [];\n        productSizesList.map((ps) => {\n            Object.keys(ps.sizes).forEach(sizeName => {\n                const productSize = (product.productSize.filter(psf => psf.name == sizeName && psf.color ==  ps.color))[0];\n                const _id = (productSize) ? productSize.id : null;\n                let qty = parseFloat(ps.sizes[sizeName]);\n                    dataList.push({name: sizeName, qty: qty, color: ps.color, id: _id});\n            });\n        });\n        return dataList;\n    }\n    const parseList = (list) => {\n        let map = {};\n        list.filter(ps => null !== ps).map(ps => {\n            const key = ps.color.replace(/\\s/g, '');\n            let mapElement = map[key];\n            if (!mapElement) {\n                mapElement = {color: ps.color, sizes: {}, id: ps.id};\n                if(template && template.sizes) {\n                    template.sizes.forEach(size => mapElement.sizes[size] = 0)\n                }\n            }\n            mapElement.sizes[ps.name] = ps.quantity;\n            map[key] = mapElement;\n        });\n        return Object.keys(map).map((m) => map[m]);\n    }\n    const handleValidSubmit = (event, values) => {\n        const list = parseValues(values);\n        if (list && list.length > 0) {\n            props.onUpdateProductSizeList(product.id, list, props.history);\n        }\n    }\n    const handleChangeColors = (index, color) => {\n        if (!productSizesList.some(l => l.color === color)) {\n            const list = [...productSizesList];\n            list[index].color = color;\n            setProductSizesList(list);\n        }\n        validateColor(\"color_\" + index);\n    }\n    const handleChangeSizes = (index, sizeName, sizeValue) => {\n        const list = [...productSizesList];\n        list[index].sizes[sizeName] = sizeValue;\n        setProductSizesList(list);\n        calculateTotals();\n    }\n\n    const validateColorDuplicate = (color) => {\n        //TODO validar\n        if (productSizesList.some(l => l.color === color)) {\n            return 'Color repetido.';\n        }\n        return true;\n    }\n    const validateColor = (inputName) => {\n        form.current.validateInput(inputName);\n    }\n    const calculateTotals = () => {\n        const totals = {total: 0};\n        productSizesList.forEach((model) => {\n            if(template && template.sizes) {\n                template.sizes.forEach((size) => {\n                    if (!totals[size]) totals[size] = 0;\n                    totals[size] += parseInt(model.sizes[size]);\n                    totals.total += parseInt(model.sizes[size]);\n                })\n            }\n        })\n        setSizeTotals(totals);\n    }\n\n    return (\n        <React.Fragment>\n            <AvForm ref={form} className=\"needs-validation\" autoComplete=\"off\"\n                    onValidSubmit={(e, v) => {\n                        handleValidSubmit(e, v)\n                    }}>\n                <Row>\n                    <Col md=\"12\">\n                        <div className={\"table-responsive\"}>\n                            <table className=\"table table-card-list table-condensed\">\n                                <thead>\n                                <tr>\n                                    <th>Color</th>\n                                    {map(template?.sizes, (size, key) => (\n                                        <th key={'th_' + key} className=\"text-center\">\n                                            {size}\n                                            {!!(product.sizeDescription) && (\n                                                <div><small className=\"text-muted\">[{product.sizeDescription}]</small></div>\n                                            )}\n                                        </th>\n                                    ))}\n                                    {!readonly && <th>Borrar</th>}\n                                </tr>\n                                </thead>\n                                <tbody>\n                                {productSizesList && map(productSizesList, (model, k1) => (\n                                    <tr key={'tr_' + k1}>\n                                        <td>\n                                            <FieldText\n                                                id={\"field_color_\" + k1}\n                                                name={\"color_\" + k1}\n                                                placeholder={'Ingrese el color'}\n                                                minLength={3}\n                                                maxLength={40}\n                                                value={model.color}\n                                                defaultValue={model.color}\n                                                onBlur={(e) => handleChangeColors(k1, e.target.value)}\n                                                validate={{myValidation: validateColorDuplicate}}\n                                                disabled={readonly}\n                                                required/>\n                                        </td>\n                                        {template && template.sizes && map(template.sizes, (size, k2) => (\n                                            <td key={'td_' + k1 + '_' + k2} style={{minWidth: '30px'}} className=\"text-center\">\n                                                <select\n                                                    id={\"select_\" + k1 + '_' + k2}\n                                                    name={\"select_\" + k1 + '_' + k2}\n                                                    value={model.sizes[size]}\n                                                    // defaultValue={parseDefaultValue(model, size)}\n                                                    onChange={(e) => handleChangeSizes(k1, size, e.target.value, model)}\n                                                    className=\"form-control\"\n                                                    disabled={readonly}\n                                                >\n                                                    {map(selectValues, (o, k3) => (\n                                                        <option key={k3} value={o.value}>{o.label}</option>\n                                                    ))}\n                                                </select>\n                                            </td>\n                                        ))}\n                                        {!readonly && (template && template.sizes > 1) && (\n                                            <th>\n                                                <button size=\"small\" className=\"btn btn-sm text-danger\" onClick={() => removeColor(k1)}>\n                                                    <i className=\"uil uil-trash-alt font-size-18\"> </i>\n                                                </button>\n                                            </th>\n                                        )}\n                                    </tr>\n                                ))}\n                                <tr>\n                                    <th>Totales</th>\n                                    {template && template.sizes && map(template.sizes, (size, k) => (\n                                        <th key={'td_' + k} style={{minWidth: '30px'}} className=\"text-center\">\n                                    {sizeTotals[size]}\n                                        </th>\n                                        ))\n                                    }\n                                    <th>{sizeTotals.total}</th>\n                                </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                    </Col>\n                </Row>\n                {!readonly && (\n                    <Row>\n                        <Col md=\"12\">\n                            <div className=\"text-center m-3\">\n                                <Button color=\"default\" type=\"button\" onClick={() => addColor()}>\n                                    Agregar color\n                                </Button>\n                            </div>\n                        </Col>\n                    </Row>\n                )}\n                {!readonly && (\n                    <Row>\n                        <Col md={12} className=\"text-right\">\n                            <ButtonSubmit loading={props.loading}/>\n                        </Col>\n                    </Row>\n                )}\n            </AvForm>\n        </React.Fragment>\n    )\n}\n\nProductSize.propTypes = {\n    product: PropTypes.object,\n    productSizes: PropTypes.array,\n    readonly: PropTypes.bool\n}\n\nconst mapStateToProps = state => {\n    const {productSizes, loading, meta, refresh} = state.ProductSize\n    return {productSizes, loading, meta, refresh}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onUpdateProductSizeList: (id, data, history) => dispatch(updateProductSizeList(id, data, history))\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ProductSize)\n\n","/Users/ramon/Repositories/lucy-moie/src/store/productSize/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/productImages/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/Common/StatsStatusCard.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Product/ProductList/productColumn.js",["1801"],"import React from \"react\"\nimport {Link} from \"react-router-dom\"\nimport {STATUS_COLORS, StatusField} from \"../../../components/StatusField\";\nimport {HtmlTooltip} from \"../../../components/Common/HtmlTooltip\";\nimport {ConverterStatus} from \"../../../common/converters\";\nimport {STATUS} from \"../../../common/constants\";\nimport Conditionals from \"../../../common/conditionals\";\nimport {getImageByQuality, priceFormat, STATUS_OPTIONS, YES_NO_OPTIONS} from \"../../../common/utils\";\nimport {CATEGORY, SIZE} from \"../../../helpers/url_helper\";\nimport {Button, Tooltip} from \"@material-ui/core\";\nimport Images from \"../../../components/Common/Image\";\nimport HasPermissions from \"../../../components/HasPermissions\";\nimport {PERMISSIONS} from \"../../../helpers/security_rol\";\nimport HasPermissionsFunc from \"../../../components/HasPermissionsFunc\";\n\nconst badgeStyles = {minWidth: '30px', margin: '2px'}\n\nconst productColumns = (onDelete = false, onToogleActivate = false) => {\n    let columns = [\n        {\n            text: \"Código\",\n            dataField: \"reference\",\n            sort: false,\n            filter: true,\n            filterType: \"text\",\n            filterCondition: Conditionals.OPERATORS.EQUAL,\n            formatter: (cellContent, item) => (\n                <HasPermissions permission={PERMISSIONS.PRODUCT_SHOW} renderNoAccess={() => <span className=\"text-info\">{item.reference} </span>}>\n                <HtmlTooltip\n                    title={\n                        <React.Fragment>\n                            <Images src={`${getImageByQuality(item.productImage.length > 0 ? item.productImage[0] : {}, 'medium')}`}\n                                    alt={item.reference}\n                                    height={100}\n                                    className=\"img-fluid mx-auto d-block tab-img rounded\"/>\n                        </React.Fragment>\n                    }>\n                        <Link to={`/product/detail/${item.id}`} className=\"text-body\">\n                            <span className=\"text-info\">{item.reference} </span>\n                        </Link>\n                </HtmlTooltip>\n                </HasPermissions>\n            ),\n        },\n        {\n            text: \"Descripcion\",\n            dataField: \"name\",\n            sort: true,\n            formatter: (cellContent, item) => (\n                <div className={`field-br ${item.status === STATUS.ACTIVE ? '' : 'opacity-25'}`} style={{width: '350px'}}>\n                    <small>{item.name}</small>\n                    {(item.published === false && item.status === STATUS.ACTIVE) && (\n                        <Tooltip placement=\"bottom\" title=\"Producto no publicado\" aria-label=\"add\">\n                            <i className={\"mdi mdi-alert-octagram-outline font-size-18 mr-1 text-warning\"}> </i>\n                        </Tooltip>\n                    )}\n                    {item.providerReference && (\n                        <div>\n                            <Tooltip placement=\"bottom\" title=\"Referencia de Proveedor\" aria-label=\"provider_add\">\n                                <p className=\"badge bg-soft-secondary p-1\"><small><b><i className=\"mdi mdi-web-box mr-5\"></i>{item.providerReference}</b></small></p>\n                            </Tooltip>\n                        </div>\n                    )}\n                </div>\n            ),\n            filter: true,\n            filterType: \"text\",\n            filterCondition: Conditionals.OPERATORS.LIKE,\n        },\n        {\n            text: \"Precio\",\n            dataField: \"price\",\n            sort: true,\n            headerStyle: (colum, colIndex) => {\n                return {textAlign: 'center'};\n            },\n            formatter: (cellContent, item) => (\n                <div className={`text-right ${item.status === STATUS.ACTIVE ? '' : 'opacity-25'}`}>\n                    {priceFormat(item.price, \"\", true)}\n                </div>\n            ),\n            filter: true,\n            filterType: \"number\",\n        },\n        {\n            text: \"Costo\",\n            dataField: \"cost\",\n            sort: true,\n            filter: true,\n            headerStyle: (colum, colIndex) => {\n                return {textAlign: 'right'};\n            },\n            formatter: (cellContent, item) => (\n                <div className={`text-right ${item.status === STATUS.ACTIVE ? '' : 'opacity-25'}`}>\n                    {priceFormat(item.cost, \"\", true)}\n                </div>\n            ),\n            filterType: \"number\",\n        },\n        {\n            text: \"Categoria\",\n            dataField: \"category\",\n            sort: true,\n            formatter: (cellContent, item) => (\n                <div className=\"field-br\" style={{width: '230px'}}>\n                    {!item.category ? '' : (\n                        <Link to={`/category/${item.category.id}`} className=\"text-body\">\n                            {item.category.name}\n                        </Link>\n                    )}\n                </div>\n            ),\n            hidden: true,\n            filter: true,\n            filterType: \"asyncSelect\",\n            urlStr: CATEGORY,\n            conditionalOptions: {fieldName: 'name', operator: Conditionals.OPERATORS.LIKE},\n        },\n        {\n            text: \"Existencia\",\n            dataField: \"summary\",\n            isDummyField: true,\n            formatter: (cellContent, item) => (\n                <>\n                    <Tooltip placement=\"bottom\" title=\"Disponible\" aria-label=\"add\">\n                        <span className={`mb-0 badge bg-success p-2 ${item.status === STATUS.ACTIVE ? '' : 'opacity-25'}`} style={badgeStyles}>{item.productAvailable?.available || 0}</span>\n                    </Tooltip>\n                    <Tooltip placement=\"bottom\" title=\"Apartado\" aria-label=\"add\">\n                        <span className={`mb-0 badge bg-danger p-2 ${item.status === STATUS.ACTIVE ? '' : 'opacity-25'}`} style={badgeStyles}>{item.productAvailable?.reserved || 0}</span>\n                    </Tooltip>\n                    <Tooltip placement=\"bottom\" title=\"Vendidos\" aria-label=\"add\">\n                        <span className={`mb-0 badge bg-grey p-2 ${item.status === STATUS.ACTIVE ? '' : 'opacity-25'}`} style={badgeStyles}>{item.productAvailable?.completed || 0}</span>\n                    </Tooltip>\n                </>\n            ),\n        },\n        {\n            text: \"Talla\",\n            dataField: \"size\",\n            sort: true,\n            hidden: true,\n            filter: true,\n            filterType: \"asyncSelect\",\n            urlStr: SIZE,\n        },\n        {\n            text: \"Publicado\",\n            dataField: \"published\",\n            sort: true,\n            hidden: true,\n            filter: true,\n            filterType: \"select\",\n            filterOptions: YES_NO_OPTIONS,\n            filterDefaultOption: YES_NO_OPTIONS[0]\n        },\n        {\n            text: \"Estado\",\n            dataField: \"status\",\n            sort: true,\n            filter: true,\n            hidden: true,\n            filterType: \"select\",\n            filterOptions: STATUS_OPTIONS,\n            filterDefaultOption: STATUS_OPTIONS[0],\n            formatter: (cellContent, item) => (\n                <StatusField color={item.status === STATUS.ACTIVE ? STATUS_COLORS.SUCCESS : STATUS_COLORS.DANGER}>\n                    {ConverterStatus(item.status)}\n                </StatusField>\n            ),\n        },\n        {\n            text: \"Referencia de Proveedor\",\n            dataField: \"providerReference\",\n            sort: false,\n            hidden: true,\n            filter: true,\n            filterType: \"text\"\n        },\n\n    ];\n\n    if (HasPermissionsFunc([PERMISSIONS.PRODUCT_EDIT])) {\n        columns.push({\n            dataField: \"menu\",\n            isDummyField: true,\n            text: \"Acción\",\n            formatter: (cellContent, item) => (\n                <ul className=\"list-inline font-size-20 contact-links mb-0\">\n                    <li className=\"list-inline-item\">\n                        <HasPermissions permission={PERMISSIONS.PRODUCT_EDIT}>\n                            <Link to={`/product/${item.id}`} className=\"px-2 text-primary\">\n                                <i className=\"uil uil-pen font-size-18\"> </i>\n                            </Link>\n                        </HasPermissions>\n                    </li>\n                    <li className=\"list-inline-item\">\n                        <HasPermissions permission={PERMISSIONS.PRODUCT_EDIT}>\n                            {item.published == 0 ? (\n                                <Tooltip placement=\"bottom\" title=\"Publicar\" aria-label=\"add\">\n                                    <Button color=\"default\" className=\"text-success\" onClick={() => onToogleActivate(item.id, 1)}>\n                                        <i className=\"uil uil-check font-size-18\"> </i>\n                                    </Button>\n                                </Tooltip>\n                            ) : (\n                                <Tooltip placement=\"bottom\" title=\"Despublicar\" aria-label=\"add\">\n                                    <Button color=\"default\" className=\"text-muted\" onClick={() => onToogleActivate(item.id, 0)}>\n                                        <i className=\"uil uil-trash font-size-18\"> </i>\n                                    </Button>\n                                </Tooltip>\n                            )}\n                        </HasPermissions>\n                    </li>\n                    {/*<li className=\"list-inline-item\">\n                    <button size=\"small\" className=\"btn btn-sm text-danger\" onClick={() => onDelete(item.id)}>\n                        <i className=\"uil uil-trash-alt font-size-18\"> </i>\n                    </button>\n                </li>*/}\n                </ul>\n            ),\n        })\n    }\n\n    return columns;\n}\n\nexport default productColumns;\n","/Users/ramon/Repositories/lucy-moie/src/pages/Dashboard/top-users.js",["1802","1803","1804","1805","1806","1807","1808","1809"],"import React, {useEffect, useState} from \"react\";\nimport {Card, CardBody, Table} from \"reactstrap\"\n\n//Simple bar\nimport SimpleBar from \"simplebar-react\"\n\n//Import Image\nimport avatar4 from \"../../assets/images/users/avatar-4.jpg\"\nimport avatar5 from \"../../assets/images/users/avatar-5.jpg\"\nimport avatar6 from \"../../assets/images/users/avatar-6.jpg\"\nimport avatar7 from \"../../assets/images/users/avatar-7.jpg\"\nimport avatar8 from \"../../assets/images/users/avatar-8.jpg\"\nimport {DEFAULT_PAGE_LIMIT} from \"../../common/pagination\";\nimport {getUsers} from \"../../store/user/actions\";\nimport {connect} from \"react-redux\";\n\nconst TopUsers = (props) => {\n    const {users, meta, onGetUsers, loading, refresh} = props;\n    const [usersList, setCategoriesList] = useState([])\n\n    useEffect(() => {\n        onGetUsers()\n    }, [onGetUsers])\n\n    useEffect(() => {\n        setCategoriesList(users)\n    }, [users])\n\n    return (\n        <React.Fragment>\n            <Card>\n                <CardBody>\n                    <div className=\"float-end\">\n                    </div>\n                    <h4 className=\"card-title mb-4\">Usuarios</h4>\n                    <SimpleBar style={{maxHeight: \"336px\"}}>\n                        <div className=\"table-responsive\">\n                            <Table className=\"table-borderless table-centered table-nowrap\">\n                                <tbody>\n                                {usersList.map((user, k) => (\n                                    <tr key={k}>\n                                        <td style={{width: \"20px\"}}>\n                                            <i className=\"mdi mdi-account-circle m-0 font-size-20 text-primary\"></i>\n                                        </td>\n                                        <td>\n                                            <h6 className=\"font-size-15 mb-1 fw-normal\">{`${user.name} ${user.lastname}`}</h6>\n                                            <p className=\"text-muted font-size-13 mb-0\">\n                                                <i className=\"mdi mdi-mail\"> </i> {user.email}\n                                            </p>\n                                        </td>\n                                        <td className=\"text-muted fw-semibold text-end\">\n                                            {user.username}\n                                        </td>\n                                    </tr>\n                                ))}\n                                </tbody>\n                            </Table>\n                        </div>\n                    </SimpleBar>\n                </CardBody>\n            </Card>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {users, loading, meta, refresh} = state.User\n    return {users, loading, meta, refresh}\n}\nconst mapDispatchToProps = dispatch => ({\n    onGetUsers: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getUsers(conditional, 6, page)),\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(TopUsers)\n",["1810","1811"],"/Users/ramon/Repositories/lucy-moie/src/pages/Dashboard/mini-widget.js",["1812","1813","1814","1815"],"import PropTypes from 'prop-types'\nimport React from \"react\"\nimport { Col, Card, CardBody } from \"reactstrap\"\nimport CountUp from 'react-countup';\nimport ReactApexChart from \"react-apexcharts\"\nimport WidgetCard from \"../../components/Common/WidgetCard\";\n\nconst MiniWidget = props => {\n    return (\n        <React.Fragment>\n            {props.reports.map((report, key) => (\n                <Col md={6} xl={3} key={key}>\n                    <WidgetCard report={report}/>\n                </Col>\n            ))}\n        </React.Fragment>\n    )\n}\n\nexport default MiniWidget\n\nMiniWidget.propTypes = {\n    reports: PropTypes.array\n}\n","/Users/ramon/Repositories/lucy-moie/src/pages/Dashboard/top-vendors.js",[],"/Users/ramon/Repositories/lucy-moie/src/config.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Dashboard/latest-transaction.js",["1816","1817","1818","1819","1820","1821","1822","1823","1824"],"import React, {useEffect, useState} from \"react\"\nimport { Card, CardBody, Table, CardTitle, Label ,Input ,Row, Col, Button} from \"reactstrap\"\nimport { Link } from \"react-router-dom\"\nimport {DEFAULT_PAGE_LIMIT} from \"../../common/pagination\";\nimport {getUsers} from \"../../store/user/actions\";\nimport {connect} from \"react-redux\";\nimport {getOrders} from \"../../store/order/actions\";\nimport {ORDER_STATUS} from \"../../common/constants\";\nimport {StatusField} from \"../../components/StatusField\";\nimport {formatDate, formatDateToServer, getMoment, priceFormat} from \"../../common/utils\";\nimport Conditionals from \"../../common/conditionals\";\nimport {Tooltip} from \"@material-ui/core\";\n\nconst LatestTransaction = (props) => {\n    const {orders, meta, onGetOrders, loading, refresh} = props;\n    const [ordersList, setOrdersList] = useState([]);\n\n    useEffect(() => {\n        onGetOrders()\n    }, [onGetOrders]);\n\n    useEffect(() => {\n        setOrdersList(orders)\n    }, [orders])\n\n    return (\n        <Row>\n            <Col lg={12}>\n                <Card>\n                    <CardBody>\n                        <CardTitle className=\"h4 mb-4\">Pedidos Pendientes</CardTitle>\n                        <div className=\"table-responsive\">\n                            <Table className=\"table-centered table-nowrap mb-0\">\n                                <thead className=\"table-light\">\n                                <tr>\n                                    <th>ID</th>\n                                    <th>Cliente</th>\n                                    <th>Fecha</th>\n                                    <th>Monto</th>\n                                    <th>Estado</th>\n                                    <th>Metodo de Envio</th>\n                                    <th></th>\n                                </tr>\n                                </thead>\n                                <tbody>\n                                {ordersList.map((order, k) => (\n                                <tr>\n                                    <td><Link to=\"#\" className=\"text-body fw-bold\">{ order.id }</Link> </td>\n                                    <td>{order.customer.name}\n                                    {order.customer.isMayorist === true && (\n                                        <Tooltip placement=\"bottom\" title=\"Cliente mayorista\" aria-label=\"add\">\n                                            <i className={\"mdi mdi-crown font-size-18 mr-1 text-warning\"}> </i>\n                                        </Tooltip>\n                                    )}</td>\n                                    <td>\n                                        <small className=\"badge rounded-pill bg-light p-2\">{formatDate(order.createdAt)}</small>\n                                    </td>\n                                    <td>\n                                        {priceFormat(order.totalAmount)}\n                                    </td>\n                                    <td>\n                                        <StatusField color={ORDER_STATUS[order.status]?.color}>\n                                            {ORDER_STATUS[order.status].name}\n                                        </StatusField>\n                                    </td>\n                                    <td>\n                                        {order.deliveryMethod.name}\n                                    </td>\n                                    <td>\n                                        <Link to={`/order/${order.id}`} className=\"btn btn-primary btn-sm btn-rounded waves-effect waves-light\">\n                                            <i className={\"mdi mdi-magnify\"}></i>\n                                        </Link>\n                                    </td>\n                                </tr>\n                                ))}\n\n                                </tbody>\n                            </Table>\n                        </div>\n                    </CardBody>\n                </Card>\n            </Col>\n        </Row>\n    )\n}\n\n//add some conditions\nconst conditions = new Conditionals.Condition;\nconditions.add('status', '1::2', Conditionals.OPERATORS.BETWEEN);\nconditions.add('createdAt', formatDateToServer(getMoment().subtract(3, 'days')), Conditionals.OPERATORS.GREATER_THAN_OR_EQUAL);\n\n\nconst mapStateToProps = state => {\n    const {orders, loading, meta, refresh} = state.Order;\n    return {orders, loading, meta, refresh};\n}\nconst mapDispatchToProps = dispatch => ({\n    onGetOrders: (conditional = conditions.all(), limit = 6, page) => dispatch(getOrders(conditional, limit, page)),\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(LatestTransaction)\n","/Users/ramon/Repositories/lucy-moie/src/pages/ProductEdit/ProductsPending.js",["1825"],"import React, {useEffect} from \"react\";\nimport {Col, Row} from \"reactstrap\";\nimport {Link, withRouter} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {Card} from \"@material-ui/core\";\nimport {map} from \"lodash\";\nimport {pendingProducts} from \"../../store/product/actions\";\nimport {StatusField} from \"../../components/StatusField\";\nimport {ORDER_STATUS} from \"../../common/constants\";\nimport {formatDate} from \"../../common/utils\";\n\nconst ProductsPendingList = ({onGetProductsPending, product, pendingProducts}) => {\n\n    useEffect(() => {\n        if(product && product.id) {\n            onGetProductsPending(product.id);\n        }\n    }, [product]);\n\n    return (\n        <React.Fragment>\n            <Card className=\"p-3\">\n                <Row>\n                    <Col md={12}>\n                        <h4 className=\"card-title text-info\">Ordenes</h4>\n                    </Col>\n                </Row>\n                <Row>\n                   <Col md={12}>\n                       <table className=\"table table-sm table-striped table-bordered table-centered table-nowrap font-size-11\">\n                           <thead>\n                           <tr>\n                               <th style={{width: '25%'}} className=\"text-center\">Pedido #</th>\n                               <th style={{width: '25%'}} className=\"text-center\">Fecha</th>\n                               <th style={{width: '25%'}} className=\"text-center\">Talla</th>\n                               <th style={{width: '25%'}} className=\"text-center\">Cantidad</th>\n                               <th style={{width: '25%'}} className=\"text-center\">Cliente</th>\n                               <th style={{width: '25%'}} className=\"text-center\">Estado del pedido</th>\n                           </tr>\n                           </thead>\n                           <tbody>\n                           {map(pendingProducts, (prod, key) => (\n                               <tr key={key}>\n                                   <td className=\"text-center\">\n                                       <Link to={`/order/${prod.order.id}`} className=\"text-primary\">\n                                           <small className=\"font-weight-600 text-info\">{prod.order.id}</small>\n                                       </Link>\n                                   </td>\n                                   <td className=\"text-center\">{prod.order.modifiedDate ? formatDate(prod.order.modifiedDate) : formatDate(prod.order.createdAt)}</td>\n                                   <td className=\"text-center\">{prod.size}</td>\n                                   <td className=\"text-center\">{prod.quantity}</td>\n                                   <td className=\"text-center\">{prod.customer.name}</td>\n                                   <td className=\"text-center\">\n                                       <StatusField color={ORDER_STATUS[prod.order.status]?.color} className={\"font-size-16\"}>\n                                           {ORDER_STATUS[prod.order.status].name}\n                                       </StatusField>\n                                   </td>\n                               </tr>\n                           ))}\n                           {pendingProducts.length === 0 && (\n                               <tr>\n                                   <td colSpan={8} className=\"text-center text-muted\">No hay ordenes pendientes</td>\n                               </tr>\n                           )}\n                           </tbody>\n                       </table>\n                   </Col>\n                </Row>\n            </Card>\n        </React.Fragment>\n    ) ;\n}\n\nconst mapStateToProps = state => {\n    const {error, product, custom, loading} = state.Product\n    const pendingProducts = custom.data && custom.data.pendingProducts ? custom.data.pendingProducts:[];\n    return {error, product, pendingProducts: pendingProducts, loading}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGetProductsPending: (id) => dispatch(pendingProducts(id)),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(ProductsPendingList)\n)\n\nProductsPendingList.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object,\n    product: PropTypes.object,\n}\n","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/OrderCardList.js",["1826","1827","1828","1829","1830","1831","1832","1833","1834"],"import React, {useEffect, useState} from \"react\"\nimport {Col, Row} from \"reactstrap\"\nimport {Link, withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nimport {map} from \"lodash\";\nimport {getOrder, getOrders} from \"../../store/order/actions\";\nimport Conditionals from \"../../common/conditionals\";\nimport {formatDate, priceFormat} from \"../../common/utils\";\nimport {Tooltip} from \"@material-ui/core\";\nimport {DELIVERY_TYPES, ORDER_STATUS} from \"../../common/constants\";\nimport {StatusField} from \"../../components/StatusField\";\n\nconst OrderCardList = (props) => {\n\n    const {onGetOrder, onGetOrders, order, orders, productId, customerId} = props;\n    const [ordersList, setOrdersList] = useState([]);\n    const [openCustomerModal, setOpenCustomerModal] = useState(false);\n\n    useEffect(() => {\n        if (customerId) {\n            const conditions = new Conditionals.Condition;\n            conditions.add(\"customer\", customerId, Conditionals.OPERATORS.EQUAL);\n            onGetOrders(conditions);\n        }\n    }, [customerId]);\n\n    useEffect(() => {\n        if (orders && orders.length > 0) {\n            setOrdersList(orders);\n        }\n    }, [orders]);\n\n    const getDeliveryType = (delivery) => {\n        const deliveryType = delivery ? delivery.deliveryType : '';\n        let find = DELIVERY_TYPES.find(dt => dt.id === deliveryType);\n        return find ? find.label : '';\n    }\n\n    return (\n        <React.Fragment>\n            <Row>\n                <Col md={12}>\n                    <h4 className=\"card-title text-info\"><i className=\"uil-shopping-cart-alt me-2\"> </i> Pedidos recientes</h4>\n                </Col>\n                {ordersList.sort((a,b) => a.id < b.id).map((order, k) => (\n                    <div key={k} className=\"order-box\">\n                        <Row>\n                            <Col md={6} className=\"\">\n                                <div>\n                                    <Link to={`/order/${order.id}`} className=\"text-primary\">\n                                        <small className=\"font-weight-600 text-info\">Pedido #: {order.id}</small>\n                                    </Link>\n                                    <br/>\n                                    <small><span className=\"font-weight-600\">Origen:</span> {order.origen}</small>\n                                    <br/>\n                                    <small><span className=\"font-weight-600\">Tipo de entrega:</span> {getDeliveryType(order.orderDelivery)}</small>\n                                    <br/>\n                                    <small><span className=\"font-weight-600\">Método de entrega:</span> {order.deliveryMethod.name}</small>\n                                </div>\n                            </Col>\n                            <Col md={6} className=\"text-right\">\n                                <div>\n                                    <div>\n                                        <span className=\"m-2 mb-4\">\n                                            <Tooltip placement=\"bottom\" title=\"Estado\" aria-label=\"add\">\n                                                <StatusField color={ORDER_STATUS[order.status]?.color}>{ORDER_STATUS[order.status]?.name}</StatusField>\n                                            </Tooltip>\n                                        </span>\n                                        <span className=\"m-2 mb-4\">\n                                            <Tooltip placement=\"bottom\" title=\"Fecha creación\" aria-label=\"add\">\n                                                <small className=\"badge rounded-pill bg-light p-2\">{formatDate(order.createdAt)}</small>\n                                            </Tooltip>\n                                        </span>\n                                    </div>\n                                    <div className=\"m-1\">\n                                        <Tooltip placement=\"bottom\" title=\"Cantidad de prendas\" aria-label=\"add\">\n                                             <small className=\"badge rounded-pill bg-light p-2\"><span className=\"font-weight-600\">Cant. prendas :</span> {order.quantity}</small>\n                                        </Tooltip>\n                                    </div>\n                                    <div>\n                                        <small className=\"m-2 fw-bold font-size-16\">{priceFormat(order.totalAmount)}</small>\n                                    </div>\n                                </div>\n                            </Col>\n                        </Row>\n                    </div>\n                ))}\n            </Row>\n        </React.Fragment>\n    );\n}\n\nconst mapStateToProps = state => {\n    const {products, product} = state.Product\n    const {error, car, order, orders, loading} = state.Order;\n    return {error, car, order, orders, products, loading}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGetOrder: (id) => dispatch(getOrder(id)),\n    onGetOrders: (conditions) => dispatch(getOrders(conditions.all(), 5, 0)),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(OrderCardList)\n)\n\nOrderCardList.propTypes = {\n    customerId: PropTypes.number,\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n","/Users/ramon/Repositories/lucy-moie/src/components/CommonForBoth/TopbarDropdown/NotificationDropdown.js",["1835","1836","1837","1838","1839","1840","1841","1842","1843","1844","1845"],"import React, { useState } from \"react\"\nimport PropTypes from 'prop-types'\nimport { Link } from \"react-router-dom\"\nimport { Dropdown, DropdownToggle, DropdownMenu, Row, Col } from \"reactstrap\"\nimport SimpleBar from \"simplebar-react\"\n\n//Import images\nimport avatar3 from \"../../../assets/images/users/avatar-3.jpg\"\nimport avatar4 from \"../../../assets/images/users/avatar-4.jpg\"\n\n//i18n\nimport { withTranslation } from \"react-i18next\"\nimport PrintBatchRequest from \"../../../pages/Orders/PrintBatchRequest\";\nimport CatalogPrintBatchRequest from \"../../../pages/Category/CatalogPrintBatchRequest\";\n\nconst NotificationDropdown = props => {\n  // Declare a new state variable, which we'll call \"menu\"\n  const [menu, setMenu] = useState(false)\n\n  return (\n    <>\n      {/*<Dropdown\n        isOpen={menu}\n        toggle={() => setMenu(!menu)}\n        className=\"dropdown d-inline-block\"\n        tag=\"li\"\n      >\n        <DropdownToggle\n          className=\"btn header-item noti-icon waves-effect\"\n          tag=\"button\"\n          id=\"page-header-notifications-dropdown\"\n        >\n          <i className=\"uil-bell\"></i>\n        </DropdownToggle>\n\n      </Dropdown>*/}\n\n      <PrintBatchRequest />\n      <CatalogPrintBatchRequest />\n    </>\n  )\n}\n\nexport default withTranslation()(NotificationDropdown)\n\nNotificationDropdown.propTypes = {\n  t: PropTypes.any\n}\n","/Users/ramon/Repositories/lucy-moie/src/components/CommonForBoth/TopbarDropdown/ProfileMenu.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/CommonForBoth/TopbarDropdown/LanguageDropdown.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/VerticalLayout/SidebarContent.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Customer/CustomerList/customers-list.js",["1846","1847","1848","1849"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from \"prop-types\"\nimport {connect} from \"react-redux\"\nimport {Card, CardBody, Col, Row} from \"reactstrap\"\nimport paginationFactory, {PaginationListStandalone, PaginationProvider,} from \"react-bootstrap-table2-paginator\"\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\"\nimport BootstrapTable from \"react-bootstrap-table-next\"\n\nimport customerColumn from \"./customerColumn\"\nimport {Link} from \"react-router-dom\"\nimport {deleteCustomer, getCustomerRegistereds, getCustomers, resetCustomer} from \"../../../store/customer/actions\";\nimport {Button, Tooltip} from \"@material-ui/core\";\nimport {DEFAULT_PAGE_LIMIT} from \"../../../common/pagination\";\nimport {ConfirmationModalAction} from \"../../../components/Modal/ConfirmationModal\";\nimport NoDataIndication from \"../../../components/Common/NoDataIndication\";\nimport {normalizeColumnsList} from \"../../../common/converters\";\nimport {TableFilter} from \"../../../components/TableFilter\";\nimport {countCustomersByStatus, countMayoristas} from \"../../../helpers/service\";\nimport StatsStatusCard from \"../../../components/Common/StatsStatusCard\";\nimport StatsRegisteredCard from \"../../../components/Common/StatsRegisteredCard\";\nimport CountUp from \"react-countup\";\nimport {PERMISSIONS} from \"../../../helpers/security_rol\";\nimport HasPermissions from \"../../../components/HasPermissions\";\nimport {clearTableConditions, saveTableConditions} from \"../../../store/layout/actions\";\nimport {generateReport} from \"../../../store/reports/actions\";\nimport {REPORT_TYPES} from \"../../../common/constants\";\nimport {formatDateToServer, formatDateToServerEndOfDay} from \"../../../common/utils\";\nimport Conditionals from \"../../../common/conditionals\";\n\nconst CustomersList = props => {\n    const {customers, meta, onGetCustomers, onResetCustomers, onDeleteCustomer, onGetCustomerRegistereds, refresh, countCustomersByStatus, registereds, onSaveTableConditions, onClearTableConditions, conditionType, conditions, offset, onGenerateReport} = props;\n    const [customerList, setCustomerList] = useState([])\n    const [filter, setFilter] = useState(false);\n    const [conditional, setConditional] = useState(null);\n    const [countMayorista, setCountMayorista] = useState(0);\n    const [defaultPage, setDefaultPage] = useState(1);\n    const pageOptions = {\n        sizePerPage: DEFAULT_PAGE_LIMIT,\n        totalSize: meta?.totalRegisters,\n        custom: true,\n        page: defaultPage,\n        onPageChange: (page, sizePerPage) => {\n            setDefaultPage(page);\n            const offset = (page - 1) * DEFAULT_PAGE_LIMIT;\n            onSaveTableConditions(conditions, offset, 'customer');\n        },\n    }\n\n    useEffect(() => {\n\n        onGetCustomerRegistereds();\n        countMayoristas().then(data => {\n            if (data[1]) {\n                setCountMayorista(data[1])\n            }\n        })\n\n        if(conditionType !== 'customer'){\n            onClearTableConditions();\n            onResetCustomers();\n            onGetCustomers();\n        } else {\n            //reload the filter loaded\n            onFilterAction(conditions, offset);\n        }\n\n\n    }, [refresh, onGetCustomers])\n\n    useEffect(() => {\n        setCustomerList(customers)\n    }, [customers])\n\n    const handleTableChange = (type, {page}) => {\n        onGetCustomers(conditional, DEFAULT_PAGE_LIMIT, (page - 1) * DEFAULT_PAGE_LIMIT);\n    }\n\n    const onFilterAction = (condition) => {\n        const page = Math.floor(offset / DEFAULT_PAGE_LIMIT);\n        setConditional(condition);\n        onGetCustomers(condition, DEFAULT_PAGE_LIMIT, offset);\n        setDefaultPage(page + 1);\n        if(condition && condition.length > 0) {\n            onSaveTableConditions(condition, offset, 'customer');\n        } else {\n            onClearTableConditions();\n        }\n\n    }\n    const onConfirmDelete = (id) => {\n        onDeleteCustomer(id);\n    };\n\n    const onDelete = (id) => {\n        ConfirmationModalAction({\n            title: '¿Seguro desea eliminar Cliente?',\n            description: 'Usted está eliminado este cliente, una vez eliminado no podrá ser recuperado.',\n            id: '_clienteModal',\n            onConfirm: () => onConfirmDelete(id)\n        });\n    };\n\n    const onDownload = () => {\n        console.log('payload: ', conditional);\n        onGenerateReport({\n            conditional,\n            limit: 100,\n            offset: 0\n        });\n    };\n\n    const columns = customerColumn(onDelete);\n\n    return (\n        <>\n            <Row className=\"text-center\">\n                <Col md={4}>\n                    <StatsStatusCard title=\"Clientes\" getData={countCustomersByStatus}/>\n                </Col>\n                <Col md={4}>\n                    <StatsRegisteredCard title=\"Clientes Registrados esta semana\" getData={registereds.lastWeek} getDataToday={registereds.today}/>\n                </Col>\n                <Col md={4}>\n                    <Card>\n                        <CardBody>\n                            <div className=\"float-end mt-2\">\n                                <Tooltip placement=\"bottom\" title=\"Clientes mayoristas\" aria-label=\"add\">\n                                    <i className=\"mdi mdi-crown font-size-24 mr-1 text-warning p-3\"> </i>\n                                </Tooltip>\n                            </div>\n                            <div>\n                                <h4 className=\"mb-1 mt-2\">\n                                    <CountUp end={countMayorista} separator=\",\" decimals={0}/>\n                                </h4>\n                                <p className=\"text-muted mb-0\">{\"Clientes mayoristas\"}</p>\n                            </div>\n                            <p className=\"text-muted mb-0 mt-3\">\n                            </p>\n                        </CardBody>\n                    </Card>\n                </Col>\n            </Row>\n            <Row>\n                <TableFilter\n                    onPressDisabled={() => setFilter(false)}\n                    isActive={filter}\n                    fields={columns}\n                    onSubmit={onFilterAction.bind(this)}/>\n\n                <Col lg={filter ? \"8\" : \"12\"}>\n                    <Card>\n                        <CardBody>\n                            <PaginationProvider\n                                pagination={paginationFactory(pageOptions)}\n                            >\n                                {({paginationProps, paginationTableProps}) => (\n                                    <ToolkitProvider\n                                        keyField=\"id\"\n                                        data={customerList || []}\n                                        columns={normalizeColumnsList(columns)}\n                                        bootstrap4\n                                        search\n                                    >\n                                        {toolkitProps => (\n                                            <React.Fragment>\n                                                <Row className=\"row mb-2\">\n                                                    <Col md={6}>\n                                                        <div className=\"form-inline mb-3\">\n                                                            <div className=\"search-box ms-2\">\n                                                                <h4 className=\"text-info\"><i className=\"uil-users-alt me-2\"></i> Clientes {conditionType && <small className={'font-size-12 badge rounded-pill bg-grey'}>Filtrados</small>}</h4>\n                                                            </div>\n                                                        </div>\n                                                    </Col>\n                                                    <Col md={6}>\n                                                        <div className=\"mb-3 float-md-end\">\n                                                            <Tooltip placement=\"bottom\" title=\"Filtros Avanzados\" aria-label=\"add\">\n                                                                <Button onClick={() => setFilter(!filter)}>\n                                                                    <i className={\"mdi mdi-filter\"}></i>\n                                                                </Button>\n                                                            </Tooltip>\n                                                            <HasPermissions permission={PERMISSIONS.CUSTOMER_EXPORT}>\n                                                                <Tooltip placement=\"bottom\" title=\"Descargar Clientes\" aria-label=\"add\">\n                                                                <button onClick={() => onDownload()}  className=\"btn btn-secondary waves-effect waves-light text-light mr-5\">\n                                                                    <i className=\"mdi mdi-file\"></i>\n                                                                </button>\n                                                                </Tooltip>\n                                                            </HasPermissions>\n                                                            <HasPermissions permission={PERMISSIONS.CUSTOMER_CREATE}>\n                                                                <Link to={\"/customer\"} className=\"btn btn-primary waves-effect waves-light text-light\">\n                                                                    <i className=\"mdi mdi-plus\"></i> Nuevo Cliente\n                                                                </Link>\n                                                            </HasPermissions>\n                                                        </div>\n                                                    </Col>\n                                                </Row>\n                                                <Row>\n                                                    <Col xl=\"12\">\n                                                        <div className=\"table-responsive mb-4\">\n                                                            <BootstrapTable\n                                                                remote\n                                                                responsive\n                                                                loading={true}\n                                                                bordered={false}\n                                                                striped={true}\n                                                                classes={\"table table-centered table-nowrap mb-0\"}\n                                                                noDataIndication={() => <NoDataIndication/>}\n                                                                {...toolkitProps.baseProps}\n                                                                onTableChange={handleTableChange}\n                                                                {...paginationTableProps}\n                                                            />\n                                                        </div>\n                                                    </Col>\n                                                </Row>\n                                                <div className=\"float-sm-start\">\n                                                    <PaginationListStandalone {...paginationProps}/>\n                                                </div>\n                                            </React.Fragment>\n                                        )}\n                                    </ToolkitProvider>\n                                )}\n                            </PaginationProvider>\n                        </CardBody>\n                    </Card>\n                </Col>\n            </Row>\n        </>\n    )\n}\n\nCustomersList.propTypes = {\n    customers: PropTypes.array,\n    onGetCustomers: PropTypes.func,\n}\n\nconst mapStateToProps = state => {\n    const {customers, loading, meta, refresh, custom, registereds} = state.Customer\n    const {conditionType, conditions, offset} = state.Layout;\n    return {customData: custom, customers, loading, meta, refresh, registereds, conditionType, conditions, offset}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onResetCustomers: () => {\n        dispatch(resetCustomer());\n    },\n    onGetCustomerRegistereds: () => {\n        dispatch(getCustomerRegistereds());\n    },\n    countCustomersByStatus,\n    countMayoristas,\n    onGetCustomers: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getCustomers(conditional, limit, page)),\n    onDeleteCustomer: (id) => dispatch(deleteCustomer(id)),\n    onSaveTableConditions: (conditions, offset, conditionType) => dispatch(saveTableConditions(conditions, offset, conditionType)),\n    onClearTableConditions: () => dispatch(clearTableConditions()),\n    onGenerateReport: (data) => dispatch(generateReport(REPORT_TYPES.CUSTOMER, data)),\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(CustomersList)\n","/Users/ramon/Repositories/lucy-moie/src/store/productImages/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/productSize/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/postSale/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/auth/profile/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/postSale/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/payments/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/reports/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/auth/forgetpwd/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/auth/register/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/layout/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/bill/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/office/saga.js",["1850"],"import {all, call, fork, put, takeEvery} from \"redux-saga/effects\"\n\n//Account Redux states\nimport {ADD_ORDER_OFFICE, CONFIRM_OFFICE, DELETE_OFFICE, DELETE_ORDER_OFFICE, GET_OFFICE, GET_OFFICES, IMPORT_FILE, PRINT_OFFICE_REPORT, QUERY_OFFICES, REGISTER_OFFICE, UPDATE_OFFICE} from \"./actionTypes\"\n\nimport {\n    addOrderOfficeFailed,\n    addOrderOfficeSuccess,\n    confirmOfficeSuccess,\n    deleteOfficeFailed,\n    deleteOfficeSuccess,\n    getOffice,\n    getOfficeFailed,\n    getOfficesFailed,\n    getOfficesSuccess,\n    getOfficeSuccess,\n    importFileFailed,\n    importFileSuccess,\n    printOfficeReportFailed,\n    printOfficeReportSuccess,\n    queryOfficesFailed,\n    queryOfficesSuccess,\n    registerOfficeFailed,\n    registerOfficeSuccess,\n    updateOfficeFail,\n    updateOfficeSuccess\n} from \"./actions\"\n\nimport {\n    addOrderOfficeApi,\n    confirmOfficeApi,\n    deleteOfficeApi,\n    deleteOrderOfficeApi,\n    fetchOfficeApi,\n    fetchOfficesApi,\n    importFileApi,\n    printOfficeReportApi,\n    registerOfficeApi,\n    updateOfficeApi\n} from \"../../helpers/backend_helper\"\n\nimport Conditionals from \"../../common/conditionals\";\nimport {showResponseMessage} from \"../../helpers/service\";\nimport {getErrorMessage} from \"../../common/utils\";\nimport {getErrorModuleMessage} from \"../../common/errors_messages\";\n\n/**\n * *  Configuración de CRUD Saga (Realizar configuración para cada uno de las replicas)\n */\n\nconst ACTION_NAME_QUERY = QUERY_OFFICES;\nconst ACTION_NAME_LIST = GET_OFFICES;\nconst ACTION_NAME_GET = GET_OFFICE;\nconst ACTION_NAME_CREATE = REGISTER_OFFICE;\nconst ACTION_NAME_UPDATE = UPDATE_OFFICE;\nconst ACTION_NAME_DELETE = DELETE_OFFICE;\nconst ACTION_NAME_CONFIRM = CONFIRM_OFFICE;\nconst ACTION_NAME_ADD_CHILD = ADD_ORDER_OFFICE;\nconst ACTION_NAME_DELETE_CHILD = DELETE_ORDER_OFFICE;\nconst IMPORT_FILE_POST = IMPORT_FILE;\nconst PRINT_OFFICE_REPORT_POST = PRINT_OFFICE_REPORT;\n\nconst LIST_API_REQUEST = fetchOfficesApi;\nconst GET_API_REQUEST = fetchOfficeApi;\nconst POST_API_REQUEST = registerOfficeApi;\nconst PUT_API_REQUEST = updateOfficeApi;\nconst IMPORT_FILE_API_REQUEST = importFileApi;\n\n//actions\nconst QUERY_SUCCESS_ACTION = queryOfficesSuccess;\nconst QUERY_FAILED_ACTION = queryOfficesFailed;\nconst LIST_SUCCESS_ACTION = getOfficesSuccess;\nconst LIST_FAILED_ACTION = getOfficesFailed;\nconst GET_SUCCESS_ACTION = getOfficeSuccess;\nconst GET_FAILED_ACTION = getOfficeFailed;\nconst CREATE_SUCCESS_ACTION = registerOfficeSuccess;\nconst CREATE_FAILED_ACTION = registerOfficeFailed;\nconst UPDATE_SUCCESS_ACTION = updateOfficeSuccess;\nconst UPDATE_FAILED_ACTION = updateOfficeFail;\nconst IMPORT_FILE_SUCCESS_ACTION = importFileSuccess;\nconst IMPORT_FILE_FAILED_ACTION = importFileFailed;\n\n\nconst SHOW_URL = \"/office\";\n\nfunction* get({id}) {\n    try {\n        const response = yield call(GET_API_REQUEST, {id});\n        yield put(GET_SUCCESS_ACTION(response))\n    } catch (error) {\n        yield put(GET_FAILED_ACTION(error))\n    }\n}\n\nfunction* fetch({conditional, limit, offset}) {\n    try {\n        const cond = Conditionals.getConditionalFormat(conditional);\n        const query = Conditionals.buildHttpGetQuery(cond, limit, offset);\n        const response = yield call(LIST_API_REQUEST, query)\n        yield put(LIST_SUCCESS_ACTION(response.data, response.meta));\n    } catch (error) {\n        yield put(LIST_FAILED_ACTION(error))\n    }\n}\n\nfunction* queryData({params = {}, node = 'offices'}) {\n    try {\n        const response = yield call(LIST_API_REQUEST, params)\n        yield put(QUERY_SUCCESS_ACTION(response.data, response.meta, node));\n    } catch (error) {\n        yield put(QUERY_FAILED_ACTION(error))\n    }\n}\n\nfunction* register({payload: {data, history}}) {\n    try {\n        const response = yield call(POST_API_REQUEST, data)\n        showResponseMessage(response, \"Despacho creado!\");\n        yield put(CREATE_SUCCESS_ACTION(response))\n        history.push(SHOW_URL + \"/\" + response.office.id);\n    } catch (error) {\n        yield put(CREATE_FAILED_ACTION(error))\n    }\n}\n\nfunction* update({payload: {id, data, history}}) {\n    try {\n        const response = yield call(PUT_API_REQUEST, id, data)\n        showResponseMessage(response, \"Despacho actualizado!\")\n        yield put(UPDATE_SUCCESS_ACTION(response))\n        yield put(getOffice(id))\n    } catch (error) {\n        yield put(UPDATE_FAILED_ACTION(error))\n    }\n}\n\nfunction* officeDelete({payload: {id, history}}) {\n    try {\n        yield call(deleteOfficeApi, id)\n        yield put(deleteOfficeSuccess(id))\n        showResponseMessage({status: 200}, \"Despacho borrado!\");\n        history.push(\"/offices\")\n\n    } catch (error) {\n        yield put(deleteOfficeFailed(error))\n    }\n}\n\nfunction* officeConfirm({payload: {id, history}}) {\n    try {\n        yield call(confirmOfficeApi, id)\n        yield put(confirmOfficeSuccess(id))\n        showResponseMessage({status: 200}, \"Despacho ha sido finalizado!\");\n        history.push(\"/offices\")\n\n    } catch (error) {\n        showResponseMessage({status: 500}, \"Ocurrió un error!\", getErrorModuleMessage(error));\n        yield put(deleteOfficeFailed(error))\n    }\n}\n\nfunction* officeOrderAdd({payload: {id, data, conditional, history}}) {\n    try {\n        const cond = Conditionals.getConditionalFormat(conditional);\n        const query = Conditionals.buildHttpGetQuery(cond, 0, 200);\n        yield call(addOrderOfficeApi, id, data, query)\n        yield put(addOrderOfficeSuccess(id))\n        showResponseMessage({status: 200}, \"Despacho creado!\");\n        //history.push(\"/office/\" + id)\n\n    } catch (error) {\n        yield put(addOrderOfficeFailed(error))\n    }\n}\n\nfunction* officeOrderDelete({payload: {id, data, conditional, history}}) {\n    try {\n        const cond = Conditionals.getConditionalFormat(conditional);\n        const query = Conditionals.buildHttpGetQuery(cond, 0, 200);\n        yield call(deleteOrderOfficeApi, id, data, query)\n        yield put(deleteOfficeSuccess(id))\n        showResponseMessage({status: 200}, \"Orden retirada de despacho!\");\n        history.push(\"/office/\" + id)\n\n    } catch (error) {\n        yield put(deleteOfficeFailed(error))\n    }\n}\n\nfunction* importFile({payload: {data}}) {\n    try {\n        const response = yield call(IMPORT_FILE_API_REQUEST, data)\n        let message = \"Cantidad de registros importados: \" + (response.status === 200 ? response.data.registers.length : 0);\n        showResponseMessage(response, message);\n        yield put(IMPORT_FILE_SUCCESS_ACTION(response))\n    } catch (error) {\n        yield put(IMPORT_FILE_FAILED_ACTION(error.message))\n    }\n}\n\nfunction* printOfficeReport({payload: {id}}) {\n    try {\n        const response = yield call(printOfficeReportApi, id)\n        if (response.status !== 200) {\n            yield put(printOfficeReportFailed(response.error))\n            showResponseMessage(response, response.error);\n        } else {\n            yield put(printOfficeReportSuccess(response))\n        }\n    } catch (error) {\n        yield put(printOfficeReportFailed(error.message))\n    }\n}\n\nexport function* watchOffice() {\n    yield takeEvery(ACTION_NAME_CREATE, register);\n    yield takeEvery(ACTION_NAME_UPDATE, update);\n    yield takeEvery(ACTION_NAME_LIST, fetch);\n    yield takeEvery(ACTION_NAME_GET, get);\n    yield takeEvery(ACTION_NAME_DELETE, officeDelete);\n    yield takeEvery(ACTION_NAME_CONFIRM, officeConfirm);\n    yield takeEvery(ACTION_NAME_QUERY, queryData);\n    yield takeEvery(ACTION_NAME_ADD_CHILD, officeOrderAdd);\n    yield takeEvery(ACTION_NAME_DELETE_CHILD, officeOrderDelete);\n    yield takeEvery(IMPORT_FILE_POST, importFile);\n    yield takeEvery(PRINT_OFFICE_REPORT_POST, printOfficeReport);\n}\n\nfunction* officeSaga() {\n    yield all([fork(watchOffice)])\n}\n\nexport default officeSaga\n","/Users/ramon/Repositories/lucy-moie/src/store/user/saga.js",["1851","1852","1853"],"import {all, call, fork, put, takeEvery} from \"redux-saga/effects\"\n\n//Account Redux states\nimport {\n    GET_USERS,\n    GET_USER,\n    REGISTER_USER,\n    UPDATE_USER,\n    CHANGE_PASSWORD,\n    COUNT_USERS_SUCCESS,\n    COUNT_USERS_FAILED, COUNT_USERS\n} from \"./actionTypes\"\n\nimport {\n    getUsersSuccess,\n    getUsersFailed,\n    registerUserSuccess,\n    getUserSuccess,\n    getUserFailed,\n    registerUserFailed,\n    updateUserSuccess,\n    updateUserFail, changePasswordSuccess, changePasswordFailed, countUsersSuccess, countUsersFailed\n} from \"./actions\"\n\nimport {\n    registerUserApi,\n    updateUserApi,\n    fetchUserApi,\n    fetchUsersApi, changePasswordApi, fetchOrdersApi\n} from \"../../helpers/backend_helper\"\n\nimport Conditionals from \"../../common/conditionals\";\nimport {showResponseMessage} from \"../../helpers/service\";\nimport {formatDateToServer, getMoment} from \"../../common/utils\";\n\n/**\n * *  Configuración de CRUD Saga (Realizar configuración para cada uno de las replicas)\n */\n\nconst ACTION_NAME_LIST      =   GET_USERS;\nconst ACTION_NAME_GET       =   GET_USER;\nconst ACTION_NAME_CREATE    =   REGISTER_USER;\nconst ACTION_NAME_UPDATE    =   UPDATE_USER;\nconst ACTION_NAME_CHANGE_PASSWORD    =   CHANGE_PASSWORD;\n\nconst LIST_API_REQUEST      =   fetchUsersApi;\nconst GET_API_REQUEST       =   fetchUserApi;\nconst POST_API_REQUEST      =   registerUserApi;\nconst PUT_API_REQUEST       =   updateUserApi;\nconst CHANGE_PASSWORD_API_REQUEST  =   changePasswordApi;\n\n//actions\nconst LIST_SUCCESS_ACTION   =   getUsersSuccess;\nconst LIST_FAILED_ACTION    =   getUsersFailed;\nconst GET_SUCCESS_ACTION    =   getUserSuccess;\nconst GET_FAILED_ACTION     =   getUserFailed;\nconst CREATE_SUCCESS_ACTION =   registerUserSuccess;\nconst CREATE_FAILED_ACTION  =   registerUserFailed;\nconst UPDATE_SUCCESS_ACTION =   updateUserSuccess;\nconst UPDATE_FAILED_ACTION  =   updateUserFail;\nconst CHANGE_PASSWORD_SUCCESS_ACTION =   changePasswordSuccess;\nconst CHANGE_PASSWORD_FAILED_ACTION  =   changePasswordFailed;\n\n\nconst LIST_URL = \"/users\";\n\nfunction* get({ id }) {\n    try {\n        const response = yield call(GET_API_REQUEST,  id );\n        yield put(GET_SUCCESS_ACTION(response))\n    } catch (error) {\n        yield put(GET_FAILED_ACTION(error))\n    }\n}\n\n\nfunction* fetch({conditional, limit = 50, offset}) {\n    try {\n\n        const cond = Conditionals.getConditionalFormat(conditional);\n        const query = Conditionals.buildHttpGetQuery(cond, limit, offset);\n\n        const response = yield call(LIST_API_REQUEST, query)\n        yield put(LIST_SUCCESS_ACTION(response.data, response.meta));\n    } catch (error) {\n        yield put(LIST_FAILED_ACTION(error))\n    }\n}\n\nfunction* register({ payload: { data, history } }) {\n    try {\n        const response = yield call(POST_API_REQUEST, data)\n        showResponseMessage(response, \"Usuario creado!\");\n        yield put(CREATE_SUCCESS_ACTION(response))\n        history.push(LIST_URL)\n\n    } catch (error) {\n        yield put(CREATE_FAILED_ACTION(error))\n    }\n}\n\nfunction* update({ payload: { id, data, history } }) {\n    try {\n        const response = yield call(PUT_API_REQUEST, id, data)\n        showResponseMessage(response, \"Usuario actualizado!\");\n        yield put(UPDATE_SUCCESS_ACTION(response))\n        history.push(LIST_URL)\n\n    } catch (error) {\n        yield put(UPDATE_FAILED_ACTION(error))\n    }\n}\n\nfunction* changePassword({ payload }) {\n    try {\n        const response = yield call(CHANGE_PASSWORD_API_REQUEST, payload)\n        showResponseMessage(response, (response.code === 200 ? \"Contraseña actualizada!\": response.error));\n        yield put(CHANGE_PASSWORD_SUCCESS_ACTION(response))\n    } catch (error) {\n        yield put(CHANGE_PASSWORD_FAILED_ACTION(error))\n    }\n}\n\nfunction* getCountUsers() {\n    try {\n        const conditions = new Conditionals.Condition;\n        conditions.add('status', [1,2,3,4,5,7].join(\"::\"), Conditionals.OPERATORS.IN);\n        conditions.add('createdAt', formatDateToServer(getMoment().startOf('day')), Conditionals.OPERATORS.GREATER_THAN_OR_EQUAL)\n\n        const query = {};\n        query.conditional = Conditionals.getConditionalFormat(conditions.all());\n        query.operation = 'origen::count,totalAmount::sum';\n        query.group = 'user_id';\n\n        const payload = Conditionals.urlSearchParams(query);\n\n        const response = yield call(fetchOrdersApi, payload)\n        yield put(countUsersSuccess(response))\n    } catch (error) {\n        yield put(countUsersFailed(error))\n    }\n}\n\nexport function* watchUser() {\n    yield takeEvery(ACTION_NAME_CREATE, register);\n    yield takeEvery(ACTION_NAME_UPDATE, update);\n    yield takeEvery(ACTION_NAME_LIST, fetch);\n    yield takeEvery(ACTION_NAME_GET, get)\n    yield takeEvery(ACTION_NAME_CHANGE_PASSWORD, changePassword)\n    yield takeEvery(COUNT_USERS, getCountUsers)\n}\n\nfunction* userSaga() {\n    yield all([fork(watchUser)])\n}\n\nexport default userSaga\n","/Users/ramon/Repositories/lucy-moie/src/store/template/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/fieldOptions/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/order/saga.js",["1854"],"import {all, call, fork, put, takeEvery} from \"redux-saga/effects\"\n\n//Account Redux states\nimport {\n    CANCELED_STATUS_ORDER,\n    CONCILIATION_REQUEST,\n    CONFIRM_CONCILIATION_REQUEST, DOWNLOAD_PHOTO,\n    GET_DELIVERY_METHODS,\n    GET_DELIVERY_QUOTE,\n    GET_HISTORIC_ORDER, GET_LINK_PAYMENT,\n    GET_ORDER,\n    GET_ORDERS,\n    GET_ORDERS_OFFICE,\n    NEXT_STATUS_ORDER,\n    PRINT_BATCH_REQUEST,\n    PRINT_ORDER,\n    REFRESH_DELIVERY_ORDER,\n    REGISTER_ORDER,\n    RESUME_ORDER,\n    SYNC_DELIVERY_ORDER,\n    UPDATE_ORDER, UPDATE_ORDER_PRODUCTS\n} from \"./actionTypes\"\n\nimport {\n    confirmConciliationFailed,\n    confirmConciliationSuccess,\n    customOrderFailed,\n    customOrderSuccess,\n    doConciliationFailed,\n    doConciliationSuccess,\n    getDeliveryMethodsFailed,\n    getDeliveryMethodsSuccess,\n    getDeliveryQuoteFailed,\n    getDeliveryQuoteSuccess,\n    getOrder,\n    getOrderFailed,\n    getOrdersByOfficeFailed,\n    getOrdersByOfficeSuccess,\n    getOrdersFailed,\n    getOrdersSuccess,\n    getOrderSuccess,\n    historicOrderFailed,\n    historicOrderSuccess,\n    printBatchRequestFailed,\n    printBatchRequestSuccess,\n    refreshOrderDeliveryFail,\n    refreshOrderDeliverySuccess,\n    refreshOrders,\n    registerOrderFailed,\n    registerOrderSuccess,\n    syncOrderFail,\n    syncOrderSuccess,\n    updateOrderFail,\n    updateOrderSuccess,\n    generateLinkPaymentSuccess\n} from \"./actions\"\n\nimport {\n    batchPrintRequestApi,\n    canceledStatusOrderApi,\n    conciliationRequestApi,\n    confirmConciliationRequestApi, fetchCustomerOrderFinishedApi,\n    fetchDeliveryMethodsApi,\n    fetchDeliveryQuoteApi,\n    fetchOrderApi,\n    fetchOrdersApi, generateLinkPaymentApi, increasePhotoCounterApi,\n    nextStatusOrderApi,\n    orderHistoric,\n    printOrderApi,\n    refreshStatusDelivery,\n    registerOrderApi,\n    resumeOrderApi,\n    syncOrderDelivery,\n    updateOrderApi, updateOrderProductsApi\n} from \"../../helpers/backend_helper\"\n\nimport Conditionals from \"../../common/conditionals\";\nimport {countUsersOrders, showResponseMessage} from \"../../helpers/service\";\nimport {getErrorMessage} from \"../../common/utils\";\n\n/**\n * *  Configuración de CRUD Saga (Realizar configuración para cada uno de las replicas)\n */\n\nconst ACTION_NAME_LIST = GET_ORDERS;\nconst ACTION_NAME_LIST_OFFICE = GET_ORDERS_OFFICE;\nconst ACTION_NAME_GET = GET_ORDER;\nconst ACTION_NAME_CREATE = REGISTER_ORDER;\nconst ACTION_NAME_UPDATE = UPDATE_ORDER;\nconst ACTION_ORDER_PRODUCTS_UPDATE = UPDATE_ORDER_PRODUCTS;\nconst ACTION_GENERATE_LINK = GET_LINK_PAYMENT;\n\nconst PRINT_ORDER_API = printOrderApi;\nconst RESUME_ORDER_API = resumeOrderApi;\nconst LIST_API_REQUEST = fetchOrdersApi;\nconst NEXT_STATUS_API_REQUEST = nextStatusOrderApi;\nconst CANCELED_STATUS_API_REQUEST = canceledStatusOrderApi;\nconst GET_API_REQUEST = fetchOrderApi;\nconst POST_API_REQUEST = registerOrderApi;\nconst PUT_API_REQUEST = updateOrderApi;\nconst PUT_ORDER_PRODUCTS_API_REQUEST = updateOrderProductsApi;\nconst BATCH_REQUEST_API_REQUEST = batchPrintRequestApi;\nconst CONCILIATION_REQUEST_API_REQUEST = conciliationRequestApi;\nconst CONFIRM_CONCILIATION_REQUEST_API_REQUEST = confirmConciliationRequestApi;\nconst ORDER_HISTORIC_API_REQUEST = orderHistoric;\nconst ORDER_DELIVERY_SYNC_API_REQUEST = syncOrderDelivery;\nconst ORDER_DELIVERY_REFRESH_API_REQUEST = refreshStatusDelivery;\nconst INCREASE_PHOTO_COUNTER_API_REQUEST = increasePhotoCounterApi;\nconst GENERATE_LINK_PAYMENT = generateLinkPaymentApi;\nconst GET_ORDER_FINISHED = fetchCustomerOrderFinishedApi;\n\n//actions\nconst CUSTOM_SUCCESS_ACTION = customOrderSuccess;\nconst CUSTOM_FAILED_ACTION = customOrderFailed;\nconst LIST_SUCCESS_ACTION = getOrdersSuccess;\nconst LIST_FAILED_ACTION = getOrdersFailed;\nconst GET_SUCCESS_ACTION = getOrderSuccess;\nconst GET_FAILED_ACTION = getOrderFailed;\nconst CREATE_SUCCESS_ACTION = registerOrderSuccess;\nconst CREATE_FAILED_ACTION = registerOrderFailed;\nconst UPDATE_SUCCESS_ACTION = updateOrderSuccess;\nconst UPDATE_FAILED_ACTION = updateOrderFail;\nconst SYNC_DELIVERY_SUCCESS_ACTION = syncOrderSuccess;\nconst SYNC_DELIVERY_FAILED_ACTION = syncOrderFail;\nconst REFRESH_DELIVERY_ORDER_SUCCESS_ACTION = refreshOrderDeliverySuccess;\nconst REFRESH_DELIVERY_ORDER_FAILED_ACTION = refreshOrderDeliveryFail;\n\nconst PRINT_BATCH_REQUEST_SUCCESS_ACTION = printBatchRequestSuccess;\nconst PRINT_BATCH_REQUEST_FAILED_ACTION = printBatchRequestFailed;\nconst LIST_OFFICE_SUCCESS_ACTION = getOrdersByOfficeSuccess;\nconst LIST_OFFICE_FAILED_ACTION = getOrdersByOfficeFailed;\nconst CONCILIATION_REQUEST_SUCCESS_ACTION = doConciliationSuccess;\nconst CONCILIATION_REQUEST_FAILED_ACTION = doConciliationFailed;\nconst CONFIRM_CONCILIATION_REQUEST_SUCCESS_ACTION = confirmConciliationSuccess;\nconst CONFIRM_CONCILIATION_REQUEST_FAILED_ACTION = confirmConciliationFailed;\n\n\nfunction* get({id}) {\n    try {\n        const response = yield call(GET_API_REQUEST, id);\n        yield put(GET_SUCCESS_ACTION(response))\n    } catch (error) {\n        yield put(GET_FAILED_ACTION(getErrorMessage(error)))\n    }\n}\n\nfunction* fetch({conditional, limit, offset, order, ordersFinished = false}) {\n    try {\n        const cond = Conditionals.getConditionalFormat(conditional);\n        const query = Conditionals.buildHttpGetQuery(cond, limit, offset,order);\n\n        const response = yield call(LIST_API_REQUEST, query)\n\n        if(ordersFinished) {\n            const customers = response.data.map(order => order.customer && order.customer.id);\n\n            if(customers && customers.length > 0) {\n                const responseFinished = yield call(GET_ORDER_FINISHED, {customers});\n\n                const getQtyFinished = (responseFinished, item) => {\n                    try {\n                        const _orderFinished = responseFinished.filter(_ordersFinished => (_ordersFinished && _ordersFinished.id) == (item.customer && item.customer.id));\n                        return (_orderFinished[0] && _orderFinished[0].qty) || 0;\n                    } catch (e) {\n                        return 0;\n                    }\n                }\n\n                if (responseFinished && responseFinished.length > 0) {\n                    response.data = response.data && response.data.map(order => ({\n                            ...order,\n                            ordersFinished: getQtyFinished(responseFinished, order),\n                        })\n                    );\n                }\n\n            }\n        }\n\n        yield put(LIST_SUCCESS_ACTION(response.data, response.meta));\n    } catch (error) {\n        yield put(LIST_FAILED_ACTION(getErrorMessage(error)))\n    }\n}\nfunction* fetchByOffice({conditional, limit, offset}) {\n    try {\n        const cond = Conditionals.getConditionalFormat(conditional);\n        const query = Conditionals.buildHttpGetQuery(cond, limit, offset);\n\n        const response = yield call(LIST_API_REQUEST, query)\n        yield put(LIST_OFFICE_SUCCESS_ACTION(response.data, response.meta));\n    } catch (error) {\n        yield put(LIST_OFFICE_FAILED_ACTION(getErrorMessage(error)))\n    }\n}\n\nfunction* register({payload: {data, history}}) {\n    try {\n        const response = yield call(POST_API_REQUEST, data)\n        showResponseMessage(response, \"Pedido creado!\");\n        if (response && response.order) {\n            history.push(\"/order/\" + response.order.id)\n        }\n        yield put(CREATE_SUCCESS_ACTION(response))\n        yield put(countUsersOrders());\n    } catch (error) {\n        yield put(CREATE_FAILED_ACTION(getErrorMessage(error)))\n    }\n}\n\nfunction* nextStatus({payload: {data, history}}) {\n    try {\n        const response = yield call(NEXT_STATUS_API_REQUEST, data)\n        if(response.status === 200) yield put(refreshOrders());\n        showResponseMessage(response, \"Operación exitosa!\");\n        yield put(UPDATE_SUCCESS_ACTION(response.order))\n\n    } catch (error) {\n        yield put(UPDATE_FAILED_ACTION(getErrorMessage(error)))\n    }\n}\n\nfunction* canceledStatus({payload: {data, history}}) {\n    try {\n        const response = yield call(CANCELED_STATUS_API_REQUEST, data)\n        if(response.status === 200) yield put(refreshOrders());\n        showResponseMessage(response, \"Operación exitosa!\");\n        yield put(UPDATE_SUCCESS_ACTION(response.order))\n\n    } catch (error) {\n        yield put(UPDATE_FAILED_ACTION(getErrorMessage(error)))\n    }\n}\n\nfunction* printOrder({payload: {id, history}}) {\n    try {\n        const response = yield call(PRINT_ORDER_API, id)\n        yield put(CUSTOM_SUCCESS_ACTION(response.html, \"print\"))\n    } catch (error) {\n        yield put(CUSTOM_FAILED_ACTION(getErrorMessage(error)))\n    }\n}\n\nfunction* resumeOrder({payload: {id, history}}) {\n    try {\n        const response = yield call(RESUME_ORDER_API, id)\n        yield put(CUSTOM_SUCCESS_ACTION(response.text, \"resume\"))\n    } catch (error) {\n        yield put(CUSTOM_FAILED_ACTION(getErrorMessage(error)))\n    }\n}\n\nfunction* update({payload: {id, data, history}}) {\n    try {\n        const response = yield call(PUT_API_REQUEST, id, data)\n        showResponseMessage(response, \"Operación exitosa!\");\n        yield put(UPDATE_SUCCESS_ACTION(response.order))\n        yield put(getOrder(id))\n    } catch (error) {\n        yield put(UPDATE_FAILED_ACTION(getErrorMessage(error)))\n    }\n}\n\nfunction* updateOrderProducts({payload: {id, data, history}}) {\n    try {\n        const response = yield call(PUT_ORDER_PRODUCTS_API_REQUEST, id, data);\n        showResponseMessage(response, \"Operación exitosa!\");\n        yield put(UPDATE_SUCCESS_ACTION(response.order));\n        yield put(getOrder(id))\n    } catch (error) {\n        console.log('error generado..', error.message);\n        yield put(CREATE_FAILED_ACTION(getErrorMessage(error)))\n    }\n}\n\nfunction* fetchDeliveryMethods({conditional, limit, offset}) {\n    try {\n        const cond = Conditionals.getConditionalFormat(conditional);\n        const response = yield call(fetchDeliveryMethodsApi, Conditionals.buildHttpGetQuery(cond, limit, offset))\n        yield put(getDeliveryMethodsSuccess(response.data, response.meta));\n    } catch (error) {\n        yield put(getDeliveryMethodsFailed(getErrorMessage(error)))\n    }\n}\n\nfunction* fetchDeliveryQuote({data}) {\n    try {\n        const response = yield call(fetchDeliveryQuoteApi, data)\n        yield put(getDeliveryQuoteSuccess(response));\n    } catch (error) {\n        yield put(getDeliveryQuoteFailed(getErrorMessage(error)))\n    }\n}\n\nfunction* batchRequest({conditionals}) {\n    try {\n        const cond = Conditionals.getConditionalFormat(conditionals);\n        const query = Conditionals.buildHttpGetQuery(cond);\n        const response = yield call(BATCH_REQUEST_API_REQUEST, query)\n        yield put(PRINT_BATCH_REQUEST_SUCCESS_ACTION(response.batch, response.meta))\n    } catch (error) {\n        showResponseMessage(error, \"Operación falida!\", getErrorMessage(error));\n        yield put(PRINT_BATCH_REQUEST_FAILED_ACTION(getErrorMessage(error)))\n    }\n}\n\nfunction* conciliation({orders}) {\n    try {\n        const response = yield call(CONCILIATION_REQUEST_API_REQUEST, orders)\n        showResponseMessage(response, \"Operación exitosa!\", response.error);\n        yield put(CONCILIATION_REQUEST_SUCCESS_ACTION())\n    } catch (error) {\n        showResponseMessage({status: 500}, \"Ocurrió un error!\", getErrorMessage(error));\n        yield put(CONCILIATION_REQUEST_FAILED_ACTION(getErrorMessage(error)))\n    }\n}\n\nfunction* fetchHistoric({payload}) {\n    try {\n        const response = yield call(ORDER_HISTORIC_API_REQUEST, payload.id);\n        yield put(historicOrderSuccess(response.orderHistoric));\n    } catch (error) {\n        yield put(historicOrderFailed(getErrorMessage(error)))\n    }\n}\n\nfunction* confirmConciliation({orders}) {\n    try {\n        const response = yield call(CONFIRM_CONCILIATION_REQUEST_API_REQUEST, orders)\n        showResponseMessage(response, \"Operación exitosa!\", response.error);\n        yield put(refreshOrders());\n        yield put(CONFIRM_CONCILIATION_REQUEST_SUCCESS_ACTION())\n    } catch (error) {\n        showResponseMessage({status: 500}, \"Ocurrió un error!\", getErrorMessage(error));\n        yield put(CONFIRM_CONCILIATION_REQUEST_FAILED_ACTION(getErrorMessage(error)))\n    }\n}\n\nfunction* orderDeliverySync({payload: {id, data}}) {\n    try {\n        const response = yield call(ORDER_DELIVERY_SYNC_API_REQUEST, id, data)\n        showResponseMessage(response, \"Operación exitosa!\", response.error);\n        yield put(SYNC_DELIVERY_SUCCESS_ACTION())\n    } catch (error) {\n        showResponseMessage({status: 500}, \"Ocurrió un error!\", getErrorMessage(error));\n        yield put(SYNC_DELIVERY_FAILED_ACTION(getErrorMessage(error)))\n    }\n}\n\nfunction* orderDeliveryRefresh({id}) {\n    try {\n        const response = yield call(ORDER_DELIVERY_REFRESH_API_REQUEST, id)\n        showResponseMessage(response, \"Operación exitosa!\", response.error);\n        yield put(REFRESH_DELIVERY_ORDER_SUCCESS_ACTION())\n    } catch (error) {\n        showResponseMessage({status: 500}, \"Ocurrió un error!\", getErrorMessage(error));\n        yield put(REFRESH_DELIVERY_ORDER_FAILED_ACTION(getErrorMessage(error)))\n    }\n}\n\nfunction* increasePhotoCounter({payload: {id}}) {\n    try {\n        const response = yield call(INCREASE_PHOTO_COUNTER_API_REQUEST, id)\n        if(response.status === 200){\n            yield put(refreshOrders());\n            showResponseMessage(response, \"Operación exitosa!\", response.error);\n        }\n    } catch (error) {\n        showResponseMessage({status: 500}, \"Ocurrió un error!\", getErrorMessage(error));\n    }\n}\n\nfunction* generateLinkPayment({payload: {id}}) {\n    try {\n        const response = yield call(GENERATE_LINK_PAYMENT, id);\n        if(response.status === 200){\n            yield put(generateLinkPaymentSuccess(response.url));\n            showResponseMessage(response, \"Se ha generado el link de pago!\");\n        }\n    } catch (error) {\n        showResponseMessage({status: 500}, \"Ocurrió un error!\", getErrorMessage(error));\n    }\n}\n\n\nexport function* watchOrder() {\n    yield takeEvery(ACTION_NAME_CREATE, register);\n    yield takeEvery(ACTION_NAME_UPDATE, update);\n    yield takeEvery(ACTION_NAME_LIST, fetch);\n    yield takeEvery(ACTION_ORDER_PRODUCTS_UPDATE, updateOrderProducts);\n    yield takeEvery(ACTION_NAME_LIST_OFFICE, fetchByOffice);\n    yield takeEvery(ACTION_NAME_GET, get)\n    yield takeEvery(GET_DELIVERY_METHODS, fetchDeliveryMethods)\n    yield takeEvery(GET_DELIVERY_QUOTE, fetchDeliveryQuote)\n    yield takeEvery(NEXT_STATUS_ORDER, nextStatus)\n    yield takeEvery(CANCELED_STATUS_ORDER, canceledStatus)\n    yield takeEvery(RESUME_ORDER, resumeOrder)\n    yield takeEvery(PRINT_ORDER, printOrder)\n    yield takeEvery(PRINT_BATCH_REQUEST, batchRequest)\n    yield takeEvery(CONCILIATION_REQUEST, conciliation)\n    yield takeEvery(CONFIRM_CONCILIATION_REQUEST, confirmConciliation)\n    yield takeEvery(GET_HISTORIC_ORDER, fetchHistoric);\n    yield takeEvery(SYNC_DELIVERY_ORDER, orderDeliverySync);\n    yield takeEvery(REFRESH_DELIVERY_ORDER, orderDeliveryRefresh);\n    yield takeEvery(DOWNLOAD_PHOTO, increasePhotoCounter);\n    yield takeEvery(ACTION_GENERATE_LINK, generateLinkPayment);\n}\n\nfunction* orderSaga() {\n    yield all([fork(watchOrder)])\n}\n\nexport default orderSaga;\n","/Users/ramon/Repositories/lucy-moie/src/store/location/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/productImages/saga.js",["1855"],"import {all, call, fork, put, takeEvery} from \"redux-saga/effects\"\n\n//Account Redux states\nimport {\n    DELETE_PRODUCT_IMAGE,\n    GET_PRODUCT_IMAGE,\n    GET_PRODUCT_IMAGES, REFRESH_PRODUCT,\n    REGISTER_PRODUCT_IMAGE,\n    UPDATE_PRODUCT_IMAGE\n} from \"./actionTypes\"\n\nimport {\n    getProductImageFailed,\n    getProductImagesFailed,\n    getProductImagesSuccess,\n    getProductImageSuccess, refreshProduct,\n    registerProductImageFailed,\n    registerProductImageSuccess,\n    updateProductImageFail,\n    updateProductImageSuccess\n} from \"./actions\"\n\nimport {\n    deleteProductImageApi,\n    fetchProductImageApi,\n    fetchProductImagesApi,\n    registerProductImageApi,\n    updateProductImageApi\n} from \"../../helpers/backend_helper\"\n\nimport Conditionals from \"../../common/conditionals\";\nimport {showResponseMessage} from \"../../helpers/service\";\nimport {showMessage} from \"../../components/MessageToast/ShowToastMessages\";\n\n/**\n * *  Configuración de CRUD Saga (Realizar configuración para cada uno de las replicas)\n */\n\nconst ACTION_NAME_LIST      =   GET_PRODUCT_IMAGES;\nconst ACTION_NAME_GET       =   GET_PRODUCT_IMAGE;\nconst ACTION_NAME_CREATE    =   REGISTER_PRODUCT_IMAGE;\nconst ACTION_NAME_UPDATE    =   UPDATE_PRODUCT_IMAGE;\nconst ACTION_IMAGE_NAME_DELETE = DELETE_PRODUCT_IMAGE;\n\nconst LIST_API_REQUEST               =   fetchProductImagesApi;\nconst GET_API_REQUEST                =   fetchProductImageApi;\nconst POST_API_REQUEST               =   registerProductImageApi;\nconst PUT_API_REQUEST                =   updateProductImageApi;\nconst DELETE_API_IMAGE_REQUEST       =   deleteProductImageApi;\n\n//actions\nconst LIST_SUCCESS_ACTION   =   getProductImagesSuccess;\nconst LIST_FAILED_ACTION    =   getProductImagesFailed;\nconst GET_SUCCESS_ACTION    =   getProductImageSuccess;\nconst GET_FAILED_ACTION     =   getProductImageFailed;\nconst CREATE_SUCCESS_ACTION =   registerProductImageSuccess;\nconst CREATE_FAILED_ACTION  =   registerProductImageFailed;\nconst UPDATE_SUCCESS_ACTION =   updateProductImageSuccess;\nconst UPDATE_FAILED_ACTION  =   updateProductImageFail;\n\n\nconst LIST_URL = \"/productImages\";\n\nfunction* deleteImage({ product,number }) {\n    try {\n        yield call(DELETE_API_IMAGE_REQUEST,  product, number );\n        yield put(refreshProduct())\n    } catch (error) {\n        showMessage.error(\"No se pudo eliminar imagen\");\n        //yield put(GET_FAILED_ACTION(error))\n    }\n}\n\nfunction* get({ id }) {\n    try {\n        const response = yield call(GET_API_REQUEST,  id );\n        yield put(GET_SUCCESS_ACTION(response))\n    } catch (error) {\n        yield put(GET_FAILED_ACTION(error))\n    }\n}\n\n\nfunction* fetch({conditional, limit, offset}) {\n    try {\n\n        const cond = Conditionals.getConditionalFormat(conditional);\n        const query = Conditionals.buildHttpGetQuery(cond, limit, offset);\n\n        const response = yield call(LIST_API_REQUEST, query)\n        yield put(LIST_SUCCESS_ACTION(response.data, response.meta));\n    } catch (error) {\n        yield put(LIST_FAILED_ACTION(error))\n    }\n}\n\nfunction* register({ payload: { data, history } }) {\n    try {\n        const response = yield call(POST_API_REQUEST, data)\n        yield put(CREATE_SUCCESS_ACTION(response))\n        history.push(LIST_URL)\n\n    } catch (error) {\n        yield put(CREATE_FAILED_ACTION(error))\n    }\n}\n\nfunction* update({ payload: { id, data, history } }) {\n    try {\n        const response = yield call(PUT_API_REQUEST, id, data)\n        showResponseMessage(response, \"Images actualizadas!\");\n        yield put(UPDATE_SUCCESS_ACTION(response))\n        history.post(LIST_URL)\n\n    } catch (error) {\n        yield put(UPDATE_FAILED_ACTION(error))\n    }\n}\n\nexport function* watchProductImage() {\n    yield takeEvery(ACTION_IMAGE_NAME_DELETE, deleteImage);\n    yield takeEvery(ACTION_NAME_CREATE, register);\n    yield takeEvery(ACTION_NAME_UPDATE, update);\n    yield takeEvery(ACTION_NAME_LIST, fetch);\n    yield takeEvery(ACTION_NAME_GET, get)\n}\n\nfunction* productImageSaga() {\n    yield all([fork(watchProductImage)])\n}\n\nexport default productImageSaga\n","/Users/ramon/Repositories/lucy-moie/src/store/productSize/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/comment/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/deliveryLocality/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/sizes/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/category/saga.js",["1856"],"import {all, call, fork, put, takeEvery} from \"redux-saga/effects\"\n\n//Account Redux states\nimport {\n    GET_CATEGORIES,\n    GET_CATEGORY,\n    REGISTER_CATEGORY,\n    UPDATE_CATEGORY,\n    CATALOG_PRINT_BATCH_REQUEST,\n    GET_PIECES_UNPUBLISHED\n} from \"./actionTypes\"\n\nimport {\n    getCategoriesSuccess,\n    getCategoriesFailed,\n    registerCategorySuccess,\n    getCategorySuccess,\n    getCategoryFailed,\n    registerCategoryFailed,\n    updateCategorySuccess,\n    updateCategoryFail,\n    printCatalogBatchRequestFailed,\n    printCatalogBatchRequestSuccess, getPiecesUnpublishedFailed, getPiecesUnpublishedSuccess\n} from \"./actions\"\n\nimport {\n    registerCategoryApi,\n    updateCategoryApi,\n    fetchCategoryApi,\n    fetchCategoriesApi,\n    catalogBatchPrintRequestApi, getPiecesUnpublishedApi\n} from \"../../helpers/backend_helper\"\n\nimport Conditionals from \"../../common/conditionals\";\nimport {showResponseMessage} from \"../../helpers/service\";\n\n/**\n * *  Configuración de CRUD Saga (Realizar configuración para cada uno de las replicas)\n */\n\nconst ACTION_NAME_LIST      =   GET_CATEGORIES;\nconst ACTION_NAME_GET       =   GET_CATEGORY;\nconst ACTION_NAME_CREATE    =   REGISTER_CATEGORY;\nconst ACTION_NAME_UPDATE    =   UPDATE_CATEGORY;\nconst ACTION_PIECES_UNPUBLISHED    =   GET_PIECES_UNPUBLISHED;\n\nconst LIST_API_REQUEST      =   fetchCategoriesApi;\nconst GET_API_REQUEST       =   fetchCategoryApi;\nconst POST_API_REQUEST      =   registerCategoryApi;\nconst PUT_API_REQUEST       =   updateCategoryApi;\nconst BATCH_REQUEST_API_REQUEST = catalogBatchPrintRequestApi;\n\n//actions\nconst LIST_SUCCESS_ACTION   =   getCategoriesSuccess;\nconst LIST_FAILED_ACTION    =   getCategoriesFailed;\nconst GET_SUCCESS_ACTION    =   getCategorySuccess;\nconst GET_FAILED_ACTION     =   getCategoryFailed;\nconst CREATE_SUCCESS_ACTION =   registerCategorySuccess;\nconst CREATE_FAILED_ACTION  =   registerCategoryFailed;\nconst UPDATE_SUCCESS_ACTION =   updateCategorySuccess;\nconst UPDATE_FAILED_ACTION  =   updateCategoryFail;\n\n\nconst GET_PIECES_UNPUBLISHED_FAILED_ACTION     =   getPiecesUnpublishedFailed;\nconst GET_PIECES_UNPUBLISHED_SUCCESS_ACTION =   getPiecesUnpublishedSuccess;\n\nconst PRINT_BATCH_REQUEST_SUCCESS_ACTION = printCatalogBatchRequestSuccess;\nconst PRINT_BATCH_REQUEST_FAILED_ACTION = printCatalogBatchRequestFailed;\n\n\nconst LIST_URL = \"/categories\";\n\nfunction* get({ id }) {\n    try {\n        const response = yield call(GET_API_REQUEST,  id );\n        yield put(GET_SUCCESS_ACTION(response))\n    } catch (error) {\n        yield put(GET_FAILED_ACTION(error))\n    }\n}\n\n\nfunction* fetch({conditional, limit, offset}) {\n    try {\n\n        const cond = Conditionals.getConditionalFormat(conditional);\n        const query = Conditionals.buildHttpGetQuery(cond, limit, offset);\n\n        const response = yield call(LIST_API_REQUEST, query)\n        yield put(LIST_SUCCESS_ACTION(response.data, response.meta));\n    } catch (error) {\n        yield put(LIST_FAILED_ACTION(error))\n    }\n}\n\nfunction* register({ payload: { data, history } }) {\n    try {\n        const response = yield call(POST_API_REQUEST, data)\n        showResponseMessage(response, \"Categoria creada!\");\n        yield put(CREATE_SUCCESS_ACTION(response))\n        history.push(LIST_URL)\n\n    } catch (error) {\n        yield put(CREATE_FAILED_ACTION(error))\n    }\n}\n\nfunction* update({ payload: { id, data, history } }) {\n    try {\n        const response = yield call(PUT_API_REQUEST, id, data)\n        showResponseMessage(response, \"Categoria actualizada!\");\n        yield put(UPDATE_SUCCESS_ACTION(response))\n        history.push(LIST_URL)\n\n    } catch (error) {\n        yield put(UPDATE_FAILED_ACTION(error))\n    }\n}\n\nfunction* getPiecesUnpublished({id}) {\n    try {\n        const response = yield call(getPiecesUnpublishedApi, id);\n        console.log(response);\n        if(response.status == 200) {\n            console.log(response.pieces);\n            yield put(GET_PIECES_UNPUBLISHED_SUCCESS_ACTION(response.pieces));\n        } else {\n            yield put(GET_PIECES_UNPUBLISHED_SUCCESS_ACTION([]));\n        }\n    } catch (error) {\n        yield put(GET_PIECES_UNPUBLISHED_FAILED_ACTION(error))\n    }\n}\n\nfunction* catalogBatchRequest({conditionals}) {\n    try {\n        const cond = Conditionals.getConditionalFormat(conditionals);\n        const query = Conditionals.buildHttpGetQuery(cond);\n        const response = yield call(BATCH_REQUEST_API_REQUEST, query)\n        showResponseMessage(response, \"Operación en curso!\", response.error);\n        yield put(PRINT_BATCH_REQUEST_SUCCESS_ACTION(response.batch, response.meta))\n    } catch (error) {\n        yield put(PRINT_BATCH_REQUEST_FAILED_ACTION(error))\n    }\n}\n\nexport function* watchCategory() {\n    yield takeEvery(ACTION_NAME_CREATE, register);\n    yield takeEvery(ACTION_NAME_UPDATE, update);\n    yield takeEvery(ACTION_NAME_LIST, fetch);\n    yield takeEvery(ACTION_NAME_GET, get);\n    yield takeEvery(ACTION_PIECES_UNPUBLISHED, getPiecesUnpublished);\n    yield takeEvery(CATALOG_PRINT_BATCH_REQUEST, catalogBatchRequest)\n}\n\nfunction* categorySaga() {\n    yield all([fork(watchCategory)])\n}\n\nexport default categorySaga\n","/Users/ramon/Repositories/lucy-moie/src/store/product/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/customer/saga.js",["1857","1858"],"import {all, call, fork, put, takeEvery} from \"redux-saga/effects\"\n\n//Account Redux states\nimport {\n    GET_CUSTOMERS,\n    GET_CUSTOMER,\n    REGISTER_CUSTOMER,\n    UPDATE_CUSTOMER,\n    DELETE_CUSTOMER,\n    QUERY_CUSTOMERS,\n    GET_CUSTOMER_REGISTEREDS,\n    REGISTER_VCARD\n} from \"./actionTypes\"\nimport {\n    getCustomersSuccess,\n    registerCustomerSuccess,\n    getCustomersFail,\n    getCustomerSuccess,\n    getCustomerFail,\n    registerCustomerFail,\n    updateCustomerSuccess,\n    updateCustomerFail,\n    deleteCustomerSuccess,\n    deleteCustomerFailed,\n    queryCustomersFailed,\n    queryCustomersSuccess,\n    getCustomerRegisteredsSuccess, getCustomerRegisteredsFailed, registerVCardSuccess, registerVCardFail\n} from \"./actions\"\n\n//Include Both Helper File with needed methods\nimport {\n    registerCustomer,\n    updateCustomer,\n    fetchCustomer,\n    fetchCustomersApi,\n    deleteCustomerApi, fetchCustomerRegisteredsApi, registerVCardApi\n} from \"../../helpers/backend_helper\"\nimport Conditionals from \"../../common/conditionals\";\nimport {showResponseMessage} from \"../../helpers/service\";\n\nfunction* fetchCustomerById({ id }) {\n    try {\n        const response = yield call(fetchCustomer, { id });\n        yield put(getCustomerSuccess(response))\n    } catch (error) {\n        yield put(getCustomerFail(error))\n    }\n}\n\n\nfunction* fetchCustomers({conditional, limit, offset}) {\n    try {\n\n        const cond = Conditionals.getConditionalFormat(conditional);\n        const query = Conditionals.buildHttpGetQuery(cond, limit, offset);\n\n        const response = yield call(fetchCustomersApi, query)\n        yield put(getCustomersSuccess(response.data, response.meta));\n    } catch (error) {\n        yield put(getCustomersFail(error))\n    }\n}\nfunction* queryData({params ={}, node='customers'}) {\n    try {\n        const response = yield call(fetchCustomersApi, params)\n        yield put(queryCustomersSuccess(response.data, response.meta, node));\n    } catch (error) {\n        yield put(queryCustomersFailed(error))\n    }\n}\n\nfunction* fetchCustomerRegistereds() {\n    try {\n        const response = yield call(fetchCustomerRegisteredsApi)\n        yield put(getCustomerRegisteredsSuccess(response));\n    } catch (error) {\n        yield put(getCustomerRegisteredsFailed(error))\n    }\n}\n\n// Is customer register successfull then direct plot user in redux.\nfunction* customerRegister({ payload: { customer, history } }) {\n    try {\n        const response = yield call(registerCustomer, customer)\n        showResponseMessage(response, \"Cliente creado!\");\n        yield put(registerCustomerSuccess(response))\n        //history.push(\"/customers\")\n    } catch (error) {\n        if(error && error.response && error.response.data && error.response.data.error == 'doc_exists'){\n            showResponseMessage({status: 400}, \"Documento ya se encuentra registrado!\");\n        }\n        yield put(registerCustomerFail(error))\n    }\n}\n\n// Is customer register successfull then direct plot user in redux.\nfunction* customerUpdate({ payload: { id, customer, history } }) {\n    try {\n        const response = yield call(updateCustomer, id, customer)\n        showResponseMessage(response, \"Cliente actualizado!\");\n        yield put(updateCustomerSuccess(response))\n        //history.push(\"/customers\")\n    } catch (error) {\n        yield put(updateCustomerFail(error))\n    }\n}\n\nfunction* customerDelete({ payload: { id, history } }) {\n    try {\n        yield call(deleteCustomerApi, id)\n        yield put(deleteCustomerSuccess(id))\n        showResponseMessage({status:200}, \"Cliente borrado!\");\n        history.push(\"/customers\")\n\n    } catch (error) {\n        yield put(deleteCustomerFailed(error))\n    }\n}\n\n// Is customer register successfull then direct plot user in redux.\nfunction* vcardRegister({ payload: { vcard, history } }) {\n    try {\n        const response = yield call(registerVCardApi, vcard)\n        showResponseMessage(response, \"VCard creado!\");\n        yield put(registerVCardSuccess(response))\n        //history.push(\"/customers\")\n    } catch (error) {\n        if(error && error.response && error.response.data && error.response.data.error == 'doc_exists'){\n            showResponseMessage({status: 400}, \"Documento ya se encuentra registrado!\");\n        }\n        yield put(registerVCardFail(error))\n    }\n}\n\nexport function* watchCustomer() {\n    yield takeEvery(REGISTER_CUSTOMER, customerRegister);\n    yield takeEvery(UPDATE_CUSTOMER, customerUpdate);\n    yield takeEvery(GET_CUSTOMERS, fetchCustomers);\n    yield takeEvery(GET_CUSTOMER, fetchCustomerById);\n    yield takeEvery(DELETE_CUSTOMER, customerDelete);\n    yield takeEvery(QUERY_CUSTOMERS, queryData);\n    yield takeEvery(GET_CUSTOMER_REGISTEREDS, fetchCustomerRegistereds);\n    yield takeEvery(REGISTER_VCARD, vcardRegister);\n}\n\nfunction* customerSaga() {\n    yield all([fork(watchCustomer)])\n}\n\nexport default customerSaga\n","/Users/ramon/Repositories/lucy-moie/src/store/auth/forgetpwd/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/auth/profile/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/auth/login/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/auth/register/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/billConfig/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/reports/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/payments/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/postSale/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/bill/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/Common/WidgetCard1.js",["1859","1860","1861","1862","1863","1864"],"import React, {useEffect, useState} from \"react\"\nimport imageNotFound from \"../../assets/images/image-not-found.png\"\nimport {Card, CardBody} from \"reactstrap\";\nimport ReactApexChart from \"react-apexcharts\";\nimport CountUp from \"react-countup\";\nimport PropTypes from \"prop-types\";\nimport WidgetCard from \"./WidgetCard\";\n\nconst series1 = [{\n    data: [25, 66, 41, 89, 63, 25, 44, 20, 36, 40, 54]\n}]\nconst options1 = {\n    fill: {\n        colors: ['#5b73e8']\n    },\n    chart: {\n        width: 70,\n        sparkline: {\n            enabled: !0\n        }\n    },\n    plotOptions: {\n        bar: {\n            columnWidth: '50%'\n        }\n    },\n    labels: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\n    xaxis: {\n        crosshairs: {\n            width: 1\n        },\n    },\n    tooltip: {\n        enabled: false,\n        fixed: {\n            enabled: !1\n        },\n        x: {\n            show: !1\n        },\n        y: {\n            title: {\n                formatter: function (seriesName) {\n                    return ''\n                }\n            }\n        },\n        marker: {\n            show: !1\n        }\n    }\n};\n\nconst WidgetCard1 = props => {\n    const {statusGroup, title} = props;\n    const [dataCard, setDataCard] = useState({});\n\n    useEffect(() => {\n        let active = 0;\n        let inactive = 0;\n        if(statusGroup ){\n            if(statusGroup[1]) active = statusGroup[1];\n            if(statusGroup[0]) inactive = statusGroup[0];\n        }\n\n        const total = active + inactive;\n        const data = {\n            id: 1,\n            icon: \"mdi mdi-clock-five-time\",\n            title: title,\n            value: total,\n            prefix: \"\",\n            suffix: \"\",\n            decimal: 0,\n            charttype: \"bar\",\n            chartheight: 40,\n            chartwidth: 70,\n            badgeValue: active,\n            color: \"success\",\n            desc: \"activos\",\n            badgeValue2: inactive,\n            color2: \"danger\",\n            desc2: \"inactivos\",\n            series: series1,\n            options: options1,\n        };\n        setDataCard(data);\n    }, [statusGroup])\n\n    return (\n        <WidgetCard report={dataCard} />\n    )\n}\n\n\nWidgetCard1.propTypes = {\n    statusGroup: PropTypes.object.isRequired,\n    title: PropTypes.string.isRequired\n}\n\nexport default WidgetCard1\n","/Users/ramon/Repositories/lucy-moie/src/store/office/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/Common/WidgetCard.js",["1865","1866"],"import React from \"react\"\nimport imageNotFound from \"../../assets/images/image-not-found.png\"\nimport {Card, CardBody} from \"reactstrap\";\nimport ReactApexChart from \"react-apexcharts\";\nimport CountUp from \"react-countup\";\nimport PropTypes from \"prop-types\";\n\nconst WidgetCard = props => {\n\n    const {report} = props;\n    return (\n        <Card>\n            {report.charttype && (\n                <CardBody>\n                    <div className=\"float-end mt-2\">\n                        {report.charttype == \"text\" ? (\n                            <h4 class=\"text-info\">{report.series}</h4>\n                        ) : (\n                            <ReactApexChart\n                                options={report.options}\n                                series={report.series}\n                                type={report.charttype}\n                                height={report.chartheight}\n                                width={report.chartwidth}\n                            />\n                        )}\n\n                    </div>\n                    <div>\n                        <h4 className=\"mb-1 mt-1\">\n                        <span>\n                            <CountUp end={report.value} separator=\",\" prefix={report.prefix} suffix={report.suffix} decimals={report.decimal}/>\n                        </span>\n                        </h4>\n                        <p className=\"text-muted mb-0\">{report.title}</p>\n                    </div>\n                    <p className=\"text-muted mt-3 mb-0\">\n                    <span className={\"text-\" + report.color + \" me-1\"}>\n                        <i className={report.icon + \" me-1\"}> </i>{report.badgeValue}\n                    </span> {\" \"}{report.desc}\n                        {(report.badgeValue2 || report.badgeValue2 === 0) && (\n                            <> &nbsp; / &nbsp;\n                                <span className={\"text-\" + report.color2 + \" me-1\"}>\n                                    <i className={report.icon2 + \" me-1\"}> </i> {report.badgeValue2}\n                                </span> {\" \"}{report.desc2}\n                            </>\n                        )}\n                    </p>\n                </CardBody>\n            )}\n        </Card>\n    )\n}\n\n\nWidgetCard.propTypes = {\n    report: PropTypes.object.isRequired\n}\n\nexport default WidgetCard\n","/Users/ramon/Repositories/lucy-moie/src/pages/Category/CatalogPrintBatchRequest.js",["1867","1868"],"import React, {useEffect, useState} from \"react\"\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {downloadFile, getMoment} from \"../../common/utils\";\nimport {printCatalogBatchRequest, refreshCategory, resetCatalogBatchRequest} from \"../../store/category/actions\";\nimport {BATCH_TYPES, FILE_NAMES} from \"../../common/constants\";\n\nconst CatalogPrintBatchRequest = (props) => {\n\n    const {batch, conditionals, doRequest, onPrintBatchRequest, onResetBatchRequest, onRefreshCategory} = props;\n\n    useEffect(() => {\n        if (conditionals && doRequest) {\n            onPrintBatchRequest(conditionals);\n        }\n    }, [conditionals, doRequest, onPrintBatchRequest]);\n\n\n    useEffect(() => {\n        if (batch && batch.body) {\n            let html = batch.body;\n            let name = FILE_NAMES.CATALOGO_SINGLE;\n            if(batch.type === BATCH_TYPES.CATALOG_WITH_REFERENCES){\n                name = FILE_NAMES.CATALOG_WITH_REFERENCES;\n            }\n\n            const filename = `${name}-${getMoment().format(\"YYYY-MM-DD\")}.pdf`;\n\n            downloadFile(html, filename).then(() =>{\n                onResetBatchRequest();\n                onRefreshCategory();\n            });\n        }\n    }, [batch]);\n\n    return (\n        <React.Fragment>\n\n        </React.Fragment>\n    );\n}\n\nconst mapStateToProps = state => {\n    const {batchRequest} = state.Category\n    const {batch, error, meta, conditionals, doRequest, loading} = batchRequest\n    return {batch, error, meta, conditionals, doRequest, loading}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onPrintBatchRequest: (conditional) => dispatch(printCatalogBatchRequest(conditional)),\n    onResetBatchRequest: (id = []) => dispatch(resetCatalogBatchRequest()),\n    onRefreshCategory: () => dispatch(refreshCategory()),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(CatalogPrintBatchRequest)\n)\n\nCatalogPrintBatchRequest.propTypes = {\n    conditionals: PropTypes.array,\n}\n","/Users/ramon/Repositories/lucy-moie/src/common/languages.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/Common/StatsRegisteredCard.js",["1869"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from \"prop-types\";\nimport WidgetCard4 from \"./WidgetCard4\";\n\nconst StatsRegisteredCard = (props) => {\n    const {getData, getDataToday, title} = props;\n    const [reportData, setReportData] = useState(null);\n\n    useEffect(() => {\n        if (getData) {\n            setReportData({today: getDataToday, lastWeek: getData});\n        }\n    }, [getData]);\n\n\n    return (\n        <React.Fragment>\n            <WidgetCard4 title={title} reportData={reportData}/>\n        </React.Fragment>\n    );\n}\n\nexport default StatsRegisteredCard;\n\nStatsRegisteredCard.propTypes = {\n    getData: PropTypes.func.isRequired,\n    getDataToday: PropTypes.func,\n    title: PropTypes.string.isRequired,\n    history: PropTypes.object\n}\n","/Users/ramon/Repositories/lucy-moie/src/i18n.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Customer/CustomerList/customerColumn.js",["1870"],"import React from \"react\"\nimport {Link} from \"react-router-dom\"\nimport {ConverterCustomerStatus} from \"../customer_status\";\nimport {Tooltip} from \"@material-ui/core\";\nimport {STATUS_COLORS, StatusField} from \"../../../components/StatusField\";\nimport {formatDate, hiddenPhone, STATUS_OPTIONS, YES_NO_OPTIONS} from \"../../../common/utils\";\nimport {PERMISSIONS} from \"../../../helpers/security_rol\";\nimport HasPermissions from \"../../../components/HasPermissions\";\nimport HasPermissionsFunc from \"../../../components/HasPermissionsFunc\";\nimport {HiddenPhone} from \"../../../components/Common/HiddenPhone\";\n\n\nconst customerListColumns = (onDelete = false, hasPhonePermission = HasPermissionsFunc([PERMISSIONS.CUSTOMER_PHONE])) => {\n    let cols = [\n        {\n            text: \"Nombre\",\n            dataField: \"name\",\n            sort: true,\n            filter: true,\n            filterType: \"text\",\n            formatter: (cellContent, item) => (\n                <>\n                    {!item.img ? (\n                        <div className=\"avatar-xs d-inline-block me-2\">\n                            <div className=\"avatar-title bg-soft-primary rounded-circle text-primary\">\n                                <i className=\"mdi mdi-account-circle m-0\"></i>\n                            </div>\n                        </div>\n                    ) : (\n                        <img\n                            className=\"avatar-xs rounded-circle me-2\"\n                            src={item.img}\n                            alt={item.name}\n                        />\n                    )}\n                    <HasPermissions permission={PERMISSIONS.CUSTOMER_SHOW}>\n                        <Link to={`/customer/detail/${item.id}`} className=\"text-body\">\n                            {item.name}\n                            {item.isMayorist === true && (\n                                <Tooltip placement=\"bottom\" title=\"Cliente mayorista\" aria-label=\"add\">\n                                    <i className={\"mdi mdi-crown font-size-18 mr-1 text-warning\"}> </i>\n                                </Tooltip>\n                            )}\n                        </Link>\n                    </HasPermissions>\n                </>\n            ),\n        },\n        {\n            text: \"Email\",\n            dataField: \"email\",\n            sort: true,\n            filter: true,\n            filterType: \"text\",\n        },\n        {\n            text: \"Télefonos\",\n            dataField: \"phone\",\n            sort: false,\n            filter: true,\n            formatter: (cellContent, item) => (\n                <>\n                    <div>Cel.: {item.cellphone && item.cellphone.length > 3 ? hasPhonePermission ? item.cellphone : hiddenPhone(item.cellphone) : ''}</div>\n                    <div>Res.: {item.phone && item.phone.length > 3 ? hasPhonePermission ? item.phone : hiddenPhone(item.phone) : ''}</div>\n                </>\n            ),\n        },\n        {\n            text: \"Télefono Celular\",\n            dataField: \"cellphone\",\n            filterType: \"text\",\n            sort: false,\n            filter: true,\n            hidden: true,\n        },\n        {\n            text: \"Télefono Residencial\",\n            dataField: \"phone\",\n            filterType: \"text\",\n            sort: false,\n            filter: true,\n            hidden: true,\n        },\n        {\n            text: \"Fecha creación\",\n            dataField: \"createdAt\",\n            sort: true,\n            filter: true,\n            filterType: \"dateRange\",\n            formatter: (cellContent, item) => (\n                <div>\n                    {formatDate(item.createdAt)}\n                </div>\n            ),\n        },\n        {\n            text: \"¿Es Mayorista?\",\n            dataField: \"isMayorist\",\n            sort: true,\n            hidden: true,\n            filter: true,\n            filterType: \"select\",\n            filterOptions: YES_NO_OPTIONS,\n            filterDefaultOption: STATUS_OPTIONS[0],\n        },\n        {\n            text: \"ContraPago\",\n            dataField: \"status\",\n            sort: true,\n            filter: true,\n            filterType: \"select\",\n            filterOptions: STATUS_OPTIONS,\n            filterDefaultOption: STATUS_OPTIONS[0],\n            formatter: (cellContent, item) => (\n                <StatusField color={item.status === true ? STATUS_COLORS.SUCCESS : STATUS_COLORS.DANGER}>\n                    {ConverterCustomerStatus(item.status)}\n                </StatusField>\n            ),\n        }\n    ];\n    if (HasPermissionsFunc([PERMISSIONS.CUSTOMER_EDIT])) {\n        cols.push({\n            dataField: \"menu\",\n            isDummyField: true,\n            text: \"Acción\",\n            formatter: (cellContent, item) => (\n                <ul className=\"list-inline font-size-20 contact-links mb-0\">\n                    <li className=\"list-inline-item\">\n                        <HasPermissions permission={PERMISSIONS.CUSTOMER_EDIT}>\n                            <Link to={`/customer/${item.id}`} className=\"px-2 text-primary\"><i className=\"uil uil-pen font-size-18\"></i></Link>\n                        </HasPermissions>\n                    </li>\n                    <HasPermissions permission={PERMISSIONS.CUSTOMER_DELETE}>\n                        {onDelete && (\n                            <li className=\"list-inline-item\">\n                                <button size=\"small\" className=\"btn btn-sm text-danger\" onClick={() => onDelete(item.id)}>\n                                    <i className=\"uil uil-trash-alt font-size-18\"> </i>\n                                </button>\n                            </li>\n                        )}\n                    </HasPermissions>\n                </ul>\n            ),\n        });\n    }\n    return cols;\n}\n\nexport default customerListColumns\n","/Users/ramon/Repositories/lucy-moie/src/store/postSale/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/auth/register/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/auth/profile/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/auth/forgetpwd/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Orders/PrintBatchRequest.js",["1871","1872","1873","1874"],"import React, {useEffect, useState} from \"react\"\nimport {Col, Row} from \"reactstrap\"\nimport {Button} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {printPartOfPage} from \"../../common/utils\";\nimport {nextStatusOrder, printBatchRequest, resetBatchRequest, resetOrder} from \"../../store/order/actions\";\nimport CustomModal from \"../../components/Modal/CommosModal\";\nimport {changePreloader} from \"../../store/layout/actions\";\n\nconst PrintBatchRequest = (props) => {\n\n    const {batch, conditionals, doRequest, refresh, error} = props;\n    const [openPrintConfirmModal, setOpenPrintConfirmModal] = useState(false);\n\n    useEffect(() => {\n        if (conditionals && doRequest) {\n            props.onPrintBatchRequest(conditionals);\n        }\n    }, [conditionals, doRequest]);\n\n    useEffect(() => {\n        props.onResetBatchRequest();\n    }, [refresh]);\n\n    useEffect(() => {\n        if (batch && batch.body) {\n            let html = null;\n            batch.body.forEach((body) => {\n                if (html) {\n                    html += '<br/>';\n                } else {\n                    html = '';\n                }\n                html += body.html;\n            })\n            printOrder(html)\n        }\n    }, [batch]);\n\n    useEffect(() => {\n        if (error) {\n            setOpenPrintConfirmModal(false);\n            props.onChangePreloader(false);\n        }\n    }, [error]);\n\n    const printOrder = (text) => {\n        setOpenPrintConfirmModal(true)\n        printPartOfPage(text);\n        props.onChangePreloader(false);\n    }\n\n    const onConfirmPrintOrder = () => {\n        setOpenPrintConfirmModal(false);\n        //props.onResetOrder();\n        props.onNextStatusOrder(batch.id);\n    }\n\n    const onCancelPrintOrder = () => {\n        setOpenPrintConfirmModal(false);\n        props.onResetBatchRequest();\n    }\n\n    return (\n        <React.Fragment>\n            <CustomModal title={\"Confirmar impresión de la(s) orden(s)\"} showFooter={false} isOpen={openPrintConfirmModal} onClose={() => onCancelPrintOrder()}>\n                <Row>\n                    <Col md={12}>\n                        ¿Logró imprimir lo(s) pedidos(s)?\n                    </Col>\n                </Row>\n                <hr/>\n                <Row>\n                    <Col md={12} className=\"text-right\">\n                        <button type=\"button\" className=\"btn btn-light\" onClick={() => onCancelPrintOrder()}>NO</button>\n                        <Button color=\"primary\" type=\"button\" onClick={onConfirmPrintOrder}>SI</Button>\n                    </Col>\n                </Row>\n            </CustomModal>\n        </React.Fragment>\n    );\n}\n\nconst mapStateToProps = state => {\n    const {batchRequest, refresh} = state.Order\n    const {batch, error, meta, conditionals, doRequest, loading} = batchRequest\n    return {batch, error, meta, conditionals, doRequest, loading, refresh}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onResetOrder: () => dispatch(resetOrder()),\n    onChangePreloader: (preloader) => dispatch(changePreloader(preloader)),\n    onPrintBatchRequest: (conditional) => dispatch(printBatchRequest(conditional)),\n    onNextStatusOrder: (id = []) => dispatch(nextStatusOrder({batch: id})),\n    onResetBatchRequest: (id = []) => dispatch(resetBatchRequest()),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(PrintBatchRequest)\n)\n\nPrintBatchRequest.propTypes = {\n    conditionals: PropTypes.array,\n}\n","/Users/ramon/Repositories/lucy-moie/src/store/template/reducer.js",["1875"],"import {\n    GET_TEMPLATE, GET_TEMPLATE_CATALOG, GET_TEMPLATE_CATALOG_FAILED, GET_TEMPLATE_CATALOG_SUCCESS,\n    GET_TEMPLATE_FAILED,\n    GET_TEMPLATE_SUCCESS,\n    GET_TEMPLATES,\n    GET_TEMPLATES_FAILED,\n    GET_TEMPLATES_SUCCESS,\n    REGISTER_TEMPLATE,\n    REGISTER_TEMPLATE_FAILED,\n    REGISTER_TEMPLATE_SUCCESS, RESET_TEMPLATE,\n    UPDATE_TEMPLATE, UPDATE_TEMPLATE_FAILED,\n    UPDATE_TEMPLATE_SUCCESS\n} from \"./actionTypes\";\n\nconst initialState = {\n    error: \"\",\n    loading: false,\n    meta: {},\n    templates: [],\n    template: {},\n    refresh: false\n}\n\nconst template = (state = initialState, action) => {\n    switch (action.type) {\n        case RESET_TEMPLATE:\n            return {\n                ...initialState\n            }\n        case GET_TEMPLATES:\n            return {\n                ...state,\n                loading: true,\n            }\n        case GET_TEMPLATES_FAILED:\n            return {\n                ...state,\n                error: action.payload,\n                loading: true,\n            }\n\n        case GET_TEMPLATES_SUCCESS:\n            return {\n                ...state,\n                templates: action.payload,\n                meta: action.meta,\n                loading: false,\n            }\n        case GET_TEMPLATE:\n            return {\n                ...state,\n                loading: true,\n            }\n        case GET_TEMPLATE_SUCCESS:\n            return {\n                ...state,\n                template: action.payload,\n                loading: false,\n            }\n        case GET_TEMPLATE_FAILED:\n            return {\n                ...state,\n                loading: false,\n            }\n        case REGISTER_TEMPLATE:\n            state = {\n                ...state,\n                loading: true,\n            }\n            break\n        case REGISTER_TEMPLATE_SUCCESS:\n            state = {\n                ...state,\n                loading: false,\n            }\n            break\n        case REGISTER_TEMPLATE_FAILED:\n            state = {\n                ...state,\n                loading: false,\n            }\n            break\n        case UPDATE_TEMPLATE:\n            state = {\n                ...state,\n                loading: true,\n            }\n            break\n        case UPDATE_TEMPLATE_SUCCESS:\n            state = {\n                ...state,\n                loading: false,\n            }\n            break\n        case UPDATE_TEMPLATE_FAILED:\n            state = {\n                ...state,\n                loading: false,\n            }\n            break\n        case GET_TEMPLATE_CATALOG:\n            return {\n                ...state,\n                loading: true,\n            }\n        case GET_TEMPLATE_CATALOG_FAILED:\n            return {\n                ...state,\n                error: action.payload,\n                loading: true,\n            }\n\n        case GET_TEMPLATE_CATALOG_SUCCESS:\n            return {\n                ...state,\n                templatesCatalog: action.payload,\n                meta: action.meta,\n                loading: false,\n            }\n            break\n        default:\n            state = { ...state }\n            break\n    }\n    return state\n}\n\nexport default template\n","/Users/ramon/Repositories/lucy-moie/src/store/comment/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/user/reducer.js",["1876","1877"],"import {\n    CHANGE_PASSWORD, CHANGE_PASSWORD_FAILED, CHANGE_PASSWORD_SUCCESS,\n    GET_USER,\n    GET_USER_FAILED,\n    GET_USER_SUCCESS,\n    GET_USERS,\n    GET_USERS_FAILED,\n    GET_USERS_SUCCESS,\n    REGISTER_USER,\n    REGISTER_USER_FAILED,\n    REGISTER_USER_SUCCESS, RESET_CHANGE_PASSWORD, RESET_USER,\n    UPDATE_USER, UPDATE_USER_FAILED,\n    UPDATE_USER_SUCCESS, USER_CHANGE_PASSWORD,\n    COUNTER_REGISTER_ORDERS, COUNT_USERS, COUNT_USERS_SUCCESS\n} from \"./actionTypes\";\n\nconst initialState = {\n    error: \"\",\n    loading: false,\n    meta: {},\n    users: [],\n    user: {},\n    refresh: false,\n    changePassword: {\n        user: null,\n        loading: false,\n        success: null,\n        error: null,\n    },\n    countUsers: [],\n    registerOrderActive: false\n}\n\nconst user = (state = initialState, action) => {\n    switch (action.type) {\n        case RESET_USER:\n            return {\n                ...initialState\n            }\n        case GET_USERS:\n            return {\n                ...state,\n                loading: true,\n            }\n        case GET_USERS_FAILED:\n            return {\n                ...state,\n                error: action.payload,\n                loading: true,\n            }\n\n        case GET_USERS_SUCCESS:\n            return {\n                ...state,\n                users: action.payload,\n                meta: action.meta,\n                loading: false,\n            }\n        case GET_USER:\n            return {\n                ...state,\n                loading: true,\n            }\n        case GET_USER_SUCCESS:\n            return {\n                ...state,\n                user: action.payload,\n                loading: false,\n            }\n        case GET_USER_FAILED:\n            return {\n                ...state,\n                loading: false,\n            }\n        case REGISTER_USER:\n            state = {\n                ...state,\n                loading: true,\n            }\n            break\n        case REGISTER_USER_SUCCESS:\n            state = {\n                ...state,\n                loading: false,\n            }\n            break\n        case REGISTER_USER_FAILED:\n            state = {\n                ...state,\n                loading: false,\n            }\n            break\n        case UPDATE_USER:\n            state = {\n                ...state,\n                loading: true,\n            }\n            break\n        case UPDATE_USER_SUCCESS:\n            state = {\n                ...state,\n                loading: false,\n            }\n            break\n        case UPDATE_USER_FAILED:\n            state = {\n                ...state,\n                loading: false,\n            }\n            break\n        case USER_CHANGE_PASSWORD:\n            state = {\n                ...state,\n                changePassword: {\n                    ...state.changePassword,\n                    user: action.user,\n                }\n            }\n            break\n        case RESET_CHANGE_PASSWORD:\n            state = {\n                ...state,\n                changePassword: {\n                    ...state.changePassword,\n                    user: null,\n                    loading: false,\n                    success: null,\n                    error: null,\n                }\n            }\n            break\n        case CHANGE_PASSWORD:\n            state = {\n                ...state,\n                changePassword: {\n                    ...state.changePassword,\n                    loading: true,\n                    success: null,\n                    error: null,\n                }\n            }\n            break\n        case CHANGE_PASSWORD_SUCCESS:\n            state = {\n                ...state,\n                changePassword: {\n                    ...state.changePassword,\n                    user: null,\n                    loading: false,\n                    success: true,\n                    error: null,\n                }\n            }\n            break\n        case CHANGE_PASSWORD_FAILED:\n            state = {\n                ...state,\n                changePassword: {\n                    ...state.changePassword,\n                    error: action.error,\n                    success: null,\n                    loading: false,\n                }\n            }\n            break\n        case COUNTER_REGISTER_ORDERS:\n            state = {\n                ...state,\n                registerOrderActive: action.active,\n                registerOrderTime: action.time\n            }\n            break\n        case COUNT_USERS_SUCCESS:\n            state = {\n                ...state,\n                countUsers: action.users\n            }\n            break\n        case COUNT_USERS_SUCCESS:\n            state = {\n                ...state,\n                countUsers: []\n            }\n            break\n        default:\n            state = { ...state }\n            break\n    }\n    return state\n}\n\nexport default user\n","/Users/ramon/Repositories/lucy-moie/src/store/fieldOptions/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/order/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/deliveryLocality/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/productSize/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/productImages/reducer.js",["1878"],"import {\n    GET_PRODUCT_IMAGE,\n    GET_PRODUCT_IMAGE_FAILED,\n    GET_PRODUCT_IMAGE_SUCCESS,\n    GET_PRODUCT_IMAGES,\n    GET_PRODUCT_IMAGES_FAILED,\n    GET_PRODUCT_IMAGES_SUCCESS,\n    REGISTER_PRODUCT_IMAGE,\n    REGISTER_PRODUCT_IMAGE_FAILED,\n    REGISTER_PRODUCT_IMAGE_SUCCESS,\n    RESET_PRODUCT_IMAGES,\n    UPDATE_PRODUCT_IMAGE,\n    UPDATE_PRODUCT_IMAGE_FAILED,\n    UPDATE_PRODUCT_IMAGE_SUCCESS,\n    REFRESH_PRODUCT\n} from \"./actionTypes\";\n\nconst initialState = {\n    error: \"\",\n    loading: false,\n    meta: {},\n    productImages: [],\n    productImage: {},\n    refresh: false\n}\n\nconst productImages = (state = initialState, action) => {\n    switch (action.type) {\n        case RESET_PRODUCT_IMAGES:\n            state = {\n                ...state,\n                loading: false,\n                refresh: false\n            }\n            break\n        case GET_PRODUCT_IMAGES:\n            return {\n                ...state,\n                loading: true,\n            }\n        case GET_PRODUCT_IMAGES_FAILED:\n            return {\n                ...state,\n                error: action.payload,\n                loading: true,\n            }\n\n        case GET_PRODUCT_IMAGES_SUCCESS:\n            return {\n                ...state,\n                productImages: action.payload,\n                meta: action.meta,\n                loading: false,\n            }\n        case GET_PRODUCT_IMAGE:\n            return {\n                ...state,\n                loading: true,\n            }\n        case GET_PRODUCT_IMAGE_SUCCESS:\n            return {\n                ...state,\n                productImage: action.payload,\n                loading: false,\n            }\n        case GET_PRODUCT_IMAGE_FAILED:\n            return {\n                ...state,\n                loading: false,\n            }\n        case REGISTER_PRODUCT_IMAGE:\n            state = {\n                ...state,\n                loading: true,\n            }\n            break\n        case REGISTER_PRODUCT_IMAGE_SUCCESS:\n            state = {\n                ...state,\n                loading: false,\n            }\n            break\n        case REGISTER_PRODUCT_IMAGE_FAILED:\n            state = {\n                ...state,\n                loading: false,\n            }\n            break\n        case UPDATE_PRODUCT_IMAGE:\n            state = {\n                ...state,\n                loading: true,\n            }\n            break\n        case UPDATE_PRODUCT_IMAGE_SUCCESS:\n            state = {\n                ...state,\n                loading: false,\n                refresh: true\n            }\n            break\n        case UPDATE_PRODUCT_IMAGE_FAILED:\n            state = {\n                ...state,\n                loading: false,\n            }\n            break\n        case REFRESH_PRODUCT:\n            state = {\n                ...state,\n                refresh: !state.refresh\n            }\n        default:\n            state = { ...state }\n            break\n    }\n    return state\n}\n\nexport default productImages\n","/Users/ramon/Repositories/lucy-moie/src/common/errors_messages.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/sizes/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/category/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/location/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/product/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/auth/profile/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/customer/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/auth/forgetpwd/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/auth/register/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/auth/login/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/layout/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/helpers/fakebackend_helper.js",[],"/Users/ramon/Repositories/lucy-moie/src/helpers/firebase_helper.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/Common/WidgetCard4.js",["1879","1880","1881","1882","1883","1884"],"import React, {useEffect, useState} from \"react\"\nimport imageNotFound from \"../../assets/images/image-not-found.png\"\nimport {Card, CardBody} from \"reactstrap\";\nimport ReactApexChart from \"react-apexcharts\";\nimport CountUp from \"react-countup\";\nimport PropTypes from \"prop-types\";\nimport WidgetCard from \"./WidgetCard\";\n\nconst series4 = [{\n    data: [0.1, 0.5, 0.2, 0.3, 0.2]\n}]\n\nconst options4 = {\n\n    fill: {\n        colors: ['#f1b44c']\n    },\n    chart: {\n        width: 70,\n        sparkline: {\n            enabled: !0\n        }\n    },\n    plotOptions: {\n        bar: {\n            columnWidth: '50%'\n        }\n    },\n    labels: [\"Antier\", \"Ayer\", \"Hoy\"],\n    xaxis: {\n        crosshairs: {\n            width: 1\n        },\n    },\n    tooltip: {\n        enabled: false,\n        fixed: {\n            enabled: !1\n        },\n        x: {\n            show: 1\n        },\n        y: {\n            title: {\n                formatter: function (seriesName) {\n                    return ''\n                }\n            }\n        },\n        marker: {\n            show: !1\n        }\n    }\n};\n\nconst WidgetCard4 = props => {\n    const {reportData = {}, title} = props;\n    const [dataCard, setDataCard] = useState({});\n\n    useEffect(() => {\n        let rData = {};\n        if(reportData){\n            rData = {...reportData};\n        }\n\n        const data = {\n            id: 4,\n            icon: \"uil-users-alt\",\n            title: title,\n            value: rData.lastWeek || 0,\n            decimal: 0,\n            charttype: \"line\",\n            chartheight: 40,\n            chartwidth: 70,\n            badgeValue: `${!!rData.today ? rData.today : 0}`,\n            color: \"success\",\n            desc: \"registrados hoy\",\n            series: series4,\n            options: options4\n        };\n        setDataCard(data);\n    }, [reportData])\n\n    return (\n        <WidgetCard report={dataCard}/>\n    )\n}\n\n\nWidgetCard4.propTypes = {\n    reportData: PropTypes.object.isRequired,\n    title: PropTypes.string.isRequired\n}\n\nexport default WidgetCard4\n","/Users/ramon/Repositories/lucy-moie/src/components/HorizontalLayout/CountUsers.js",["1885"],"import React, {useEffect, useState} from \"react\"\nimport {countUsersOrders} from \"../../helpers/service\";\nimport {connect} from \"react-redux\";\nimport {counterUsers, setCounterRegisterOrders} from \"../../store/user/actions\";\n\nconst CountUsers = ({registerOrderActive, onSetCounterRegisterOrders, onGetCounterUsers}) => {\n\n    const [currentTimeout, setCurrentTimeout] = useState(null)\n\n    useEffect(() => {\n\n        if(registerOrderActive === false){\n            onGetCounterUsers();\n            if (currentTimeout) clearInterval(currentTimeout);\n            let newTimeout = setInterval(() => {\n                onGetCounterUsers();\n            }, 70000);\n            //\n            setCurrentTimeout(newTimeout);\n        }\n\n        onSetCounterRegisterOrders(true, null);\n    }, [])\n\n    return (\n        <React.Fragment>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {registerOrderActive} = state.User\n    return {registerOrderActive}\n}\nconst mapDispatchToProps = dispatch => ({\n    countUsersOrders,\n    onSetCounterRegisterOrders: (register, time) => dispatch(setCounterRegisterOrders(register, time)),\n    onGetCounterUsers: () => dispatch(counterUsers()),\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(CountUsers)\n\n","/Users/ramon/Repositories/lucy-moie/src/components/Common/ButtonLoading.js",["1886","1887"],"import React from \"react\"\nimport imageNotFound from \"../../assets/images/image-not-found.png\"\nimport {Spinner} from \"reactstrap\";\nimport {Button} from \"@material-ui/core\";\nimport PropTypes from \"prop-types\";\n\nconst ButtonLoading = props => {\n    return (\n        <button type=\"button\" color={props.color} disabled={props.loading || props.disabled} className={props.className} onClick={props.onClick}>\n            {props.loading && <Spinner size=\"sm\" className=\"m-1\" color=\"primary\"/>}\n            {props.children}\n        </button>\n    )\n}\n\nButtonLoading.propTypes = {\n    color: PropTypes.string,\n    loading: PropTypes.bool.isRequired,\n    className: PropTypes.string,\n    onClick: PropTypes.func,\n    name: PropTypes.string,\n    disabled: PropTypes.bool\n}\n\nexport default ButtonLoading\n","/Users/ramon/Repositories/lucy-moie/src/pages/Stats/SalesCreated.js",["1888","1889","1890","1891","1892","1893"],"import React, {useEffect, useState} from \"react\"\nimport {CardBody, Col, Label, Row} from \"reactstrap\"\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {DATE_FORMAT, formatDate} from \"../../common/utils\";\nimport {REPORT_TYPES, showByList} from \"../../common/constants\";\nimport {generateReport} from \"../../store/reports/actions\";\nimport {statsApi} from \"../../helpers/backend_helper\";\n\nimport Highcharts from 'highcharts'\nimport {FieldDate, FieldSelect} from \"../../components/Fields\";\nimport {DATE_MODES} from \"../../components/Fields/InputDate\";\nimport {DEFAULT_PAGE_LIMIT} from \"../../common/pagination\";\nimport {getUsers} from \"../../store/user/actions\";\nimport {getEmptyOptions} from \"../../common/converters\";\nimport HighChartsWrapper from \"../../components/Common/HishChartsWrapper\";\nimport {AvForm} from \"availity-reactstrap-validation\";\nimport {Card} from \"@material-ui/core\";\n\nconst hoy = new Date();\nconst defaultDates = [new Date(hoy.getTime() - 518400000), new Date()];\nconst initialState = {\n    cargando: '',\n    usuarios: [],\n    ventasTotal: {\n        data: {\n            title: {\n                text: 'Ventas'\n            },\n            subtitle: {\n                text: null\n            },\n            xAxis: {\n                categories: []\n            },\n            yAxis: [{\n                labels: {\n                    format: '$ {value}'\n                },\n                title: {\n                    text: 'Monto'\n                }\n            },\n                {\n                    labels: {\n                        format: '{value} Pz.'\n                    },\n                    title: {\n                        text: 'Piezas'\n                    },\n                    opposite: true\n                }],\n            series: [{\n                name: 'Venta ($)',\n                data: []\n            },\n                {\n                    name: 'Ganancia ($)',\n                    data: []\n                },\n                {\n                    name: 'Piezas',\n                    yAxis: 1,\n                    dashStyle: 'shortdot',\n                    data: []\n                }]\n        },\n        opciones: {\n            usuario: '',\n            grupo: 'dia'\n        },\n        fecha: {\n            inicial: new Date(hoy.getTime() - 518400000),\n            final: new Date(hoy.getTime())\n        },\n    }\n}\n\nconst Sales = ({users, onGetUsers, className}) => {\n\n    const [stats, setStats] = useState(initialState);\n    const [userList, setUserList] = useState([]);\n\n    useEffect(() => {\n        if (onGetUsers) {\n            onGetUsers(null, 250);\n        }\n    }, [onGetUsers]);\n\n    useEffect(() => {\n        if (stats.ventasTotal) {\n            cargarVentas()\n        }\n    }, [stats.ventasTotal.fecha]);\n\n    useEffect(() => {\n        if (stats.ventasTotal) {\n            cargarVentas()\n        }\n    }, [stats.ventasTotal.opciones]);\n\n    useEffect(() => {\n        if (users) {\n            const options = users.map((user) => ({label: user.name, value: user.id}))\n            setStats({...stats, usuarios: [getEmptyOptions(), ...options]});\n            const addedUsers = users.filter(user => !!user.status).map(user => ({label: user.username, value: user.id}));\n            addedUsers.unshift({value: null, label: \"Todos\"});\n            setUserList(addedUsers);\n        }\n    }, [users]);\n\n    const getStatsLabel = (stats, node) => {\n        if(parserClientDate(stats[node].fecha.inicial) == parserClientDate(stats[node].fecha.final)){\n            return parserClientDate(stats[node].fecha.inicial);\n        }\n        else {\n            return parserClientDate(stats[node].fecha.inicial) + ' a ' + parserClientDate(stats[node].fecha.final)\n        }\n    }\n\n    const cargarVentas = () => {\n        if (valida(stats.ventasTotal.fecha)) {\n            stats.cargando = 'Cargando estadisticas de ventas...';\n            //definir la url para la consulta a la API\n            var url = '/stats/estadistica_ventas/created';\n            url += '/' + parserServerDate(stats.ventasTotal.fecha.inicial);\n            url += '/' + parserServerDate(stats.ventasTotal.fecha.final);\n            url += '/' + stats.ventasTotal.opciones.grupo;\n            url += '/' + stats.ventasTotal.opciones.usuario;\n            //leer estadisticas de ventas\n            statsApi(url).then((resp) => {\n                var fechas = [];\n                var datosVentas = [];\n                var datosGanancias = [];\n                var datosPiezas = [];\n\n                var keys = Object.keys(resp);\n\n                for (var i = 0; i < keys.length; i++) {\n                    var data = resp[keys[i]];\n                    fechas[i] = data.fecha;\n                    datosVentas[i] = parseFloat(data.monto);\n                    datosGanancias[i] = parseFloat(data.ganancia);\n                    datosPiezas[i] = parseFloat(data.piezas);\n                }\n                const newStats = {...stats};\n                newStats.ventasTotal.data.subtitle.text = getStatsLabel(newStats,'ventasTotal');\n                newStats.ventasTotal.data.xAxis.categories = fechas;\n                newStats.ventasTotal.data.series[0].data = datosVentas;\n                newStats.ventasTotal.data.series[1].data = datosGanancias;\n                newStats.ventasTotal.data.series[2].data = datosPiezas;\n                newStats.cargando = '';\n                setStats(newStats);\n            })\n        }\n    }\n\n    const parserServerDate = (date) => {\n        return formatDate(date, DATE_FORMAT.ONLY_DATE);\n    }\n\n    const valida = (node) => {\n        if (!node) return;\n        let v = false;\n        if (node.inicial && node.final && (node.inicial <= node.final)) {\n            v = true;\n        } else if (node.inicial || node.final){\n            v = true;\n        }\n        return v;\n    }\n\n    const parserClientDate = (date) => {\n        return formatDate(date, DATE_FORMAT.DD_MM_YYYY);\n    }\n\n    const onChangeDate = (dates, node) => {\n        if (dates.length > 0) {\n            const s = {...stats}\n            if ((dates.length === 1) || (dates[0].toString() == dates[1].toString())) {\n                s[node] = {...stats[node], fecha: {...stats[node].fecha, inicial: dates[0], final: dates[0]}};\n            } else {\n                s[node] = {...stats[node], fecha: {...stats[node].fecha, inicial: dates[0], final: dates[1]}};\n            }\n            setStats(s);\n        }\n    }\n\n    const onChangeUser = (user, node) => {\n        const s = {...stats}\n        s[node] = {...stats[node], opciones: {...stats[node].opciones, usuario: user.value || null}}\n        setStats(s);\n    }\n\n    const onChangeGrupo = (grupo, node) => {\n        if (grupo && grupo.value) {\n            const s = {...stats}\n            s[node] = {...stats[node], opciones: {...stats[node].opciones, grupo: grupo.value}}\n            setStats(s);\n        }\n    }\n\n    return (\n        <AvForm className=\"needs-validation\" autoComplete=\"off\">\n            <Card className={className}>\n                <CardBody>\n                    <Row id=\"ventasTotal\">\n                        <Col md={12}>\n                            <h4 className=\"card-title text-info\"> Total de ventas (Fecha de Creación)</h4>\n                        </Col>\n                        <Col md={4}>\n                            <div className=\"mb-3\">\n                                <Label>Fecha</Label>\n                                <FieldDate\n                                    name=\"ventas_total_dates\"\n                                    mode={DATE_MODES.RANGE}\n                                    defaultValue={defaultDates}\n                                    onChange={(dates) => onChangeDate(dates, \"ventasTotal\")}\n                                />\n                            </div>\n                        </Col>\n                        <Col md={4}>\n                            <div className=\"mb-3\">\n                                <Label>Mostrar por</Label>\n                                <FieldSelect\n                                    name=\"ventas_total_grupo\"\n                                    options={showByList}\n                                    defaultValue={showByList.length > 0 ? showByList[0] : null}\n                                    onChange={(data) => onChangeGrupo(data, \"ventasTotal\")}\n                                />\n                            </div>\n                        </Col>\n                        <Col md={4}>\n                            <div className=\"mb-3\">\n                                <Label>Usuarios</Label>\n                                <FieldSelect\n                                    name=\"ventas_total_users\"\n                                    options={userList}\n                                    defaultValue={stats.usuarios.length > 0 ? stats.usuarios[0] : null}\n                                    onChange={(data) => onChangeUser(data, \"ventasTotal\")}\n                                />\n                            </div>\n                        </Col>\n                        <Col md={12}>\n                            <HighChartsWrapper options={stats.ventasTotal.data}/>\n                        </Col>\n                    </Row>\n                </CardBody>\n            </Card>\n        </AvForm>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {users} = state.User\n    return {users}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGenerateReport: (data) => dispatch(generateReport(REPORT_TYPES.CONCILIATION, data)),\n    onGetUsers: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getUsers(conditional, limit, page)),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(Sales)\n)\n\nSales.propTypes = {\n    error: PropTypes.any,\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/Dashboard/inventory.js",["1894","1895","1896","1897","1898","1899","1900"],"import React, {useEffect, useState} from \"react\";\nimport {Card, CardBody, Table} from \"reactstrap\"\n\n//Simple bar\nimport SimpleBar from \"simplebar-react\"\n\n//Import Image\nimport {DEFAULT_PAGE_LIMIT} from \"../../common/pagination\";\nimport {getUsers} from \"../../store/user/actions\";\nimport {connect} from \"react-redux\";\nimport {fetchInventoryProductsApi, fetchProductsApi} from \"../../helpers/backend_helper\";\nimport CountUp from \"react-countup\";\nimport {PERMISSIONS} from \"../../helpers/security_rol\";\nimport HasPermissions from \"../../components/HasPermissions\";\n\nconst Inventory = (props) => {\n    const {users, meta, onGetUsers, loading, refresh} = props;\n    const [price, setPrice] = useState(0);\n    const [qty, setQty] = useState(0);\n\n    useEffect(() => {\n\n        fetchInventoryProductsApi({}).then((p => {\n            if (p && p.data && p.data[0]) {\n                setPrice(p.data[0].cost);\n                setQty(p.data[0].qty);\n                console.log('p: data', p.data);\n                //props.history.push(`/product/detail/${p.data[0].id}`);\n            }\n        }))\n\n    }, [onGetUsers])\n\n    const renderInventario = () => {\n        return <Card>\n            <CardBody>\n                <h5>Total en Inventario</h5> <br />\n                <div>\n                    <h4 className=\"mb-1 mt-1\">\n                        <span>\n                            <i class=\"text-success uil-money-bill me-2\"></i> &nbsp; -\n                        </span>\n                    </h4>\n                    <p className=\"text-muted mb-0\">Monto</p>\n                </div>\n\n                <div>\n                    <h4 className=\"mb-1 mt-1\">\n                        <span>\n                            <i class=\"text-warning uil-box me-2\"></i> &nbsp; -\n                        </span>\n                    </h4>\n                    <p className=\"text-muted mb-0\">Cantidades</p>\n                </div>\n            </CardBody>\n        </Card>\n    }\n\n\n    return (\n        <React.Fragment>\n            <HasPermissions permission={PERMISSIONS.DASHBOARD_INVENTORY} renderNoAccess={renderInventario}>\n            <Card>\n                <CardBody>\n                    <h5>Total en Inventario</h5> <br />\n                    <div>\n                        <h4 className=\"mb-1 mt-1\">\n                        <span>\n                            <i class=\"text-success uil-money-bill me-2\"></i> &nbsp; <CountUp end={price} separator=\",\" prefix={'$'} suffix={''} decimals={2}/>\n                        </span>\n                        </h4>\n                        <p className=\"text-muted mb-0\">Monto</p>\n                    </div>\n\n                    <div>\n                        <h4 className=\"mb-1 mt-1\">\n                        <span>\n                            <i class=\"text-warning uil-box me-2\"></i> &nbsp; <CountUp end={qty} separator=\",\" prefix={''} suffix={''} decimals={2}/>\n                        </span>\n                        </h4>\n                        <p className=\"text-muted mb-0\">Cantidades</p>\n                    </div>\n\n                </CardBody>\n            </Card>\n            </HasPermissions>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {users, loading, meta, refresh} = state.User\n    return {users, loading, meta, refresh}\n}\nconst mapDispatchToProps = dispatch => ({\n    onGetUsers: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getUsers(conditional, 6, page)),\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Inventory)\n","/Users/ramon/Repositories/lucy-moie/src/pages/Dashboard/order-status-stats.js",["1901","1902","1903"],"import React, {useEffect, useState} from \"react\";\nimport {Card, CardBody, Col, Row, Table} from \"reactstrap\"\n\n//Simple bar\nimport SimpleBar from \"simplebar-react\"\n\n//Import Image\nimport {DEFAULT_PAGE_LIMIT} from \"../../common/pagination\";\nimport {getUsers} from \"../../store/user/actions\";\nimport {connect} from \"react-redux\";\nimport {fetchOrderStatusStatsProductsApi, fetchProductsApi} from \"../../helpers/backend_helper\";\nimport CountUp from \"react-countup\";\nimport {PERMISSIONS} from \"../../helpers/security_rol\";\nimport HasPermissions from \"../../components/HasPermissions\";\nimport {STATUS_COLORS} from \"../../components/StatusField\";\n\nconst OrderStatusStats = (props) => {\n    const {onGetUsers} = props;\n\n    const [pending, setPending] = useState(0);\n    const [confirmed, setConfirmed] = useState(0);\n    const [reconcilied, setReconcilied] = useState(0);\n    const [printed, setPrinted] = useState(0);\n    const [cancelled, setCancelled] = useState(0);\n\n    useEffect(() => {\n\n        fetchOrderStatusStatsProductsApi({}).then((p => {\n            if (p && p.data) {\n                setPending(p.data.pending);\n                setConfirmed(p.data.confirmed);\n                setReconcilied(p.data.reconcilied);\n                setPrinted(p.data.printed);\n                setCancelled(p.data.cancelled);\n            }\n        }))\n\n    }, [onGetUsers])\n\n    const renderInventario = () => {\n        return <Card>\n            <CardBody>\n                <h5>Pedidos por Estado</h5> <br />\n                <Row>\n                    <Col md={6}>\n                        <h5 className=\"mb-2 mt-1\"><b>Pendientes</b></h5>\n                        <h4>\n                            <span>\n                            <i class={`text-${STATUS_COLORS.DANGER} uil-shopping-cart-alt me-2`}></i> &nbsp; -\n                            </span>\n                        </h4>\n                    </Col>\n                    <Col md={6}>\n                        <div>\n                            <h5 className=\"mb-2 mt-1\"><b>Confirmados</b></h5>\n                            <h4>\n                                <span>\n                                <i class={`text-${STATUS_COLORS.SUCCESS} uil-shopping-cart-alt me-2`}></i> &nbsp; -\n                                </span>\n                            </h4>\n                        </div>\n                    </Col>\n                    <Col md={6}>\n                        <div>\n                            <h5 className=\"mb-2 mt-1\"><b>Conciliados</b></h5>\n                            <h4>\n                                <span>\n                                <i class={`text-${STATUS_COLORS.INFO} uil-shopping-cart-alt me-2`}></i> &nbsp; -\n                                </span>\n                            </h4>\n                        </div>\n                    </Col>\n                    <Col md={6}>\n                        <h5 className=\"mb-2 mt-1\"><b>Impresos</b></h5>\n                        <h4>\n                            <span>\n                            <i class={`text-${STATUS_COLORS.WARNING} uil-shopping-cart-alt me-2`}></i> &nbsp; -\n                            </span>\n                        </h4>\n                    </Col>\n                    <Col md={6}>\n                        <h5 className=\"mb-2 mt-1\"><b>Anulados</b></h5>\n                        <h4>\n                            <span>\n                            <i class={`text-${STATUS_COLORS.SECONDARY} uil-shopping-cart-alt me-2`}></i> &nbsp; -\n                            </span>\n                        </h4>\n                    </Col>\n                </Row>\n            </CardBody>\n        </Card>\n    }\n\n\n    return (\n        <React.Fragment>\n            <HasPermissions permission={PERMISSIONS.DASHBOARD_ORDER_STATUS} renderNoAccess={renderInventario}>\n                <Card>\n                    <CardBody>\n                        <h5>Pedidos por Estado</h5> <br />\n                        <Row>\n                            <Col md={6}>\n                            <h5 className=\"mb-2 mt-1\"><b>Pendientes</b></h5>\n                            <h4>\n                            <span>\n                            <i class={`text-${STATUS_COLORS.DANGER} uil-shopping-cart-alt me-2`}></i> &nbsp; <CountUp end={pending} separator=\",\" prefix={''} suffix={''} decimals={0}/>\n                            </span>\n                            </h4>\n                            </Col>\n                            <Col md={6}>\n                                <div>\n                                    <h5 className=\"mb-2 mt-1\"><b>Confirmados</b></h5>\n                                    <h4>\n                                <span>\n                                <i class={`text-${STATUS_COLORS.SUCCESS} uil-shopping-cart-alt me-2`}></i> &nbsp; <CountUp end={confirmed} separator=\",\" prefix={''} suffix={''} decimals={0}/>\n                                </span>\n                                    </h4>\n                                </div>\n                            </Col>\n                            <Col md={6}>\n                            <div>\n                                <h5 className=\"mb-2 mt-1\"><b>Conciliados</b></h5>\n                                <h4>\n                                <span>\n                                <i class={`text-${STATUS_COLORS.INFO} uil-shopping-cart-alt me-2`}></i> &nbsp; <CountUp end={reconcilied} separator=\",\" prefix={''} suffix={''} decimals={0}/>\n                                </span>\n                                </h4>\n                                </div>\n                            </Col>\n                            <Col md={6}>\n                            <h5 className=\"mb-2 mt-1\"><b>Impresos</b></h5>\n                            <h4>\n                            <span>\n                            <i class={`text-${STATUS_COLORS.WARNING} uil-shopping-cart-alt me-2`}></i> &nbsp; <CountUp end={printed} separator=\",\" prefix={''} suffix={''} decimals={0}/>\n                            </span>\n                            </h4>\n                            </Col>\n                            <Col md={6}>\n                            <h5 className=\"mb-2 mt-1\"><b>Anulados</b></h5>\n                            <h4>\n                            <span>\n                            <i class={`text-${STATUS_COLORS.SECONDARY} uil-shopping-cart-alt me-2`}></i> &nbsp; <CountUp end={cancelled} separator=\",\" prefix={''} suffix={''} decimals={0}/>\n                            </span>\n                            </h4>\n                            </Col>\n                        </Row>\n\n                    </CardBody>\n                </Card>\n            </HasPermissions>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {users, loading, meta, refresh} = state.User\n    return {users, loading, meta, refresh}\n}\nconst mapDispatchToProps = dispatch => ({\n    onGetUsers: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getUsers(conditional, 6, page)),\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(OrderStatusStats)\n","/Users/ramon/Repositories/lucy-moie/src/pages/Stats/SalesByStatus.js",["1904","1905","1906","1907","1908","1909","1910","1911"],"import React, {useEffect, useState} from \"react\"\nimport {CardBody, Col, Label, Row} from \"reactstrap\"\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {DATE_FORMAT, formatDate, priceFormat} from \"../../common/utils\";\nimport {ORDER_STATUS, ORDER_STATUS_LIST, ORDERS_ENUM, REPORT_TYPES, showByList} from \"../../common/constants\";\nimport {generateReport} from \"../../store/reports/actions\";\nimport {statsApi} from \"../../helpers/backend_helper\";\n\nimport Highcharts from 'highcharts'\nimport {FieldDate, FieldSelect} from \"../../components/Fields\";\nimport {DATE_MODES} from \"../../components/Fields/InputDate\";\nimport {DEFAULT_PAGE_LIMIT} from \"../../common/pagination\";\nimport {getUsers} from \"../../store/user/actions\";\nimport {getEmptyOptions} from \"../../common/converters\";\nimport HighChartsWrapper from \"../../components/Common/HishChartsWrapper\";\nimport {AvForm} from \"availity-reactstrap-validation\";\nimport {Card} from \"@material-ui/core\";\n\nconst hoy = new Date();\nconst defaultDates = [new Date(hoy.getTime() - 518400000), new Date()];\nconst initialState = {\n    cargando: '',\n    usuarios: [],\n    ventasStatusTotal: {\n        data: {\n            title: {\n                text: 'Ventas'\n            },\n            subtitle: {\n                text: null\n            },\n            xAxis: {\n                categories: []\n            },\n            yAxis: [\n                {\n                    labels: {\n                        format: '$ {value}'\n                    },\n                    title: {\n                        text: 'Monto'\n                    }\n                },\n                {\n                    labels: {\n                        format: '{value} Pz.'\n                    },\n                    title: {\n                        text: ''\n                    },\n                    opposite: false\n                }],\n            series: [\n                {\n                    name: 'Pendiente ($)',\n                    data: []\n                },\n                {\n                    name: 'Cofirmado ($)',\n                    data: []\n                },\n                {\n                    name: 'Enviado ($)',\n                    data: []\n                },\n                {\n                    name: 'Finalizado ($)',\n                    data: []\n                },\n                {\n                    name: 'Cancelado ($)',\n                    data: []\n                }\n            ],\n            tooltip: {\n                formatter: function() {\n                    var dataSum = 0;\n                    const each = Highcharts.each;\n\n                    var xPosition = this.point.x;\n                    each(this.series.chart.series, function(item, i){\n                        dataSum+= item['processedYData'][xPosition]\n                    })\n\n                    var pcnt = (this.y / dataSum) * 100;\n\n                    let html = '<div><div><p><b>-- '+this.series.name+'</b><br/><b>Porcentaje: </b>' + Highcharts.numberFormat(pcnt) + '%' + '</p></div><br />';\n                    html += '<div><p><b>Monto: </b> ' + priceFormat(this.y) + ' COP</p></div></div>';\n\n                    return html;\n                },\n                shared: false\n            }\n        },\n        opciones: {\n            usuario: '',\n            grupo: 'dia'\n        },\n        fecha: {\n            inicial: new Date(hoy.getTime() - 518400000),\n            final: new Date(hoy.getTime())\n        },\n    }\n}\n\nconst SalesByStatus = ({users, onGetUsers, className}) => {\n\n    const [stats, setStats] = useState(initialState);\n    const [userList, setUserList] = useState([]);\n\n    useEffect(() => {\n        if (onGetUsers) {\n            onGetUsers(null, 250);\n        }\n    }, [onGetUsers]);\n\n    useEffect(() => {\n        if (stats.ventasStatusTotal) {\n            cargarVentas()\n        }\n    }, [stats.ventasStatusTotal.fecha]);\n\n    useEffect(() => {\n        if (stats.ventasStatusTotal) {\n            cargarVentas()\n        }\n    }, [stats.ventasStatusTotal.opciones]);\n\n    useEffect(() => {\n        if (users) {\n            const options = users.map((user) => ({label: user.name, value: user.id}))\n            setStats({...stats, usuarios: [getEmptyOptions(), ...options]});\n            const addedUsers = users.filter(user => !!user.status).map(user => ({label: user.username, value: user.id}));\n            addedUsers.unshift({value: null, label: \"Todos\"});\n            setUserList(addedUsers);\n        }\n    }, [users]);\n\n    const getStatsLabel = (stats, node) => {\n        if(parserClientDate(stats[node].fecha.inicial) == parserClientDate(stats[node].fecha.final)){\n            return parserClientDate(stats[node].fecha.inicial);\n        }\n        else {\n            return parserClientDate(stats[node].fecha.inicial) + ' a ' + parserClientDate(stats[node].fecha.final)\n        }\n    }\n\n    const cargarVentas = () => {\n        if (valida(stats.ventasStatusTotal.fecha)) {\n            stats.cargando = 'Cargando estadisticas de ventas...';\n            //definir la url para la consulta a la API\n            var url = '/stats/estadistica_ventas/states';\n            url += '/' + parserServerDate(stats.ventasStatusTotal.fecha.inicial);\n            url += '/' + parserServerDate(stats.ventasStatusTotal.fecha.final);\n            url += '/' + stats.ventasStatusTotal.opciones.grupo;\n            url += '/' + stats.ventasStatusTotal.opciones.usuario;\n            //leer estadisticas de ventas\n            statsApi(url).then((resp) => {\n                console.log('response: ', resp);\n                var fechas = [];\n\n\n                var datosPendientes = [];\n                var datosConfirmadas = [];\n                var datosEnviadas = [];\n                var datosFinalizadas = [];\n                var datosCanceladas = [];\n\n                var keys = Object.keys(resp);\n\n                for (var i = 0; i < keys.length; i++) {\n                    var data = resp[keys[i]];\n                    fechas[i] = data.fecha;\n                    datosPendientes[i] = parseFloat(data[ORDERS_ENUM.PENDING]);\n                    datosConfirmadas[i] = parseFloat(data[ORDERS_ENUM.CONFIRMED]);\n                    datosEnviadas[i] = parseFloat(data[ORDERS_ENUM.SENT]);\n                    datosFinalizadas[i] = parseFloat(data[ORDERS_ENUM.FINISHED]);\n                    datosCanceladas[i] = parseFloat(data[ORDERS_ENUM.ANULED]);\n\n                }\n                const newStats = {...stats};\n                newStats.ventasStatusTotal.data.subtitle.text = getStatsLabel(newStats,'ventasStatusTotal');\n                newStats.ventasStatusTotal.data.xAxis.categories = fechas;\n                newStats.ventasStatusTotal.data.series[0].data = datosPendientes;\n                newStats.ventasStatusTotal.data.series[1].data = datosConfirmadas;\n                newStats.ventasStatusTotal.data.series[2].data = datosEnviadas;\n                newStats.ventasStatusTotal.data.series[3].data = datosFinalizadas;\n                newStats.ventasStatusTotal.data.series[4].data = datosCanceladas;\n                newStats.cargando = '';\n                setStats(newStats);\n            })\n        }\n    }\n\n    const parserServerDate = (date) => {\n        return formatDate(date, DATE_FORMAT.ONLY_DATE);\n    }\n\n    const valida = (node) => {\n        if (!node) return;\n        let v = false;\n        if (node.inicial && node.final && (node.inicial <= node.final)) {\n            v = true;\n        } else if (node.inicial || node.final){\n            v = true;\n        }\n        return v;\n    }\n\n    const parserClientDate = (date) => {\n        return formatDate(date, DATE_FORMAT.DD_MM_YYYY);\n    }\n\n    const onChangeDate = (dates, node) => {\n        if (dates.length > 0) {\n            const s = {...stats}\n            if ((dates.length === 1) || (dates[0].toString() == dates[1].toString())) {\n                s[node] = {...stats[node], fecha: {...stats[node].fecha, inicial: dates[0], final: dates[0]}};\n            } else {\n                s[node] = {...stats[node], fecha: {...stats[node].fecha, inicial: dates[0], final: dates[1]}};\n            }\n            setStats(s);\n        }\n    }\n\n    const onChangeUser = (user, node) => {\n        const s = {...stats}\n        s[node] = {...stats[node], opciones: {...stats[node].opciones, usuario: user.value || null}}\n        setStats(s);\n    }\n\n    const onChangeGrupo = (grupo, node) => {\n        if (grupo && grupo.value) {\n            const s = {...stats}\n            s[node] = {...stats[node], opciones: {...stats[node].opciones, grupo: grupo.value}}\n            setStats(s);\n        }\n    }\n\n    return (\n        <AvForm className=\"needs-validation\" autoComplete=\"off\">\n        <Card className={className}>\n        <CardBody>\n            <Row id=\"ventasStatusTotal\">\n                <Col md={12}>\n                    <h4 className=\"card-title text-info\"> Total de ventas por Estado</h4>\n                </Col>\n                <Col md={4}>\n                    <div className=\"mb-3\">\n                        <Label>Fecha</Label>\n                        <FieldDate\n                            name=\"ventas_total_dates\"\n                            mode={DATE_MODES.RANGE}\n                            defaultValue={defaultDates}\n                            onChange={(dates) => onChangeDate(dates, \"ventasStatusTotal\")}\n                        />\n                    </div>\n                </Col>\n                <Col md={4}>\n                    <div className=\"mb-3\">\n                        <Label>Mostrar por</Label>\n                        <FieldSelect\n                            name=\"ventas_total_grupo\"\n                            options={showByList}\n                            defaultValue={showByList.length > 0 ? showByList[0] : null}\n                            onChange={(data) => onChangeGrupo(data, \"ventasStatusTotal\")}\n                        />\n                    </div>\n                </Col>\n                <Col md={4}>\n                    <div className=\"mb-3\">\n                        <Label>Usuarios</Label>\n                        <FieldSelect\n                            name=\"ventas_total_users\"\n                            options={userList}\n                            defaultValue={stats.usuarios.length > 0 ? stats.usuarios[0] : null}\n                            onChange={(data) => onChangeUser(data, \"ventasStatusTotal\")}\n                        />\n                    </div>\n                </Col>\n                <Col md={12}>\n                    <HighChartsWrapper options={stats.ventasStatusTotal.data}/>\n                </Col>\n            </Row>\n        </CardBody>\n        </Card>\n        </AvForm>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {users} = state.User\n    return {users}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGenerateReport: (data) => dispatch(generateReport(REPORT_TYPES.CONCILIATION, data)),\n    onGetUsers: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getUsers(conditional, limit, page)),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(SalesByStatus)\n)\n\nSalesByStatus.propTypes = {\n    error: PropTypes.any,\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/Stats/SalesByShipments.js",["1912","1913","1914","1915","1916","1917","1918","1919","1920","1921","1922","1923"],"import React, {useEffect, useState} from \"react\"\nimport {CardBody, Col, Label, Row} from \"reactstrap\"\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {DATE_FORMAT, formatDate, priceFormat} from \"../../common/utils\";\nimport {ORDER_STATUS, ORDER_STATUS_LIST, ORDERS_ENUM, REPORT_TYPES, showByList} from \"../../common/constants\";\nimport {generateReport} from \"../../store/reports/actions\";\nimport {statsApi} from \"../../helpers/backend_helper\";\n\nimport Highcharts from 'highcharts'\nimport {FieldDate, FieldSelect} from \"../../components/Fields\";\nimport {DATE_MODES} from \"../../components/Fields/InputDate\";\nimport {DEFAULT_PAGE_LIMIT} from \"../../common/pagination\";\nimport {getUsers} from \"../../store/user/actions\";\nimport {getEmptyOptions} from \"../../common/converters\";\nimport HighChartsWrapper from \"../../components/Common/HishChartsWrapper\";\nimport {AvForm} from \"availity-reactstrap-validation\";\nimport {Card} from \"@material-ui/core\";\n\nconst hoy = new Date();\nconst defaultDates = [new Date(hoy.getTime() - 518400000), new Date()];\n\nconst SalesByShipments = ({users, onGetUsers, className}) => {\n\n    const initialState = {\n        cargando: '',\n        usuarios: [],\n        ventasEnvios: {\n            data: {\n                title: {\n                    text: 'Ventas envios Total'\n                },\n                subtitle: {\n                    text: null\n                },\n                tooltip: {\n                    formatter: function() {\n\n                        var color = this.color;\n                        var name = this.series.name;\n\n\n                        var xPosition = this.point.x;\n                        const montoEnvio = this.series.chart.series[2]['yData'][xPosition];\n\n                        var hasCosto = name.includes('Con Costo');\n                        var monto = hasCosto ? this.y + ' ('+priceFormat(montoEnvio)+' COP)' : this.y + ' (0 COP)';\n\n                        let html = '<div><div><small>'+ this.point.category +'</small><br/><p><i style=\"color: '+color+'\" class=\"uil-money-bill me-2\"></i> '+this.series.name+' : <b>' + monto + '</b></p></div><br /></div>';\n\n                        return html;\n                    },\n                    shared: false\n                },\n                xAxis: {\n                    crosshair: true,\n                    categories: []\n                },\n                yAxis: [{\n                    labels: {\n                        format: '$ {value}'\n                    },\n                    formatter: function(val) {\n                        console.log('value test: ', val);\n                        return val\n                    },\n                    title: {\n                        text: 'Monto'\n                    }\n                }, {\n                    labels: {\n                        format: '{value}'\n                    },\n                    title: {\n                        text: 'Pedidos'\n                    },\n                    opposite: true\n                }],\n                series: [\n                    {\n                        name: 'Con Costo de Envio (Cantidad)',\n                        yAxis: 1,\n                        color: '#434348',\n                        data: []\n                    },\n                    {\n                        name: 'Sin Costo de Envio (Cantidad)',\n                        yAxis: 1,\n                        color: '#7CB5EC',\n                        data: []\n                    },\n                    {\n                        name: 'Monto de Envio',\n                        yAxis: 1,\n                        color: '#7CB5EC',\n                        data: [],\n                        visible: false\n                    }\n                ],\n            },\n            opciones: {\n                grupo: 'dia'\n            },\n            fecha: {\n                inicial: new Date(hoy.getTime() - 518400000),\n                final: new Date(hoy.getTime()),\n            }\n        },\n    }\n\n    const [stats, setStats] = useState(initialState);\n    const [userList, setUserList] = useState([]);\n    const [result, setResult] = useState([]);\n\n    useEffect(() => {\n        if (onGetUsers) {\n            onGetUsers(null, 250);\n        }\n    }, [onGetUsers]);\n\n    useEffect(() => {\n        if (stats.ventasEnvios) {\n            ventasEnviosCargar()\n        }\n    }, [stats.ventasEnvios.fecha]);\n\n    useEffect(() => {\n        if (stats.ventasEnvios) {\n            ventasEnviosCargar()\n        }\n    }, [stats.ventasEnvios.opciones]);\n\n    const getStatsLabel = (stats, node) => {\n        if(parserClientDate(stats[node].fecha.inicial) == parserClientDate(stats[node].fecha.final)){\n            return parserClientDate(stats[node].fecha.inicial);\n        }\n        else {\n            return parserClientDate(stats[node].fecha.inicial) + ' a ' + parserClientDate(stats[node].fecha.final)\n        }\n    }\n\n    const ventasEnviosCargar = () => {\n        if (valida(stats.ventasEnvios.fecha)) {\n            stats.cargando = 'Cargando estadisticas de ventas...';\n            //definir la url para la consulta a la API\n            var url = '/stats/estadistica_envios';\n            url += '/' + parserServerDate(stats.ventasEnvios.fecha.inicial);\n            url += '/' + parserServerDate(stats.ventasEnvios.fecha.final);\n            url += '/' + stats.ventasEnvios.opciones.grupo;\n            //leer estadisticas de ventas\n            statsApi(url).then(function (resp) {\n                setResult(resp);\n                var fechas = [];\n                var cantidadEnvios = [];\n                var cantidadNoEnvios = [];\n                var montoEnvios = [];\n                var keys = Object.keys(resp);\n                for (var i = 0; i < keys.length; i++) {\n                    var data = resp[keys[i]];\n                    fechas[i] = data.fecha;\n                    cantidadEnvios[i] = parseFloat(data.deliveryQty);\n                    cantidadNoEnvios[i] = parseFloat(data.deliveryZeroQty);\n                    montoEnvios[i] = parseFloat(data.deliveryCosts);\n                }\n                const newStats = {...stats};\n                newStats.ventasEnvios.data.subtitle.text = getStatsLabel(newStats,'ventasEnvios');\n                newStats.ventasEnvios.data.xAxis.categories = fechas;\n                newStats.ventasEnvios.data.series[0].data = cantidadEnvios;\n                newStats.ventasEnvios.data.series[1].data = cantidadNoEnvios;\n                newStats.ventasEnvios.data.series[2].data = montoEnvios;\n                newStats.cargando = '';\n                setStats(newStats);\n            })\n        }\n    }\n\n    const parserServerDate = (date) => {\n        return formatDate(date, DATE_FORMAT.ONLY_DATE);\n    }\n\n    const valida = (node) => {\n        if (!node) return;\n        let v = false;\n        if (node.inicial && node.final && (node.inicial <= node.final)) {\n            v = true;\n        } else if (node.inicial || node.final){\n            v = true;\n        }\n        return v;\n    }\n\n    const parserClientDate = (date) => {\n        return formatDate(date, DATE_FORMAT.DD_MM_YYYY);\n    }\n\n    const onChangeDate = (dates, node) => {\n        if (dates.length > 0) {\n            const s = {...stats}\n            if ((dates.length === 1) || (dates[0].toString() == dates[1].toString())) {\n                s[node] = {...stats[node], fecha: {...stats[node].fecha, inicial: dates[0], final: dates[0]}};\n            } else {\n                s[node] = {...stats[node], fecha: {...stats[node].fecha, inicial: dates[0], final: dates[1]}};\n            }\n            setStats(s);\n            console.log(s);\n        }\n    }\n\n    const onChangeGrupo = (grupo, node) => {\n        if (grupo && grupo.value) {\n            const s = {...stats}\n            s[node] = {...stats[node], opciones: {...stats[node].opciones, grupo: grupo.value}}\n            setStats(s);\n        }\n    }\n\n    return (\n        <AvForm className=\"needs-validation\" autoComplete=\"off\">\n            <Card className={className}>\n                <CardBody>\n                    <Row id=\"ventasEnvios\">\n                        <Col md={12}>\n                            <h4 className=\"card-title text-info\"> Ventas por tipo</h4>\n                        </Col>\n                        <Col md={4}>\n                            <div className=\"mb-3\">\n                                <Label>Fecha</Label>\n                                <FieldDate\n                                    name=\"ventasEnvios_dates\"\n                                    mode={DATE_MODES.RANGE}\n                                    defaultValue={defaultDates}\n                                    onChange={(dates) => onChangeDate(dates, \"ventasEnvios\")}\n                                />\n                            </div>\n                        </Col>\n                        <Col md={4}>\n                            <div className=\"mb-3\">\n                                <Label>Mostrar por</Label>\n                                <FieldSelect\n                                    name=\"ventasEnvios_grupo\"\n                                    options={showByList}\n                                    defaultValue={showByList.length > 0 ? showByList[0] : null}\n                                    onChange={(data) => onChangeGrupo(data, \"ventasEnvios\")}\n                                />\n                            </div>\n                        </Col>\n                        <Col md={12}>\n                            <HighChartsWrapper options={stats.ventasEnvios.data}/>\n                        </Col>\n                    </Row>\n                </CardBody>\n            </Card>\n        </AvForm>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {users} = state.User\n    return {users}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGenerateReport: (data) => dispatch(generateReport(REPORT_TYPES.CONCILIATION, data)),\n    onGetUsers: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getUsers(conditional, limit, page)),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(SalesByShipments)\n)\n\nSalesByShipments.propTypes = {\n    error: PropTypes.any,\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/components/Common/HiddenPhone.js",["1924"],"import React from \"react\"\nimport HasPermissions from \"../HasPermissions\";\nimport {PERMISSIONS} from \"../../helpers/security_rol\";\nimport {hiddenPhone} from \"../../common/utils\";\n\nexport const HiddenPhone = props => {\n    return (\n        <HasPermissions permission={PERMISSIONS.CUSTOMER_PHONE}\n                        renderNoAccess={<span>** ** ** {props && props.phone}</span>}>\n            {props && props.phone}\n        </HasPermissions>\n    )\n}\n","/Users/ramon/Repositories/lucy-moie/src/pages/VCard/index.js",["1925"],"import React, {useEffect, useState} from \"react\"\nimport {CardBody, Col, Container, Label, Row} from \"reactstrap\"\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport Breadcrumb from \"../../components/Common/Breadcrumb\";\nimport {PERMISSIONS} from \"../../helpers/security_rol\";\nimport NoAccess from \"../../components/Common/NoAccess\";\nimport HasPermissions from \"../../components/HasPermissions\";\nimport {AvForm} from \"availity-reactstrap-validation\";\nimport {FieldDate, FieldText} from \"../../components/Fields\";\nimport {Card} from \"@material-ui/core\";\nimport {DATE_MODES} from \"../../components/Fields/InputDate\";\nimport {hiddenPhone} from \"../../common/utils\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\nimport {showMessage} from \"../../components/MessageToast/ShowToastMessages\";\nimport {registerVCard} from \"../../store/customer/actions\";\nimport {\n    deleteallDataApi,\n    fileVCardContacts\n} from \"../../helpers/backend_helper\";\nimport moment from \"moment\";\nimport {ConfirmationModalAction} from \"../../components/Modal/ConfirmationModal\";\nimport * as url from \"../../helpers/url_helper\";\n\nconst VCard = (props) => {\n\n    const {onGetOrder, refresh, order, onCreateVCard} = props;\n\n    const [list, setList] = useState([]);\n    const [text, setText] = useState(\"\");\n\n    useEffect(() => {\n        if (props.match.params.id) {\n            onGetOrder(props.match.params.id);\n        }\n    }, [onGetOrder, refresh]);\n\n    const downloadContact = () => fileVCardContacts(moment().format('YYYY-MM-DD') + '.vcf').then(function(){\n        setTimeout(function () {\n\n            ConfirmationModalAction({\n                title: '¿Pudo descargar correctamente?',\n                description: 'Si logro descargar, confirme para borrar los registros ya descargados.',\n                id: '_clienteModal',\n                onConfirm: deleteHandler\n            });\n\n        }, 2000);\n    });\n\n    const deleteHandler = () => {\n        deleteallDataApi(url.VCARD + '/c/clearVCard').then(resp => {\n            console.log('deleted', resp);\n        })\n    }\n\n    const handleValidSubmit = (event, values) => {\n\n        if(!values.initial || !values.createdAt[0] || list.length <= 0){\n            return;\n        }\n\n        const payload = {\n            initial: values.initial,\n            date: values.createdAt[0],\n            phones: list\n        };\n\n        onCreateVCard(payload);\n\n        setList([]);\n        setText(\"\");\n    }\n\n    const addNumber = () => {\n        const numbers = text.replace(/\\s+/g, ' ').split(' ');\n        console.log('numbers: ', numbers);\n\n        const duplicated = hasDuplicates(numbers, list);\n\n        if(!duplicated) {\n            const numbersRegistered = [...list, ...numbers];\n            setList(numbersRegistered);\n            setText('');\n\n        } else {\n            showMessage.error(\"Contiene numero duplicados en la lista actual\");\n        }\n\n    }\n\n    function hasDuplicates(phones1, phones2) {\n        const seenNumbers = {};\n\n        // Check duplicates in the first array\n        for (let i = 0; i < phones1.length; i++) {\n            const number = phones1[i];\n            seenNumbers[number] = (seenNumbers[number] || 0) + 1;\n        }\n\n        // Check duplicates in the second array\n        for (let i = 0; i < phones2.length; i++) {\n            const number = phones2[i];\n\n            // If the number is in the object and has not been fully processed, it's a duplicate\n            if (seenNumbers[number] && seenNumbers[number] > 0) {\n                return true;\n            }\n        }\n\n        // No duplicates found\n        return false;\n    }\n\n    const renderPhones = () => {\n        if (list && list.length > 0) {\n            return list.map(item => (\n                <div>\n                    <p class=\"list-group-item\"><i className=\"uil uil-phone\"></i> {hiddenPhone(item)}</p>\n                </div>\n            ))\n        }\n        return <div></div>;\n    }\n\n    function changeText(e){\n        console.log('value to change: ', e.target.value);\n        setText(e.target.value);\n    }\n\n    return (\n        <React.Fragment>\n            <div className=\"page-content\">\n\n                <Container fluid>\n                    <Breadcrumb hasBack={false} path=\"/\" title={order.name} item={`VCard`}/>\n                    <HasPermissions permissions={[PERMISSIONS.VCARD_EXPORT]} renderNoAccess={() => <></>}>\n                    <div className=\"mb-3\">\n                        <button onClick={downloadContact} className=\"btn btn-primary\"><i className=\"uil uil-file-export\"></i> Descargar</button>\n                    </div>\n                    </HasPermissions>\n                    <HasPermissions permissions={[PERMISSIONS.VCARD_MANAGE]} renderNoAccess={() => <NoAccess/>}>\n                        <Row className=\"mb-2\">\n                                    <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => handleValidSubmit(e, v)}>\n\n                                        <Card>\n                                            <CardBody>\n                                                <Row>\n                                                    <Col md={6}>\n                                                        <div className=\"mb-3\">\n                                                            <Label htmlFor=\"resolutionDate\">Numeros de Teléfonos</Label>\n                                                            <FieldText\n                                                                value={text}\n                                                                rows={10}\n                                                                type=\"textarea\"\n                                                                id='numbers'\n                                                                name={\"numbers\"}\n                                                                minLength={1}\n                                                                onChange={changeText}\n                                                                />\n                                                        </div>\n                                                    </Col>\n                                                    <Col md={12}>\n                                                        <button onClick={addNumber} type=\"button\" color=\"primary\" className=\" btn-sm btn btn-outline-info waves-effect waves-light\">\n                                                            Agregar <i className={`uil-plus me-2`}> </i>\n                                                        </button>\n                                                    </Col>\n                                                </Row>\n                                                <Row className=\"mt-3\">\n                                                    <Col md={6}>\n                                                        <div className=\"mb-3\">\n                                                            <Label htmlFor=\"resolutionDate\">Lista de Teléfonos</Label>\n                                                            {renderPhones()}\n                                                        </div>\n                                                    </Col>\n                                                </Row>\n                                            </CardBody>\n                                        </Card>\n                                        <hr />\n\n\n                                        <Card>\n                                        <CardBody>\n                                            <Row>\n                                            <Col md={6}>\n                                                <div className=\"mb-3\">\n                                                    <Label htmlFor=\"createdAt\">Fecha de Creación</Label>\n                                                <FieldDate\n                                                    name={\"createdAt\"}\n                                                    mode={DATE_MODES.SINGLE}\n                                                />\n                                                </div>\n                                            </Col>\n                                            <Col md={6}>\n                                                <div className=\"mb-3\">\n                                                    <Label htmlFor=\"initial\">Inicio</Label>\n                                                    <FieldText\n                                                        id='initial'\n                                                        name={\"initial\"}\n                                                        minLength={1}\n                                                        maxLength={1000000}\n                                                        required/>\n                                                </div>\n                                            </Col>\n                                            </Row>\n                                            <Row><br />\n                                                <Col md={12} className=\"text-right\">\n                                                    <ButtonSubmit disabled={list.length <= 0} name=\"Registrar\" loading={props.loading}/>\n                                                </Col>\n                                            </Row>\n                                        </CardBody>\n                                        </Card>\n\n                                    </AvForm>\n\n                        </Row>\n                    </HasPermissions>\n                </Container>\n            </div>\n        </React.Fragment>);\n}\n\nconst mapStateToProps = state => {\n    const {error, order, refresh, loading} = state.Order;\n    return {error, order, refresh, loading}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onCreateVCard: (payload) => dispatch(registerVCard(payload))\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(VCard)\n)\n\nVCard.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n","/Users/ramon/Repositories/lucy-moie/src/pages/Security/SecurityAuthorizations.js",["1926","1927"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from \"prop-types\"\nimport {connect} from \"react-redux\"\nimport {Card, CardBody, Col, Row} from \"reactstrap\"\nimport {map} from \"lodash\";\nimport {AvForm} from \"availity-reactstrap-validation\";\nimport {deleteDataApi, fetchDataApi, registerDataApi, updateDataApi} from \"../../helpers/backend_helper\";\nimport * as url from \"../../helpers/url_helper\";\nimport {ConfirmationModalAction} from \"../../components/Modal/ConfirmationModal\";\nimport {Tooltip} from \"@material-ui/core\";\n\nconst SecurityAuthorizations = (props) => {\n\n    const [authorizations, setAuthorizations] = useState([]);\n    const [permissionEdited, setPermissionEdited] = useState(null);\n\n    useEffect(() => {\n        getAuthorizations();\n    }, [setAuthorizations]);\n\n    const getAuthorizations = () => {\n        fetchDataApi(url.SECURITY_AUTHORIZATIONS).then(resp => {\n            setAuthorizations(sort(resp.data, 'id'));\n        });\n    };\n\n    const sort = (data, fieldName) => {\n        return (data || []).sort((a, b) => a[fieldName] === b[fieldName] ? 0 : (a[fieldName] > b[fieldName]) ? 1 : -1)\n    };\n\n    const onAdd = () => {\n        setPermissionEdited(null);\n        const list = [...authorizations];\n        list.unshift({id: null, name: ''});\n        setAuthorizations(list);\n    };\n\n    const onDelete = (id) => {\n\n        const func = deleteDataApi(url.SECURITY_AUTHORIZATIONS, id);\n        func.then(resp => {\n            if (resp.status === 200) {\n                getAuthorizations();\n            }\n            getAuthorizations(null)\n        })\n\n    };\n\n    const onSave = (ev, data) => {\n        let payload = {permission: data.permission, description: data.description};\n\n        let func;\n        if (permissionEdited) {\n            func = updateDataApi(url.SECURITY_PERMISSIONS, permissionEdited, payload);\n        } else {\n            func = registerDataApi(url.SECURITY_PERMISSIONS, payload);\n        }\n\n        func.then(resp => {\n            if (resp.status === 200) {\n                getAuthorizations();\n            }\n            getAuthorizations(null)\n        })\n    };\n\n    const onChange = (id, status, alias) => {\n        let payload = {id: id, status: status, alias};\n        const func = updateDataApi(url.SECURITY_AUTHORIZATIONS, id, payload);\n\n        func.then(resp => {\n            if (resp.status === 200) {\n                getAuthorizations();\n            }\n        })\n    };\n\n    const openChangeAlias = (id,status) => {\n        ConfirmationModalAction({\n            title: `Agregue el nuevo valor para el Alias`,\n            description: 'Esta acción no puede revertirse.',\n            input: true,\n            id: '_alias',\n            onConfirm: (alias) => onChange(id, status, alias)\n        });\n    }\n\n    return (\n        <Row>\n            <Col md={12}>\n                <Card>\n                    <CardBody>\n                        <Row className=\"mb-3\">\n                            <Col sm={12}>\n                                <button size=\"small\" type=\"button\" className=\"btn btn-sm text-primary float-md-end\" onClick={() => onAdd()}>\n                                    <i className=\"uil uil-plus font-size-18\"> </i> Agregar\n                                </button>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col>\n                                <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => onSave(e, v)}>\n                                    <table className=\"table table-bordered table-condensed\">\n                                        <thead>\n                                        <tr>\n                                            <th style={{width: '30%'}}>#</th>\n                                            <th style={{width: '30%'}}>Fecha</th>\n                                            <th style={{width: '30%'}}>Autorizacion</th>\n                                            <th style={{width: '55%'}}>Alias</th>\n                                            <th style={{width: '15%'}}>Estado</th>\n                                        </tr>\n                                        </thead>\n                                        <tbody>\n                                        {map(authorizations, (permission, key) => (\n                                            <tr key={key}>\n                                                <td>\n                                                    {permission.id}\n                                                </td>\n                                                <td>\n                                                    {permission.createdAt}\n                                                </td>\n                                                <td>\n                                                    {permission.device}\n                                                </td>\n                                                <td>\n                                                    {permission.alias ? permission.alias : <button type=\"button\" color=\"primary\" className=\"btn-sm btn btn-outline-info waves-effect waves-light\" onClick={() => openChangeAlias(permission.id, permission.status)}>\n                                                        Modificar Alias\n                                                    </button>}\n                                                </td>\n                                                <td>\n                                                    <ul className=\"list-inline font-size-20 contact-links mb-0\">\n                                                        <li className=\"list-inline-item\">\n                                                            <div className=\"btn-group\">\n                                                                <div className=\"btn-group\">\n                                                                    {permission.status == false ? (\n                                                                        <Tooltip placement=\"bottom\" title=\"Modificar Alias\" aria-label=\"modify\">\n                                                                            <button type=\"button\" size=\"small\"\n                                                                                    className=\"btn btn-sm text-primary\"\n                                                                                    onClick={() => onChange(permission.id, true, permission.alias)}>\n                                                                                <i className=\"uil uil-check font-size-18\"> </i>\n                                                                            </button>\n                                                                        </Tooltip>\n                                                                        ) :\n                                                                        (\n                                                                            <Tooltip placement=\"bottom\" title=\"Desactivar\" aria-label=\"add\">\n                                                                            <button type=\"button\" size=\"small\"\n                                                                                    className=\"btn btn-sm text-primary\"\n                                                                                    onClick={() => onChange(permission.id, false, permission.alias)}>\n                                                                                <i className=\"uil uil-lock font-size-18\"> </i>\n                                                                            </button>\n                                                                            </Tooltip>\n                                                                        )}\n                                                                        <Tooltip placement=\"bottom\" title=\"Eliminar\" aria-label=\"delete\">\n                                                                        <button type=\"button\" size=\"small\"\n                                                                                className=\"btn btn-sm text-primary\"\n                                                                                onClick={() => onDelete(permission.id, false, permission.alias)}>\n                                                                            <i className=\"uil uil-trash font-size-18\"> </i>\n                                                                        </button>\n                                                                        </Tooltip>\n                                                                </div>\n                                                            </div>\n                                                        </li>\n                                                    </ul>\n                                                </td>\n                                            </tr>\n                                        ))}\n                                        </tbody>\n                                    </table>\n                                </AvForm>\n                            </Col>\n                        </Row>\n                    </CardBody>\n                </Card>\n            </Col>\n        </Row>\n    )\n}\n\nSecurityAuthorizations.propTypes = {\n    onChange: PropTypes.func\n}\n\nconst mapStateToProps = state => {\n    return {}\n}\n\nconst mapDispatchToProps = dispatch => ({})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(SecurityAuthorizations)\n","/Users/ramon/Repositories/lucy-moie/src/store/items/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/items/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/items/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/items/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Items/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Items/list/itemsList.js",["1928","1929","1930","1931","1932","1933","1934","1935","1936"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from \"prop-types\"\nimport {connect} from \"react-redux\"\nimport {Card, CardBody, Col, Row} from \"reactstrap\"\nimport paginationFactory, {PaginationListStandalone, PaginationProvider,} from \"react-bootstrap-table2-paginator\"\nimport ToolkitProvider, {Search} from \"react-bootstrap-table2-toolkit\"\nimport BootstrapTable from \"react-bootstrap-table-next\"\n\nimport {Link} from \"react-router-dom\"\nimport {Button, Tooltip} from \"@material-ui/core\";\nimport {DEFAULT_PAGE_LIMIT} from \"../../../common/pagination\";\nimport {getItems, resetItem} from \"../../../store/items/actions\";\nimport itemsColumns from \"./itemsColumn\";\nimport {TableFilter} from \"../../../components/TableFilter\";\nimport {normalizeColumnsList} from \"../../../common/converters\";\nimport NoDataIndication from \"../../../components/Common/NoDataIndication\";\nimport HasPermissions from \"../../../components/HasPermissions\";\nimport {PERMISSIONS} from \"../../../helpers/security_rol\";\nimport NoAccess from \"../../../components/Common/NoAccess\";\nimport Conditionals from \"../../../common/conditionals\";\n\nconst ItemsList = props => {\n    const {items, meta, onGetItems, onResetitems, refresh, loading} = props;\n    const [itemsList, setWalletsList] = useState([])\n    const [filter, setFilter] = useState(false);\n    const [conditional, setConditional] = useState(null);\n    const [defaultPage, setDefaultPage] = useState(1);\n    const [type, setType] = useState(2);\n\n    const pageOptions = {\n        sizePerPage: DEFAULT_PAGE_LIMIT,\n        totalSize: meta?.totalRegisters,\n        custom: true,\n        page: defaultPage,\n        onPageChange: (page, sizePerPage) => {\n            setDefaultPage(page);\n        },\n    }\n\n    useEffect( () => {\n\n        const conditions = new Conditionals.Condition;\n        conditions.add('type', type, Conditionals.OPERATORS.EQUAL);\n        onGetItems(conditions.condition);\n\n    }, [type])\n\n    useEffect(() => {\n        if(refresh === null){\n            onResetitems();\n            onGetItems()\n        } else {\n\n            const conditions = new Conditionals.Condition;\n            conditions.add('type', type, Conditionals.OPERATORS.EQUAL);\n\n            onGetItems(conditions.condition);\n        }\n    }, [refresh, onGetItems])\n\n    useEffect(() => {\n        setWalletsList(items)\n    }, [items])\n\n    // eslint-disable-next-line no-unused-vars\n    const handleTableChange = (type, {page, searchText}) => {\n        onGetItems(conditional, DEFAULT_PAGE_LIMIT, (page - 1)*DEFAULT_PAGE_LIMIT);\n    }\n\n    const onFilterAction = (condition) => {\n        setConditional(condition);\n        onGetItems(condition, DEFAULT_PAGE_LIMIT, 0);\n        setDefaultPage(1);\n    }\n\n    const columns = itemsColumns();\n\n    return (\n        <Row>\n            <TableFilter\n                onPressDisabled={() => setFilter(false)}\n                isActive={filter}\n                fields={columns}\n                onSubmit={onFilterAction.bind(this)}/>\n\n            <Col lg={filter ? \"8\" : \"12\"}>\n                <Card>\n                    <CardBody>\n                        <div className=\"button-items mb-3\">\n                        <button onClick={() => setType(2)} className={`btn ${type == 2 ? 'btn-primary' : 'btn-secondary'}`}>Bolsas</button>\n                        <button onClick={() => setType(1)} className={`btn ${type == 1 ? 'btn-primary' : 'btn-secondary'}`}>Interrapidisimo</button>\n                        </div>\n\n                        <PaginationProvider pagination={paginationFactory(pageOptions)}>\n                            {({paginationProps, paginationTableProps}) => (\n                                <ToolkitProvider\n                                    keyField=\"id\"\n                                    data={itemsList || []}\n                                    columns={normalizeColumnsList(columns)}\n                                    bootstrap4\n                                    search\n                                >\n                                    {toolkitProps => (\n                                        <React.Fragment>\n                                            <Row className=\"row mb-2\">\n                                                <Col md={6}>\n                                                    <div className=\"form-inline mb-3\">\n                                                        <div className=\"search-box ms-2\">\n                                                            <h4 className=\"text-info\"><i className=\"uil-shopping-cart-alt me-2\"></i> Items</h4>\n                                                        </div>\n                                                    </div>\n                                                </Col>\n                                                <Col md={6}>\n                                                    <div className=\"mb-3 float-md-end\">\n                                                        {/*{columns.some(s => s.filter) && (\n                                                            <Tooltip placement=\"bottom\" title=\"Filtros Avanzados\" aria-label=\"add\">\n                                                                <Button onClick={() => setFilter(!filter)}>\n                                                                    <i className={\"mdi mdi-filter\"}></i>\n                                                                </Button>\n                                                            </Tooltip>\n                                                        )}*/}\n                                                        <HasPermissions permissions={[PERMISSIONS.ITEMS_CREATE]} renderNoAccess={() => <NoAccess/>}>\n                                                            <Link to={\"/item\"} className=\"btn btn-primary waves-effect waves-light text-light\">\n                                                                <i className=\"mdi mdi-plus\"></i> Nuevo registro\n                                                            </Link>\n                                                        </HasPermissions>\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col xl=\"12\">\n                                                    <div className=\"table-responsive mb-4\">\n                                                        <BootstrapTable\n                                                            remote\n                                                            responsive\n                                                            loading={loading}\n                                                            bordered={false}\n                                                            striped={true}\n                                                            classes={\n                                                                \"table table-centered table-nowrap mb-0\"\n                                                            }\n                                                            noDataIndication={() => <NoDataIndication/>}\n                                                            {...toolkitProps.baseProps}\n                                                            onTableChange={handleTableChange}\n                                                            {...paginationTableProps}\n                                                        />\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <div className=\"float-sm-start\">\n                                                <PaginationListStandalone {...paginationProps} />\n                                            </div>\n                                        </React.Fragment>\n                                    )}\n                                </ToolkitProvider>\n                            )}\n                        </PaginationProvider>\n                    </CardBody>\n                </Card>\n            </Col>\n        </Row>\n    )\n}\n\nItemsList.propTypes = {\n    items: PropTypes.array,\n    onGetItems: PropTypes.func,\n    onDeleteWallets: PropTypes.func,\n}\n\nconst mapWalletToProps = state => {\n    const {items, loading, meta, refresh} = state.Item\n    return {items, loading, meta, refresh}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onResetitems: () => {\n        dispatch(resetItem());\n    },\n    onGetItems: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getItems(conditional, limit, page))\n})\n\nexport default connect(\n    mapWalletToProps,\n    mapDispatchToProps\n)(ItemsList)\n","/Users/ramon/Repositories/lucy-moie/src/pages/Items/list/itemsColumn.js",["1937","1938"],"import React from \"react\"\nimport {Link} from \"react-router-dom\"\nimport Conditionals from \"../../../common/conditionals\";\nimport HasPermissionsFunc from \"../../../components/HasPermissionsFunc\";\nimport {PERMISSIONS} from \"../../../helpers/security_rol\";\nimport {DATE_FORMAT, formatDate, priceFormat} from \"../../../common/utils\";\n\nconst itemsColumns = (onDelete = false) => {\n    let cols = [\n        {\n            text: \"#\",\n            dataField: \"id\",\n            sort: true,\n            filter: false,\n            filterType: \"text\",\n            filterCondition: Conditionals.OPERATORS.EQUAL,\n        },\n        {\n            text: \"Fecha\",\n            dataField: \"createdAt\",\n            sort: true,\n            formatter: (cellContent, item) => (\n                <>\n                    <Link to={`/item/${item.id}`} className=\"text-body\">\n                        {formatDate(item.createdAt, DATE_FORMAT.ONLY_DATE)}\n                    </Link>\n                </>\n            ),\n            filter: false,\n            filterType: \"dateRange\",\n        },\n        {\n            text: \"Monto\",\n            dataField: \"amount\",\n            sort: false,\n            filter: false,\n            filterType: \"text\",\n            formatter: (cellContent, item) => (\n                <p className={ cellContent > 0 ? \"text-success\" : \"text-danger\" } >\n                    {item.type == 1 ? priceFormat(cellContent) : cellContent}\n                </p>\n            ),\n        },\n        {\n            text: \"Tipo\",\n            dataField: \"type\",\n            sort: true,\n            filter: true,\n            filterType: \"text\",\n            formatter: (cellContent, item) => (\n                <p className={ cellContent > 0 ? \"text-success\" : \"text-danger\" } >\n                    {item.type == 1 ? 'INTERRAPIDISIMO' : 'BOLSAS'}\n                </p>\n            ),\n        },\n    ]\n\n    if (HasPermissionsFunc([PERMISSIONS.ITEMS_EDIT])) {\n        cols.push({\n            dataField: \"menu\",\n            isDummyField: true,\n            text: \"Acción\",\n            formatter: (cellContent, item) => (\n                <ul className=\"list-inline font-size-20 contact-links mb-0\">\n                    <li className=\"list-inline-item\">\n                        <Link to={`/items/${item.id}`} className=\"px-2 text-primary\">\n                            <i className=\"uil uil-pen font-size-18\"> </i>\n                        </Link>\n                    </li>\n                </ul>\n            ),\n        })\n    }\n    return cols;\n}\n\nexport default itemsColumns;\n","/Users/ramon/Repositories/lucy-moie/src/pages/ItemEdit/index.js",["1939","1940","1941","1942","1943","1944","1945","1946","1947","1948","1949","1950","1951"],"import React, {useEffect, useState} from \"react\"\nimport {CardBody, Col, Container, Label, Row} from \"reactstrap\"\nimport {AvForm} from \"availity-reactstrap-validation\"\nimport {Card, Tooltip} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport {apiError} from \"../../store/auth/login/actions\";\nimport PropTypes from \"prop-types\";\nimport {getItem, registersItem, updateItem} from \"../../store/items/actions\";\nimport {FieldDate, FieldDecimalNumber, FieldSelect, FieldText} from \"../../components/Fields\";\nimport Breadcrumb from \"../../components/Common/Breadcrumb\";\nimport {STATUS} from \"../../common/constants\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\nimport {PERMISSIONS} from \"../../helpers/security_rol\";\nimport NoAccess from \"../../components/Common/NoAccess\";\nimport HasPermissions from \"../../components/HasPermissions\";\nimport {DATE_MODES} from \"../../components/Fields/InputDate\";\nimport {DATE_FORMAT, formatDate, priceFormat} from \"../../common/utils\";\nimport HasPermissionsFunc from \"../../components/HasPermissionsFunc\";\nimport moment from \"moment\";\nimport ButtonLoading from \"../../components/Common/ButtonLoading\";\n\nconst ItemEdit = (props) => {\n    const {getItem, item, refresh, loading} = props;\n    const [itemData, setItemData] = useState({});\n    const isEdit = props.match.params.id;\n\n    //carga inicial\n    useEffect(() => {\n        if (isEdit && getItem) {\n            getItem(props.match.params.id);\n        }\n    }, [getItem, refresh]);\n\n    //cargar la información del cliente\n    useEffect(() => {\n        if (item.id && isEdit) {\n            setItemData({...item, _status:item.status});\n        }\n    }, [item]);\n\n    const handleValidSubmit = (event, values) => {\n        if(canEdit) {\n            const data = Object.assign({}, values, {});\n            data.type = values.type?.value;\n            delete data._status;\n\n            if (!isEdit) {\n                props.registersItem(data, props.history)\n            } else {\n                props.updateItem(props.match.params.id, data, props.history)\n            }\n        }\n    }\n\n    const addDays = moment(itemData.date, \"YYYY-MM-DD\").add(4, 'days');\n    const isNotExpired = moment().isSameOrBefore(addDays);\n\n    const canEdit = ((HasPermissionsFunc([PERMISSIONS.ITEMS_EDIT])) && isEdit && isNotExpired || !isEdit) && !itemData.canceled;\n\n    //only show mode\n    const renderShowMode = <HasPermissions permissions={[PERMISSIONS.ITEMS_CREATE, PERMISSIONS.ITEMS_EDIT]} renderNoAccess={() => <NoAccess/>}>\n        <AvForm className=\"needs-validation\" autoComplete=\"off\"\n                onValidSubmit={(e, v) => {}}>\n            <Row>\n                <Col xl=\"8\">\n                    <Card>\n                        <CardBody>\n                            <Row>\n                                <Col md=\"6\">\n                                    <div className=\"mb-3\">\n                                        <Label htmlFor=\"field_type\">Tipo <span className=\"text-danger\">*</span></Label>\n                                        <FieldSelect\n                                            disabled={!canEdit}\n                                            id={\"field_type\"}\n                                            name={\"type\"}\n                                            options={[\n                                                {value: 1, label: 'CREDITO_INTERRAPIDISIMO'},\n                                                {value: 2, label: 'BOLSAS'}\n                                            ]}\n                                            defaultValue={itemData.type || 1}\n                                            required\n                                        />\n                                    </div>\n                                </Col>\n                                <Col md=\"6\">\n                                    <div className=\"mb-3\">\n                                        <Label htmlFor=\"field_amount\">Monto <span className=\"text-danger\">*</span></Label>\n                                        <FieldText\n                                            disabled\n                                            id={\"field_amount\"}\n                                            name={\"amount\"}\n                                            value={itemData.amount ? itemData.amount.toFixed(2) : \"0.00\"}\n                                        />\n                                    </div>\n                                </Col>\n                            </Row>\n                        </CardBody>\n                    </Card>\n                </Col>\n            </Row>\n        </AvForm>\n    </HasPermissions>;\n\n    //formulario principal\n    const renderForm  = (\n        <AvForm className=\"needs-validation\" autoComplete=\"off\"\n                onValidSubmit={(e, v) => {\n                    handleValidSubmit(e, v)\n                }}>\n            <Row>\n                <Col xl=\"8\">\n                    <Card>\n                        <CardBody>\n                            <Row>\n                                <Col md=\"6\">\n                                    <div className=\"mb-3\">\n                                        <Label htmlFor=\"field_type\">Tipo <span className=\"text-danger\">*</span></Label>\n                                        <FieldSelect\n                                            id={\"field_type\"}\n                                            name={\"type\"}\n                                            options={[\n                                                {value: 1, label: 'CREDITO_INTERRAPIDISIMO'},\n                                                {value: 2, label: 'BOLSAS'}\n                                            ]}\n                                            defaultValue={itemData.type || 1}\n                                            required\n                                        />\n                                    </div>\n                                </Col>\n                                <Col md=\"6\">\n                                    <div className=\"mb-3\">\n                                        <Label htmlFor=\"field_amount\">Monto <span className=\"text-danger\">*</span></Label>\n                                        <FieldDecimalNumber\n                                            id={\"field_amount\"}\n                                            name={\"amount\"}\n                                            value={itemData.amount ? itemData.amount.toFixed(2) : \"0.00\"}\n                                            required/>\n                                    </div>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col md={12} className=\"text-right\">\n                                    <ButtonSubmit loading={props.loading}/>\n                                </Col>\n                            </Row>\n                        </CardBody>\n                    </Card>\n                </Col>\n            </Row>\n        </AvForm>\n    );\n\n    return (\n        <React.Fragment>\n            <div className=\"page-content\">\n                <Container fluid>\n                    <Breadcrumb hasBack path=\"/items\" title={itemData.name} item={\"Billeteras\"}/>\n                    <HasPermissions permissions={[PERMISSIONS.ITEMS_CREATE, PERMISSIONS.ITEMS_EDIT, PERMISSIONS.ITEMS_SHOW]} renderNoAccess={() => <NoAccess/>}>\n                        <div>\n                        {canEdit ? renderForm : renderShowMode}\n                        </div>\n                    </HasPermissions>\n                </Container>\n            </div>\n        </React.Fragment>\n    )\n}\n\nconst mapItemToProps = state => {\n    const {item, error, loading, refresh} = state.Item\n    return {error, item, loading, refresh}\n}\n\nexport default withRouter(\n    connect(mapItemToProps, {apiError, registersItem, updateItem, getItem})(ItemEdit)\n)\n\nItemEdit.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/Dashboard/eventItems.js",["1952","1953"],"import React, {useEffect, useState} from \"react\";\nimport {Card, CardBody, Col, Row} from \"reactstrap\"\n\n//Import Image\nimport {connect} from \"react-redux\";\nimport {fetchEventsApi} from \"../../helpers/backend_helper\";\nimport {PERMISSIONS} from \"../../helpers/security_rol\";\nimport HasPermissions from \"../../components/HasPermissions\";\nimport {getEvents} from \"../../store/items/actions\";\nimport {getFieldOptionByGroups} from \"../../store/fieldOptions/actions\";\nimport {GROUPS} from \"../../common/constants\";\n\nconst EventItems = (props) => {\n    const {onGetEvents, onGetFieldOptions, fieldOptions} = props;\n    const [interrapidisimo, setInterrapidisimo] = useState({});\n    const [bolsas, setBolsas] = useState({});\n    const [alarms, setAlarms] = useState([]);\n\n    useEffect(() => {\n        fetchEventsApi({}).then((p => {\n            const event = p.event;\n            setInterrapidisimo((event.filter(item => item.eventType == 1))[0]);\n            setBolsas((event.filter(item => item.eventType == 2))[0]);\n        }))\n\n    }, [onGetEvents])\n\n    useEffect(() => {\n        if (onGetFieldOptions) {\n            onGetFieldOptions();\n        }\n    }, [onGetFieldOptions]);\n\n    useEffect(() => {\n        if (fieldOptions && fieldOptions.length > 0) {\n            const alarms = fieldOptions.filter(op => (op.groups === GROUPS.ALARMS)).map(op => {\n                return {label: op.name, value: op.value};\n            });\n            setAlarms(alarms);\n        } else {\n            setAlarms([]);\n        }\n    }, [fieldOptions]);\n\n\n    const getLimitColor = (type, value) => {\n        if(alarms.length <= 0){\n            return value;\n        }\n        const limits = alarms;\n        const val = parseInt(value);\n        const down = (limits.filter(item => item.label === type+'_DOWN'))[0];\n        const medium = (limits.filter(item => item.label === type+'_MEDIUM'))[0];\n\n        if(val < parseInt(down['value'])){\n            return <p class=\"text-danger\">{value}</p>\n        } else if(val < parseInt(medium['value'])){\n            return <p class=\"text-warning\">{value}</p>\n        } else {\n            return <p class=\"text-success\">{value}</p>\n        }\n    }\n\n    const renderInventario = (allowed = false) => {\n        return <Card>\n            <CardBody>\n                <h5>Alarmas</h5> <br />\n                <Row>\n                <Col md={6}>\n                    <h5 className=\"mb-2 mt-1\"><b>Creditos Int.</b></h5>\n                    <h4>\n                            <span>\n                            <i class=\"me-2\"></i> &nbsp; { allowed ? getLimitColor('ICREDIT', interrapidisimo.amount) : ''}\n                            </span>\n                    </h4>\n                </Col>\n                <Col md={6}>\n                    <div>\n                        <h5 className=\"mb-2 mt-1\"><b>Bolsas</b></h5>\n                        <h4>\n                                <span>\n                                <i class=\"me-2\"></i> &nbsp; { allowed ? getLimitColor('BAGS', bolsas.amount) : ''}\n                                </span>\n                        </h4>\n                    </div>\n                </Col>\n                </Row>\n\n            </CardBody>\n        </Card>\n    }\n\n\n    return (\n        <React.Fragment>\n            <HasPermissions permission={PERMISSIONS.DASHBOARD_ALARMS} renderNoAccess={() => renderInventario(false)}>\n                {renderInventario(true)}\n            </HasPermissions>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {fieldOptions} = state.FieldOption\n    const {items, loading, meta, refresh} = state.Item\n    return {items, loading, meta, refresh, fieldOptions}\n}\nconst mapDispatchToProps = dispatch => ({\n    onGetFieldOptions: (conditional = null, limit = 500, page) => dispatch(getFieldOptionByGroups([GROUPS.ALARMS], limit, page)),\n    onGetEvents: () => dispatch(getEvents()),\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(EventItems)\n","/Users/ramon/Repositories/lucy-moie/src/pages/LocalityEdit/index.js",["1954","1955","1956"],"import React, {useEffect, useState} from \"react\"\nimport {CardBody, Col, Container, Label, Row} from \"reactstrap\"\nimport {AvForm} from \"availity-reactstrap-validation\"\nimport {Card} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport {apiError} from \"../../store/auth/login/actions\";\nimport PropTypes from \"prop-types\";\nimport {getDeliveryLocality, registerDeliveryLocality, updateDeliveryLocality} from \"../../store/deliveryLocality/actions\";\nimport {FieldSelect, FieldSwitch, FieldText} from \"../../components/Fields\";\nimport Breadcrumb from \"../../components/Common/Breadcrumb\";\nimport {STATUS} from \"../../common/constants\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\nimport {PERMISSIONS} from \"../../helpers/security_rol\";\nimport NoAccess from \"../../components/Common/NoAccess\";\nimport HasPermissions from \"../../components/HasPermissions\";\n\nconst LocalityEdit = (props) => {\n    const {getDeliveryLocality, deliveryLocality, externalView, externalId, customActions} = props;\n    const [deliveryLocalityData, setDeliveryLocalityData] = useState({_status: STATUS.ACTIVE});\n    const [deliveryMethod, setDeliveryMethod] = useState(1);\n    const isEdit = props.match.params.id || (deliveryLocality && deliveryLocality.id);\n\n    const deliveryMethods = [{label: \"Interrapidisimo\", value: 1}, {label: \"ServiEntrega\", value: 4}];\n\n    const serviEntrega = [{label: \"Contado\", value: 1}, {label: \"Contado - AlCobro\", value: 2}, {label: \"AlCobro\", value: 3}];\n    const interrapidisimo = [{label: \"Contado\", value: 1}, {label: \"Contado - AlCobro\", value: 2}, {label: \"AlCobro\", value: 3}];\n\n    const [deliveryMethodTypeList, setDeliveryMethodTypeList] = useState([]);\n\n    //carga inicial\n    useEffect(() => {\n        if(externalView) {\n            getDeliveryLocality(externalId);\n        } else {\n            if (isEdit && getDeliveryLocality) {\n                getDeliveryLocality(props.match.params.id);\n            }\n        }\n    }, [getDeliveryLocality]);\n\n    useEffect(() => {\n\n        if(deliveryMethod === 1){\n            setDeliveryMethodTypeList(interrapidisimo);\n        } else if(deliveryMethod === 4){\n            setDeliveryMethodTypeList(serviEntrega);\n        } else {\n            setDeliveryMethodTypeList([]);\n        }\n\n    }, [deliveryMethod]);\n\n    //cargar la información del cliente\n    useEffect(() => {\n        if (deliveryLocality.id && isEdit) {\n            setDeliveryLocalityData({...deliveryLocality, _status:deliveryLocality.status});\n            setDeliveryMethod(deliveryLocality.deliveryMethod);\n\n            if(deliveryLocality.deliveryMethodId === 1){\n                setDeliveryMethodTypeList(interrapidisimo);\n            } else if(deliveryLocality.deliveryMethodId === 4){\n                setDeliveryMethodTypeList(serviEntrega);\n            } else {\n                setDeliveryMethodTypeList([]);\n            }\n\n        }\n    }, [deliveryLocality]);\n\n    const handleValidSubmit = (event, values) => {\n        const data = Object.assign({},values, {status:values._status});\n        delete data._status;\n\n        data.deliveryType = data.deliveryType.value || deliveryLocalityData.deliveryType;\n        if(data.deliveryMethodId) {\n            data.deliveryMethodId = data.deliveryMethodId.value;\n        }\n        if(data.priceFirstKilo) {\n        data.priceFirstKilo = parseFloat(data.priceFirstKilo).toFixed(2) || deliveryLocalityData.priceFirstKilo;\n        }\n        if(data.priceAdditionalKilo) {\n            data.priceAdditionalKilo = parseFloat(data.priceAdditionalKilo).toFixed(2) || deliveryLocalityData.priceAdditionalKilo;\n        }\n        data.timeInDays = parseInt(data.timeInDays) || 0;\n\n        if (!isEdit) {\n            props.registerDeliveryLocality(data, props.history, customActions)\n        } else {\n            const id = externalId ? externalId : props.match.params.id;\n            props.updateDeliveryLocality(id, data, props.history, customActions)\n        }\n    }\n    return (\n        <React.Fragment>\n            <div className={!externalView ? `page-content` : ''}>\n                <Container fluid>\n                    {!externalView && <Breadcrumb hasBack path=\"/deliveryLocalities\" title={deliveryLocalityData.name} item={\"deliveryLocalities\"}/>}\n                    <HasPermissions permissions={[PERMISSIONS.DELIVERY_LOCALITY_EDIT, PERMISSIONS.DELIVERY_LOCALITY_CREATE]} renderNoAccess={() => <NoAccess/>}>\n                        <AvForm className=\"needs-validation\" autoComplete=\"off\"\n                                onValidSubmit={(e, v) => {\n                                    handleValidSubmit(e, v)\n                                }}>\n                            <Row>\n                                <Col xl=\"12\">\n                                    <Card>\n                                        <CardBody>\n                                            <div className={\"mt-1 mb-5\"} style={{position: \"relative\"}}>\n                                                <div className={\"float-end\"}>\n                                                    <Row>\n                                                        <Col>\n                                                            ¿Activo?\n                                                        </Col>\n                                                        <Col>\n                                                            <FieldSwitch defaultValue={deliveryLocalityData._status} name={\"_status\"}/>\n                                                        </Col>\n                                                    </Row>\n                                                </div>\n                                            </div>\n                                            <Row>\n                                                <Col md=\"12\">\n                                                    <div className=\"mb-3\">\n                                                        <Label htmlFor=\"field_name\">Nombre <span className=\"text-danger\">*</span></Label>\n                                                        <FieldText\n                                                            id={\"field_name\"}\n                                                            name={\"name\"}\n                                                            value={deliveryLocalityData.name}\n                                                            minLength={3}\n                                                            maxLength={255}\n                                                            required\n                                                        />\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                {!externalView && (\n                                                <Col md=\"6\">\n                                                    <div className=\"mb-3\">\n                                                        <Label htmlFor=\"field_name\">Codigo de Area <span className=\"text-danger\"></span></Label>\n                                                        <FieldText\n                                                            id={\"field_delivery_area_code\"}\n                                                            name={\"deliveryAreaCode\"}\n                                                            value={deliveryLocalityData.deliveryAreaCode}\n                                                        />\n                                                    </div>\n                                                </Col>\n                                                )}\n                                                <Col md={externalView ? '12' : '6'}>\n                                                    <div className=\"mb-3\">\n                                                        <Label htmlFor=\"field_name\">Tiempo en Días<span className=\"text-danger\"></span></Label>\n                                                        <FieldText\n                                                            id={\"field_time_in_days\"}\n                                                            name={\"timeInDays\"}\n                                                            value={deliveryLocalityData.timeInDays ?? \"\"}\n                                                            required={false}\n                                                        />\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                {!externalView && (\n                                                    <Col md=\"6\">\n                                                        <div className=\"mb-3\">\n                                                            <Label htmlFor=\"field_name\">Metodo de Envio<span className=\"text-danger\">*</span></Label>\n                                                            <FieldSelect\n                                                                id={\"field_delivery_method_id\"}\n                                                                name={\"deliveryMethodId\"}\n                                                                options={deliveryMethods}\n                                                                defaultValue={deliveryMethod}\n                                                                onChange={(e) => {\n                                                                    setDeliveryMethod(e.value);\n                                                                }}\n                                                            />\n                                                        </div>\n                                                    </Col>\n                                                )}\n                                                <Col md={externalView ? `12` : '6'}>\n                                                    <div className=\"mb-3\">\n                                                        <Label htmlFor=\"field_name\">Tipo de Envio<span className=\"text-danger\">*</span></Label>\n                                                        <FieldSelect\n                                                            id={\"field_delivery_type\"}\n                                                            name={\"deliveryType\"}\n                                                            options={deliveryMethodTypeList}\n                                                            defaultValue={deliveryLocalityData.deliveryType}\n                                                        />\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col md=\"6\">\n                                                    <div className=\"mb-3\">\n                                                        <Label htmlFor=\"field_name\">Precio primer Kilo<span className=\"text-danger\"></span></Label>\n                                                        <FieldText\n                                                            id={\"field_price_first_kilo\"}\n                                                            name={\"priceFirstKilo\"}\n                                                            value={deliveryLocalityData.priceFirstKilo}\n                                                        />\n                                                    </div>\n                                                </Col>\n                                                <Col md=\"6\">\n                                                    <div className=\"mb-3\">\n                                                        <Label htmlFor=\"field_name\">Precio kilo adicional<span className=\"text-danger\"></span></Label>\n                                                        <FieldText\n                                                            id={\"field_additional_kilo\"}\n                                                            name={\"priceAdditionalKilo\"}\n                                                            value={deliveryLocalityData.priceAdditionalKilo}\n                                                        />\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col md={12} className=\"text-right\">\n                                                    <ButtonSubmit loading={props.loading}/>\n                                                </Col>\n                                            </Row>\n                                        </CardBody>\n                                    </Card>\n                                </Col>\n                            </Row>\n                        </AvForm>\n                    </HasPermissions>\n                </Container>\n            </div>\n        </React.Fragment>\n    )\n}\n\nconst mapLocalityToProps = state => {\n    const {error, loading, deliveryLocality} = state.DeliveryLocality;\n    return {error, deliveryLocality, loading}\n}\n\nexport default withRouter(\n    connect(mapLocalityToProps, {apiError, registerDeliveryLocality, updateDeliveryLocality, getDeliveryLocality})(LocalityEdit)\n)\n\nLocalityEdit.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n\n",{"ruleId":"1957","replacedBy":"1958"},{"ruleId":"1959","replacedBy":"1960"},{"ruleId":"1961","severity":1,"message":"1962","line":22,"column":9,"nodeType":"1963","messageId":"1964","endLine":22,"endColumn":16},{"ruleId":"1961","severity":1,"message":"1965","line":5,"column":31,"nodeType":"1963","messageId":"1964","endLine":5,"endColumn":34},{"ruleId":"1961","severity":1,"message":"1966","line":5,"column":36,"nodeType":"1963","messageId":"1964","endLine":5,"endColumn":39},{"ruleId":"1961","severity":1,"message":"1967","line":13,"column":8,"nodeType":"1963","messageId":"1964","endLine":13,"endColumn":24},{"ruleId":"1961","severity":1,"message":"1968","line":22,"column":8,"nodeType":"1963","messageId":"1964","endLine":22,"endColumn":14},{"ruleId":"1961","severity":1,"message":"1969","line":23,"column":8,"nodeType":"1963","messageId":"1964","endLine":23,"endColumn":17},{"ruleId":"1961","severity":1,"message":"1970","line":24,"column":8,"nodeType":"1963","messageId":"1964","endLine":24,"endColumn":16},{"ruleId":"1961","severity":1,"message":"1971","line":25,"column":8,"nodeType":"1963","messageId":"1964","endLine":25,"endColumn":15},{"ruleId":"1961","severity":1,"message":"1972","line":26,"column":8,"nodeType":"1963","messageId":"1964","endLine":26,"endColumn":18},{"ruleId":"1961","severity":1,"message":"1973","line":27,"column":8,"nodeType":"1963","messageId":"1964","endLine":27,"endColumn":13},{"ruleId":"1961","severity":1,"message":"1974","line":42,"column":10,"nodeType":"1963","messageId":"1964","endLine":42,"endColumn":19},{"ruleId":"1961","severity":1,"message":"1975","line":42,"column":21,"nodeType":"1963","messageId":"1964","endLine":42,"endColumn":33},{"ruleId":"1961","severity":1,"message":"1976","line":20,"column":12,"nodeType":"1963","messageId":"1964","endLine":20,"endColumn":19},{"ruleId":"1961","severity":1,"message":"1977","line":27,"column":18,"nodeType":"1963","messageId":"1964","endLine":27,"endColumn":25},{"ruleId":"1978","severity":1,"message":"1979","line":31,"column":8,"nodeType":"1980","endLine":31,"endColumn":16,"suggestions":"1981"},{"ruleId":"1982","severity":1,"message":"1983","line":33,"column":31,"nodeType":"1984","messageId":"1985","endLine":33,"endColumn":33},{"ruleId":"1982","severity":1,"message":"1983","line":33,"column":67,"nodeType":"1984","messageId":"1985","endLine":33,"endColumn":69},{"ruleId":"1978","severity":1,"message":"1986","line":27,"column":8,"nodeType":"1980","endLine":27,"endColumn":20,"suggestions":"1987"},{"ruleId":"1961","severity":1,"message":"1988","line":29,"column":12,"nodeType":"1963","messageId":"1964","endLine":29,"endColumn":24},{"ruleId":"1961","severity":1,"message":"1989","line":29,"column":26,"nodeType":"1963","messageId":"1964","endLine":29,"endColumn":41},{"ruleId":"1978","severity":1,"message":"1986","line":39,"column":8,"nodeType":"1980","endLine":39,"endColumn":23,"suggestions":"1990"},{"ruleId":"1961","severity":1,"message":"1991","line":24,"column":9,"nodeType":"1963","messageId":"1964","endLine":24,"endColumn":17},{"ruleId":"1961","severity":1,"message":"1992","line":24,"column":19,"nodeType":"1963","messageId":"1964","endLine":24,"endColumn":25},{"ruleId":"1961","severity":1,"message":"1993","line":54,"column":9,"nodeType":"1963","messageId":"1964","endLine":54,"endColumn":23},{"ruleId":"1961","severity":1,"message":"1994","line":62,"column":9,"nodeType":"1963","messageId":"1964","endLine":62,"endColumn":25},{"ruleId":"1961","severity":1,"message":"1995","line":5,"column":8,"nodeType":"1963","messageId":"1964","endLine":5,"endColumn":18},{"ruleId":"1961","severity":1,"message":"1996","line":8,"column":9,"nodeType":"1963","messageId":"1964","endLine":8,"endColumn":18},{"ruleId":"1961","severity":1,"message":"1997","line":44,"column":7,"nodeType":"1963","messageId":"1964","endLine":44,"endColumn":14},{"ruleId":"1961","severity":1,"message":"1998","line":74,"column":7,"nodeType":"1963","messageId":"1964","endLine":74,"endColumn":14},{"ruleId":"1961","severity":1,"message":"1999","line":76,"column":7,"nodeType":"1963","messageId":"1964","endLine":76,"endColumn":15},{"ruleId":"1961","severity":1,"message":"2000","line":149,"column":39,"nodeType":"1963","messageId":"1964","endLine":149,"endColumn":46},{"ruleId":"1961","severity":1,"message":"2000","line":19,"column":42,"nodeType":"1963","messageId":"1964","endLine":19,"endColumn":49},{"ruleId":"1961","severity":1,"message":"2001","line":3,"column":9,"nodeType":"1963","messageId":"1964","endLine":3,"endColumn":15},{"ruleId":"1978","severity":1,"message":"1986","line":28,"column":8,"nodeType":"1980","endLine":28,"endColumn":29,"suggestions":"2002"},{"ruleId":"1978","severity":1,"message":"1986","line":37,"column":8,"nodeType":"1980","endLine":37,"endColumn":28,"suggestions":"2003"},{"ruleId":"2004","severity":1,"message":"2005","line":70,"column":28,"nodeType":"2006","messageId":"2007","endLine":70,"endColumn":54,"fix":"2008"},{"ruleId":"2004","severity":1,"message":"2005","line":83,"column":28,"nodeType":"2006","messageId":"2007","endLine":83,"endColumn":54,"fix":"2009"},{"ruleId":"2004","severity":1,"message":"2005","line":95,"column":28,"nodeType":"2006","messageId":"2007","endLine":95,"endColumn":54,"fix":"2010"},{"ruleId":"1982","severity":1,"message":"1983","line":128,"column":37,"nodeType":"1984","messageId":"1985","endLine":128,"endColumn":39},{"ruleId":"1982","severity":1,"message":"2011","line":129,"column":90,"nodeType":"1984","messageId":"1985","endLine":129,"endColumn":92},{"ruleId":"1982","severity":1,"message":"2011","line":261,"column":95,"nodeType":"1984","messageId":"1985","endLine":261,"endColumn":97},{"ruleId":"1978","severity":1,"message":"2012","line":24,"column":8,"nodeType":"1980","endLine":24,"endColumn":21,"suggestions":"2013"},{"ruleId":"1961","severity":1,"message":"2014","line":28,"column":9,"nodeType":"1963","messageId":"1964","endLine":28,"endColumn":20},{"ruleId":"1961","severity":1,"message":"2015","line":63,"column":12,"nodeType":"1963","messageId":"1964","endLine":63,"endColumn":27},{"ruleId":"1961","severity":1,"message":"2016","line":63,"column":29,"nodeType":"1963","messageId":"1964","endLine":63,"endColumn":47},{"ruleId":"1961","severity":1,"message":"2017","line":64,"column":12,"nodeType":"1963","messageId":"1964","endLine":64,"endColumn":23},{"ruleId":"1961","severity":1,"message":"2018","line":64,"column":25,"nodeType":"1963","messageId":"1964","endLine":64,"endColumn":39},{"ruleId":"1978","severity":1,"message":"2019","line":83,"column":8,"nodeType":"1980","endLine":83,"endColumn":22,"suggestions":"2020"},{"ruleId":"1978","severity":1,"message":"2021","line":91,"column":8,"nodeType":"1980","endLine":91,"endColumn":24,"suggestions":"2022"},{"ruleId":"1978","severity":1,"message":"2023","line":111,"column":8,"nodeType":"1980","endLine":111,"endColumn":17,"suggestions":"2024"},{"ruleId":"1978","severity":1,"message":"2025","line":141,"column":8,"nodeType":"1980","endLine":141,"endColumn":15,"suggestions":"2026"},{"ruleId":"1978","severity":1,"message":"2027","line":165,"column":8,"nodeType":"1980","endLine":165,"endColumn":29,"suggestions":"2028"},{"ruleId":"1982","severity":1,"message":"1983","line":335,"column":90,"nodeType":"1984","messageId":"1985","endLine":335,"endColumn":92},{"ruleId":"1982","severity":1,"message":"1983","line":335,"column":135,"nodeType":"1984","messageId":"1985","endLine":335,"endColumn":137},{"ruleId":"1978","severity":1,"message":"2012","line":28,"column":8,"nodeType":"1980","endLine":28,"endColumn":18,"suggestions":"2029"},{"ruleId":"1978","severity":1,"message":"2023","line":35,"column":8,"nodeType":"1980","endLine":35,"endColumn":16,"suggestions":"2030"},{"ruleId":"1978","severity":1,"message":"2031","line":32,"column":8,"nodeType":"1980","endLine":32,"endColumn":25,"suggestions":"2032"},{"ruleId":"1978","severity":1,"message":"2023","line":42,"column":8,"nodeType":"1980","endLine":42,"endColumn":22,"suggestions":"2033"},{"ruleId":"1978","severity":1,"message":"2034","line":40,"column":8,"nodeType":"1980","endLine":40,"endColumn":21,"suggestions":"2035"},{"ruleId":"1978","severity":1,"message":"2023","line":80,"column":8,"nodeType":"1980","endLine":80,"endColumn":18,"suggestions":"2036"},{"ruleId":"1982","severity":1,"message":"1983","line":113,"column":18,"nodeType":"1984","messageId":"1985","endLine":113,"endColumn":20},{"ruleId":"1982","severity":1,"message":"1983","line":116,"column":23,"nodeType":"1984","messageId":"1985","endLine":116,"endColumn":25},{"ruleId":"1978","severity":1,"message":"2037","line":31,"column":8,"nodeType":"1980","endLine":31,"endColumn":10,"suggestions":"2038"},{"ruleId":"1978","severity":1,"message":"2037","line":38,"column":8,"nodeType":"1980","endLine":38,"endColumn":23,"suggestions":"2039"},{"ruleId":"1982","severity":1,"message":"1983","line":100,"column":42,"nodeType":"1984","messageId":"1985","endLine":100,"endColumn":44},{"ruleId":"1982","severity":1,"message":"2011","line":100,"column":88,"nodeType":"1984","messageId":"1985","endLine":100,"endColumn":90},{"ruleId":"1982","severity":1,"message":"1983","line":100,"column":128,"nodeType":"1984","messageId":"1985","endLine":100,"endColumn":130},{"ruleId":"1961","severity":1,"message":"2040","line":25,"column":12,"nodeType":"1963","messageId":"1964","endLine":25,"endColumn":17},{"ruleId":"1978","severity":1,"message":"2012","line":34,"column":8,"nodeType":"1980","endLine":34,"endColumn":17,"suggestions":"2041"},{"ruleId":"1978","severity":1,"message":"2023","line":44,"column":8,"nodeType":"1980","endLine":44,"endColumn":14,"suggestions":"2042"},{"ruleId":"1978","severity":1,"message":"2043","line":37,"column":8,"nodeType":"1980","endLine":37,"endColumn":23,"suggestions":"2044"},{"ruleId":"1978","severity":1,"message":"2045","line":45,"column":8,"nodeType":"1980","endLine":45,"endColumn":18,"suggestions":"2046"},{"ruleId":"1978","severity":1,"message":"2047","line":60,"column":8,"nodeType":"1980","endLine":60,"endColumn":19,"suggestions":"2048"},{"ruleId":"1978","severity":1,"message":"2023","line":81,"column":8,"nodeType":"1980","endLine":81,"endColumn":16,"suggestions":"2049"},{"ruleId":"1978","severity":1,"message":"2050","line":88,"column":8,"nodeType":"1980","endLine":88,"endColumn":30,"suggestions":"2051"},{"ruleId":"1978","severity":1,"message":"2052","line":97,"column":8,"nodeType":"1980","endLine":97,"endColumn":16,"suggestions":"2053"},{"ruleId":"1978","severity":1,"message":"2054","line":101,"column":8,"nodeType":"1980","endLine":101,"endColumn":32,"suggestions":"2055"},{"ruleId":"2004","severity":1,"message":"2005","line":143,"column":28,"nodeType":"2006","messageId":"2007","endLine":143,"endColumn":54,"fix":"2056"},{"ruleId":"2004","severity":1,"message":"2005","line":149,"column":28,"nodeType":"2006","messageId":"2007","endLine":149,"endColumn":54,"fix":"2057"},{"ruleId":"2004","severity":1,"message":"2005","line":202,"column":28,"nodeType":"2006","messageId":"2007","endLine":202,"endColumn":54,"fix":"2058"},{"ruleId":"1961","severity":1,"message":"2059","line":227,"column":11,"nodeType":"1963","messageId":"1964","endLine":227,"endColumn":22},{"ruleId":"1978","severity":1,"message":"2012","line":29,"column":8,"nodeType":"1980","endLine":29,"endColumn":22,"suggestions":"2060"},{"ruleId":"1978","severity":1,"message":"2023","line":35,"column":8,"nodeType":"1980","endLine":35,"endColumn":17,"suggestions":"2061"},{"ruleId":"1982","severity":1,"message":"2011","line":155,"column":119,"nodeType":"1984","messageId":"1985","endLine":155,"endColumn":121},{"ruleId":"1978","severity":1,"message":"2012","line":24,"column":8,"nodeType":"1980","endLine":24,"endColumn":23,"suggestions":"2062"},{"ruleId":"1961","severity":1,"message":"2063","line":52,"column":106,"nodeType":"1963","messageId":"1964","endLine":52,"endColumn":121},{"ruleId":"2004","severity":1,"message":"2005","line":71,"column":32,"nodeType":"2006","messageId":"2007","endLine":71,"endColumn":58,"fix":"2064"},{"ruleId":"1978","severity":1,"message":"2065","line":77,"column":8,"nodeType":"1980","endLine":77,"endColumn":23,"suggestions":"2066"},{"ruleId":"1978","severity":1,"message":"2067","line":90,"column":8,"nodeType":"1980","endLine":90,"endColumn":18,"suggestions":"2068"},{"ruleId":"1982","severity":1,"message":"1983","line":99,"column":75,"nodeType":"1984","messageId":"1985","endLine":99,"endColumn":77},{"ruleId":"1982","severity":1,"message":"1983","line":117,"column":28,"nodeType":"1984","messageId":"1985","endLine":117,"endColumn":30},{"ruleId":"1982","severity":1,"message":"2011","line":122,"column":33,"nodeType":"1984","messageId":"1985","endLine":122,"endColumn":35},{"ruleId":"2004","severity":1,"message":"2005","line":139,"column":28,"nodeType":"2006","messageId":"2007","endLine":139,"endColumn":54,"fix":"2069"},{"ruleId":"2004","severity":1,"message":"2005","line":150,"column":36,"nodeType":"2006","messageId":"2007","endLine":150,"endColumn":62,"fix":"2070"},{"ruleId":"1978","severity":1,"message":"2012","line":37,"column":8,"nodeType":"1980","endLine":37,"endColumn":28,"suggestions":"2071"},{"ruleId":"1978","severity":1,"message":"2023","line":44,"column":8,"nodeType":"1980","endLine":44,"endColumn":16,"suggestions":"2072"},{"ruleId":"1982","severity":1,"message":"1983","line":52,"column":61,"nodeType":"1984","messageId":"1985","endLine":52,"endColumn":63},{"ruleId":"2073","severity":1,"message":"2074","line":110,"column":80,"nodeType":"2075","messageId":"2076","endLine":110,"endColumn":82},{"ruleId":"2073","severity":1,"message":"2074","line":110,"column":96,"nodeType":"2075","messageId":"2076","endLine":110,"endColumn":98},{"ruleId":"2077","severity":1,"message":"2078","line":201,"column":29,"nodeType":"2079","messageId":"2080","endLine":201,"endColumn":70,"fix":"2081"},{"ruleId":"1978","severity":1,"message":"2082","line":37,"column":8,"nodeType":"1980","endLine":37,"endColumn":20,"suggestions":"2083"},{"ruleId":"1961","severity":1,"message":"2084","line":18,"column":21,"nodeType":"1963","messageId":"1964","endLine":18,"endColumn":31},{"ruleId":"1978","severity":1,"message":"2085","line":32,"column":8,"nodeType":"1980","endLine":32,"endColumn":16,"suggestions":"2086"},{"ruleId":"2004","severity":1,"message":"2005","line":82,"column":28,"nodeType":"2006","messageId":"2007","endLine":82,"endColumn":54,"fix":"2087"},{"ruleId":"2004","severity":1,"message":"2005","line":89,"column":28,"nodeType":"2006","messageId":"2007","endLine":89,"endColumn":54,"fix":"2088"},{"ruleId":"2004","severity":1,"message":"2005","line":95,"column":28,"nodeType":"2006","messageId":"2007","endLine":95,"endColumn":54,"fix":"2089"},{"ruleId":"2090","severity":1,"message":"2091","line":96,"column":34,"nodeType":"2092","messageId":"2093","endLine":96,"endColumn":36},{"ruleId":"1982","severity":1,"message":"2011","line":61,"column":33,"nodeType":"1984","messageId":"1985","endLine":61,"endColumn":35},{"ruleId":"1961","severity":1,"message":"2094","line":1,"column":8,"nodeType":"1963","messageId":"1964","endLine":1,"endColumn":13},{"ruleId":"2004","severity":1,"message":"2005","line":50,"column":24,"nodeType":"2006","messageId":"2007","endLine":50,"endColumn":50,"fix":"2095"},{"ruleId":"1961","severity":1,"message":"2096","line":31,"column":25,"nodeType":"1963","messageId":"1964","endLine":31,"endColumn":38},{"ruleId":"1961","severity":1,"message":"2097","line":31,"column":40,"nodeType":"1963","messageId":"1964","endLine":31,"endColumn":60},{"ruleId":"1961","severity":1,"message":"2098","line":31,"column":62,"nodeType":"1963","messageId":"1964","endLine":31,"endColumn":83},{"ruleId":"1978","severity":1,"message":"2099","line":76,"column":8,"nodeType":"1980","endLine":76,"endColumn":30,"suggestions":"2100"},{"ruleId":"1978","severity":1,"message":"2101","line":83,"column":8,"nodeType":"1980","endLine":83,"endColumn":26,"suggestions":"2102"},{"ruleId":"1978","severity":1,"message":"2103","line":89,"column":8,"nodeType":"1980","endLine":89,"endColumn":22,"suggestions":"2104"},{"ruleId":"1978","severity":1,"message":"2105","line":93,"column":8,"nodeType":"1980","endLine":93,"endColumn":20,"suggestions":"2106"},{"ruleId":"1961","severity":1,"message":"2107","line":155,"column":11,"nodeType":"1963","messageId":"1964","endLine":155,"endColumn":31},{"ruleId":"1961","severity":1,"message":"2108","line":2,"column":8,"nodeType":"1963","messageId":"1964","endLine":2,"endColumn":21},{"ruleId":"2090","severity":1,"message":"2109","line":9,"column":43,"nodeType":"2092","messageId":"2110","endLine":9,"endColumn":45},{"ruleId":"1982","severity":1,"message":"2011","line":10,"column":21,"nodeType":"1984","messageId":"1985","endLine":10,"endColumn":23},{"ruleId":"2111","severity":1,"message":"2112","line":17,"column":43,"nodeType":"2113","messageId":"2114","endLine":17,"endColumn":58},{"ruleId":"2004","severity":1,"message":"2005","line":37,"column":24,"nodeType":"2006","messageId":"2007","endLine":37,"endColumn":50,"fix":"2115"},{"ruleId":"1961","severity":1,"message":"2116","line":9,"column":9,"nodeType":"1963","messageId":"1964","endLine":9,"endColumn":26},{"ruleId":"1961","severity":1,"message":"2117","line":9,"column":28,"nodeType":"1963","messageId":"1964","endLine":9,"endColumn":37},{"ruleId":"1978","severity":1,"message":"1986","line":23,"column":8,"nodeType":"1980","endLine":23,"endColumn":23,"suggestions":"2118"},{"ruleId":"1961","severity":1,"message":"2119","line":85,"column":196,"nodeType":"1963","messageId":"1964","endLine":85,"endColumn":204},{"ruleId":"2120","severity":1,"message":"2121","line":11,"column":29,"nodeType":"2122","messageId":"1985","endLine":11,"endColumn":31},{"ruleId":"2123","severity":1,"message":"2124","line":32,"column":33,"nodeType":"2079","endLine":32,"endColumn":179},{"ruleId":"2123","severity":1,"message":"2124","line":38,"column":33,"nodeType":"2079","endLine":38,"endColumn":179},{"ruleId":"2123","severity":1,"message":"2124","line":44,"column":33,"nodeType":"2079","endLine":44,"endColumn":179},{"ruleId":"1978","severity":1,"message":"2125","line":35,"column":8,"nodeType":"1980","endLine":35,"endColumn":10,"suggestions":"2126"},{"ruleId":"1978","severity":1,"message":"2127","line":100,"column":8,"nodeType":"1980","endLine":100,"endColumn":18,"suggestions":"2128"},{"ruleId":"2004","severity":1,"message":"2005","line":113,"column":28,"nodeType":"2006","messageId":"2007","endLine":113,"endColumn":54,"fix":"2129"},{"ruleId":"2004","severity":1,"message":"2005","line":120,"column":28,"nodeType":"2006","messageId":"2007","endLine":120,"endColumn":54,"fix":"2130"},{"ruleId":"1961","severity":1,"message":"2000","line":24,"column":56,"nodeType":"1963","messageId":"1964","endLine":24,"endColumn":63},{"ruleId":"1961","severity":1,"message":"2131","line":40,"column":12,"nodeType":"1963","messageId":"1964","endLine":40,"endColumn":21},{"ruleId":"1978","severity":1,"message":"2132","line":49,"column":8,"nodeType":"1980","endLine":49,"endColumn":31,"suggestions":"2133"},{"ruleId":"2004","severity":1,"message":"2005","line":41,"column":24,"nodeType":"2006","messageId":"2007","endLine":41,"endColumn":50,"fix":"2134"},{"ruleId":"2004","severity":1,"message":"2005","line":46,"column":24,"nodeType":"2006","messageId":"2007","endLine":46,"endColumn":50,"fix":"2135"},{"ruleId":"2004","severity":1,"message":"2005","line":25,"column":24,"nodeType":"2006","messageId":"2007","endLine":25,"endColumn":50,"fix":"2136"},{"ruleId":"2004","severity":1,"message":"2005","line":31,"column":24,"nodeType":"2006","messageId":"2007","endLine":31,"endColumn":50,"fix":"2137"},{"ruleId":"2004","severity":1,"message":"2005","line":41,"column":24,"nodeType":"2006","messageId":"2007","endLine":41,"endColumn":50,"fix":"2138"},{"ruleId":"1978","severity":1,"message":"2139","line":41,"column":8,"nodeType":"1980","endLine":41,"endColumn":35,"suggestions":"2140"},{"ruleId":"1961","severity":1,"message":"2141","line":25,"column":43,"nodeType":"1963","messageId":"1964","endLine":25,"endColumn":58},{"ruleId":"1961","severity":1,"message":"2000","line":25,"column":60,"nodeType":"1963","messageId":"1964","endLine":25,"endColumn":67},{"ruleId":"1978","severity":1,"message":"2142","line":51,"column":8,"nodeType":"1980","endLine":51,"endColumn":32,"suggestions":"2143"},{"ruleId":"2004","severity":1,"message":"2005","line":9,"column":24,"nodeType":"2006","messageId":"2007","endLine":9,"endColumn":50,"fix":"2144"},{"ruleId":"2004","severity":1,"message":"2005","line":41,"column":24,"nodeType":"2006","messageId":"2007","endLine":41,"endColumn":50,"fix":"2145"},{"ruleId":"2004","severity":1,"message":"2005","line":80,"column":24,"nodeType":"2006","messageId":"2007","endLine":80,"endColumn":50,"fix":"2146"},{"ruleId":"2004","severity":1,"message":"2005","line":93,"column":24,"nodeType":"2006","messageId":"2007","endLine":93,"endColumn":50,"fix":"2147"},{"ruleId":"2004","severity":1,"message":"2005","line":99,"column":24,"nodeType":"2006","messageId":"2007","endLine":99,"endColumn":50,"fix":"2148"},{"ruleId":"2004","severity":1,"message":"2005","line":118,"column":24,"nodeType":"2006","messageId":"2007","endLine":118,"endColumn":50,"fix":"2149"},{"ruleId":"2004","severity":1,"message":"2005","line":129,"column":24,"nodeType":"2006","messageId":"2007","endLine":129,"endColumn":50,"fix":"2150"},{"ruleId":"1961","severity":1,"message":"2000","line":27,"column":39,"nodeType":"1963","messageId":"1964","endLine":27,"endColumn":46},{"ruleId":"1961","severity":1,"message":"2151","line":32,"column":25,"nodeType":"1963","messageId":"1964","endLine":32,"endColumn":39},{"ruleId":"1978","severity":1,"message":"2152","line":70,"column":8,"nodeType":"1980","endLine":70,"endColumn":30,"suggestions":"2153"},{"ruleId":"2004","severity":1,"message":"2005","line":55,"column":24,"nodeType":"2006","messageId":"2007","endLine":55,"endColumn":50,"fix":"2154"},{"ruleId":"1961","severity":1,"message":"2155","line":24,"column":8,"nodeType":"1963","messageId":"1964","endLine":24,"endColumn":17},{"ruleId":"2004","severity":1,"message":"2005","line":65,"column":28,"nodeType":"2006","messageId":"2007","endLine":65,"endColumn":54,"fix":"2156"},{"ruleId":"1978","severity":1,"message":"2157","line":83,"column":8,"nodeType":"1980","endLine":83,"endColumn":38,"suggestions":"2158"},{"ruleId":"1982","severity":1,"message":"1983","line":94,"column":43,"nodeType":"1984","messageId":"1985","endLine":94,"endColumn":45},{"ruleId":"1982","severity":1,"message":"1983","line":98,"column":43,"nodeType":"1984","messageId":"1985","endLine":98,"endColumn":45},{"ruleId":"1982","severity":1,"message":"1983","line":102,"column":43,"nodeType":"1984","messageId":"1985","endLine":102,"endColumn":45},{"ruleId":"1978","severity":1,"message":"2159","line":123,"column":8,"nodeType":"1980","endLine":123,"endColumn":22,"suggestions":"2160"},{"ruleId":"1978","severity":1,"message":"2161","line":135,"column":8,"nodeType":"1980","endLine":135,"endColumn":24,"suggestions":"2162"},{"ruleId":"1978","severity":1,"message":"2163","line":142,"column":8,"nodeType":"1980","endLine":142,"endColumn":25,"suggestions":"2164"},{"ruleId":"1978","severity":1,"message":"2165","line":151,"column":8,"nodeType":"1980","endLine":151,"endColumn":23,"suggestions":"2166"},{"ruleId":"1978","severity":1,"message":"2161","line":155,"column":8,"nodeType":"1980","endLine":155,"endColumn":91,"suggestions":"2167"},{"ruleId":"1978","severity":1,"message":"2168","line":178,"column":8,"nodeType":"1980","endLine":178,"endColumn":29,"suggestions":"2169"},{"ruleId":"1961","severity":1,"message":"2170","line":180,"column":11,"nodeType":"1963","messageId":"1964","endLine":180,"endColumn":19},{"ruleId":"1982","severity":1,"message":"1983","line":219,"column":30,"nodeType":"1984","messageId":"1985","endLine":219,"endColumn":32},{"ruleId":"1978","severity":1,"message":"2171","line":31,"column":8,"nodeType":"1980","endLine":31,"endColumn":38,"suggestions":"2172"},{"ruleId":"1961","severity":1,"message":"2173","line":26,"column":12,"nodeType":"1963","messageId":"1964","endLine":26,"endColumn":18},{"ruleId":"1961","severity":1,"message":"2174","line":26,"column":33,"nodeType":"1963","messageId":"1964","endLine":26,"endColumn":42},{"ruleId":"1961","severity":1,"message":"2000","line":26,"column":69,"nodeType":"1963","messageId":"1964","endLine":26,"endColumn":76},{"ruleId":"1978","severity":1,"message":"2175","line":58,"column":8,"nodeType":"1980","endLine":58,"endColumn":29,"suggestions":"2176"},{"ruleId":"2004","severity":1,"message":"2005","line":111,"column":28,"nodeType":"2006","messageId":"2007","endLine":111,"endColumn":54,"fix":"2177"},{"ruleId":"2004","severity":1,"message":"2005","line":124,"column":28,"nodeType":"2006","messageId":"2007","endLine":124,"endColumn":54,"fix":"2178"},{"ruleId":"2004","severity":1,"message":"2005","line":136,"column":28,"nodeType":"2006","messageId":"2007","endLine":136,"endColumn":54,"fix":"2179"},{"ruleId":"1961","severity":1,"message":"2180","line":6,"column":40,"nodeType":"1963","messageId":"1964","endLine":6,"endColumn":49},{"ruleId":"1982","severity":1,"message":"1983","line":128,"column":48,"nodeType":"1984","messageId":"1985","endLine":128,"endColumn":50},{"ruleId":"1961","severity":1,"message":"2131","line":44,"column":12,"nodeType":"1963","messageId":"1964","endLine":44,"endColumn":21},{"ruleId":"1978","severity":1,"message":"2181","line":59,"column":8,"nodeType":"1980","endLine":59,"endColumn":31,"suggestions":"2182"},{"ruleId":"1961","severity":1,"message":"2000","line":22,"column":77,"nodeType":"1963","messageId":"1964","endLine":22,"endColumn":84},{"ruleId":"1961","severity":1,"message":"2131","line":38,"column":12,"nodeType":"1963","messageId":"1964","endLine":38,"endColumn":21},{"ruleId":"1978","severity":1,"message":"2183","line":45,"column":8,"nodeType":"1980","endLine":45,"endColumn":33,"suggestions":"2184"},{"ruleId":"1961","severity":1,"message":"2185","line":19,"column":22,"nodeType":"1963","messageId":"1964","endLine":19,"endColumn":26},{"ruleId":"1978","severity":1,"message":"2186","line":47,"column":8,"nodeType":"1980","endLine":47,"endColumn":21,"suggestions":"2187"},{"ruleId":"1978","severity":1,"message":"2188","line":57,"column":8,"nodeType":"1980","endLine":57,"endColumn":18,"suggestions":"2189"},{"ruleId":"2190","severity":1,"message":"2191","line":206,"column":33,"nodeType":"2192","messageId":"2193","endLine":206,"endColumn":48},{"ruleId":"1978","severity":1,"message":"2194","line":55,"column":8,"nodeType":"1980","endLine":55,"endColumn":22,"suggestions":"2195"},{"ruleId":"1978","severity":1,"message":"2196","line":27,"column":8,"nodeType":"1980","endLine":27,"endColumn":25,"suggestions":"2197"},{"ruleId":"1978","severity":1,"message":"2198","line":33,"column":8,"nodeType":"1980","endLine":33,"endColumn":17,"suggestions":"2199"},{"ruleId":"1961","severity":1,"message":"2200","line":10,"column":9,"nodeType":"1963","messageId":"1964","endLine":10,"endColumn":15},{"ruleId":"1961","severity":1,"message":"2201","line":10,"column":17,"nodeType":"1963","messageId":"1964","endLine":10,"endColumn":42},{"ruleId":"1978","severity":1,"message":"2202","line":55,"column":8,"nodeType":"1980","endLine":55,"endColumn":15,"suggestions":"2203"},{"ruleId":"1978","severity":1,"message":"2204","line":68,"column":8,"nodeType":"1980","endLine":68,"endColumn":29,"suggestions":"2205"},{"ruleId":"1982","severity":1,"message":"1983","line":73,"column":49,"nodeType":"1984","messageId":"1985","endLine":73,"endColumn":51},{"ruleId":"1982","severity":1,"message":"2011","line":73,"column":105,"nodeType":"1984","messageId":"1985","endLine":73,"endColumn":107},{"ruleId":"1982","severity":1,"message":"2011","line":83,"column":140,"nodeType":"1984","messageId":"1985","endLine":83,"endColumn":142},{"ruleId":"2004","severity":1,"message":"2005","line":89,"column":32,"nodeType":"2006","messageId":"2007","endLine":89,"endColumn":58,"fix":"2206"},{"ruleId":"2123","severity":1,"message":"2124","line":281,"column":49,"nodeType":"2079","endLine":281,"endColumn":136},{"ruleId":"2123","severity":1,"message":"2124","line":334,"column":41,"nodeType":"2079","endLine":334,"endColumn":113},{"ruleId":"1961","severity":1,"message":"2207","line":91,"column":12,"nodeType":"1963","messageId":"1964","endLine":91,"endColumn":23},{"ruleId":"1978","severity":1,"message":"2208","line":115,"column":8,"nodeType":"1980","endLine":115,"endColumn":26,"suggestions":"2209"},{"ruleId":"1978","severity":1,"message":"2210","line":174,"column":8,"nodeType":"1980","endLine":174,"endColumn":27,"suggestions":"2211"},{"ruleId":"1982","severity":1,"message":"1983","line":254,"column":46,"nodeType":"1984","messageId":"1985","endLine":254,"endColumn":48},{"ruleId":"1982","severity":1,"message":"1983","line":254,"column":99,"nodeType":"1984","messageId":"1985","endLine":254,"endColumn":101},{"ruleId":"1982","severity":1,"message":"1983","line":258,"column":47,"nodeType":"1984","messageId":"1985","endLine":258,"endColumn":49},{"ruleId":"1982","severity":1,"message":"1983","line":258,"column":100,"nodeType":"1984","messageId":"1985","endLine":258,"endColumn":102},{"ruleId":"1982","severity":1,"message":"2011","line":259,"column":94,"nodeType":"1984","messageId":"1985","endLine":259,"endColumn":96},{"ruleId":"1982","severity":1,"message":"1983","line":405,"column":52,"nodeType":"1984","messageId":"1985","endLine":405,"endColumn":54},{"ruleId":"1982","severity":1,"message":"1983","line":414,"column":105,"nodeType":"1984","messageId":"1985","endLine":414,"endColumn":107},{"ruleId":"1961","severity":1,"message":"2212","line":448,"column":11,"nodeType":"1963","messageId":"1964","endLine":448,"endColumn":29},{"ruleId":"1961","severity":1,"message":"2213","line":38,"column":12,"nodeType":"1963","messageId":"1964","endLine":38,"endColumn":19},{"ruleId":"1978","severity":1,"message":"2214","line":58,"column":8,"nodeType":"1980","endLine":58,"endColumn":34,"suggestions":"2215"},{"ruleId":"1961","severity":1,"message":"2216","line":102,"column":15,"nodeType":"1963","messageId":"1964","endLine":102,"endColumn":23},{"ruleId":"1982","severity":1,"message":"1983","line":148,"column":53,"nodeType":"1984","messageId":"1985","endLine":148,"endColumn":55},{"ruleId":"1961","severity":1,"message":"2173","line":23,"column":12,"nodeType":"1963","messageId":"1964","endLine":23,"endColumn":18},{"ruleId":"1961","severity":1,"message":"2217","line":23,"column":36,"nodeType":"1963","messageId":"1964","endLine":23,"endColumn":40},{"ruleId":"1961","severity":1,"message":"2000","line":23,"column":113,"nodeType":"1963","messageId":"1964","endLine":23,"endColumn":120},{"ruleId":"1961","severity":1,"message":"2131","line":38,"column":12,"nodeType":"1963","messageId":"1964","endLine":38,"endColumn":21},{"ruleId":"1978","severity":1,"message":"2218","line":46,"column":8,"nodeType":"1980","endLine":46,"endColumn":38,"suggestions":"2219"},{"ruleId":"1978","severity":1,"message":"2220","line":45,"column":8,"nodeType":"1980","endLine":45,"endColumn":29,"suggestions":"2221"},{"ruleId":"1961","severity":1,"message":"2000","line":23,"column":71,"nodeType":"1963","messageId":"1964","endLine":23,"endColumn":78},{"ruleId":"1961","severity":1,"message":"2131","line":38,"column":12,"nodeType":"1963","messageId":"1964","endLine":38,"endColumn":21},{"ruleId":"1978","severity":1,"message":"2222","line":45,"column":8,"nodeType":"1980","endLine":45,"endColumn":30,"suggestions":"2223"},{"ruleId":"1961","severity":1,"message":"2224","line":9,"column":9,"nodeType":"1963","messageId":"1964","endLine":9,"endColumn":17},{"ruleId":"1978","severity":1,"message":"2225","line":24,"column":8,"nodeType":"1980","endLine":24,"endColumn":24,"suggestions":"2226"},{"ruleId":"1978","severity":1,"message":"2227","line":30,"column":8,"nodeType":"1980","endLine":30,"endColumn":21,"suggestions":"2228"},{"ruleId":"1978","severity":1,"message":"2229","line":36,"column":8,"nodeType":"1980","endLine":36,"endColumn":22,"suggestions":"2230"},{"ruleId":"1961","severity":1,"message":"2231","line":3,"column":51,"nodeType":"1963","messageId":"1964","endLine":3,"endColumn":65},{"ruleId":"1961","severity":1,"message":"2232","line":5,"column":9,"nodeType":"1963","messageId":"1964","endLine":5,"endColumn":21},{"ruleId":"1961","severity":1,"message":"2233","line":22,"column":12,"nodeType":"1963","messageId":"1964","endLine":22,"endColumn":23},{"ruleId":"1978","severity":1,"message":"2234","line":29,"column":8,"nodeType":"1980","endLine":29,"endColumn":34,"suggestions":"2235"},{"ruleId":"2004","severity":1,"message":"2005","line":34,"column":28,"nodeType":"2006","messageId":"2007","endLine":34,"endColumn":54,"fix":"2236"},{"ruleId":"1982","severity":1,"message":"1983","line":145,"column":55,"nodeType":"1984","messageId":"1985","endLine":145,"endColumn":57},{"ruleId":"1961","severity":1,"message":"2237","line":6,"column":32,"nodeType":"1963","messageId":"1964","endLine":6,"endColumn":46},{"ruleId":"1982","severity":1,"message":"1983","line":13,"column":14,"nodeType":"1984","messageId":"1985","endLine":13,"endColumn":16},{"ruleId":"1982","severity":1,"message":"1983","line":15,"column":21,"nodeType":"1984","messageId":"1985","endLine":15,"endColumn":23},{"ruleId":"1982","severity":1,"message":"1983","line":17,"column":21,"nodeType":"1984","messageId":"1985","endLine":17,"endColumn":23},{"ruleId":"1982","severity":1,"message":"1983","line":35,"column":27,"nodeType":"1984","messageId":"1985","endLine":35,"endColumn":29},{"ruleId":"1982","severity":1,"message":"1983","line":39,"column":27,"nodeType":"1984","messageId":"1985","endLine":39,"endColumn":29},{"ruleId":"1982","severity":1,"message":"1983","line":43,"column":27,"nodeType":"1984","messageId":"1985","endLine":43,"endColumn":29},{"ruleId":"1961","severity":1,"message":"2238","line":12,"column":27,"nodeType":"1963","messageId":"1964","endLine":12,"endColumn":44},{"ruleId":"1978","severity":1,"message":"2196","line":27,"column":8,"nodeType":"1980","endLine":27,"endColumn":25,"suggestions":"2239"},{"ruleId":"1978","severity":1,"message":"2198","line":33,"column":8,"nodeType":"1980","endLine":33,"endColumn":17,"suggestions":"2240"},{"ruleId":"1961","severity":1,"message":"2241","line":15,"column":9,"nodeType":"1963","messageId":"1964","endLine":15,"endColumn":20},{"ruleId":"1961","severity":1,"message":"2242","line":15,"column":22,"nodeType":"1963","messageId":"1964","endLine":15,"endColumn":32},{"ruleId":"1978","severity":1,"message":"2243","line":28,"column":8,"nodeType":"1980","endLine":28,"endColumn":25,"suggestions":"2244"},{"ruleId":"1978","severity":1,"message":"2198","line":44,"column":8,"nodeType":"1980","endLine":44,"endColumn":17,"suggestions":"2245"},{"ruleId":"1961","severity":1,"message":"2238","line":8,"column":5,"nodeType":"1963","messageId":"1964","endLine":8,"endColumn":22},{"ruleId":"1961","severity":1,"message":"2224","line":14,"column":9,"nodeType":"1963","messageId":"1964","endLine":14,"endColumn":17},{"ruleId":"1961","severity":1,"message":"2246","line":12,"column":8,"nodeType":"1963","messageId":"1964","endLine":12,"endColumn":18},{"ruleId":"1978","severity":1,"message":"2247","line":71,"column":8,"nodeType":"1980","endLine":71,"endColumn":35,"suggestions":"2248"},{"ruleId":"1982","severity":1,"message":"1983","line":74,"column":56,"nodeType":"1984","messageId":"1985","endLine":74,"endColumn":58},{"ruleId":"1961","severity":1,"message":"2249","line":91,"column":21,"nodeType":"1963","messageId":"1964","endLine":91,"endColumn":27},{"ruleId":"1982","severity":1,"message":"1983","line":128,"column":62,"nodeType":"1984","messageId":"1985","endLine":128,"endColumn":64},{"ruleId":"1961","severity":1,"message":"2250","line":3,"column":32,"nodeType":"1963","messageId":"1964","endLine":3,"endColumn":51},{"ruleId":"1961","severity":1,"message":"2232","line":5,"column":9,"nodeType":"1963","messageId":"1964","endLine":5,"endColumn":21},{"ruleId":"1961","severity":1,"message":"2251","line":5,"column":23,"nodeType":"1963","messageId":"1964","endLine":5,"endColumn":34},{"ruleId":"1961","severity":1,"message":"2252","line":6,"column":8,"nodeType":"1963","messageId":"1964","endLine":6,"endColumn":16},{"ruleId":"1961","severity":1,"message":"2253","line":5,"column":9,"nodeType":"1963","messageId":"1964","endLine":5,"endColumn":21},{"ruleId":"1961","severity":1,"message":"2252","line":6,"column":8,"nodeType":"1963","messageId":"1964","endLine":6,"endColumn":16},{"ruleId":"1961","severity":1,"message":"2254","line":1,"column":16,"nodeType":"1963","messageId":"1964","endLine":1,"endColumn":25},{"ruleId":"1961","severity":1,"message":"2255","line":1,"column":27,"nodeType":"1963","messageId":"1964","endLine":1,"endColumn":35},{"ruleId":"1961","severity":1,"message":"2256","line":3,"column":8,"nodeType":"1963","messageId":"1964","endLine":3,"endColumn":14},{"ruleId":"1961","severity":1,"message":"2257","line":4,"column":9,"nodeType":"1963","messageId":"1964","endLine":4,"endColumn":20},{"ruleId":"1961","severity":1,"message":"2258","line":5,"column":8,"nodeType":"1963","messageId":"1964","endLine":5,"endColumn":16},{"ruleId":"1961","severity":1,"message":"2259","line":6,"column":9,"nodeType":"1963","messageId":"1964","endLine":6,"endColumn":17},{"ruleId":"1961","severity":1,"message":"2260","line":6,"column":19,"nodeType":"1963","messageId":"1964","endLine":6,"endColumn":28},{"ruleId":"1961","severity":1,"message":"2261","line":9,"column":8,"nodeType":"1963","messageId":"1964","endLine":9,"endColumn":29},{"ruleId":"1961","severity":1,"message":"2262","line":10,"column":9,"nodeType":"1963","messageId":"1964","endLine":10,"endColumn":25},{"ruleId":"1961","severity":1,"message":"2263","line":7,"column":36,"nodeType":"1963","messageId":"1964","endLine":7,"endColumn":51},{"ruleId":"1961","severity":1,"message":"2264","line":53,"column":39,"nodeType":"1963","messageId":"1964","endLine":53,"endColumn":47},{"ruleId":"1961","severity":1,"message":"2265","line":10,"column":5,"nodeType":"1963","messageId":"1964","endLine":10,"endColumn":23},{"ruleId":"2004","severity":1,"message":"2005","line":42,"column":32,"nodeType":"2006","messageId":"2007","endLine":42,"endColumn":58,"fix":"2266"},{"ruleId":"2004","severity":1,"message":"2005","line":141,"column":28,"nodeType":"2006","messageId":"2007","endLine":141,"endColumn":54,"fix":"2267"},{"ruleId":"1961","severity":1,"message":"2268","line":13,"column":9,"nodeType":"1963","messageId":"1964","endLine":13,"endColumn":12},{"ruleId":"1961","severity":1,"message":"2269","line":13,"column":71,"nodeType":"1963","messageId":"1964","endLine":13,"endColumn":82},{"ruleId":"1978","severity":1,"message":"2270","line":21,"column":8,"nodeType":"1980","endLine":21,"endColumn":21,"suggestions":"2271"},{"ruleId":"1978","severity":1,"message":"2272","line":31,"column":8,"nodeType":"1980","endLine":31,"endColumn":14,"suggestions":"2273"},{"ruleId":"1978","severity":1,"message":"2274","line":37,"column":8,"nodeType":"1980","endLine":37,"endColumn":25,"suggestions":"2275"},{"ruleId":"1961","severity":1,"message":"2094","line":1,"column":8,"nodeType":"1963","messageId":"1964","endLine":1,"endColumn":13},{"ruleId":"2276","severity":1,"message":"2277","line":12,"column":13,"nodeType":"2278","messageId":"2279","endLine":12,"endColumn":19},{"ruleId":"1961","severity":1,"message":"2254","line":1,"column":16,"nodeType":"1963","messageId":"1964","endLine":1,"endColumn":25},{"ruleId":"1961","severity":1,"message":"2255","line":1,"column":27,"nodeType":"1963","messageId":"1964","endLine":1,"endColumn":35},{"ruleId":"1961","severity":1,"message":"2280","line":24,"column":12,"nodeType":"1963","messageId":"1964","endLine":24,"endColumn":16},{"ruleId":"1978","severity":1,"message":"2281","line":34,"column":8,"nodeType":"1980","endLine":34,"endColumn":18,"suggestions":"2282"},{"ruleId":"1978","severity":1,"message":"2283","line":45,"column":8,"nodeType":"1980","endLine":45,"endColumn":22,"suggestions":"2284"},{"ruleId":"1978","severity":1,"message":"2285","line":57,"column":8,"nodeType":"1980","endLine":57,"endColumn":30,"suggestions":"2286"},{"ruleId":"1978","severity":1,"message":"2287","line":57,"column":9,"nodeType":"2113","endLine":57,"endColumn":29},{"ruleId":"1978","severity":1,"message":"2288","line":85,"column":8,"nodeType":"1980","endLine":85,"endColumn":21,"suggestions":"2289"},{"ruleId":"1978","severity":1,"message":"2288","line":143,"column":8,"nodeType":"1980","endLine":143,"endColumn":21,"suggestions":"2290"},{"ruleId":"1978","severity":1,"message":"2291","line":41,"column":8,"nodeType":"1980","endLine":41,"endColumn":21,"suggestions":"2292"},{"ruleId":"1978","severity":1,"message":"2293","line":62,"column":8,"nodeType":"1980","endLine":62,"endColumn":18,"suggestions":"2294"},{"ruleId":"2004","severity":1,"message":"2005","line":92,"column":32,"nodeType":"2006","messageId":"2007","endLine":92,"endColumn":58,"fix":"2295"},{"ruleId":"1978","severity":1,"message":"2296","line":96,"column":8,"nodeType":"1980","endLine":96,"endColumn":15,"suggestions":"2297"},{"ruleId":"2123","severity":1,"message":"2298","line":218,"column":105,"nodeType":"2079","endLine":218,"endColumn":166},{"ruleId":"2123","severity":1,"message":"2298","line":248,"column":105,"nodeType":"2079","endLine":248,"endColumn":158},{"ruleId":"1978","severity":1,"message":"2198","line":28,"column":8,"nodeType":"1980","endLine":28,"endColumn":17,"suggestions":"2299"},{"ruleId":"1978","severity":1,"message":"2198","line":29,"column":8,"nodeType":"1980","endLine":29,"endColumn":17,"suggestions":"2300"},{"ruleId":"1961","severity":1,"message":"2301","line":15,"column":9,"nodeType":"1963","messageId":"1964","endLine":15,"endColumn":27},{"ruleId":"1978","severity":1,"message":"2302","line":99,"column":8,"nodeType":"1980","endLine":99,"endColumn":27,"suggestions":"2303"},{"ruleId":"1982","severity":1,"message":"1983","line":102,"column":56,"nodeType":"1984","messageId":"1985","endLine":102,"endColumn":58},{"ruleId":"1982","severity":1,"message":"1983","line":162,"column":62,"nodeType":"1984","messageId":"1985","endLine":162,"endColumn":64},{"ruleId":"1982","severity":1,"message":"2011","line":77,"column":67,"nodeType":"1984","messageId":"1985","endLine":77,"endColumn":69},{"ruleId":"1961","severity":1,"message":"2246","line":12,"column":8,"nodeType":"1963","messageId":"1964","endLine":12,"endColumn":18},{"ruleId":"1978","severity":1,"message":"2304","line":69,"column":8,"nodeType":"1980","endLine":69,"endColumn":33,"suggestions":"2305"},{"ruleId":"1982","severity":1,"message":"1983","line":72,"column":56,"nodeType":"1984","messageId":"1985","endLine":72,"endColumn":58},{"ruleId":"1982","severity":1,"message":"1983","line":132,"column":62,"nodeType":"1984","messageId":"1985","endLine":132,"endColumn":64},{"ruleId":"1961","severity":1,"message":"2246","line":12,"column":8,"nodeType":"1963","messageId":"1964","endLine":12,"endColumn":18},{"ruleId":"1961","severity":1,"message":"2263","line":15,"column":9,"nodeType":"1963","messageId":"1964","endLine":15,"endColumn":24},{"ruleId":"1978","severity":1,"message":"2306","line":99,"column":8,"nodeType":"1980","endLine":99,"endColumn":32,"suggestions":"2307"},{"ruleId":"1978","severity":1,"message":"2306","line":105,"column":8,"nodeType":"1980","endLine":105,"endColumn":35,"suggestions":"2308"},{"ruleId":"1982","severity":1,"message":"1983","line":108,"column":56,"nodeType":"1984","messageId":"1985","endLine":108,"endColumn":58},{"ruleId":"1982","severity":1,"message":"1983","line":175,"column":62,"nodeType":"1984","messageId":"1985","endLine":175,"endColumn":64},{"ruleId":"1961","severity":1,"message":"2246","line":10,"column":8,"nodeType":"1963","messageId":"1964","endLine":10,"endColumn":18},{"ruleId":"1978","severity":1,"message":"2309","line":65,"column":8,"nodeType":"1980","endLine":65,"endColumn":36,"suggestions":"2310"},{"ruleId":"1982","severity":1,"message":"1983","line":68,"column":56,"nodeType":"1984","messageId":"1985","endLine":68,"endColumn":58},{"ruleId":"1982","severity":1,"message":"1983","line":128,"column":62,"nodeType":"1984","messageId":"1985","endLine":128,"endColumn":64},{"ruleId":"1961","severity":1,"message":"2246","line":12,"column":8,"nodeType":"1963","messageId":"1964","endLine":12,"endColumn":18},{"ruleId":"1961","severity":1,"message":"2263","line":17,"column":9,"nodeType":"1963","messageId":"1964","endLine":17,"endColumn":24},{"ruleId":"1978","severity":1,"message":"2311","line":92,"column":8,"nodeType":"1980","endLine":92,"endColumn":34,"suggestions":"2312"},{"ruleId":"1978","severity":1,"message":"2311","line":98,"column":8,"nodeType":"1980","endLine":98,"endColumn":37,"suggestions":"2313"},{"ruleId":"1982","severity":1,"message":"1983","line":101,"column":56,"nodeType":"1984","messageId":"1985","endLine":101,"endColumn":58},{"ruleId":"2314","severity":1,"message":"2315","line":134,"column":26,"nodeType":"1963","messageId":"2316","endLine":134,"endColumn":27},{"ruleId":"2317","severity":1,"message":"2318","line":138,"column":40,"nodeType":"2092","messageId":"2319","endLine":147,"endColumn":22},{"ruleId":"1982","severity":1,"message":"1983","line":190,"column":62,"nodeType":"1984","messageId":"1985","endLine":190,"endColumn":64},{"ruleId":"1961","severity":1,"message":"2246","line":13,"column":8,"nodeType":"1963","messageId":"1964","endLine":13,"endColumn":18},{"ruleId":"1978","severity":1,"message":"2320","line":65,"column":8,"nodeType":"1980","endLine":65,"endColumn":34,"suggestions":"2321"},{"ruleId":"1982","severity":1,"message":"1983","line":68,"column":56,"nodeType":"1984","messageId":"1985","endLine":68,"endColumn":58},{"ruleId":"1982","severity":1,"message":"1983","line":128,"column":62,"nodeType":"1984","messageId":"1985","endLine":128,"endColumn":64},{"ruleId":"2322","severity":1,"message":"2323","line":1,"column":1,"nodeType":"2324","endLine":8,"endColumn":3},{"ruleId":"2004","severity":1,"message":"2005","line":21,"column":24,"nodeType":"2006","messageId":"2007","endLine":21,"endColumn":50,"fix":"2325"},{"ruleId":"1961","severity":1,"message":"2246","line":11,"column":8,"nodeType":"1963","messageId":"1964","endLine":11,"endColumn":18},{"ruleId":"1978","severity":1,"message":"2326","line":95,"column":8,"nodeType":"1980","endLine":95,"endColumn":33,"suggestions":"2327"},{"ruleId":"1978","severity":1,"message":"2326","line":101,"column":8,"nodeType":"1980","endLine":101,"endColumn":36,"suggestions":"2328"},{"ruleId":"1978","severity":1,"message":"2329","line":111,"column":8,"nodeType":"1980","endLine":111,"endColumn":15,"suggestions":"2330"},{"ruleId":"1982","severity":1,"message":"1983","line":114,"column":56,"nodeType":"1984","messageId":"1985","endLine":114,"endColumn":58},{"ruleId":"1982","severity":1,"message":"1983","line":181,"column":62,"nodeType":"1984","messageId":"1985","endLine":181,"endColumn":64},{"ruleId":"1978","severity":1,"message":"2331","line":18,"column":8,"nodeType":"1980","endLine":18,"endColumn":24,"suggestions":"2332"},{"ruleId":"1961","severity":1,"message":"2333","line":13,"column":25,"nodeType":"1963","messageId":"1964","endLine":13,"endColumn":39},{"ruleId":"1978","severity":1,"message":"2334","line":19,"column":8,"nodeType":"1980","endLine":19,"endColumn":17,"suggestions":"2335"},{"ruleId":"1961","severity":1,"message":"2336","line":3,"column":15,"nodeType":"1963","messageId":"1964","endLine":3,"endColumn":23},{"ruleId":"1961","severity":1,"message":"1962","line":3,"column":35,"nodeType":"1963","messageId":"1964","endLine":3,"endColumn":42},{"ruleId":"1961","severity":1,"message":"2001","line":4,"column":9,"nodeType":"1963","messageId":"1964","endLine":4,"endColumn":15},{"ruleId":"1961","severity":1,"message":"2337","line":21,"column":21,"nodeType":"1963","messageId":"1964","endLine":21,"endColumn":38},{"ruleId":"1961","severity":1,"message":"2338","line":21,"column":55,"nodeType":"1963","messageId":"1964","endLine":21,"endColumn":62},{"ruleId":"1961","severity":1,"message":"2339","line":22,"column":12,"nodeType":"1963","messageId":"1964","endLine":22,"endColumn":28},{"ruleId":"1961","severity":1,"message":"2340","line":24,"column":12,"nodeType":"1963","messageId":"1964","endLine":24,"endColumn":30},{"ruleId":"1961","severity":1,"message":"2341","line":24,"column":32,"nodeType":"1963","messageId":"1964","endLine":24,"endColumn":53},{"ruleId":"1961","severity":1,"message":"1997","line":24,"column":7,"nodeType":"1963","messageId":"1964","endLine":24,"endColumn":14},{"ruleId":"1961","severity":1,"message":"2342","line":26,"column":7,"nodeType":"1963","messageId":"1964","endLine":26,"endColumn":15},{"ruleId":"1961","severity":1,"message":"1998","line":54,"column":7,"nodeType":"1963","messageId":"1964","endLine":54,"endColumn":14},{"ruleId":"1961","severity":1,"message":"1999","line":56,"column":7,"nodeType":"1963","messageId":"1964","endLine":56,"endColumn":15},{"ruleId":"1978","severity":1,"message":"2343","line":119,"column":8,"nodeType":"1980","endLine":119,"endColumn":32,"suggestions":"2344"},{"ruleId":"1961","severity":1,"message":"2345","line":9,"column":8,"nodeType":"1963","messageId":"1964","endLine":9,"endColumn":20},{"ruleId":"1961","severity":1,"message":"2346","line":14,"column":31,"nodeType":"1963","messageId":"1964","endLine":14,"endColumn":43},{"ruleId":"1961","severity":1,"message":"2338","line":14,"column":45,"nodeType":"1963","messageId":"1964","endLine":14,"endColumn":52},{"ruleId":"1978","severity":1,"message":"2347","line":28,"column":8,"nodeType":"1980","endLine":28,"endColumn":17,"suggestions":"2348"},{"ruleId":"1978","severity":1,"message":"2349","line":32,"column":8,"nodeType":"1980","endLine":32,"endColumn":26,"suggestions":"2350"},{"ruleId":"1961","severity":1,"message":"2351","line":61,"column":11,"nodeType":"1963","messageId":"1964","endLine":61,"endColumn":28},{"ruleId":"2090","severity":1,"message":"2091","line":68,"column":35,"nodeType":"2092","messageId":"2093","endLine":68,"endColumn":37},{"ruleId":"1982","severity":1,"message":"1983","line":70,"column":81,"nodeType":"1984","messageId":"1985","endLine":70,"endColumn":83},{"ruleId":"1982","severity":1,"message":"1983","line":70,"column":106,"nodeType":"1984","messageId":"1985","endLine":70,"endColumn":108},{"ruleId":"2090","severity":1,"message":"2091","line":80,"column":47,"nodeType":"2092","messageId":"2093","endLine":80,"endColumn":49},{"ruleId":"1982","severity":1,"message":"1983","line":198,"column":45,"nodeType":"1984","messageId":"1985","endLine":198,"endColumn":47},{"ruleId":"1961","severity":1,"message":"2352","line":8,"column":8,"nodeType":"1963","messageId":"1964","endLine":8,"endColumn":15},{"ruleId":"1961","severity":1,"message":"2353","line":9,"column":8,"nodeType":"1963","messageId":"1964","endLine":9,"endColumn":15},{"ruleId":"1961","severity":1,"message":"2354","line":10,"column":8,"nodeType":"1963","messageId":"1964","endLine":10,"endColumn":15},{"ruleId":"1961","severity":1,"message":"2355","line":11,"column":8,"nodeType":"1963","messageId":"1964","endLine":11,"endColumn":15},{"ruleId":"1961","severity":1,"message":"2356","line":12,"column":8,"nodeType":"1963","messageId":"1964","endLine":12,"endColumn":15},{"ruleId":"1961","severity":1,"message":"2217","line":18,"column":19,"nodeType":"1963","messageId":"1964","endLine":18,"endColumn":23},{"ruleId":"1961","severity":1,"message":"2000","line":18,"column":37,"nodeType":"1963","messageId":"1964","endLine":18,"endColumn":44},{"ruleId":"1961","severity":1,"message":"2338","line":18,"column":46,"nodeType":"1963","messageId":"1964","endLine":18,"endColumn":53},{"ruleId":"1957","replacedBy":"2357"},{"ruleId":"1959","replacedBy":"2358"},{"ruleId":"1961","severity":1,"message":"2359","line":3,"column":15,"nodeType":"1963","messageId":"1964","endLine":3,"endColumn":19},{"ruleId":"1961","severity":1,"message":"2336","line":3,"column":21,"nodeType":"1963","messageId":"1964","endLine":3,"endColumn":29},{"ruleId":"1961","severity":1,"message":"2360","line":4,"column":8,"nodeType":"1963","messageId":"1964","endLine":4,"endColumn":15},{"ruleId":"1961","severity":1,"message":"2361","line":5,"column":8,"nodeType":"1963","messageId":"1964","endLine":5,"endColumn":22},{"ruleId":"1961","severity":1,"message":"2362","line":2,"column":44,"nodeType":"1963","messageId":"1964","endLine":2,"endColumn":49},{"ruleId":"1961","severity":1,"message":"2363","line":2,"column":51,"nodeType":"1963","messageId":"1964","endLine":2,"endColumn":56},{"ruleId":"1961","severity":1,"message":"2001","line":2,"column":68,"nodeType":"1963","messageId":"1964","endLine":2,"endColumn":74},{"ruleId":"1961","severity":1,"message":"2301","line":4,"column":9,"nodeType":"1963","messageId":"1964","endLine":4,"endColumn":27},{"ruleId":"1961","severity":1,"message":"2364","line":5,"column":9,"nodeType":"1963","messageId":"1964","endLine":5,"endColumn":17},{"ruleId":"1961","severity":1,"message":"2217","line":15,"column":20,"nodeType":"1963","messageId":"1964","endLine":15,"endColumn":24},{"ruleId":"1961","severity":1,"message":"2000","line":15,"column":39,"nodeType":"1963","messageId":"1964","endLine":15,"endColumn":46},{"ruleId":"1961","severity":1,"message":"2338","line":15,"column":48,"nodeType":"1963","messageId":"1964","endLine":15,"endColumn":55},{"ruleId":"2004","severity":1,"message":"2005","line":88,"column":20,"nodeType":"2006","messageId":"2007","endLine":88,"endColumn":46,"fix":"2365"},{"ruleId":"1978","severity":1,"message":"2366","line":19,"column":8,"nodeType":"1980","endLine":19,"endColumn":17,"suggestions":"2367"},{"ruleId":"1961","severity":1,"message":"2368","line":7,"column":9,"nodeType":"1963","messageId":"1964","endLine":7,"endColumn":12},{"ruleId":"1961","severity":1,"message":"2369","line":17,"column":12,"nodeType":"1963","messageId":"1964","endLine":17,"endColumn":22},{"ruleId":"1961","severity":1,"message":"2370","line":17,"column":37,"nodeType":"1963","messageId":"1964","endLine":17,"endColumn":42},{"ruleId":"1961","severity":1,"message":"2371","line":17,"column":52,"nodeType":"1963","messageId":"1964","endLine":17,"endColumn":61},{"ruleId":"1961","severity":1,"message":"2372","line":19,"column":12,"nodeType":"1963","messageId":"1964","endLine":19,"endColumn":29},{"ruleId":"1961","severity":1,"message":"2373","line":19,"column":31,"nodeType":"1963","messageId":"1964","endLine":19,"endColumn":51},{"ruleId":"2004","severity":1,"message":"2005","line":23,"column":32,"nodeType":"2006","messageId":"2007","endLine":23,"endColumn":58,"fix":"2374"},{"ruleId":"1978","severity":1,"message":"2375","line":27,"column":8,"nodeType":"1980","endLine":27,"endColumn":20,"suggestions":"2376"},{"ruleId":"1961","severity":1,"message":"2377","line":96,"column":22,"nodeType":"1963","messageId":"1964","endLine":96,"endColumn":29},{"ruleId":"1961","severity":1,"message":"2378","line":3,"column":10,"nodeType":"1963","messageId":"1964","endLine":3,"endColumn":14},{"ruleId":"1961","severity":1,"message":"2379","line":4,"column":10,"nodeType":"1963","messageId":"1964","endLine":4,"endColumn":18},{"ruleId":"1961","severity":1,"message":"2380","line":4,"column":20,"nodeType":"1963","messageId":"1964","endLine":4,"endColumn":34},{"ruleId":"1961","severity":1,"message":"2381","line":4,"column":36,"nodeType":"1963","messageId":"1964","endLine":4,"endColumn":48},{"ruleId":"1961","severity":1,"message":"1965","line":4,"column":50,"nodeType":"1963","messageId":"1964","endLine":4,"endColumn":53},{"ruleId":"1961","severity":1,"message":"1966","line":4,"column":55,"nodeType":"1963","messageId":"1964","endLine":4,"endColumn":58},{"ruleId":"1961","severity":1,"message":"2382","line":5,"column":8,"nodeType":"1963","messageId":"1964","endLine":5,"endColumn":17},{"ruleId":"1961","severity":1,"message":"2383","line":8,"column":8,"nodeType":"1963","messageId":"1964","endLine":8,"endColumn":15},{"ruleId":"1961","severity":1,"message":"2352","line":9,"column":8,"nodeType":"1963","messageId":"1964","endLine":9,"endColumn":15},{"ruleId":"1961","severity":1,"message":"2384","line":18,"column":10,"nodeType":"1963","messageId":"1964","endLine":18,"endColumn":14},{"ruleId":"1961","severity":1,"message":"2385","line":18,"column":16,"nodeType":"1963","messageId":"1964","endLine":18,"endColumn":23},{"ruleId":"1961","severity":1,"message":"2265","line":27,"column":9,"nodeType":"1963","messageId":"1964","endLine":27,"endColumn":27},{"ruleId":"1961","severity":1,"message":"2386","line":27,"column":29,"nodeType":"1963","messageId":"1964","endLine":27,"endColumn":55},{"ruleId":"1961","severity":1,"message":"2345","line":28,"column":8,"nodeType":"1963","messageId":"1964","endLine":28,"endColumn":20},{"ruleId":"1978","severity":1,"message":"2387","line":68,"column":8,"nodeType":"1980","endLine":68,"endColumn":33,"suggestions":"2388"},{"ruleId":"1961","severity":1,"message":"2389","line":44,"column":9,"nodeType":"1963","messageId":"1964","endLine":44,"endColumn":24},{"ruleId":"1961","severity":1,"message":"2390","line":10,"column":5,"nodeType":"1963","messageId":"1964","endLine":10,"endColumn":24},{"ruleId":"1961","severity":1,"message":"2391","line":11,"column":5,"nodeType":"1963","messageId":"1964","endLine":11,"endColumn":23},{"ruleId":"2004","severity":1,"message":"2005","line":126,"column":28,"nodeType":"2006","messageId":"2007","endLine":126,"endColumn":54,"fix":"2392"},{"ruleId":"1982","severity":1,"message":"1983","line":162,"column":131,"nodeType":"1984","messageId":"1985","endLine":162,"endColumn":133},{"ruleId":"1961","severity":1,"message":"2393","line":7,"column":25,"nodeType":"1963","messageId":"1964","endLine":7,"endColumn":40},{"ruleId":"1982","severity":1,"message":"1983","line":124,"column":28,"nodeType":"1984","messageId":"1985","endLine":124,"endColumn":30},{"ruleId":"1982","severity":1,"message":"1983","line":89,"column":88,"nodeType":"1984","messageId":"1985","endLine":89,"endColumn":90},{"ruleId":"1982","severity":1,"message":"1983","line":128,"column":88,"nodeType":"1984","messageId":"1985","endLine":128,"endColumn":90},{"ruleId":"1961","severity":1,"message":"2108","line":2,"column":8,"nodeType":"1963","messageId":"1964","endLine":2,"endColumn":21},{"ruleId":"1961","severity":1,"message":"2359","line":3,"column":9,"nodeType":"1963","messageId":"1964","endLine":3,"endColumn":13},{"ruleId":"1961","severity":1,"message":"2336","line":3,"column":15,"nodeType":"1963","messageId":"1964","endLine":3,"endColumn":23},{"ruleId":"1961","severity":1,"message":"2361","line":4,"column":8,"nodeType":"1963","messageId":"1964","endLine":4,"endColumn":22},{"ruleId":"1961","severity":1,"message":"2360","line":5,"column":8,"nodeType":"1963","messageId":"1964","endLine":5,"endColumn":15},{"ruleId":"1978","severity":1,"message":"2394","line":88,"column":8,"nodeType":"1980","endLine":88,"endColumn":21,"suggestions":"2395"},{"ruleId":"1961","severity":1,"message":"2108","line":2,"column":8,"nodeType":"1963","messageId":"1964","endLine":2,"endColumn":21},{"ruleId":"1982","severity":1,"message":"1983","line":16,"column":43,"nodeType":"1984","messageId":"1985","endLine":16,"endColumn":45},{"ruleId":"1961","severity":1,"message":"2255","line":1,"column":27,"nodeType":"1963","messageId":"1964","endLine":1,"endColumn":35},{"ruleId":"1978","severity":1,"message":"2396","line":35,"column":8,"nodeType":"1980","endLine":35,"endColumn":15,"suggestions":"2397"},{"ruleId":"1978","severity":1,"message":"2398","line":13,"column":8,"nodeType":"1980","endLine":13,"endColumn":17,"suggestions":"2399"},{"ruleId":"1961","severity":1,"message":"2400","line":10,"column":9,"nodeType":"1963","messageId":"1964","endLine":10,"endColumn":20},{"ruleId":"1978","severity":1,"message":"1979","line":21,"column":8,"nodeType":"1980","endLine":21,"endColumn":33,"suggestions":"2401"},{"ruleId":"1978","severity":1,"message":"1979","line":25,"column":8,"nodeType":"1980","endLine":25,"endColumn":17,"suggestions":"2402"},{"ruleId":"1978","severity":1,"message":"2403","line":40,"column":8,"nodeType":"1980","endLine":40,"endColumn":15,"suggestions":"2404"},{"ruleId":"1978","severity":1,"message":"1979","line":47,"column":8,"nodeType":"1980","endLine":47,"endColumn":15,"suggestions":"2405"},{"ruleId":"2276","severity":1,"message":"2277","line":120,"column":13,"nodeType":"2278","messageId":"2279","endLine":120,"endColumn":18},{"ruleId":"1961","severity":1,"message":"2406","line":14,"column":30,"nodeType":"1963","messageId":"1964","endLine":14,"endColumn":41},{"ruleId":"2407","severity":1,"message":"2408","line":179,"column":9,"nodeType":"2409","messageId":"1985","endLine":184,"endColumn":18},{"ruleId":"2410","severity":1,"message":"2411","line":113,"column":9,"nodeType":"2409","messageId":"2412","endLine":115,"endColumn":18},{"ruleId":"1961","severity":1,"message":"2108","line":2,"column":8,"nodeType":"1963","messageId":"1964","endLine":2,"endColumn":21},{"ruleId":"1961","severity":1,"message":"2359","line":3,"column":9,"nodeType":"1963","messageId":"1964","endLine":3,"endColumn":13},{"ruleId":"1961","severity":1,"message":"2336","line":3,"column":15,"nodeType":"1963","messageId":"1964","endLine":3,"endColumn":23},{"ruleId":"1961","severity":1,"message":"2361","line":4,"column":8,"nodeType":"1963","messageId":"1964","endLine":4,"endColumn":22},{"ruleId":"1961","severity":1,"message":"2360","line":5,"column":8,"nodeType":"1963","messageId":"1964","endLine":5,"endColumn":15},{"ruleId":"1978","severity":1,"message":"2394","line":82,"column":8,"nodeType":"1980","endLine":82,"endColumn":20,"suggestions":"2413"},{"ruleId":"1978","severity":1,"message":"2414","line":23,"column":8,"nodeType":"1980","endLine":23,"endColumn":10,"suggestions":"2415"},{"ruleId":"1961","severity":1,"message":"2108","line":2,"column":8,"nodeType":"1963","messageId":"1964","endLine":2,"endColumn":21},{"ruleId":"1961","severity":1,"message":"2001","line":4,"column":9,"nodeType":"1963","messageId":"1964","endLine":4,"endColumn":15},{"ruleId":"1961","severity":1,"message":"2246","line":11,"column":8,"nodeType":"1963","messageId":"1964","endLine":11,"endColumn":18},{"ruleId":"1978","severity":1,"message":"2326","line":95,"column":8,"nodeType":"1980","endLine":95,"endColumn":33,"suggestions":"2416"},{"ruleId":"1978","severity":1,"message":"2326","line":101,"column":8,"nodeType":"1980","endLine":101,"endColumn":36,"suggestions":"2417"},{"ruleId":"1978","severity":1,"message":"2329","line":111,"column":8,"nodeType":"1980","endLine":111,"endColumn":15,"suggestions":"2418"},{"ruleId":"1982","severity":1,"message":"1983","line":114,"column":56,"nodeType":"1984","messageId":"1985","endLine":114,"endColumn":58},{"ruleId":"1982","severity":1,"message":"1983","line":181,"column":62,"nodeType":"1984","messageId":"1985","endLine":181,"endColumn":64},{"ruleId":"1961","severity":1,"message":"2419","line":2,"column":25,"nodeType":"1963","messageId":"1964","endLine":2,"endColumn":30},{"ruleId":"1961","severity":1,"message":"2382","line":5,"column":8,"nodeType":"1963","messageId":"1964","endLine":5,"endColumn":17},{"ruleId":"1961","severity":1,"message":"2420","line":11,"column":36,"nodeType":"1963","messageId":"1964","endLine":11,"endColumn":52},{"ruleId":"1961","severity":1,"message":"2421","line":17,"column":12,"nodeType":"1963","messageId":"1964","endLine":17,"endColumn":17},{"ruleId":"1961","severity":1,"message":"2217","line":17,"column":19,"nodeType":"1963","messageId":"1964","endLine":17,"endColumn":23},{"ruleId":"1961","severity":1,"message":"2000","line":17,"column":37,"nodeType":"1963","messageId":"1964","endLine":17,"endColumn":44},{"ruleId":"1961","severity":1,"message":"2338","line":17,"column":46,"nodeType":"1963","messageId":"1964","endLine":17,"endColumn":53},{"ruleId":"1961","severity":1,"message":"2419","line":2,"column":35,"nodeType":"1963","messageId":"1964","endLine":2,"endColumn":40},{"ruleId":"1961","severity":1,"message":"2382","line":5,"column":8,"nodeType":"1963","messageId":"1964","endLine":5,"endColumn":17},{"ruleId":"1961","severity":1,"message":"2420","line":11,"column":43,"nodeType":"1963","messageId":"1964","endLine":11,"endColumn":59},{"ruleId":"1961","severity":1,"message":"2232","line":7,"column":9,"nodeType":"1963","messageId":"1964","endLine":7,"endColumn":21},{"ruleId":"1961","severity":1,"message":"2238","line":7,"column":23,"nodeType":"1963","messageId":"1964","endLine":7,"endColumn":40},{"ruleId":"2422","severity":1,"message":"2423","line":89,"column":140,"nodeType":"1984","messageId":"2424","endLine":89,"endColumn":141},{"ruleId":"1978","severity":1,"message":"2425","line":123,"column":8,"nodeType":"1980","endLine":123,"endColumn":39,"suggestions":"2426"},{"ruleId":"1978","severity":1,"message":"2425","line":129,"column":8,"nodeType":"1980","endLine":129,"endColumn":42,"suggestions":"2427"},{"ruleId":"1978","severity":1,"message":"2329","line":139,"column":8,"nodeType":"1980","endLine":139,"endColumn":15,"suggestions":"2428"},{"ruleId":"1982","severity":1,"message":"1983","line":142,"column":56,"nodeType":"1984","messageId":"1985","endLine":142,"endColumn":58},{"ruleId":"1982","severity":1,"message":"1983","line":219,"column":62,"nodeType":"1984","messageId":"1985","endLine":219,"endColumn":64},{"ruleId":"1961","severity":1,"message":"2232","line":7,"column":9,"nodeType":"1963","messageId":"1964","endLine":7,"endColumn":21},{"ruleId":"1961","severity":1,"message":"2238","line":7,"column":23,"nodeType":"1963","messageId":"1964","endLine":7,"endColumn":40},{"ruleId":"1961","severity":1,"message":"2251","line":7,"column":42,"nodeType":"1963","messageId":"1964","endLine":7,"endColumn":53},{"ruleId":"1961","severity":1,"message":"2246","line":11,"column":8,"nodeType":"1963","messageId":"1964","endLine":11,"endColumn":18},{"ruleId":"1961","severity":1,"message":"2263","line":16,"column":9,"nodeType":"1963","messageId":"1964","endLine":16,"endColumn":24},{"ruleId":"1961","severity":1,"message":"2429","line":113,"column":12,"nodeType":"1963","messageId":"1964","endLine":113,"endColumn":20},{"ruleId":"1961","severity":1,"message":"2430","line":113,"column":22,"nodeType":"1963","messageId":"1964","endLine":113,"endColumn":33},{"ruleId":"1961","severity":1,"message":"2431","line":114,"column":12,"nodeType":"1963","messageId":"1964","endLine":114,"endColumn":18},{"ruleId":"1978","severity":1,"message":"2432","line":126,"column":8,"nodeType":"1980","endLine":126,"endColumn":34,"suggestions":"2433"},{"ruleId":"1978","severity":1,"message":"2432","line":132,"column":8,"nodeType":"1980","endLine":132,"endColumn":37,"suggestions":"2434"},{"ruleId":"1982","severity":1,"message":"1983","line":135,"column":56,"nodeType":"1984","messageId":"1985","endLine":135,"endColumn":58},{"ruleId":"1982","severity":1,"message":"1983","line":200,"column":62,"nodeType":"1984","messageId":"1985","endLine":200,"endColumn":64},{"ruleId":"1961","severity":1,"message":"2435","line":4,"column":9,"nodeType":"1963","messageId":"1964","endLine":4,"endColumn":20},{"ruleId":"1978","severity":1,"message":"1986","line":37,"column":8,"nodeType":"1980","endLine":37,"endColumn":29,"suggestions":"2436"},{"ruleId":"1978","severity":1,"message":"2437","line":19,"column":8,"nodeType":"1980","endLine":19,"endColumn":27,"suggestions":"2438"},{"ruleId":"1982","severity":1,"message":"1983","line":136,"column":88,"nodeType":"1984","messageId":"1985","endLine":136,"endColumn":90},{"ruleId":"1961","severity":1,"message":"2439","line":6,"column":26,"nodeType":"1963","messageId":"1964","endLine":6,"endColumn":32},{"ruleId":"1961","severity":1,"message":"2001","line":10,"column":9,"nodeType":"1963","messageId":"1964","endLine":10,"endColumn":15},{"ruleId":"1961","severity":1,"message":"2440","line":10,"column":17,"nodeType":"1963","messageId":"1964","endLine":10,"endColumn":24},{"ruleId":"2004","severity":1,"message":"2005","line":42,"column":28,"nodeType":"2006","messageId":"2007","endLine":42,"endColumn":54,"fix":"2441"},{"ruleId":"1978","severity":1,"message":"2442","line":46,"column":8,"nodeType":"1980","endLine":46,"endColumn":14,"suggestions":"2443"},{"ruleId":"2004","severity":1,"message":"2005","line":54,"column":32,"nodeType":"2006","messageId":"2007","endLine":54,"endColumn":58,"fix":"2444"},{"ruleId":"1978","severity":1,"message":"2445","line":59,"column":8,"nodeType":"1980","endLine":59,"endColumn":29,"suggestions":"2446"},{"ruleId":"1982","severity":1,"message":"1983","line":90,"column":83,"nodeType":"1984","messageId":"1985","endLine":90,"endColumn":85},{"ruleId":"1982","severity":1,"message":"1983","line":91,"column":83,"nodeType":"1984","messageId":"1985","endLine":91,"endColumn":85},{"ruleId":"1982","severity":1,"message":"1983","line":40,"column":32,"nodeType":"1984","messageId":"1985","endLine":40,"endColumn":34},{"ruleId":"1982","severity":1,"message":"1983","line":52,"column":32,"nodeType":"1984","messageId":"1985","endLine":52,"endColumn":34},{"ruleId":"1961","severity":1,"message":"2440","line":4,"column":15,"nodeType":"1963","messageId":"1964","endLine":4,"endColumn":22},{"ruleId":"1961","severity":1,"message":"2447","line":10,"column":9,"nodeType":"1963","messageId":"1964","endLine":10,"endColumn":18},{"ruleId":"1961","severity":1,"message":"2448","line":12,"column":9,"nodeType":"1963","messageId":"1964","endLine":12,"endColumn":15},{"ruleId":"1961","severity":1,"message":"2449","line":17,"column":9,"nodeType":"1963","messageId":"1964","endLine":17,"endColumn":19},{"ruleId":"1961","severity":1,"message":"2241","line":18,"column":9,"nodeType":"1963","messageId":"1964","endLine":18,"endColumn":20},{"ruleId":"1961","severity":1,"message":"2242","line":18,"column":22,"nodeType":"1963","messageId":"1964","endLine":18,"endColumn":32},{"ruleId":"1961","severity":1,"message":"2450","line":18,"column":34,"nodeType":"1963","messageId":"1964","endLine":18,"endColumn":45},{"ruleId":"1961","severity":1,"message":"2451","line":21,"column":8,"nodeType":"1963","messageId":"1964","endLine":21,"endColumn":21},{"ruleId":"1961","severity":1,"message":"2000","line":24,"column":36,"nodeType":"1963","messageId":"1964","endLine":24,"endColumn":43},{"ruleId":"1978","severity":1,"message":"2012","line":33,"column":8,"nodeType":"1980","endLine":33,"endColumn":26,"suggestions":"2452"},{"ruleId":"1978","severity":1,"message":"2023","line":40,"column":8,"nodeType":"1980","endLine":40,"endColumn":14,"suggestions":"2453"},{"ruleId":"2073","severity":1,"message":"2074","line":59,"column":79,"nodeType":"2075","messageId":"2076","endLine":59,"endColumn":81},{"ruleId":"2073","severity":1,"message":"2074","line":59,"column":95,"nodeType":"2075","messageId":"2076","endLine":59,"endColumn":97},{"ruleId":"1982","severity":1,"message":"1983","line":22,"column":69,"nodeType":"1984","messageId":"1985","endLine":22,"endColumn":71},{"ruleId":"1982","severity":1,"message":"1983","line":23,"column":60,"nodeType":"1984","messageId":"1985","endLine":23,"endColumn":62},{"ruleId":"1978","severity":1,"message":"2454","line":40,"column":8,"nodeType":"1980","endLine":40,"endColumn":29,"suggestions":"2455"},{"ruleId":"1978","severity":1,"message":"2456","line":52,"column":8,"nodeType":"1980","endLine":52,"endColumn":24,"suggestions":"2457"},{"ruleId":"1978","severity":1,"message":"2458","line":69,"column":8,"nodeType":"1980","endLine":69,"endColumn":26,"suggestions":"2459"},"no-native-reassign",["2460"],"no-negated-in-lhs",["2461"],"no-unused-vars","'Spinner' is defined but never used.","Identifier","unusedVar","'Row' is defined but never used.","'Col' is defined but never used.","'LanguageDropdown' is defined but never used.","'github' is defined but never used.","'bitbucket' is defined but never used.","'dribbble' is defined but never used.","'dropbox' is defined but never used.","'mail_chimp' is defined but never used.","'slack' is defined but never used.","'socialDrp' is assigned a value but never used.","'setsocialDrp' is assigned a value but never used.","'copying' is assigned a value but never used.","'setUser' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["2462"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'props.match.params.id'. Either include it or remove the dependency array.",["2463"],"'productChart' is assigned a value but never used.","'setProductChart' is assigned a value but never used.",["2464"],"'facebook' is defined but never used.","'google' is defined but never used.","'googleResponse' is assigned a value but never used.","'facebookResponse' is assigned a value but never used.","'TopVendors' is defined but never used.","'getOrders' is defined but never used.","'series2' is assigned a value but never used.","'series3' is assigned a value but never used.","'options3' is assigned a value but never used.","'loading' is assigned a value but never used.","'Button' is defined but never used.",["2465"],["2466"],"new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"2467","text":"2468"},{"range":"2469","text":"2468"},{"range":"2470","text":"2468"},"Expected '!==' and instead saw '!='.","React Hook useEffect has missing dependencies: 'isEdit' and 'props.match.params.id'. Either include them or remove the dependency array.",["2471"],"'HtmlTooltip' is defined but never used.","'materialDefault' is assigned a value but never used.","'setMaterialDefault' is assigned a value but never used.","'publication' is assigned a value but never used.","'setPublication' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'isEdit', 'onGetCategories', 'onGetFieldOptions', 'onGetSizes', 'onGetTemplateCatalogs', and 'props.match.params.id'. Either include them or remove the dependency array.",["2472"],"React Hook useEffect has missing dependencies: 'onGetProduct', 'onResetProductImages', 'onResetProductSize', and 'product.id'. Either include them or remove the dependency array.",["2473"],"React Hook useEffect has a missing dependency: 'isEdit'. Either include it or remove the dependency array.",["2474"],"React Hook useEffect has a missing dependency: 'product.size'. Either include it or remove the dependency array.",["2475"],"React Hook useEffect has a missing dependency: 'onGetFieldOptions'. Either include it or remove the dependency array.",["2476"],["2477"],["2478"],"React Hook useEffect has missing dependencies: 'getStates', 'isEdit', and 'props.match.params.id'. Either include them or remove the dependency array.",["2479"],["2480"],"React Hook useEffect has missing dependencies: 'isEdit' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["2481"],["2482"],"React Hook useEffect has a missing dependency: 'onResetOrder'. Either include it or remove the dependency array.",["2483"],["2484"],"'roles' is assigned a value but never used.",["2485"],["2486"],"React Hook useEffect has missing dependencies: 'isEdit', 'onGetMentions', and 'props.match.params.id'. Either include them or remove the dependency array.",["2487"],"React Hook useEffect has missing dependencies: 'isEdit' and 'setSourceValue'. Either include them or remove the dependency array.",["2488"],"React Hook useEffect has missing dependencies: 'isEdit', 'onGetDeliveryMethods', 'onGetFieldOptions', and 'props.match.params.id'. Either include them or remove the dependency array.",["2489"],["2490"],"React Hook useEffect has missing dependencies: 'printReportData', 'props', and 'reportBody'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["2491"],"React Hook useEffect has missing dependencies: 'getOrdersByConditional' and 'isEdit'. Either include them or remove the dependency array.",["2492"],"React Hook useEffect has a missing dependency: 'getOrdersByConditional'. Either include it or remove the dependency array.",["2493"],{"range":"2494","text":"2468"},{"range":"2495","text":"2468"},{"range":"2496","text":"2468"},"'printReport' is assigned a value but never used.",["2497"],["2498"],["2499"],"'onClearProducts' is assigned a value but never used.",{"range":"2500","text":"2468"},"React Hook useEffect has missing dependencies: 'onGetProducts', 'onResetProducts', 'page', and 'props.match.params.id'. Either include them or remove the dependency array. You can also do a functional update 'setPage(p => ...)' if you only need 'page' in the 'setPage' call.",["2501"],"React Hook useEffect has missing dependencies: 'categoryData' and 'productsList'. Either include them or remove the dependency array.",["2502"],{"range":"2503","text":"2468"},{"range":"2504","text":"2468"},["2505"],["2506"],"no-mixed-operators","Unexpected mix of '&&' and '||'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"2507","text":"2508"},"React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.",["2509"],"'setLoading' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'findCategory', 'findCustomer', and 'findProduct'. Either include them or remove the dependency array.",["2510"],{"range":"2511","text":"2468"},{"range":"2512","text":"2468"},{"range":"2513","text":"2468"},"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'React' is defined but never used.",{"range":"2514","text":"2468"},"'MARK_RECEIVED' is defined but never used.","'MARK_RECEIVED_FAILED' is defined but never used.","'MARK_RECEIVED_SUCCESS' is defined but never used.","React Hook useEffect has missing dependencies: 'currentPage', 'customActions', 'getConditionals', and 'onResetOrders'. Either include them or remove the dependency array.",["2515"],"React Hook useEffect has missing dependencies: 'conditional', 'onFilterAction', and 'showAsModal'. Either include them or remove the dependency array.",["2516"],"React Hook useEffect has a missing dependency: 'conciliationView'. Either include it or remove the dependency array.",["2517"],"React Hook useEffect has missing dependencies: 'conciliationView' and 'showAsModal'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setColumns' needs the current value of 'conciliationView'.",["2518"],"'showConciliationView' is assigned a value but never used.","'imageNotFound' is defined but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","no-self-assign","'item.moreValues' is assigned to itself.","MemberExpression","selfAssignment",{"range":"2519","text":"2468"},"'getMunicipalities' is defined but never used.","'getStates' is defined but never used.",["2520"],"'disabled' is assigned a value but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","React Hook useEffect has missing dependencies: 'onGetCategories', 'onGetSizes', and 'onResetProduct'. Either include them or remove the dependency array.",["2521"],"React Hook useEffect has missing dependencies: 'canclear' and 'productList'. Either include them or remove the dependency array.",["2522"],{"range":"2523","text":"2468"},{"range":"2524","text":"2468"},"'SearchBar' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'onResetwallet'. Either include it or remove the dependency array.",["2525"],{"range":"2526","text":"2468"},{"range":"2527","text":"2468"},{"range":"2528","text":"2468"},{"range":"2529","text":"2468"},{"range":"2530","text":"2468"},"React Hook useEffect has a missing dependency: 'onResetBillConfig'. Either include it or remove the dependency array.",["2531"],"'onDeletePayment' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'conditionType', 'conditions', 'offset', 'onClearTableConditions', and 'onFilterAction'. Either include them or remove the dependency array.",["2532"],{"range":"2533","text":"2468"},{"range":"2534","text":"2468"},{"range":"2535","text":"2468"},{"range":"2536","text":"2468"},{"range":"2537","text":"2468"},{"range":"2538","text":"2468"},{"range":"2539","text":"2468"},"'setCurrentPage' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'conditionType', 'conditional', 'conditions', 'currentPage', 'customActions', 'offset', 'onClearTableConditions', and 'onFilterAction'. Either include them or remove the dependency array.",["2540"],{"range":"2541","text":"2468"},"'OrderList' is defined but never used.",{"range":"2542","text":"2468"},"React Hook useEffect has missing dependencies: 'deliveryMethods', 'onGetDeliveryLocalities', and 'onGetDeliveryMethods'. Either include them or remove the dependency array.",["2543"],"React Hook useEffect has missing dependencies: 'deliveryMethod', 'deliveryMethods', 'hasAddress', 'onChangeDeliveryOptions', and 'showPaymentType'. Either include them or remove the dependency array.",["2544"],"React Hook useEffect has a missing dependency: 'onChangeDeliveryOptions'. Either include it or remove the dependency array.",["2545"],"React Hook useEffect has a missing dependency: 'deliveryType'. Either include it or remove the dependency array.",["2546"],"React Hook useEffect has missing dependencies: 'deliveryMethod' and 'onChangeDeliveryOptions'. Either include them or remove the dependency array.",["2547"],["2548"],"React Hook useEffect has missing dependencies: 'car.isEdit' and 'initComponent'. Either include them or remove the dependency array.",["2549"],"'getQuote' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'calculateAll', 'car', 'getProductListWithTotals', and 'onUpdateCar'. Either include them or remove the dependency array.",["2550"],"'states' is assigned a value but never used.","'getStates' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'conditionType', 'conditions', 'offset', 'onClearTableConditions', 'onFilterAction', and 'onResetBill'. Either include them or remove the dependency array.",["2551"],{"range":"2552","text":"2468"},{"range":"2553","text":"2468"},{"range":"2554","text":"2468"},"'FieldText' is defined but never used.","React Hook useEffect has missing dependencies: 'conditionType', 'conditions', 'offset', 'onClearTableConditions', 'onFilterAction', and 'onResetOffices'. Either include them or remove the dependency array.",["2555"],"React Hook useEffect has a missing dependency: 'onResetTemplate'. Either include it or remove the dependency array.",["2556"],"'trim' is defined but never used.","React Hook useEffect has missing dependencies: 'car.customer', 'car.isEdit', 'initComponent', and 'onGetCustomer'. Either include them or remove the dependency array.",["2557"],"React Hook useEffect has missing dependencies: 'car', 'hasCustomerOpenOrders', and 'onUpdateCar'. Either include them or remove the dependency array.",["2558"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","React Hook useEffect has a missing dependency: 'groupSelected'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setFieldOption' needs the current value of 'groupSelected'.",["2559"],"React Hook useEffect has a missing dependency: 'onGetDeliveryMethods'. Either include it or remove the dependency array. If 'onGetDeliveryMethods' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["2560"],"React Hook useEffect has missing dependencies: 'error' and 'onCloseModal'. Either include them or remove the dependency array. If 'onCloseModal' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["2561"],"'ORDERS' is defined but never used.","'ORDERS_CHARGE_ON_DELIVERY' is defined but never used.","React Hook useEffect has a missing dependency: 'orders'. Either include it or remove the dependency array.",["2562"],"React Hook useEffect has missing dependencies: 'conciliationError', 'onCloseModal', and 'onConfirmConciliationRestart'. Either include them or remove the dependency array. If 'onCloseModal' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["2563"],{"range":"2564","text":"2468"},"'orderResume' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'onGetHistoric' and 'onGetOrder'. Either include them or remove the dependency array.",["2565"],"React Hook useEffect has missing dependencies: 'canEdit', 'canUpdateTracking', 'car', 'onPrintOrder', 'onResumeOrder', and 'onUpdateCar'. Either include them or remove the dependency array.",["2566"],"'getDeliveryAddress' is assigned a value but never used.","'syncing' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'conditional', 'currentPage', 'onGetCatalogBatchRequest', and 'onResetCategories'. Either include them or remove the dependency array.",["2567"],"'response' is assigned a value but never used.","'meta' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getStates' and 'onResetLocation'. Either include them or remove the dependency array.",["2568"],"React Hook useEffect has a missing dependency: 'onResetUsers'. Either include it or remove the dependency array.",["2569"],"React Hook useEffect has a missing dependency: 'onResetLocation'. Either include it or remove the dependency array.",["2570"],"'CUSTOMER' is defined but never used.","React Hook useEffect has a missing dependency: 'getRoles'. Either include it or remove the dependency array.",["2571"],"React Hook useEffect has missing dependencies: 'filterPermissionsOptions' and 'reloadPermissions'. Either include them or remove the dependency array.",["2572"],"React Hook useEffect has a missing dependency: 'filterPermissionsOptions'. Either include it or remove the dependency array.",["2573"],"'STATUS_OPTIONS' is defined but never used.","'ORDER_STATUS' is defined but never used.","'findOrderBy' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'onReload'. Either include it or remove the dependency array.",["2574"],{"range":"2575","text":"2468"},"'DELIVERY_TYPES' is defined but never used.","'ORDER_STATUS_LIST' is defined but never used.",["2576"],["2577"],"'DATE_FORMAT' is defined but never used.","'formatDate' is defined but never used.","React Hook useEffect has a missing dependency: 'onGetDeliveryMethods'. Either include it or remove the dependency array.",["2578"],["2579"],"'Highcharts' is defined but never used.","React Hook useEffect has missing dependencies: 'reincidenciasCargar' and 'stats.reincidencias'. Either include them or remove the dependency array.",["2580"],"'fechas' is assigned a value but never used.","'customerOrdersStats' is defined but never used.","'ORDERS_ENUM' is defined but never used.","'PieChart' is defined but never used.","'ORDER_COLORS' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'Select' is defined but never used.","'AvBaseInput' is defined but never used.","'messages' is defined but never used.","'FormText' is defined but never used.","'FormGroup' is defined but never used.","'InputAsyncSearchField' is defined but never used.","'FieldSelectBasic' is defined but never used.","'getEmptyOptions' is defined but never used.","'validate' is assigned a value but never used.","'formatDateToServer' is defined but never used.",{"range":"2581","text":"2468"},{"range":"2582","text":"2468"},"'car' is assigned a value but never used.","'onUpdateCar' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'orderDelivery.tracking'. Either include it or remove the dependency array.",["2583"],"React Hook useEffect has missing dependencies: 'resetPasswordState' and 'toggleChangePasswordModal'. Either include them or remove the dependency array. If 'resetPasswordState' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["2584"],"React Hook useEffect has a missing dependency: 'onCloseChangePasswordModal'. Either include it or remove the dependency array.",["2585"],"no-unreachable","Unreachable code.","BreakStatement","unreachableCode","'user' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'entity', 'entitySuggested', 'onGetCommentSuggested', 'onGetFieldOptions', and 'onGetObservations'. Either include them or remove the dependency array.",["2586"],"React Hook useEffect has a missing dependency: 'entitySuggested'. Either include it or remove the dependency array.",["2587"],"React Hook useEffect has missing dependencies: 'entity' and 'observations'. Either include them or remove the dependency array.",["2588"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","React Hook useEffect has a missing dependency: 'value'. Either include it or remove the dependency array.",["2589"],["2590"],"React Hook useEffect has missing dependencies: 'getStates' and 'props.match.params.id'. Either include them or remove the dependency array.",["2591"],"React Hook useEffect has a missing dependency: 'hasPhonePermission'. Either include it or remove the dependency array.",["2592"],{"range":"2593","text":"2468"},"React Hook useEffect has a missing dependency: 'getMunicipalities'. Either include it or remove the dependency array.",["2594"],"The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md",["2595"],["2596"],"'DEFAULT_PAGE_LIMIT' is defined but never used.","React Hook useEffect has missing dependencies: 'horasCargar' and 'stats.horas'. Either include them or remove the dependency array.",["2597"],"React Hook useEffect has missing dependencies: 'masVendidosCargar' and 'stats.masVendidos'. Either include them or remove the dependency array.",["2598"],"React Hook useEffect has missing dependencies: 'stats.ventasTipo' and 'ventasTipoCargar'. Either include them or remove the dependency array.",["2599"],["2600"],"React Hook useEffect has missing dependencies: 'stats.ventasWhatsapp' and 'ventasWhatsappCargar'. Either include them or remove the dependency array.",["2601"],"React Hook useEffect has missing dependencies: 'stats.ventasOrigen' and 'ventasOrigenCargar'. Either include them or remove the dependency array.",["2602"],["2603"],"no-redeclare","'i' is already defined.","redeclared","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'data', 'data'.","unsafeRefs","React Hook useEffect has missing dependencies: 'stats.ventasEstado' and 'ventasEstadoCargar'. Either include them or remove the dependency array.",["2604"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",{"range":"2605","text":"2468"},"React Hook useEffect has missing dependencies: 'cargarVentas' and 'stats.ventasTotal'. Either include them or remove the dependency array.",["2606"],["2607"],"React Hook useEffect has a missing dependency: 'stats'. Either include it or remove the dependency array. You can also do a functional update 'setStats(s => ...)' if you only need 'stats' in the 'setStats' call.",["2608"],"React Hook useEffect has a missing dependency: 'getPermissions'. Either include it or remove the dependency array.",["2609"],"'setProductData' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fillValues'. Either include it or remove the dependency array.",["2610"],"'CardBody' is defined but never used.","'onGetProductImage' is assigned a value but never used.","'refresh' is assigned a value but never used.","'productImageList' is assigned a value but never used.","'productImageGroups' is assigned a value but never used.","'setProductImageGroups' is assigned a value but never used.","'options2' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'conditionType', 'conditions', 'offset', 'onClearTableConditions', 'onFilterAction', and 'onResetProducts'. Either include them or remove the dependency array.",["2611"],"'Conditionals' is defined but never used.","'productSizes' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'fillSelectValues' and 'parseList'. Either include them or remove the dependency array.",["2612"],"React Hook useEffect has a missing dependency: 'calculateTotals'. Either include it or remove the dependency array.",["2613"],"'parseDefaultValue' is assigned a value but never used.","'avatar4' is defined but never used.","'avatar5' is defined but never used.","'avatar6' is defined but never used.","'avatar7' is defined but never used.","'avatar8' is defined but never used.",["2460"],["2461"],"'Card' is defined but never used.","'CountUp' is defined but never used.","'ReactApexChart' is defined but never used.","'Label' is defined but never used.","'Input' is defined but never used.","'getUsers' is defined but never used.",{"range":"2614","text":"2468"},"React Hook useEffect has a missing dependency: 'onGetProductsPending'. Either include it or remove the dependency array. If 'onGetProductsPending' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["2615"],"'map' is defined but never used.","'onGetOrder' is assigned a value but never used.","'order' is assigned a value but never used.","'productId' is assigned a value but never used.","'openCustomerModal' is assigned a value but never used.","'setOpenCustomerModal' is assigned a value but never used.",{"range":"2616","text":"2468"},"React Hook useEffect has a missing dependency: 'onGetOrders'. Either include it or remove the dependency array.",["2617"],"'product' is assigned a value but never used.","'Link' is defined but never used.","'Dropdown' is defined but never used.","'DropdownToggle' is defined but never used.","'DropdownMenu' is defined but never used.","'SimpleBar' is defined but never used.","'avatar3' is defined but never used.","'menu' is assigned a value but never used.","'setMenu' is assigned a value but never used.","'formatDateToServerEndOfDay' is defined but never used.","React Hook useEffect has missing dependencies: 'conditionType', 'conditions', 'offset', 'onClearTableConditions', 'onFilterAction', 'onGetCustomerRegistereds', and 'onResetCustomers'. Either include them or remove the dependency array.",["2618"],"'getErrorMessage' is defined but never used.","'COUNT_USERS_SUCCESS' is defined but never used.","'COUNT_USERS_FAILED' is defined but never used.",{"range":"2619","text":"2468"},"'REFRESH_PRODUCT' is defined but never used.","React Hook useEffect has a missing dependency: 'title'. Either include it or remove the dependency array.",["2620"],"React Hook useEffect has missing dependencies: 'onRefreshCategory' and 'onResetBatchRequest'. Either include them or remove the dependency array.",["2621"],"React Hook useEffect has a missing dependency: 'getDataToday'. Either include it or remove the dependency array.",["2622"],"'HiddenPhone' is defined but never used.",["2623"],["2624"],"React Hook useEffect has a missing dependency: 'printOrder'. Either include it or remove the dependency array.",["2625"],["2626"],"'COUNT_USERS' is defined but never used.","no-duplicate-case","Duplicate case label.","SwitchCase","no-fallthrough","Expected a 'break' statement before 'default'.","default",["2627"],"React Hook useEffect has missing dependencies: 'currentTimeout', 'onGetCounterUsers', 'onSetCounterRegisterOrders', and 'registerOrderActive'. Either include them or remove the dependency array. If 'onSetCounterRegisterOrders' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["2628"],["2629"],["2630"],["2631"],"'Table' is defined but never used.","'fetchProductsApi' is defined but never used.","'users' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","React Hook useEffect has missing dependencies: 'cargarVentas' and 'stats.ventasStatusTotal'. Either include them or remove the dependency array.",["2632"],["2633"],["2634"],"'userList' is assigned a value but never used.","'setUserList' is assigned a value but never used.","'result' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'stats.ventasEnvios' and 'ventasEnviosCargar'. Either include them or remove the dependency array.",["2635"],["2636"],"'hiddenPhone' is defined but never used.",["2637"],"React Hook useEffect has a missing dependency: 'getAuthorizations'. Either include it or remove the dependency array.",["2638"],"'Search' is defined but never used.","'Tooltip' is defined but never used.",{"range":"2639","text":"2468"},"React Hook useEffect has a missing dependency: 'onGetItems'. Either include it or remove the dependency array.",["2640"],{"range":"2641","text":"2468"},"React Hook useEffect has missing dependencies: 'onResetitems' and 'type'. Either include them or remove the dependency array.",["2642"],"'FieldDate' is defined but never used.","'STATUS' is defined but never used.","'DATE_MODES' is defined but never used.","'priceFormat' is defined but never used.","'ButtonLoading' is defined but never used.",["2643"],["2644"],"React Hook useEffect has missing dependencies: 'externalId', 'externalView', 'isEdit', and 'props.match.params.id'. Either include them or remove the dependency array.",["2645"],"React Hook useEffect has missing dependencies: 'interrapidisimo' and 'serviEntrega'. Either include them or remove the dependency array.",["2646"],"React Hook useEffect has missing dependencies: 'interrapidisimo', 'isEdit', and 'serviEntrega'. Either include them or remove the dependency array.",["2647"],"no-global-assign","no-unsafe-negation",{"desc":"2648","fix":"2649"},{"desc":"2650","fix":"2651"},{"desc":"2652","fix":"2653"},{"desc":"2654","fix":"2655"},{"desc":"2656","fix":"2657"},[2709,2709],"()",[3479,3479],[4142,4142],{"desc":"2658","fix":"2659"},{"desc":"2660","fix":"2661"},{"desc":"2662","fix":"2663"},{"desc":"2664","fix":"2665"},{"desc":"2666","fix":"2667"},{"desc":"2668","fix":"2669"},{"desc":"2670","fix":"2671"},{"desc":"2672","fix":"2673"},{"desc":"2674","fix":"2675"},{"desc":"2676","fix":"2677"},{"desc":"2678","fix":"2679"},{"desc":"2680","fix":"2681"},{"desc":"2682","fix":"2683"},{"desc":"2684","fix":"2685"},{"desc":"2686","fix":"2687"},{"desc":"2688","fix":"2689"},{"desc":"2690","fix":"2691"},{"desc":"2692","fix":"2693"},{"desc":"2694","fix":"2695"},{"desc":"2696","fix":"2697"},{"desc":"2698","fix":"2699"},{"desc":"2700","fix":"2701"},{"desc":"2702","fix":"2703"},[5873,5873],[6114,6114],[8315,8315],{"desc":"2704","fix":"2705"},{"desc":"2706","fix":"2707"},{"desc":"2708","fix":"2709"},[3422,3422],{"desc":"2710","fix":"2711"},{"desc":"2712","fix":"2713"},[5400,5400],[5851,5851],{"desc":"2714","fix":"2715"},{"desc":"2716","fix":"2717"},[9547,9547]," rel=\"noreferrer\"",{"desc":"2718","fix":"2719"},{"desc":"2720","fix":"2721"},[2890,2890],[3220,3220],[3455,3455],[1230,1230],{"desc":"2722","fix":"2723"},{"desc":"2724","fix":"2725"},{"desc":"2726","fix":"2727"},{"desc":"2728","fix":"2729"},[993,993],{"desc":"2730","fix":"2731"},{"desc":"2732","fix":"2733"},{"desc":"2734","fix":"2735"},[3952,3952],[4228,4228],{"desc":"2736","fix":"2737"},[999,999],[1264,1264],[799,799],[1077,1077],[1442,1442],{"desc":"2738","fix":"2739"},{"desc":"2740","fix":"2741"},[498,498],[1667,1667],[2818,2818],[3392,3392],[3673,3673],[4396,4396],[5004,5004],{"desc":"2742","fix":"2743"},[1304,1304],[3233,3233],{"desc":"2744","fix":"2745"},{"desc":"2746","fix":"2747"},{"desc":"2748","fix":"2749"},{"desc":"2750","fix":"2751"},{"desc":"2752","fix":"2753"},{"desc":"2754","fix":"2755"},{"desc":"2756","fix":"2757"},{"desc":"2758","fix":"2759"},{"desc":"2760","fix":"2761"},[4716,4716],[5480,5480],[6137,6137],{"desc":"2762","fix":"2763"},{"desc":"2764","fix":"2765"},{"desc":"2766","fix":"2767"},{"desc":"2768","fix":"2769"},{"desc":"2770","fix":"2771"},{"desc":"2772","fix":"2773"},{"desc":"2774","fix":"2775"},{"desc":"2776","fix":"2777"},{"desc":"2778","fix":"2779"},[3664,3664],{"desc":"2780","fix":"2781"},{"desc":"2782","fix":"2783"},{"desc":"2784","fix":"2785"},{"desc":"2786","fix":"2787"},{"desc":"2788","fix":"2789"},{"desc":"2790","fix":"2791"},{"desc":"2792","fix":"2793"},{"desc":"2794","fix":"2795"},{"desc":"2796","fix":"2797"},{"desc":"2798","fix":"2799"},[1552,1552],{"desc":"2772","fix":"2800"},{"desc":"2774","fix":"2801"},{"desc":"2802","fix":"2803"},{"desc":"2774","fix":"2804"},{"desc":"2805","fix":"2806"},[1423,1423],[6266,6266],{"desc":"2807","fix":"2808"},{"desc":"2809","fix":"2810"},{"desc":"2811","fix":"2812"},{"desc":"2813","fix":"2814"},{"desc":"2815","fix":"2816"},{"desc":"2817","fix":"2818"},{"desc":"2819","fix":"2820"},{"desc":"2819","fix":"2821"},{"desc":"2822","fix":"2823"},{"desc":"2824","fix":"2825"},[3375,3375],{"desc":"2826","fix":"2827"},{"desc":"2774","fix":"2828"},{"desc":"2774","fix":"2829"},{"desc":"2830","fix":"2831"},{"desc":"2832","fix":"2833"},{"desc":"2834","fix":"2835"},{"desc":"2836","fix":"2837"},{"desc":"2838","fix":"2839"},{"desc":"2840","fix":"2841"},{"desc":"2842","fix":"2843"},{"desc":"2844","fix":"2845"},[563,563],{"desc":"2846","fix":"2847"},{"desc":"2848","fix":"2849"},{"desc":"2850","fix":"2851"},{"desc":"2852","fix":"2853"},{"desc":"2854","fix":"2855"},{"desc":"2856","fix":"2857"},{"desc":"2858","fix":"2859"},{"desc":"2860","fix":"2861"},[4102,4102],{"desc":"2862","fix":"2863"},[935,935],{"desc":"2864","fix":"2865"},{"desc":"2866","fix":"2867"},[3834,3834],{"desc":"2868","fix":"2869"},{"desc":"2870","fix":"2871"},{"desc":"2872","fix":"2873"},{"desc":"2874","fix":"2875"},{"desc":"2876","fix":"2877"},{"desc":"2878","fix":"2879"},{"desc":"2880","fix":"2881"},{"desc":"2882","fix":"2883"},{"desc":"2884","fix":"2885"},{"desc":"2846","fix":"2886"},{"desc":"2848","fix":"2887"},{"desc":"2850","fix":"2888"},{"desc":"2889","fix":"2890"},{"desc":"2891","fix":"2892"},{"desc":"2850","fix":"2893"},{"desc":"2894","fix":"2895"},{"desc":"2896","fix":"2897"},{"desc":"2654","fix":"2898"},{"desc":"2899","fix":"2900"},[1814,1814],{"desc":"2901","fix":"2902"},[2123,2123],{"desc":"2903","fix":"2904"},{"desc":"2905","fix":"2906"},{"desc":"2907","fix":"2908"},{"desc":"2909","fix":"2910"},{"desc":"2911","fix":"2912"},{"desc":"2913","fix":"2914"},"Update the dependencies array to be: [isOpen, props]",{"range":"2915","text":"2916"},"Update the dependencies array to be: [getProduct, props.match.params.id]",{"range":"2917","text":"2918"},"Update the dependencies array to be: [onGetCustomer, props.match.params.id]",{"range":"2919","text":"2920"},"Update the dependencies array to be: [onGetOrder, props.match.params.id, refresh]",{"range":"2921","text":"2922"},"Update the dependencies array to be: [onGetBill, props.match.params.id, refresh]",{"range":"2923","text":"2924"},"Update the dependencies array to be: [getCustomer, isEdit, props.match.params.id]",{"range":"2925","text":"2926"},"Update the dependencies array to be: [isEdit, onGetCategories, onGetFieldOptions, onGetProduct, onGetSizes, onGetTemplateCatalogs, props.match.params.id]",{"range":"2927","text":"2928"},"Update the dependencies array to be: [onGetProduct, onResetProductImages, onResetProductSize, product.id, refreshProduct]",{"range":"2929","text":"2930"},"Update the dependencies array to be: [isEdit, product]",{"range":"2931","text":"2932"},"Update the dependencies array to be: [product.size, sizes]",{"range":"2933","text":"2934"},"Update the dependencies array to be: [onGetFieldOptions, refreshFieldOptions]",{"range":"2935","text":"2936"},"Update the dependencies array to be: [getState, isEdit, props.match.params.id]",{"range":"2937","text":"2938"},"Update the dependencies array to be: [estado, isEdit]",{"range":"2939","text":"2940"},"Update the dependencies array to be: [getMunicipality, getStates, isEdit, props.match.params.id]",{"range":"2941","text":"2942"},"Update the dependencies array to be: [isEdit, municipality]",{"range":"2943","text":"2944"},"Update the dependencies array to be: [getCategory, isEdit, props]",{"range":"2945","text":"2946"},"Update the dependencies array to be: [category, isEdit]",{"range":"2947","text":"2948"},"Update the dependencies array to be: [onResetOrder]",{"range":"2949","text":"2950"},"Update the dependencies array to be: [initComponent, onResetOrder]",{"range":"2951","text":"2952"},"Update the dependencies array to be: [getUser, isEdit, props.match.params.id]",{"range":"2953","text":"2954"},"Update the dependencies array to be: [isEdit, user]",{"range":"2955","text":"2956"},"Update the dependencies array to be: [isEdit, onGetMentions, onGetTemplate, props.match.params.id]",{"range":"2957","text":"2958"},"Update the dependencies array to be: [isEdit, setSourceValue, template]",{"range":"2959","text":"2960"},"Update the dependencies array to be: [getOffice, isEdit, onGetDeliveryMethods, onGetFieldOptions, props.match.params.id]",{"range":"2961","text":"2962"},"Update the dependencies array to be: [isEdit, orders]",{"range":"2963","text":"2964"},"Update the dependencies array to be: [printReportData, printReportData.data, props, reportBody]",{"range":"2965","text":"2966"},"Update the dependencies array to be: [getOrdersByConditional, isEdit, office]",{"range":"2967","text":"2968"},"Update the dependencies array to be: [refreshOrders, refresh, getOrdersByConditional]",{"range":"2969","text":"2970"},"Update the dependencies array to be: [isEdit, onGetPayment, props.match.params.id]",{"range":"2971","text":"2972"},"Update the dependencies array to be: [isEdit, payment]",{"range":"2973","text":"2974"},"Update the dependencies array to be: [getBillConfig, isEdit, props.match.params.id]",{"range":"2975","text":"2976"},"Update the dependencies array to be: [onGetCategory, onGetProducts, onResetProducts, page, props.match.params.id]",{"range":"2977","text":"2978"},"Update the dependencies array to be: [categoryData, products, productsList]",{"range":"2979","text":"2980"},"Update the dependencies array to be: [getWallet, isEdit, props.match.params.id, refresh]",{"range":"2981","text":"2982"},"Update the dependencies array to be: [isEdit, wallet]",{"range":"2983","text":"2984"},"Update the dependencies array to be: [countUsers, getData]",{"range":"2985","text":"2986"},"Update the dependencies array to be: [findCategory, findCustomer, findProduct, prefix]",{"range":"2987","text":"2988"},"Update the dependencies array to be: [refresh, onGetOrders, getConditionals, currentPage, onResetOrders, customActions]",{"range":"2989","text":"2990"},"Update the dependencies array to be: [conciliationView, conditional, onFilterAction, showAsModal]",{"range":"2991","text":"2992"},"Update the dependencies array to be: [conciliation, conciliationView]",{"range":"2993","text":"2994"},"Update the dependencies array to be: [conciliationView, showAsModal, statesList]",{"range":"2995","text":"2996"},"Update the dependencies array to be: [getBillConfig, props.match.params.id]",{"range":"2997","text":"2998"},"Update the dependencies array to be: [onGetCategories, onGetSizes, onResetProduct]",{"range":"2999","text":"3000"},"Update the dependencies array to be: [canclear, productList, products]",{"range":"3001","text":"3002"},"Update the dependencies array to be: [refresh, onGetWallets, onResetwallet]",{"range":"3003","text":"3004"},"Update the dependencies array to be: [refresh, onGetBillConfigs, onResetBillConfig]",{"range":"3005","text":"3006"},"Update the dependencies array to be: [refresh, onGetPayments, conditionType, onClearTableConditions, onFilterAction, conditions, offset]",{"range":"3007","text":"3008"},"Update the dependencies array to be: [refresh, onGetOrders, conditionType, onClearTableConditions, conditional, currentPage, onFilterAction, conditions, offset, customActions]",{"range":"3009","text":"3010"},"Update the dependencies array to be: [onGetFieldOptions, car.reset, deliveryMethods, onGetDeliveryMethods, onGetDeliveryLocalities]",{"range":"3011","text":"3012"},"Update the dependencies array to be: [deliveryMethod, deliveryMethods, deliveryType, hasAddress, onChangeDeliveryOptions, showPaymentType]",{"range":"3013","text":"3014"},"Update the dependencies array to be: [deliveryMethod, onChangeDeliveryOptions]",{"range":"3015","text":"3016"},"Update the dependencies array to be: [deliveryMethods, deliveryType]",{"range":"3017","text":"3018"},"Update the dependencies array to be: [deliveryMethod, deliveryQuote, onChangeDeliveryOptions]",{"range":"3019","text":"3020"},"Update the dependencies array to be: [deliveryCost, paymentType, pieceToChange, tracking, deliveryLocality, otherMethod, onChangeDeliveryOptions]",{"range":"3021","text":"3022"},"Update the dependencies array to be: [car.deliveryOptions, car.isEdit, initComponent]",{"range":"3023","text":"3024"},"Update the dependencies array to be: [calculateAll, car, car.products, getProductListWithTotals, globalDiscount, onUpdateCar]",{"range":"3025","text":"3026"},"Update the dependencies array to be: [refresh, onGetBills, conditionType, onResetBill, onClearTableConditions, onFilterAction, conditions, offset]",{"range":"3027","text":"3028"},"Update the dependencies array to be: [refresh, onGetOffices, conditionType, onResetOffices, onClearTableConditions, onFilterAction, conditions, offset]",{"range":"3029","text":"3030"},"Update the dependencies array to be: [refresh, onGetTemplates, onResetTemplate]",{"range":"3031","text":"3032"},"Update the dependencies array to be: [car.customer, car.isEdit, initComponent, onGetCustomer, showAsModal]",{"range":"3033","text":"3034"},"Update the dependencies array to be: [car, customer, hasCustomerOpenOrders, onUpdateCar]",{"range":"3035","text":"3036"},"Update the dependencies array to be: [fieldOptions, groupSelected]",{"range":"3037","text":"3038"},"Update the dependencies array to be: [onGetDeliveryMethods, onRestartReport]",{"range":"3039","text":"3040"},"Update the dependencies array to be: [error, onCloseModal, success]",{"range":"3041","text":"3042"},"Update the dependencies array to be: [order, orders]",{"range":"3043","text":"3044"},"Update the dependencies array to be: [conciliationError, conciliationSuccess, onCloseModal, onConfirmConciliationRestart]",{"range":"3045","text":"3046"},"Update the dependencies array to be: [onGetHistoric, onGetOrder, orderId, refresh]",{"range":"3047","text":"3048"},"Update the dependencies array to be: [order, carRefresh, canEdit, canUpdateTracking, onResumeOrder, onPrintOrder, car, onUpdateCar]",{"range":"3049","text":"3050"},"Update the dependencies array to be: [refresh, onGetCategories, onResetCategories, conditional, onGetCatalogBatchRequest, currentPage]",{"range":"3051","text":"3052"},"Update the dependencies array to be: [refresh, onGetMunicipalities, onResetLocation, getStates]",{"range":"3053","text":"3054"},"Update the dependencies array to be: [refresh, onGetUsers, onResetUsers]",{"range":"3055","text":"3056"},"Update the dependencies array to be: [refresh, onGetStates, onResetLocation]",{"range":"3057","text":"3058"},"Update the dependencies array to be: [getRoles, setPermissions]",{"range":"3059","text":"3060"},"Update the dependencies array to be: [filterPermissionsOptions, permissions, reloadPermissions]",{"range":"3061","text":"3062"},"Update the dependencies array to be: [filterPermissionsOptions, roleSelected]",{"range":"3063","text":"3064"},"Update the dependencies array to be: [onReload, paymentSelected, refresh]",{"range":"3065","text":"3066"},{"range":"3067","text":"3040"},{"range":"3068","text":"3042"},"Update the dependencies array to be: [importFileReset, onGetDeliveryMethods]",{"range":"3069","text":"3070"},{"range":"3071","text":"3042"},"Update the dependencies array to be: [reincidenciasCargar, stats.reincidencias, stats.reincidencias.fecha]",{"range":"3072","text":"3073"},"Update the dependencies array to be: [orderDelivery.tracking, showAsModal]",{"range":"3074","text":"3075"},"Update the dependencies array to be: [resetPasswordState, toggleChangePasswordModal, user]",{"range":"3076","text":"3077"},"Update the dependencies array to be: [onCloseChangePasswordModal, passwordChanged]",{"range":"3078","text":"3079"},"Update the dependencies array to be: [entity, entityId, entitySuggested, onGetCommentSuggested, onGetFieldOptions, onGetObservations]",{"range":"3080","text":"3081"},"Update the dependencies array to be: [entitySuggested, fieldOptions]",{"range":"3082","text":"3083"},"Update the dependencies array to be: [entity, observations]",{"range":"3084","text":"3085"},"Update the dependencies array to be: [props.value, value]",{"range":"3086","text":"3087"},{"range":"3088","text":"3087"},"Update the dependencies array to be: [getCustomer, getStates, props.match.params.id]",{"range":"3089","text":"3090"},"Update the dependencies array to be: [customer, hasPhonePermission]",{"range":"3091","text":"3092"},"Update the dependencies array to be: [getMunicipalities, state]",{"range":"3093","text":"3094"},{"range":"3095","text":"3042"},{"range":"3096","text":"3042"},"Update the dependencies array to be: [horasCargar, stats.horas, stats.horas.fecha]",{"range":"3097","text":"3098"},"Update the dependencies array to be: [masVendidosCargar, stats.masVendidos, stats.masVendidos.fecha]",{"range":"3099","text":"3100"},"Update the dependencies array to be: [stats.ventasTipo, stats.ventasTipo.fecha, ventasTipoCargar]",{"range":"3101","text":"3102"},"Update the dependencies array to be: [stats.ventasTipo, stats.ventasTipo.opciones, ventasTipoCargar]",{"range":"3103","text":"3104"},"Update the dependencies array to be: [stats.ventasWhatsapp, stats.ventasWhatsapp.fecha, ventasWhatsappCargar]",{"range":"3105","text":"3106"},"Update the dependencies array to be: [stats.ventasOrigen, stats.ventasOrigen.fecha, ventasOrigenCargar]",{"range":"3107","text":"3108"},"Update the dependencies array to be: [stats.ventasOrigen, stats.ventasOrigen.opciones, ventasOrigenCargar]",{"range":"3109","text":"3110"},"Update the dependencies array to be: [stats.ventasEstado, stats.ventasEstado.fecha, ventasEstadoCargar]",{"range":"3111","text":"3112"},"Update the dependencies array to be: [cargarVentas, stats.ventasTotal, stats.ventasTotal.fecha]",{"range":"3113","text":"3114"},"Update the dependencies array to be: [cargarVentas, stats.ventasTotal, stats.ventasTotal.opciones]",{"range":"3115","text":"3116"},"Update the dependencies array to be: [stats, users]",{"range":"3117","text":"3118"},"Update the dependencies array to be: [getPermissions, setPermissions]",{"range":"3119","text":"3120"},"Update the dependencies array to be: [fillValues, product]",{"range":"3121","text":"3122"},"Update the dependencies array to be: [refresh, onGetProducts, conditionType, onResetProducts, onClearTableConditions, onFilterAction, conditions, offset]",{"range":"3123","text":"3124"},"Update the dependencies array to be: [fillSelectValues, parseList, product]",{"range":"3125","text":"3126"},"Update the dependencies array to be: [calculateTotals, productSizesList]",{"range":"3127","text":"3128"},"Update the dependencies array to be: [onGetProductsPending, product]",{"range":"3129","text":"3130"},"Update the dependencies array to be: [customerId, onGetOrders]",{"range":"3131","text":"3132"},"Update the dependencies array to be: [refresh, onGetCustomers, onGetCustomerRegistereds, conditionType, onClearTableConditions, onResetCustomers, onFilterAction, conditions, offset]",{"range":"3133","text":"3134"},"Update the dependencies array to be: [statusGroup, title]",{"range":"3135","text":"3136"},"Update the dependencies array to be: [batch, onRefreshCategory, onResetBatchRequest]",{"range":"3137","text":"3138"},"Update the dependencies array to be: [getData, getDataToday]",{"range":"3139","text":"3140"},"Update the dependencies array to be: [conditionals, doRequest, props]",{"range":"3141","text":"3142"},"Update the dependencies array to be: [props, refresh]",{"range":"3143","text":"3144"},"Update the dependencies array to be: [batch, printOrder]",{"range":"3145","text":"3146"},"Update the dependencies array to be: [error, props]",{"range":"3147","text":"3148"},"Update the dependencies array to be: [reportData, title]",{"range":"3149","text":"3150"},"Update the dependencies array to be: [currentTimeout, onGetCounterUsers, onSetCounterRegisterOrders, registerOrderActive]",{"range":"3151","text":"3152"},{"range":"3153","text":"3114"},{"range":"3154","text":"3116"},{"range":"3155","text":"3118"},"Update the dependencies array to be: [cargarVentas, stats.ventasStatusTotal, stats.ventasStatusTotal.fecha]",{"range":"3156","text":"3157"},"Update the dependencies array to be: [cargarVentas, stats.ventasStatusTotal, stats.ventasStatusTotal.opciones]",{"range":"3158","text":"3159"},{"range":"3160","text":"3118"},"Update the dependencies array to be: [stats.ventasEnvios, stats.ventasEnvios.fecha, ventasEnviosCargar]",{"range":"3161","text":"3162"},"Update the dependencies array to be: [stats.ventasEnvios, stats.ventasEnvios.opciones, ventasEnviosCargar]",{"range":"3163","text":"3164"},{"range":"3165","text":"2922"},"Update the dependencies array to be: [getAuthorizations, setAuthorizations]",{"range":"3166","text":"3167"},"Update the dependencies array to be: [onGetItems, type]",{"range":"3168","text":"3169"},"Update the dependencies array to be: [refresh, onGetItems, onResetitems, type]",{"range":"3170","text":"3171"},"Update the dependencies array to be: [getItem, isEdit, props.match.params.id, refresh]",{"range":"3172","text":"3173"},"Update the dependencies array to be: [isEdit, item]",{"range":"3174","text":"3175"},"Update the dependencies array to be: [externalId, externalView, getDeliveryLocality, isEdit, props.match.params.id]",{"range":"3176","text":"3177"},"Update the dependencies array to be: [deliveryMethod, interrapidisimo, serviEntrega]",{"range":"3178","text":"3179"},"Update the dependencies array to be: [deliveryLocality, interrapidisimo, isEdit, serviEntrega]",{"range":"3180","text":"3181"},[1118,1126],"[isOpen, props]",[1142,1154],"[getProduct, props.match.params.id]",[1971,1986],"[onGetCustomer, props.match.params.id]",[1286,1307],"[onGetOrder, props.match.params.id, refresh]",[1649,1669],"[onGetBill, props.match.params.id, refresh]",[902,915],"[getCustomer, isEdit, props.match.params.id]",[3810,3824],"[isEdit, onGetCategories, onGetFieldOptions, onGetProduct, onGetSizes, onGetTemplateCatalogs, props.match.params.id]",[3993,4009],"[onGetProduct, onResetProductImages, onResetProductSize, product.id, refreshProduct]",[4757,4766],"[isEdit, product]",[5721,5728],"[product.size, sizes]",[6572,6593],"[onGetFieldOptions, refreshFieldOptions]",[1203,1213],"[getState, isEdit, props.match.params.id]",[1394,1402],"[estado, isEdit]",[1518,1535],"[getMunicipality, getStates, isEdit, props.match.params.id]",[1872,1886],"[isEdit, municipality]",[1761,1774],"[getCategory, isEdit, props]",[2921,2931],"[category, isEdit]",[1541,1543],"[onResetOrder]",[1680,1695],"[initComponent, onResetOrder]",[1507,1516],"[getUser, isEdit, props.match.params.id]",[1814,1820],"[isEdit, user]",[1689,1704],"[isEdit, onGetMentions, onGetTemplate, props.match.params.id]",[1942,1952],"[isEdit, setSourceValue, template]",[3121,3132],"[getOffice, isEdit, onGetDeliveryMethods, onGetFieldOptions, props.match.params.id]",[3644,3652],"[isEdit, orders]",[3899,3921],"[printReportData, printReportData.data, props, reportBody]",[4197,4205],"[getOrdersByConditional, isEdit, office]",[4272,4296],"[refreshOrders, refresh, getOrdersByConditional]",[1506,1520],"[isEdit, onGetPayment, props.match.params.id]",[1666,1675],"[isEdit, payment]",[920,935],"[getBillConfig, isEdit, props.match.params.id]",[3647,3662],"[onGetCategory, onGetProducts, onResetProducts, page, props.match.params.id]",[3975,3985],"[categoryData, products, productsList]",[1816,1836],"[getWallet, isEdit, props.match.params.id, refresh]",[2017,2025],"[isEdit, wallet]",[1426,1438],"[countUsers, getData]",[1092,1100],"[findCategory, findCustomer, findProduct, prefix]",[3262,3284],"[refresh, onGetOrders, getConditionals, currentPage, onResetOrders, customActions]",[3491,3509],"[conciliationView, conditional, onFilterAction, showAsModal]",[3673,3687],"[conciliation, conciliationView]",[3802,3814],"[conciliationView, showAsModal, statesList]",[1086,1101],"[getBillConfig, props.match.params.id]",[1602,1604],"[onGetCategories, onGetSizes, onResetProduct]",[3634,3644],"[canclear, productList, products]",[2012,2035],"[refresh, onGetWallets, onResetwallet]",[1829,1856],"[refresh, onGetBillConfigs, onResetBillConfig]",[2220,2244],"[refresh, onGetPayments, conditionType, onClearTableConditions, onFilterAction, conditions, offset]",[3306,3328],"[refresh, onGetOrders, conditionType, onClearTableConditions, conditional, currentPage, onFilterAction, conditions, offset, customActions]",[3816,3846],"[onGetFieldOptions, car.reset, deliveryMethods, onGetDeliveryMethods, onGetDeliveryLocalities]",[5816,5830],"[deliveryMethod, deliveryMethods, deliveryType, hasAddress, onChangeDeliveryOptions, showPaymentType]",[6169,6185],"[deliveryMethod, onChangeDeliveryOptions]",[6493,6510],"[deliveryMethods, deliveryType]",[6755,6770],"[deliveryMethod, deliveryQuote, onChangeDeliveryOptions]",[6838,6921],"[deliveryCost, paymentType, pieceToChange, tracking, deliveryLocality, otherMethod, onChangeDeliveryOptions]",[7939,7960],"[car.deliveryOptions, car.isEdit, initComponent]",[1310,1340],"[calculateAll, car, car.products, getProductListWithTotals, globalDiscount, onUpdateCar]",[2803,2824],"[refresh, onGetBills, conditionType, onResetBill, onClearTableConditions, onFilterAction, conditions, offset]",[2531,2554],"[refresh, onGetOffices, conditionType, onResetOffices, onClearTableConditions, onFilterAction, conditions, offset]",[1873,1898],"[refresh, onGetTemplates, onResetTemplate]",[2690,2703],"[car.customer, car.isEdit, initComponent, onGetCustomer, showAsModal]",[3065,3075],"[car, customer, hasCustomerOpenOrders, onUpdateCar]",[2320,2334],"[fieldOptions, groupSelected]",[1278,1295],"[onGetDeliveryMethods, onRestartReport]",[1403,1412],"[error, onCloseModal, success]",[2592,2599],"[order, orders]",[2894,2915],"[conciliationError, conciliationSuccess, onCloseModal, onConfirmConciliationRestart]",[3839,3857],"[onGetHistoric, onGetOrder, orderId, refresh]",[6192,6211],"[order, carRefresh, canEdit, canUpdateTracking, onResumeOrder, onPrintOrder, car, onUpdateCar]",[2799,2825],"[refresh, onGetCategories, onResetCategories, conditional, onGetCatalogBatchRequest, currentPage]",[2092,2122],"[refresh, onGetMunicipalities, onResetLocation, getStates]",[1834,1855],"[refresh, onGetUsers, onResetUsers]",[1923,1945],"[refresh, onGetStates, onResetLocation]",[1042,1058],"[getRoles, setPermissions]",[1215,1228],"[filterPermissionsOptions, permissions, reloadPermissions]",[1358,1372],"[filterPermissionsOptions, roleSelected]",[1397,1423],"[onReload, paymentSelected, refresh]",[1331,1348],[1456,1465],[1392,1409],"[importFileReset, onGetDeliveryMethods]",[2060,2069],[2102,2129],"[reincidenciasCargar, stats.reincidencias, stats.reincidencias.fecha]",[720,733],"[orderDelivery.tracking, showAsModal]",[1021,1027],"[resetPasswordState, toggleChangePasswordModal, user]",[1142,1159],"[onCloseChangePasswordModal, passwordChanged]",[1872,1882],"[entity, entityId, entitySuggested, onGetCommentSuggested, onGetFieldOptions, onGetObservations]",[2265,2279],"[entitySuggested, fieldOptions]",[2729,2751],"[entity, observations]",[3327,3340],"[props.value, value]",[4803,4816],[1900,1913],"[getCustomer, getStates, props.match.params.id]",[2528,2538],"[customer, hasPhonePermission]",[3492,3499],"[getMunicipalities, state]",[1046,1055],[1211,1220],[3050,3069],"[horasCargar, stats.horas, stats.horas.fecha]",[1987,2012],"[masVendidosCargar, stats.masVendidos, stats.masVendidos.fecha]",[2927,2951],"[stats.ventasTipo, stats.ventasTipo.fecha, ventasTipoCargar]",[3057,3084],"[stats.ventasTipo, stats.ventasTipo.opciones, ventasTipoCargar]",[1888,1916],"[stats.ventasWhatsapp, stats.ventasWhatsapp.fecha, ventasWhatsappCargar]",[2695,2721],"[stats.ventasOrigen, stats.ventasOrigen.fecha, ventasOrigenCargar]",[2831,2860],"[stats.ventasOrigen, stats.ventasOrigen.opciones, ventasOrigenCargar]",[1890,1916],"[stats.ventasEstado, stats.ventasEstado.fecha, ventasEstadoCargar]",[2797,2822],"[cargarVentas, stats.ventasTotal, stats.ventasTotal.fecha]",[2925,2953],"[cargarVentas, stats.ventasTotal, stats.ventasTotal.opciones]",[3402,3409],"[stats, users]",[684,700],"[getPermissions, setPermissions]",[733,742],"[fillValues, product]",[3385,3409],"[refresh, onGetProducts, conditionType, onResetProducts, onClearTableConditions, onFilterAction, conditions, offset]",[1070,1079],"[fillSelectValues, parseList, product]",[1138,1156],"[calculateTotals, productSizesList]",[695,704],"[onGetProductsPending, product]",[1073,1085],"[customerId, onGetOrders]",[3175,3200],"[refresh, onGetCustomers, onGetCustomerRegistereds, conditionType, onClearTableConditions, onResetCustomers, onFilterAction, conditions, offset]",[2092,2105],"[statusGroup, title]",[1272,1279],"[batch, onRefreshCategory, onResetBatchRequest]",[406,415],"[getData, getDataToday]",[849,874],"[conditionals, doRequest, props]",[944,953],"[props, refresh]",[1321,1328],"[batch, printOrder]",[1481,1488],"[error, props]",[1819,1831],"[reportData, title]",[779,781],"[currentTimeout, onGetCounterUsers, onSetCounterRegisterOrders, registerOrderActive]",[2797,2822],[2925,2953],[3402,3409],[3896,3927],"[cargarVentas, stats.ventasStatusTotal, stats.ventasStatusTotal.fecha]",[4036,4070],"[cargarVentas, stats.ventasStatusTotal, stats.ventasStatusTotal.opciones]",[4519,4526],[4402,4428],"[stats.ventasEnvios, stats.ventasEnvios.fecha, ventasEnviosCargar]",[4538,4567],"[stats.ventasEnvios, stats.ventasEnvios.opciones, ventasEnviosCargar]",[1488,1509],[770,789],"[getAuthorizations, setAuthorizations]",[1934,1940],"[onGetItems, type]",[2261,2282],"[refresh, onGetItems, onResetitems, type]",[1525,1543],"[getItem, isEdit, props.match.params.id, refresh]",[1716,1722],"[isEdit, item]",[2022,2043],"[externalId, externalView, getDeliveryLocality, isEdit, props.match.params.id]",[2332,2348],"[deliveryMethod, interrapidisimo, serviEntrega]",[2955,2973],"[deliveryLocality, interrapidisimo, isEdit, serviEntrega]"]